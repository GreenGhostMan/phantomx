/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-02-07 20:50:59.584362
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.0202)*x5);
x13=((1.0)*x5);
x14=((0.121)*x10);
x15=((1.0)*x6);
x16=((0.121)*x0);
x17=((0.0202)*x6);
x18=((1.0)*x0);
x19=((0.1445)*x3);
x20=((0.0385)*x1);
x21=((0.0202)*x11);
x22=((1.0)*x10);
x23=((0.1535)*x10);
x24=((0.1535)*x0);
x25=(x0*x9);
x26=(x10*x9);
x27=(x1*x4);
x28=(x1*x2);
x29=(x2*x3);
x30=((-1.0)*x6);
x31=(x3*x4);
x32=((-1.0)*x5);
x33=(x11*x7);
x34=(x18*x31);
x35=(x22*x31);
x36=((((-1.0)*x28))+x31);
x37=((((1.0)*x27))+(((1.0)*x29)));
x38=((-1.0)*x37);
x39=(x36*x6);
x40=((((-1.0)*x34))+((x0*x28)));
x41=((((-1.0)*x35))+((x10*x28)));
x42=((((-1.0)*x18*x28))+x34);
x43=(x35+(((-1.0)*x22*x28)));
x44=(x18*(((((-1.0)*x27))+(((-1.0)*x29)))));
x45=(x22*(((((-1.0)*x27))+(((-1.0)*x29)))));
x46=(x41*x5);
x47=((1.0)*x44);
x48=(x44*x5);
x49=(((x30*x37))+((x32*x36)));
x50=(x11*x49);
x51=((((-1.0)*x15*x42))+(((-1.0)*x13*x44)));
x52=((((-1.0)*x15*x43))+(((-1.0)*x13*x45)));
x53=(((x30*x43))+((x32*x45)));
x54=(((x11*((((x30*x42))+((x32*x44))))))+(((-1.0)*x26)));
eerot[0]=(((x8*((((x40*x5))+((x44*x6))))))+((x54*x7)));
eerot[1]=(((x7*(((((-1.0)*x15*x44))+(((-1.0)*x13*x40))))))+((x54*x8)));
eerot[2]=(((x51*x9))+((x10*x11)));
IkReal x55=((1.0)*x16);
eetrans[0]=(((x6*(((((-1.0)*x27*x55))+(((-1.0)*x29*x55))))))+((x8*((((x17*x44))+((x12*x40))))))+(((-0.00175)*x10))+((x0*x20))+((x0*x19))+((x7*(((((-0.0202)*x26))+((x21*x51))))))+((x5*(((((-1.0)*x31*x55))+((x16*x28))))))+(((-1.0)*x24*x31))+((x24*x28)));
eerot[3]=(((x8*((x46+((x45*x6))))))+((x7*((((x11*x53))+x25)))));
eerot[4]=(((x7*((((x30*x45))+((x32*x41))))))+((x8*((((x11*x52))+x25)))));
eerot[5]=((((-1.0)*x11*x18))+((x52*x9)));
IkReal x56=((1.0)*x14);
eetrans[1]=(((x8*((((x17*x45))+((x12*x41))))))+((x7*(((((0.0202)*x25))+((x21*x53))))))+((x23*x28))+((x10*x20))+((x10*x19))+(((-1.0)*x23*x31))+(((0.00175)*x0))+((x6*(((((-1.0)*x27*x56))+(((-1.0)*x29*x56))))))+((x5*((((x14*x28))+(((-1.0)*x31*x56)))))));
eerot[6]=(((x33*x49))+((x8*((x39+((x38*x5)))))));
eerot[7]=(((x50*x8))+((x7*(((((-1.0)*x13*x38))+(((-1.0)*x15*x36)))))));
eerot[8]=(x9*(((((-1.0)*x13*x36))+(((-1.0)*x15*x37)))));
eetrans[2]=((0.1075)+((x5*(((((-0.121)*x29))+(((-0.121)*x27))))))+(((0.1445)*x1))+((x33*(((((-0.0202)*x37*x6))+(((-0.0202)*x36*x5))))))+(((-0.0385)*x3))+(((-0.1535)*x29))+(((-0.1535)*x27))+((x6*(((((0.121)*x31))+(((-0.121)*x28))))))+((x8*((((x17*x36))+((x12*x38)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0202)*r00))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0202)*r10))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1075)+pz+(((-0.0202)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x60=((0.242)*npy);
IkReal x61=((0.121)*r20);
IkReal x62=((0.121)*r21);
IkReal x63=((0.121)*r22);
IkReal x64=((-0.121)*r21);
IkReal x65=((-1.0)*r21);
IkReal x66=((-1.0)*rxp1_2);
IkReal x67=((-0.242)*npx);
IkReal x68=((-1.0)*npx);
IkReal x69=((-1.0)*rxp2_2);
IkReal x70=((-1.0)*r20);
IkReal x71=((-1.0)*npy);
matrixinvcoeffs[0]=x64;
matrixinvcoeffs[1]=x60;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=x65;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=npy;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x66;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x64;
matrixinvcoeffs[19]=x60;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npy;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x65;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x66;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x67;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=r20;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x68;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp0_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x67;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=x68;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=r20;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp0_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=r22;
matrixinvcoeffs[69]=npz;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x69;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-0.121)*r22);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=r22;
matrixinvcoeffs[87]=npz;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x69;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x63;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=npx;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=x70;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x61;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=((-1.0)*rxp0_2);
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=r20;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=x68;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x61;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=rxp0_2;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=npy;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=x65;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x62;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x66;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=r21;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=x71;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x62;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=rxp1_2;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=npz;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=((-1.0)*r22);
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x63;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x69;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=r22;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=((-1.0)*npz);
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x63;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=rxp2_2;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=x70;
matrixinvcoeffs[197]=x68;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=rxp0_2;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x61;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=x70;
matrixinvcoeffs[215]=x68;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=rxp0_2;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=((-0.121)*r20);
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=x65;
matrixinvcoeffs[229]=x71;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=rxp1_2;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x62;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=x65;
matrixinvcoeffs[247]=x71;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=rxp1_2;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x64;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_12=matrixinvcoeffs[196], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_11=matrixinvcoeffs[185], gclwh9_15=matrixinvcoeffs[249], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_8=matrixinvcoeffs[138], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_12=matrixinvcoeffs[204], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_13=matrixinvcoeffs[221], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_10=matrixinvcoeffs[174], gclwh14_12=matrixinvcoeffs[206], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_9=matrixinvcoeffs[159], gclwh15_13=matrixinvcoeffs[223];
IkReal op[72], zeror[48];
int numroots;;
IkReal x72=pz*pz;
IkReal x73=pp*pp;
IkReal x74=((0.034969)*rxp1_2);
IkReal x75=((0.007)*pz);
IkReal x76=((0.034969)*rxp0_2);
IkReal x77=((0.0004235)*rxp2_2);
IkReal x78=((0.192)*pp);
IkReal x79=(gclwh13_13*r20);
IkReal x80=(gclwh11_11*rxp2_2);
IkReal x81=((0.000847)*rxp1_2);
IkReal x82=((0.307)*pp);
IkReal x83=(gclwh14_2*r21);
IkReal x84=(gclwh14_12*r21);
IkReal x85=((0.074294)*rxp2_2);
IkReal x86=((0.004494787)*r20);
IkReal x87=((0.0021156245)*r22);
IkReal x88=((0.002811072)*r21);
IkReal x89=(gclwh4_14*r22);
IkReal x90=(gclwh10_12*r22);
IkReal x91=(pp*r20);
IkReal x92=((2.0)*gclwh6_10);
IkReal x93=(pp*r22);
IkReal x94=((2.0)*gclwh5_9);
IkReal x95=(gclwh5_0*npz);
IkReal x96=((0.614)*pz);
IkReal x97=(gclwh8_3*rxp1_2);
IkReal x98=((0.242)*rxp1_2);
IkReal x99=(npx*pz);
IkReal x100=(gclwh15_9*r21);
IkReal x101=((2.0)*pp);
IkReal x102=(npy*pz);
IkReal x103=((0.242)*rxp2_2);
IkReal x104=(gclwh10_8*rxp2_2);
IkReal x105=(gclwh5_0*r22);
IkReal x106=(npz*pz);
IkReal x107=(gclwh8_10*r21);
IkReal x108=(gclwh7_11*rxp0_2);
IkReal x109=(gclwh12_8*r20);
IkReal x110=((0.004494787)*r21);
IkReal x111=(gclwh8_8*r21);
IkReal x112=(gclwh12_2*npx);
IkReal x113=((2.0)*gclwh12_10);
IkReal x114=(gclwh5_1*r22);
IkReal x115=((2.0)*gclwh4_10);
IkReal x116=(gclwh7_0*rxp0_2);
IkReal x117=((2.562175e-5)*r20);
IkReal x118=(gclwh12_10*rxp0_2);
IkReal x119=((0.484)*rxp1_2);
IkReal x120=((0.074294)*rxp1_2);
IkReal x121=((2.0)*gclwh13_9);
IkReal x122=((0.029282)*r20);
IkReal x123=(gclwh10_3*rxp2_2);
IkReal x124=((0.289)*gclwh4_8);
IkReal x125=(gclwh13_0*npx);
IkReal x126=(gclwh15_13*r21);
IkReal x127=(gclwh6_3*rxp0_2);
IkReal x128=((0.0004235)*rxp0_2);
IkReal x129=((0.001127357)*r20);
IkReal x130=(gclwh13_1*r20);
IkReal x131=((2.562175e-5)*r22);
IkReal x132=(pp*r21);
IkReal x133=((0.0021156245)*r20);
IkReal x134=((2.562175e-5)*r21);
IkReal x135=((0.484)*rxp2_2);
IkReal x136=((0.289)*gclwh10_8);
IkReal x137=((0.018634)*rxp1_2);
IkReal x138=((0.004231249)*r20);
IkReal x139=(gclwh7_1*rxp0_2);
IkReal x140=(gclwh14_2*npy);
IkReal x141=(gclwh10_10*r22);
IkReal x142=((0.001298993443)*r21);
IkReal x143=((0.0006311195213125)*r21);
IkReal x144=(gclwh5_11*r22);
IkReal x145=((0.115)*pp);
IkReal x146=((0.289)*gclwh5_11);
IkReal x147=(gclwh12_12*rxp0_2);
IkReal x148=((1.0)*pp);
IkReal x149=((0.018634)*rxp0_2);
IkReal x150=((0.000847)*rxp2_2);
IkReal x151=(gclwh6_12*r20);
IkReal x152=((0.021470966)*rxp2_2);
IkReal x153=((0.046464)*rxp2_2);
IkReal x154=(gclwh15_1*r21);
IkReal x155=((0.0004235)*rxp1_2);
IkReal x156=(gclwh9_11*rxp1_2);
IkReal x157=((0.014641)*r20);
IkReal x158=((0.014641)*pz);
IkReal x159=((1.0)*pz);
IkReal x160=(gclwh15_0*npy);
IkReal x161=((0.242)*pp);
IkReal x162=((0.02783)*rxp1_2);
IkReal x163=(gclwh4_8*rxp2_2);
IkReal x164=(gclwh15_0*r21);
IkReal x165=((0.484)*rxp0_2);
IkReal x166=((0.242)*rxp0_2);
IkReal x167=(gclwh13_0*pz);
IkReal x168=((0.02783)*rxp0_2);
IkReal x169=(gclwh4_8*r22);
IkReal x170=(gclwh12_12*r20);
IkReal x171=(gclwh5_13*r22);
IkReal x172=((5.12435e-5)*r20);
IkReal x173=((0.001298993443)*r20);
IkReal x174=((0.289)*gclwh6_8);
IkReal x175=(gclwh13_11*r20);
IkReal x176=(gclwh4_3*r22);
IkReal x177=((0.046464)*rxp0_2);
IkReal x178=(gclwh4_2*r22);
IkReal x179=(gclwh8_8*rxp1_2);
IkReal x180=((0.1445)*pp);
IkReal x181=((0.000847)*rxp0_2);
IkReal x182=((2.0)*gclwh10_10);
IkReal x183=((0.02783)*rxp2_2);
IkReal x184=(gclwh14_10*r21);
IkReal x185=(gclwh8_12*r21);
IkReal x186=(gclwh9_1*rxp1_2);
IkReal x187=(gclwh4_12*r22);
IkReal x188=((0.0035)*gclwh13_15);
IkReal x189=(gclwh11_1*rxp2_2);
IkReal x190=((0.014641)*r22);
IkReal x191=(gclwh14_3*r21);
IkReal x192=(gclwh12_2*pz);
IkReal x193=((0.289)*gclwh12_8);
IkReal x194=(gclwh6_8*rxp0_2);
IkReal x195=(gclwh4_2*npz);
IkReal x196=(gclwh10_8*r22);
IkReal x197=((0.046464)*rxp1_2);
IkReal x198=((0.074294)*rxp0_2);
IkReal x199=((0.029282)*r22);
IkReal x200=(gclwh8_5*x155);
IkReal x201=(gclwh4_5*x131);
IkReal x202=(gclwh6_5*x128);
IkReal x203=((0.014641)*x184);
IkReal x204=((0.034969)*x104);
IkReal x205=(gclwh4_8*x87);
IkReal x206=(gclwh12_10*x157);
IkReal x207=(gclwh6_8*x76);
IkReal x208=(gclwh8_8*x74);
IkReal x209=(gclwh10_10*x103);
IkReal x210=(gclwh4_10*x190);
IkReal x211=(gclwh14_5*x134);
IkReal x212=((0.0021156245)*x109);
IkReal x213=(gclwh12_5*x117);
IkReal x214=(gclwh6_10*x166);
IkReal x215=(gclwh8_10*x98);
IkReal x216=(gclwh4_2*x87);
IkReal x217=(gclwh6_2*x76);
IkReal x218=(gclwh8_2*x74);
IkReal x219=(gclwh12_2*x133);
IkReal x220=(gclwh8_14*x155);
IkReal x221=((2.562175e-5)*x89);
IkReal x222=(gclwh6_14*x128);
IkReal x223=(gclwh10_14*x77);
IkReal x224=((0.0021156245)*x83);
IkReal x225=(gclwh9_15*x155);
IkReal x226=((0.034969)*gclwh11_0*rxp2_2);
IkReal x227=(gclwh7_0*x76);
IkReal x228=(gclwh5_0*x87);
IkReal x229=(gclwh11_15*x77);
IkReal x230=(gclwh9_0*x74);
IkReal x231=(gclwh7_15*x128);
IkReal x232=(gclwh13_15*x117);
IkReal x233=((0.0021156245)*x164);
IkReal x234=(gclwh13_0*x133);
IkReal x235=(gclwh5_7*x131);
IkReal x236=((0.014641)*x100);
IkReal x237=((0.034969)*x80);
IkReal x238=(gclwh9_11*x74);
IkReal x239=(gclwh13_9*x157);
IkReal x240=(gclwh5_11*x87);
IkReal x241=(gclwh11_7*x77);
IkReal x242=(gclwh7_7*x128);
IkReal x243=(gclwh7_11*x76);
IkReal x244=(gclwh9_7*x155);
IkReal x245=(gclwh7_9*x166);
IkReal x246=(gclwh13_7*x117);
IkReal x247=(gclwh15_7*x134);
IkReal x248=(gclwh5_9*x190);
IkReal x249=(gclwh11_9*x103);
IkReal x250=(gclwh13_11*x133);
IkReal x251=(gclwh9_9*x98);
IkReal x252=(gclwh12_8*x76);
IkReal x253=(gclwh6_8*x133);
IkReal x254=(gclwh12_5*x128);
IkReal x255=(gclwh8_5*x134);
IkReal x256=(gclwh4_10*x103);
IkReal x257=(gclwh6_5*x117);
IkReal x258=(gclwh10_8*x87);
IkReal x259=((0.0021156245)*x111);
IkReal x260=(gclwh14_5*x155);
IkReal x261=((0.014641)*x107);
IkReal x262=(gclwh4_5*x77);
IkReal x263=((0.014641)*x141);
IkReal x264=(gclwh14_10*x98);
IkReal x265=((0.242)*x118);
IkReal x266=(gclwh6_10*x157);
IkReal x267=((0.034969)*x163);
IkReal x268=(gclwh13_11*x99);
IkReal x269=((2.0)*x72);
IkReal x270=((1.0)*x73);
IkReal x271=(x193*x99);
IkReal x272=((0.0035)*gclwh12_5*x99);
IkReal x273=((0.00175)*gclwh4_5*x93);
IkReal x274=((0.0035)*gclwh14_5*x102);
IkReal x275=((0.1445)*gclwh4_8*x93);
IkReal x276=(x106*x115);
IkReal x277=((2.0)*gclwh14_10*x102);
IkReal x278=(x113*x99);
IkReal x279=((0.1445)*gclwh12_8*x91);
IkReal x280=((0.00175)*gclwh14_5*x132);
IkReal x281=((0.0035)*gclwh4_5*x106);
IkReal x282=((0.00175)*gclwh12_5*x91);
IkReal x283=(x106*x124);
IkReal x284=(pp*pz*x83);
IkReal x285=((0.1445)*gclwh4_2*x93);
IkReal x286=((0.289)*gclwh12_2*x99);
IkReal x287=(gclwh10_3*pp*x103);
IkReal x288=((0.0035)*gclwh4_14*x106);
IkReal x289=(x176*x73);
IkReal x290=(x127*x161);
IkReal x291=(x158*x83);
IkReal x292=((0.289)*gclwh14_2*x102);
IkReal x293=(x157*x192);
IkReal x294=(x192*x91);
IkReal x295=(x161*x97);
IkReal x296=((0.1445)*gclwh12_2*x91);
IkReal x297=(x158*x178);
IkReal x298=(gclwh8_2*pz*x98);
IkReal x299=(x180*x83);
IkReal x300=((0.289)*gclwh4_2*x106);
IkReal x301=((0.00175)*pp*x89);
IkReal x302=(gclwh6_2*pz*x166);
IkReal x303=(gclwh15_0*pz*x132);
IkReal x304=(x167*x91);
IkReal x305=(x188*x99);
IkReal x306=((0.289)*gclwh15_0*x102);
IkReal x307=(gclwh9_1*pp*x98);
IkReal x308=(x157*x167);
IkReal x309=(x158*x164);
IkReal x310=((0.1445)*gclwh5_0*x93);
IkReal x311=(gclwh11_1*pp*x103);
IkReal x312=(x114*x73);
IkReal x313=((0.289)*gclwh13_0*x99);
IkReal x314=(x139*x161);
IkReal x315=(gclwh11_0*pz*x103);
IkReal x316=((0.289)*pz*x95);
IkReal x317=((0.00175)*gclwh13_15*x91);
IkReal x318=(x105*x158);
IkReal x319=((0.1445)*gclwh15_0*x132);
IkReal x320=((0.1445)*gclwh13_0*x91);
IkReal x321=((0.242)*pz*x116);
IkReal x322=(gclwh9_0*pz*x98);
IkReal x323=(x106*x94);
IkReal x324=((0.289)*x268);
IkReal x325=((0.00175)*gclwh5_7*x93);
IkReal x326=((0.1445)*gclwh5_11*x93);
IkReal x327=((0.0035)*gclwh15_7*x102);
IkReal x328=((0.0035)*gclwh13_7*x99);
IkReal x329=((0.0035)*gclwh5_7*x106);
IkReal x330=((0.00175)*gclwh15_7*x132);
IkReal x331=(x121*x99);
IkReal x332=((0.00175)*gclwh13_7*x91);
IkReal x333=((2.0)*gclwh15_9*x102);
IkReal x334=(x106*x146);
IkReal x335=((0.1445)*gclwh13_11*x91);
IkReal x336=(x111*x180);
IkReal x337=(x92*x99);
IkReal x338=((0.00175)*gclwh6_5*x91);
IkReal x339=(x106*x182);
IkReal x340=((2.0)*gclwh8_10*x102);
IkReal x341=((0.1445)*gclwh10_8*x93);
IkReal x342=((0.00175)*gclwh8_5*x132);
IkReal x343=((0.1445)*gclwh6_8*x91);
IkReal x344=((0.0035)*gclwh6_5*x99);
IkReal x345=((0.289)*gclwh8_8*x102);
IkReal x346=((0.0035)*gclwh8_5*x102);
IkReal x347=(x174*x99);
IkReal x348=(x106*x136);
IkReal x349=(gclwh14_3*x101*x102);
IkReal x350=(x195*x269);
IkReal x351=(gclwh4_3*x101*x106);
IkReal x352=(x112*x269);
IkReal x353=(gclwh4_2*x159*x93);
IkReal x354=(x140*x269);
IkReal x355=(x191*x270);
IkReal x356=(gclwh13_1*x101*x99);
IkReal x357=(x269*x95);
IkReal x358=(gclwh15_1*x101*x102);
IkReal x359=(x125*x269);
IkReal x360=(gclwh5_1*x101*x106);
IkReal x361=(x160*x269);
IkReal x362=(gclwh5_0*x159*x93);
IkReal x363=(x154*x270);
IkReal x364=(x130*x270);
IkReal x365=(x317+x232);
IkReal x366=(x346+x344+x262);
IkReal x367=(x305+x229+x225+x231);
IkReal x368=(x301+x221+x220+x223+x222);
IkReal x369=(x211+x213+x282+x281+x280);
IkReal x370=(x332+x330+x329+x247+x246);
IkReal x371=(x338+x342+x254+x255+x257+x260);
IkReal x372=((0.00050575)+x202+x201+x200+x274+x272+x273);
IkReal x373=((0.00050575)+x325+x327+x328+x235+x242+x241+x244);
IkReal x374=(x347+x345+x348+x265+x264+x267+x266+x261+x263);
IkReal x375=(x324+x326+x323+x238+x239+x236+x237+x243+x240);
IkReal x376=(x207+x206+x205+x204+x203+x208+x276+x275+x271);
IkReal x377=(x210+x212+x214+x215+x209+x277+x278+x279+x283);
IkReal x378=(x333+x331+x335+x334+x250+x251+x245+x249+x248);
IkReal x379=(x339+x337+x336+x343+x340+x341+x258+x259+x256+x252+x253);
IkReal x380=(x302+x300+x351+x353+x352+x355+x354+x219+x224+x298+x299+x296+x297);
IkReal x381=(x350+x349+x216+x217+x218+x290+x291+x292+x293+x294+x295+x289+x287+x286+x285+x284);
IkReal x382=(x320+x321+x322+x359+x319+x318+x315+x316+x360+x361+x362+x363+x364+x233+x234);
IkReal x383=(x308+x309+x306+x307+x304+x303+x357+x356+x358+x314+x311+x310+x313+x312+x228+x227+x226+x230);
op[0]=((((0.002811072)*x187))+(((0.384)*gclwh14_12*x102))+(((-1.0)*x369))+(((-0.002811072)*x84))+((gclwh6_12*x177))+(((-1.0)*x376))+(((-1.0)*gclwh12_10*x91))+((x187*x78))+(((-0.384)*gclwh4_12*x106))+((gclwh4_10*x93))+x377+x372+(((-1.0)*x78*x84))+((gclwh10_12*x153))+(((0.384)*gclwh12_12*x99))+((gclwh8_12*x197))+(((-0.002811072)*x170))+(((-1.0)*x170*x78))+(((-1.0)*gclwh14_10*x132)));
op[1]=((((-0.010431727625)*x123))+(((-0.010431727625)*x127))+(((-0.086212625)*gclwh14_3*x102))+(((-0.0006311195213125)*x176))+(((-0.001039511)*x169))+(((-0.0284653125)*gclwh4_3*x93))+(((0.142)*gclwh4_8*x106))+(((-0.017182)*x194))+(((-0.017182)*x179))+(((0.0284653125)*gclwh14_3*x132))+(((-0.071)*gclwh4_8*x93))+x381+x368+(((-0.017182)*x104))+((gclwh14_3*x143))+(((0.086212625)*gclwh4_3*x106))+(((0.071)*gclwh12_8*x91))+(((-1.0)*x380))+(((-0.142)*gclwh12_8*x99))+(((-1.0)*x288))+(((-0.010431727625)*x97))+(((0.001039511)*x109)));
op[2]=((-0.0010745)+(((0.077)*gclwh12_8*x91))+(((-0.154)*gclwh12_8*x99))+((gclwh10_14*x150))+(((-0.001127357)*x169))+(((0.0035)*pp*x89))+(((-0.077)*gclwh4_8*x93))+(((0.154)*gclwh4_8*x106))+(((-1.0)*gclwh8_8*x137))+(((0.001127357)*x109))+(((-1.0)*gclwh6_8*x149))+(((5.12435e-5)*x89))+(((-0.018634)*x104))+((gclwh6_14*x181))+(((-1.0)*gclwh4_14*npz*x75))+((gclwh8_14*x81)));
op[3]=(((x113*x91))+(((-1.0)*gclwh10_10*x135))+(((0.069938)*x179))+(((-1.0)*gclwh6_2*x198))+(((-4.0)*gclwh14_10*x102))+(((0.177446)*gclwh14_3*x102))+(((0.088723)*gclwh4_3*x93))+(((0.069938)*x194))+(((4.0)*gclwh4_10*x106))+(((-0.004494787)*x178))+(((0.029282)*x184))+(((-1.0)*x115*x93))+(((0.004231249)*x169))+((gclwh12_2*r20*x82))+((x82*x83))+((gclwh12_2*x86))+((x124*x93))+(((-1.0)*gclwh8_2*x120))+(((-1.0)*x140*x96))+(((-1.0)*gclwh14_3*x142))+(((-0.578)*gclwh4_8*x106))+((x101*x184))+(((-0.004231249)*x109))+(((-1.0)*x112*x96))+(((0.069938)*x104))+(((-1.0)*x193*x91))+((x195*x96))+(((0.001298993443)*x176))+(((0.021470966)*x97))+(((-0.177446)*gclwh4_3*x106))+(((-0.088723)*gclwh14_3*x132))+(((0.578)*gclwh12_8*x99))+(((-1.0)*gclwh6_10*x165))+(((0.004494787)*x83))+(((-4.0)*gclwh12_10*x99))+((gclwh12_10*x122))+(((-1.0)*gclwh4_10*x199))+(((0.021470966)*x123))+(((0.021470966)*x127))+(((-1.0)*gclwh8_10*x119))+(((-1.0)*x178*x82)));
op[4]=((((0.115)*gclwh12_12*x91))+(((0.001683715)*x84))+(((-1.0)*x369))+(((-0.23)*gclwh14_12*x102))+(((-1.0)*x377))+(((-0.23)*gclwh12_12*x99))+(((-1.0)*gclwh4_10*x93))+x376+x372+((x145*x84))+(((0.23)*gclwh4_12*x106))+(((-1.0)*gclwh8_12*x162))+((gclwh14_10*x132))+(((-0.115)*gclwh4_12*x93))+(((-0.001683715)*x187))+(((0.001683715)*x170))+((gclwh12_10*x91))+(((-1.0)*gclwh10_12*x183))+(((-1.0)*gclwh6_12*x168)));
op[5]=((((0.012)*gclwh12_8*x99))+(((-0.012)*gclwh4_8*x106))+(((-1.0)*x368))+(((0.001452)*x194))+(((0.0048263125)*gclwh14_3*x132))+(((-8.7846e-5)*x109))+(((-0.004711089625)*x97))+(((0.001452)*x179))+(((8.7846e-5)*x169))+x381+x288+(((-0.0002850209223125)*x176))+(((0.006)*gclwh4_8*x93))+(((0.0002850209223125)*x191))+(((-1.0)*x380))+(((-0.0048263125)*gclwh4_3*x93))+(((0.001452)*x104))+(((-0.004711089625)*x127))+(((-0.004711089625)*x123))+(((-0.006)*gclwh12_8*x91))+(((-0.038934625)*gclwh14_3*x102))+(((0.038934625)*gclwh4_3*x106)));
op[6]=((((0.075746)*x80))+(((-0.010431727625)*x139))+(((0.0284653125)*gclwh13_1*x91))+(((-0.626)*gclwh5_11*x106))+(((-0.313)*gclwh13_11*x91))+(((0.004582633)*x144))+(((0.0006311195213125)*x130))+(((-1.0)*x367))+(((-0.004582633)*x175))+(((0.086212625)*gclwh5_1*x106))+(((-0.086212625)*gclwh13_1*x99))+x383+x365+(((0.0284653125)*gclwh15_1*x132))+(((0.075746)*x108))+(((0.626)*x268))+(((-0.0006311195213125)*x114))+((gclwh15_1*x143))+(((-1.0)*x382))+(((-0.010431727625)*x186))+(((-0.010431727625)*x189))+(((-0.0284653125)*gclwh5_1*x93))+(((0.313)*gclwh5_11*x93))+(((-0.086212625)*gclwh15_1*x102))+(((0.075746)*x156)));
op[7]=(((x171*x78))+((gclwh11_13*x153))+(((-1.0)*x375))+(((-1.0)*x370))+(((-1.0)*x78*x79))+(((-0.002811072)*x79))+x378+x373+((gclwh7_13*x177))+(((0.384)*gclwh13_13*x99))+((gclwh5_9*x93))+(((-1.0)*gclwh13_9*x91))+(((0.384)*gclwh15_13*x102))+(((-1.0)*gclwh15_13*x88))+(((0.002811072)*x171))+(((-1.0)*x126*x78))+(((-0.384)*gclwh5_13*x106))+(((-1.0)*x100*x148)));
op[8]=((((-1.0)*x160*x96))+(((-0.088723)*gclwh13_1*x91))+(((0.177446)*gclwh13_1*x99))+(((0.088723)*gclwh5_1*x93))+(((4.0)*gclwh15_9*x102))+(((-1.0)*x125*x96))+(((-0.069938)*x80))+(((0.177446)*gclwh15_1*x102))+(((-0.578)*x268))+(((-0.004231249)*x144))+(((-0.177446)*gclwh5_1*x106))+((gclwh13_11*x138))+((gclwh13_0*r20*x82))+(((-0.069938)*x108))+(((-1.0)*x100*x101))+(((4.0)*gclwh13_9*x99))+(((-1.0)*gclwh11_0*x85))+((gclwh9_9*x119))+(((-4.0)*gclwh5_9*x106))+((gclwh11_9*x135))+((gclwh15_0*x110))+(((-1.0)*x105*x82))+(((-0.074294)*x116))+(((-0.088723)*gclwh15_1*x132))+((x164*x82))+(((-1.0)*gclwh15_1*x142))+(((-0.004494787)*x105))+((gclwh11_1*x152))+((x93*x94))+(((0.021470966)*x186))+(((-1.0)*gclwh13_9*x122))+((gclwh7_9*x165))+(((0.001298993443)*x114))+(((-0.001298993443)*x130))+(((-1.0)*x121*x91))+(((0.289)*gclwh13_11*x91))+(((0.578)*gclwh5_11*x106))+((x95*x96))+(((-1.0)*x146*x93))+((gclwh5_9*x199))+(((0.021470966)*x139))+(((-1.0)*gclwh9_0*x120))+(((-0.029282)*x100))+((gclwh13_0*x86))+(((-0.069938)*x156)));
op[9]=((-0.0010745)+(((-0.001127357)*x144))+((gclwh7_15*x181))+(((0.077)*gclwh13_11*x91))+(((-1.0)*x188*x91))+((gclwh13_11*x129))+(((-0.077)*gclwh5_11*x93))+(((-0.154)*x268))+((gclwh13_15*npx*x75))+(((-0.018634)*x80))+((gclwh11_15*x150))+((gclwh9_15*x81))+(((-1.0)*gclwh13_15*x172))+(((-0.018634)*x108))+(((-1.0)*gclwh9_11*x137))+(((0.154)*gclwh5_11*x106)));
op[10]=((((0.0002850209223125)*x130))+(((0.038934625)*gclwh5_1*x106))+(((0.0048263125)*gclwh13_1*x91))+(((-0.0002850209223125)*x114))+(((-1.0)*x365))+(((-0.003455276)*x175))+(((-0.038934625)*gclwh15_1*x102))+x383+x367+(((-0.038934625)*gclwh13_1*x99))+(((0.236)*gclwh5_11*x93))+(((0.057112)*x156))+(((0.003455276)*x144))+(((-1.0)*x382))+(((-0.004711089625)*x189))+(((-0.004711089625)*x186))+(((0.057112)*x108))+(((0.057112)*x80))+(((0.472)*x268))+(((-0.472)*gclwh5_11*x106))+(((-0.0048263125)*gclwh5_1*x93))+(((0.0048263125)*gclwh15_1*x132))+(((0.0002850209223125)*x154))+(((-0.236)*gclwh13_11*x91))+(((-0.004711089625)*x139)));
op[11]=((((-0.23)*gclwh13_13*x99))+(((0.001683715)*x79))+(((0.001683715)*x126))+(((-1.0)*gclwh5_9*x93))+((x126*x145))+(((0.23)*gclwh5_13*x106))+(((-1.0)*x378))+(((-1.0)*x370))+(((-1.0)*gclwh7_13*x168))+((gclwh13_9*x91))+x375+x373+(((-1.0)*gclwh11_13*x183))+((pp*x100))+(((-0.001683715)*x171))+(((-0.115)*gclwh5_13*x93))+(((-0.23)*gclwh15_13*x102))+((x145*x79)));
op[12]=((0.0159868125)+(((-1.0)*x366))+((x78*x90))+(((-0.384)*gclwh6_12*x99))+((x151*x78))+(((-1.0)*x379))+((x185*x78))+x374+x371+((gclwh6_10*x91))+((pp*x107))+((gclwh10_10*x93))+((gclwh8_12*x88))+(((0.002811072)*x151))+(((-1.0)*gclwh4_12*x153))+(((0.046464)*x147))+((gclwh14_12*x197))+(((-0.384)*gclwh8_12*x102))+(((0.002811072)*x90))+(((-0.384)*gclwh10_12*x106)));
op[13]=((-0.055488)+(((0.1445)*gclwh6_2*pp*r20))+(((-0.0035)*gclwh6_14*npx*pz))+(((0.142)*gclwh8_8*npy*pz))+(((2.562175e-5)*gclwh10_14*r22))+(((-0.0006311195213125)*gclwh6_3*r20))+(((-0.289)*gclwh8_2*npy*pz))+(((0.0577473125)*gclwh3_3*pp*r20))+(((-0.1445)*gclwh3_2*pp*r20))+(((0.086212625)*gclwh8_3*npy*pz))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((-0.086212625)*gclwh3_3*npx*pz))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((0.142)*gclwh10_8*npz*pz))+(((0.0021156245)*gclwh8_2*r21))+(((0.242)*pz))+(((-0.242)*gclwh14_2*pz*rxp1_2))+(((-0.014641)*gclwh8_2*pz*r21))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((0.1445)*gclwh1_2*pp*r21))+(((-0.010431727625)*gclwh14_3*rxp1_2))+(((-0.0035)*gclwh8_14*npy*pz))+(((2.562175e-5)*gclwh6_14*r20))+(((-0.0006311195213125)*gclwh8_3*r21))+(((0.034969)*gclwh12_2*rxp0_2))+(((2.0)*gclwh6_2*npx*(pz*pz)))+(((-0.0284653125)*gclwh8_3*pp*r21))+(((-2.0)*gclwh8_3*npy*pp*pz))+(((2.562175e-5)*gclwh8_14*r21))+(((0.0006311195213125)*gclwh1_3*r21))+(((0.00175)*gclwh6_14*pp*r20))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0284653125)*gclwh10_3*pp*r22))+(((-0.0577473125)*gclwh1_3*pp*r21))+(((-0.001039511)*gclwh6_8*r20))+(((2.0)*gclwh8_2*npy*(pz*pz)))+((gclwh3_2*pp*pz*r20))+(((-0.071)*gclwh8_8*pp*r21))+(((0.242)*gclwh4_2*pz*rxp2_2))+(((-0.289)*gclwh6_2*npx*pz))+(((-2.0)*gclwh1_3*npy*pp*pz))+((gclwh10_3*r22*(pp*pp)))+(((-0.0004235)*gclwh4_14*rxp2_2))+(((-0.001039511)*gclwh10_8*r22))+(((0.086212625)*gclwh10_3*npz*pz))+(((0.034969)*gclwh14_2*rxp1_2))+((gclwh1_3*r21*(pp*pp)))+(((0.0021156245)*gclwh6_2*r20))+(((-0.0284653125)*gclwh6_3*pp*r20))+(((-0.289)*gclwh1_2*npy*pz))+(((0.242)*gclwh14_3*pp*rxp1_2))+(((-0.0006311195213125)*gclwh10_3*r22))+(((2.0)*gclwh3_3*npx*pp*pz))+(((-0.071)*gclwh10_8*pp*r22))+(((-0.014641)*gclwh6_2*pz*r20))+(((-0.014641)*gclwh3_2*pz*r20))+(((-1.0)*gclwh6_2*pp*pz*r20))+(((0.017182)*gclwh4_8*rxp2_2))+(((0.289)*gclwh3_2*npx*pz))+(((0.00175)*gclwh10_14*pp*r22))+(((-0.001039511)*gclwh8_8*r21))+(((0.086212625)*gclwh1_3*npy*pz))+(((0.00175)*gclwh8_14*pp*r21))+(((0.086212625)*gclwh6_3*npx*pz))+(((0.0021156245)*gclwh3_2*r20))+(((0.010431727625)*gclwh4_3*rxp2_2))+(((0.014641)*gclwh1_2*pz*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-0.071)*gclwh6_8*pp*r20))+(((0.142)*gclwh6_8*npx*pz))+(((-0.242)*gclwh12_2*pz*rxp0_2))+(((-0.034969)*gclwh4_2*rxp2_2))+(((-0.0035)*gclwh10_14*npz*pz))+(((-2.0)*gclwh6_3*npx*pp*pz))+(((0.1445)*gclwh8_2*pp*r21))+(((-0.0021156245)*gclwh1_2*r21))+((gclwh6_3*r20*(pp*pp)))+(((-0.017182)*gclwh12_8*rxp0_2))+(((-1.0)*gclwh8_2*pp*pz*r21))+(((-0.0006311195213125)*gclwh3_3*r20))+(((-0.242)*gclwh4_3*pp*rxp2_2))+((gclwh8_3*r21*(pp*pp))));
op[14]=((-0.022253)+(((0.154)*gclwh10_8*x106))+(((-0.077)*pp*x111))+(((0.0035)*gclwh8_14*x132))+(((-1.0)*gclwh10_14*npz*x75))+(((-0.001127357)*x196))+(((-1.0)*gclwh6_8*x129))+(((0.154)*gclwh8_8*x102))+(((0.154)*gclwh6_8*x99))+(((-1.0)*gclwh4_14*x150))+(((-1.0)*gclwh12_8*x149))+(((-1.0)*gclwh6_14*npx*x75))+(((0.018634)*x163))+(((0.0035)*gclwh10_14*x93))+(((5.12435e-5)*gclwh10_14*r22))+(((-0.001127357)*x111))+((gclwh6_14*x172))+(((-0.077)*gclwh10_8*x93))+(((-0.077)*gclwh6_8*x91))+(((5.12435e-5)*gclwh8_14*r21))+(((0.0035)*gclwh6_14*x91))+(((-1.0)*gclwh8_14*npy*x75)));
op[15]=((0.085914375)+(((-1.0)*x182*x93))+(((-0.069938)*x163))+((x174*x91))+(((-1.0)*x101*x107))+(((-1.0)*gclwh3_2*x86))+(((-0.029282)*x141))+(((-1.0)*gclwh14_10*x119))+(((0.004231249)*x196))+(((-1.0)*gclwh14_2*x120))+(((-1.0)*gclwh12_2*x198))+(((-1.0)*gclwh8_2*x110))+((x136*x93))+(((0.177446)*gclwh3_3*x99))+(((-0.088723)*gclwh3_3*x91))+(((0.289)*pp*x111))+(((-1.0)*x91*x92))+(((-0.578)*gclwh10_8*x106))+(((0.088723)*gclwh8_3*x132))+(((-1.0)*gclwh6_10*x122))+((gclwh6_3*x173))+((gclwh4_2*x85))+(((-0.578)*gclwh8_8*x102))+((gclwh4_10*x135))+(((4.0)*gclwh10_10*x106))+(((0.088723)*gclwh6_3*x91))+(((0.088723)*gclwh10_3*x93))+((gclwh6_2*npx*x96))+(((0.004231249)*x111))+((gclwh3_3*x173))+(((4.0)*gclwh8_10*x102))+(((-0.177446)*gclwh8_3*x102))+(((-1.0)*gclwh6_2*r20*x82))+(((-0.484)*x118))+(((0.069938)*gclwh12_8*rxp0_2))+(((4.0)*gclwh6_10*x99))+(((-1.0)*gclwh8_2*r21*x82))+(((0.088723)*gclwh1_3*x132))+((gclwh6_8*x138))+(((-1.0)*gclwh1_2*r21*x82))+((gclwh3_2*r20*x82))+(((-0.177446)*gclwh1_3*x102))+((gclwh1_2*x110))+(((-0.177446)*gclwh10_3*x106))+(((-1.0)*gclwh6_2*x86))+(((-1.0)*gclwh3_2*npx*x96))+((gclwh8_2*npy*x96))+(((-1.0)*gclwh4_3*x152))+(((-0.578)*gclwh6_8*x99))+((gclwh1_2*npy*x96))+(((0.021470966)*gclwh14_3*rxp1_2))+(((-0.029282)*x107))+((gclwh8_3*x142))+(((-1.0)*gclwh1_3*x142))+(((0.001298993443)*gclwh10_3*r22))+(((-0.177446)*gclwh6_3*x99)));
op[16]=((0.0076521875)+(((-0.001683715)*x90))+(((0.23)*gclwh6_12*x99))+(((0.23)*gclwh8_12*x102))+(((-1.0)*x366))+(((-1.0)*x374))+(((-0.115)*gclwh6_12*x91))+(((-1.0)*gclwh6_10*x91))+(((-0.115)*gclwh8_12*x132))+(((-1.0)*gclwh10_10*x93))+(((-1.0)*gclwh14_12*x162))+x379+x371+((gclwh4_12*x183))+(((-1.0)*x107*x148))+(((0.23)*gclwh10_12*x106))+(((-0.001683715)*x185))+(((-0.02783)*x147))+(((-0.001683715)*x151))+(((-1.0)*x145*x90)));
op[17]=((-0.033235)+(((0.0035)*gclwh8_14*npy*pz))+(((0.1445)*gclwh6_2*pp*r20))+(((-0.289)*gclwh8_2*npy*pz))+(((-0.1445)*gclwh3_2*pp*r20))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((0.0021156245)*gclwh8_2*r21))+(((0.006)*gclwh8_8*pp*r21))+(((0.242)*pz))+(((-0.242)*gclwh14_2*pz*rxp1_2))+(((0.038934625)*gclwh10_3*npz*pz))+(((-0.0002850209223125)*gclwh3_3*r20))+(((-0.012)*gclwh8_8*npy*pz))+(((0.006)*gclwh10_8*pp*r22))+(((-0.014641)*gclwh8_2*pz*r21))+(((-2.562175e-5)*gclwh10_14*r22))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((0.1445)*gclwh1_2*pp*r21))+(((0.0035)*gclwh10_14*npz*pz))+(((-0.00175)*gclwh8_14*pp*r21))+(((-2.562175e-5)*gclwh8_14*r21))+(((8.7846e-5)*gclwh8_8*r21))+(((0.034969)*gclwh12_2*rxp0_2))+(((2.0)*gclwh6_2*npx*(pz*pz)))+(((-0.0048263125)*gclwh8_3*pp*r21))+(((0.038934625)*gclwh1_3*npy*pz))+(((8.7846e-5)*gclwh6_8*r20))+(((-2.0)*gclwh8_3*npy*pp*pz))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0002850209223125)*gclwh6_3*r20))+(((0.0035)*gclwh6_14*npx*pz))+(((2.0)*gclwh8_2*npy*(pz*pz)))+((gclwh3_2*pp*pz*r20))+(((0.242)*gclwh4_2*pz*rxp2_2))+(((-0.289)*gclwh6_2*npx*pz))+(((-2.0)*gclwh1_3*npy*pp*pz))+((gclwh10_3*r22*(pp*pp)))+(((-0.0048263125)*gclwh6_3*pp*r20))+(((-0.004711089625)*gclwh14_3*rxp1_2))+(((0.034969)*gclwh14_2*rxp1_2))+((gclwh1_3*r21*(pp*pp)))+(((0.0021156245)*gclwh6_2*r20))+(((-0.289)*gclwh1_2*npy*pz))+(((0.0002850209223125)*gclwh1_3*r21))+(((-0.038934625)*gclwh3_3*npx*pz))+(((0.242)*gclwh14_3*pp*rxp1_2))+(((0.001452)*gclwh12_8*rxp0_2))+(((-0.0048263125)*gclwh10_3*pp*r22))+(((2.0)*gclwh3_3*npx*pp*pz))+(((-0.014641)*gclwh6_2*pz*r20))+(((0.004711089625)*gclwh4_3*rxp2_2))+(((-0.014641)*gclwh3_2*pz*r20))+(((-1.0)*gclwh6_2*pp*pz*r20))+(((0.038934625)*gclwh6_3*npx*pz))+(((0.0341083125)*gclwh3_3*pp*r20))+(((0.289)*gclwh3_2*npx*pz))+(((0.038934625)*gclwh8_3*npy*pz))+(((-0.012)*gclwh6_8*npx*pz))+(((0.0004235)*gclwh4_14*rxp2_2))+(((-0.0341083125)*gclwh1_3*pp*r21))+(((0.0021156245)*gclwh3_2*r20))+(((0.006)*gclwh6_8*pp*r20))+(((-2.562175e-5)*gclwh6_14*r20))+(((0.014641)*gclwh1_2*pz*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-0.242)*gclwh12_2*pz*rxp0_2))+(((-0.034969)*gclwh4_2*rxp2_2))+(((-2.0)*gclwh6_3*npx*pp*pz))+(((0.1445)*gclwh8_2*pp*r21))+(((8.7846e-5)*gclwh10_8*r22))+(((-0.0021156245)*gclwh1_2*r21))+((gclwh6_3*r20*(pp*pp)))+(((-0.001452)*gclwh4_8*rxp2_2))+(((-1.0)*gclwh8_2*pp*pz*r21))+(((-0.00175)*gclwh10_14*pp*r22))+(((-0.00175)*gclwh6_14*pp*r20))+(((-0.242)*gclwh4_3*pp*rxp2_2))+(((-0.012)*gclwh10_8*npz*pz))+(((-0.0002850209223125)*gclwh10_3*r22))+(((-0.0002850209223125)*gclwh8_3*r21))+((gclwh8_3*r21*(pp*pp))));
op[18]=((0.055488)+(((0.00175)*gclwh11_15*pp*r22))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((-0.1445)*gclwh7_0*pp*r20))+(((0.034969)*gclwh5_0*rxp2_2))+(((0.289)*gclwh9_0*npy*pz))+(((0.0284653125)*gclwh9_1*pp*r21))+(((-0.0035)*gclwh11_15*npz*pz))+(((0.242)*pz))+(((-0.034969)*gclwh15_0*rxp1_2))+(((-0.086212625)*gclwh7_1*npx*pz))+(((-0.0021156245)*gclwh7_0*r20))+(((2.0)*gclwh9_1*npy*pp*pz))+(((0.289)*gclwh2_0*npx*pz))+((gclwh2_0*pp*pz*r20))+(((-0.0021156245)*gclwh0_0*r21))+(((-0.313)*gclwh9_11*pp*r21))+((gclwh7_0*pp*pz*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((-0.313)*gclwh7_11*pp*r20))+(((0.0284653125)*gclwh11_1*pp*r22))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((0.0021156245)*gclwh2_0*r20))+(((-0.242)*gclwh5_0*pz*rxp2_2))+(((0.242)*gclwh13_0*pz*rxp0_2))+(((0.289)*gclwh11_0*npz*pz))+(((0.014641)*gclwh0_0*pz*r21))+(((-0.014641)*gclwh2_0*pz*r20))+(((-1.0)*gclwh9_1*r21*(pp*pp)))+(((0.00175)*gclwh9_15*pp*r21))+(((0.0006311195213125)*gclwh11_1*r22))+(((0.626)*gclwh7_11*npx*pz))+(((-0.0021156245)*gclwh9_0*r21))+(((-0.075746)*gclwh13_11*rxp0_2))+(((-0.086212625)*gclwh2_1*npx*pz))+(((-0.010431727625)*gclwh5_1*rxp2_2))+(((-0.004582633)*gclwh11_11*r22))+(((0.0284653125)*gclwh7_1*pp*r20))+(((0.0004235)*gclwh13_15*rxp0_2))+(((0.626)*gclwh9_11*npy*pz))+(((0.1445)*gclwh0_0*pp*r21))+(((-0.242)*gclwh13_1*pp*rxp0_2))+(((0.242)*gclwh5_1*pp*rxp2_2))+(((-0.289)*gclwh0_0*npy*pz))+(((-0.1445)*gclwh2_0*pp*r20))+(((2.562175e-5)*gclwh7_15*r20))+(((-2.0)*gclwh9_0*npy*(pz*pz)))+(((2.0)*gclwh2_1*npx*pp*pz))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+((gclwh11_0*pp*pz*r22))+(((-0.004582633)*gclwh9_11*r21))+(((0.010431727625)*gclwh15_1*rxp1_2))+(((-0.1445)*gclwh11_0*pp*r22))+(((0.014641)*gclwh9_0*pz*r21))+(((-0.086212625)*gclwh11_1*npz*pz))+(((-0.313)*gclwh11_11*pp*r22))+(((0.0006311195213125)*gclwh0_1*r21))+(((0.075746)*gclwh5_11*rxp2_2))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((0.014641)*gclwh7_0*pz*r20))+(((-0.086212625)*gclwh9_1*npy*pz))+(((0.014641)*gclwh11_0*pz*r22))+((gclwh0_1*r21*(pp*pp)))+(((-0.0577473125)*gclwh0_1*pp*r21))+(((-1.0)*gclwh7_1*r20*(pp*pp)))+(((2.562175e-5)*gclwh11_15*r22))+(((0.626)*gclwh11_11*npz*pz))+(((-0.0035)*gclwh9_15*npy*pz))+(((2.0)*gclwh7_1*npx*pp*pz))+(((-0.242)*gclwh15_1*pp*rxp1_2))+(((-0.1445)*gclwh9_0*pp*r21))+(((0.010431727625)*gclwh13_1*rxp0_2))+(((-0.034969)*gclwh13_0*rxp0_2))+(((-0.004582633)*gclwh7_11*r20))+(((0.242)*gclwh15_0*pz*rxp1_2))+(((-0.0021156245)*gclwh11_0*r22))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.0577473125)*gclwh2_1*pp*r20))+(((0.086212625)*gclwh0_1*npy*pz))+(((-2.0)*gclwh7_0*npx*(pz*pz)))+(((0.0006311195213125)*gclwh7_1*r20))+(((-0.0035)*gclwh7_15*npx*pz))+((gclwh9_0*pp*pz*r21))+(((0.0006311195213125)*gclwh9_1*r21))+(((0.289)*gclwh7_0*npx*pz))+(((0.00175)*gclwh7_15*pp*r20))+(((-0.0006311195213125)*gclwh2_1*r20))+(((2.562175e-5)*gclwh9_15*r21)));
IkReal x384=pz*pz;
IkReal x385=pp*pp;
IkReal x386=(pp*r21);
IkReal x387=((2.0)*gclwh9_9);
IkReal x388=(pp*r22);
IkReal x389=((0.007)*gclwh11_15);
IkReal x390=(npz*pz);
IkReal x391=((0.007)*gclwh10_14);
IkReal x392=(npy*pz);
IkReal x393=((0.001298993443)*r22);
IkReal x394=(gclwh13_15*rxp0_2);
IkReal x395=(gclwh9_15*rxp1_2);
IkReal x396=((0.00336743)*r21);
IkReal x397=(gclwh12_2*r20);
IkReal x398=(gclwh4_2*r22);
IkReal x399=((0.034969)*rxp0_2);
IkReal x400=(gclwh14_12*r21);
IkReal x401=((5.12435e-5)*r22);
IkReal x402=(pp*r20);
IkReal x403=(npx*pz);
IkReal x404=(gclwh5_0*r22);
IkReal x405=((0.007)*gclwh6_14);
IkReal x406=(gclwh4_10*rxp2_2);
IkReal x407=((0.0004235)*rxp2_2);
IkReal x408=(gclwh8_14*r21);
IkReal x409=((4.0)*gclwh11_9);
IkReal x410=((0.000102487)*r22);
IkReal x411=((4.0)*gclwh4_10);
IkReal x412=((0.148588)*rxp2_2);
IkReal x413=(gclwh9_9*r21);
IkReal x414=(gclwh11_9*r22);
IkReal x415=(gclwh14_2*rxp1_2);
IkReal x416=(gclwh8_3*rxp1_2);
IkReal x417=((0.021470966)*rxp0_2);
IkReal x418=(gclwh12_8*r20);
IkReal x419=(gclwh14_10*rxp1_2);
IkReal x420=(gclwh12_12*rxp0_2);
IkReal x421=(gclwh15_13*rxp1_2);
IkReal x422=(gclwh9_0*rxp1_2);
IkReal x423=((0.014641)*r21);
IkReal x424=((2.0)*pp);
IkReal x425=(gclwh10_3*rxp2_2);
IkReal x426=((2.0)*gclwh12_10);
IkReal x427=((2.0)*gclwh4_10);
IkReal x428=((0.968)*rxp1_2);
IkReal x429=((0.289)*gclwh9_11);
IkReal x430=(gclwh9_15*r21);
IkReal x431=((2.562175e-5)*r20);
IkReal x432=((4.0)*gclwh15_9);
IkReal x433=((4.0)*gclwh13_9);
IkReal x434=((0.484)*rxp0_2);
IkReal x435=((0.005622144)*r21);
IkReal x436=((4.0)*gclwh14_10);
IkReal x437=((0.0035)*gclwh4_14);
IkReal x438=(gclwh11_13*r22);
IkReal x439=((0.007)*gclwh13_15);
IkReal x440=((0.058564)*r21);
IkReal x441=((0.069938)*rxp2_2);
IkReal x442=(gclwh15_0*rxp1_2);
IkReal x443=((0.029282)*r20);
IkReal x444=((4.0)*gclwh8_10);
IkReal x445=((0.001298993443)*r21);
IkReal x446=((0.289)*gclwh4_8);
IkReal x447=((0.0004235)*rxp0_2);
IkReal x448=((0.034969)*rxp2_2);
IkReal x449=((0.004494787)*r21);
IkReal x450=((0.00336743)*r20);
IkReal x451=((0.004231249)*r21);
IkReal x452=((2.562175e-5)*r21);
IkReal x453=((0.001683715)*r20);
IkReal x454=(gclwh12_10*r20);
IkReal x455=(gclwh8_8*rxp1_2);
IkReal x456=((0.148588)*rxp0_2);
IkReal x457=(gclwh10_12*r22);
IkReal x458=(gclwh8_14*rxp1_2);
IkReal x459=((0.242)*rxp1_2);
IkReal x460=((0.001298993443)*r20);
IkReal x461=((0.05566)*rxp2_2);
IkReal x462=((0.968)*rxp0_2);
IkReal x463=((2.0)*gclwh7_9);
IkReal x464=((0.007)*gclwh9_15);
IkReal x465=((0.018634)*rxp0_2);
IkReal x466=(gclwh7_11*r20);
IkReal x467=(gclwh10_10*r22);
IkReal x468=((4.0)*gclwh12_10);
IkReal x469=((5.12435e-5)*r20);
IkReal x470=((0.242)*pp);
IkReal x471=(gclwh10_12*rxp2_2);
IkReal x472=((0.289)*gclwh7_11);
IkReal x473=(gclwh12_12*r20);
IkReal x474=((0.007)*gclwh8_14);
IkReal x475=(gclwh5_0*rxp2_2);
IkReal x476=(gclwh10_10*rxp2_2);
IkReal x477=(gclwh11_0*r22);
IkReal x478=((0.007)*gclwh4_14);
IkReal x479=(gclwh7_9*r20);
IkReal x480=((4.0)*gclwh10_10);
IkReal x481=(gclwh7_13*r20);
IkReal x482=(gclwh6_2*rxp0_2);
IkReal x483=(gclwh11_9*rxp2_2);
IkReal x484=(gclwh5_9*rxp2_2);
IkReal x485=(gclwh6_3*rxp0_2);
IkReal x486=((2.0)*gclwh11_9);
IkReal x487=(gclwh14_2*pz);
IkReal x488=(gclwh2_0*r20);
IkReal x489=((0.001694)*rxp2_2);
IkReal x490=((0.092928)*rxp2_2);
IkReal x491=((0.242)*rxp0_2);
IkReal x492=((4.0)*gclwh9_9);
IkReal x493=((0.289)*gclwh11_11);
IkReal x494=((2.562175e-5)*r22);
IkReal x495=(gclwh11_11*r22);
IkReal x496=((0.005622144)*r20);
IkReal x497=((0.058564)*r20);
IkReal x498=(gclwh9_11*r21);
IkReal x499=(gclwh14_12*rxp1_2);
IkReal x500=(gclwh13_0*rxp0_2);
IkReal x501=(gclwh8_2*rxp1_2);
IkReal x502=(gclwh6_12*rxp0_2);
IkReal x503=(gclwh14_3*r21);
IkReal x504=(gclwh7_15*rxp0_2);
IkReal x505=((0.000102487)*r20);
IkReal x506=((0.000847)*rxp2_2);
IkReal x507=((4.0)*gclwh6_10);
IkReal x508=((0.092928)*rxp0_2);
IkReal x509=(gclwh8_12*rxp1_2);
IkReal x510=((2.0)*gclwh14_10);
IkReal x511=((0.0004235)*rxp1_2);
IkReal x512=((0.058564)*r22);
IkReal x513=((0.004231249)*r20);
IkReal x514=((0.05566)*rxp0_2);
IkReal x515=(gclwh13_13*rxp0_2);
IkReal x516=((0.029282)*r21);
IkReal x517=((0.014641)*pz);
IkReal x518=((0.484)*rxp1_2);
IkReal x519=((0.289)*gclwh12_8);
IkReal x520=((4.0)*gclwh5_9);
IkReal x521=(gclwh6_8*rxp0_2);
IkReal x522=((4.0)*gclwh7_9);
IkReal x523=(gclwh10_8*rxp2_2);
IkReal x524=((0.007)*gclwh7_15);
IkReal x525=(gclwh6_14*rxp0_2);
IkReal x526=(gclwh4_8*r22);
IkReal x527=(gclwh5_13*r22);
IkReal x528=(gclwh4_3*r22);
IkReal x529=((0.069938)*rxp0_2);
IkReal x530=(gclwh5_13*rxp2_2);
IkReal x531=((0.008989574)*r21);
IkReal x532=(gclwh4_10*r22);
IkReal x533=((0.008989574)*r20);
IkReal x534=(gclwh4_12*r22);
IkReal x535=((0.014641)*x479);
IkReal x536=(gclwh13_9*x491);
IkReal x537=((0.014641)*x413);
IkReal x538=(gclwh5_11*x448);
IkReal x539=(gclwh15_9*x459);
IkReal x540=((0.014641)*x414);
IkReal x541=(gclwh5_7*x407);
IkReal x542=(gclwh13_11*x399);
IkReal x543=((0.0021156245)*x498);
IkReal x544=(gclwh15_7*x511);
IkReal x545=(gclwh9_7*x452);
IkReal x546=(gclwh7_7*x431);
IkReal x547=((0.0021156245)*x466);
IkReal x548=((0.0021156245)*x495);
IkReal x549=((0.242)*x484);
IkReal x550=(gclwh11_7*x494);
IkReal x551=(gclwh13_7*x447);
IkReal x552=((0.069938)*x509);
IkReal x553=(gclwh10_12*x441);
IkReal x554=((0.069938)*x502);
IkReal x555=((0.004231249)*x534);
IkReal x556=(gclwh4_14*x401);
IkReal x557=(gclwh10_14*x506);
IkReal x558=((0.004231249)*x473);
IkReal x559=((0.004231249)*x400);
IkReal x560=((0.000847)*x525);
IkReal x561=((0.000847)*x458);
IkReal x562=(gclwh6_10*x434);
IkReal x563=(gclwh8_10*x518);
IkReal x564=((0.029282)*x532);
IkReal x565=((0.484)*x476);
IkReal x566=(gclwh14_10*x516);
IkReal x567=(gclwh12_10*x443);
IkReal x568=(gclwh13_9*x443);
IkReal x569=(gclwh15_9*x516);
IkReal x570=(gclwh9_9*x518);
IkReal x571=((0.484)*x483);
IkReal x572=(gclwh7_9*x434);
IkReal x573=((0.029282)*gclwh5_9*r22);
IkReal x574=(gclwh11_13*x441);
IkReal x575=(gclwh7_13*x529);
IkReal x576=((0.004231249)*x527);
IkReal x577=(gclwh13_15*x469);
IkReal x578=(gclwh11_15*x506);
IkReal x579=((0.000847)*x504);
IkReal x580=((0.000847)*x395);
IkReal x581=(gclwh13_13*x513);
IkReal x582=(gclwh15_13*x451);
IkReal x583=((0.069938)*x499);
IkReal x584=(gclwh6_12*x513);
IkReal x585=((0.004231249)*x457);
IkReal x586=((0.069938)*x420);
IkReal x587=(gclwh8_12*x451);
IkReal x588=(gclwh4_14*x506);
IkReal x589=(gclwh4_12*x441);
IkReal x590=(gclwh10_14*x401);
IkReal x591=((5.12435e-5)*x408);
IkReal x592=(gclwh6_14*x469);
IkReal x593=(gclwh6_10*x443);
IkReal x594=((0.029282)*x467);
IkReal x595=((0.484)*x419);
IkReal x596=(gclwh8_10*x516);
IkReal x597=(gclwh12_10*x434);
IkReal x598=((0.484)*x406);
IkReal x599=((0.484)*x484);
IkReal x600=(gclwh15_9*x518);
IkReal x601=(gclwh7_9*x443);
IkReal x602=((0.029282)*x414);
IkReal x603=(gclwh13_9*x434);
IkReal x604=((0.029282)*x413);
IkReal x605=(gclwh11_15*x401);
IkReal x606=((5.12435e-5)*x430);
IkReal x607=((0.000847)*x394);
IkReal x608=(gclwh7_15*x469);
IkReal x609=(gclwh5_13*x441);
IkReal x610=((0.069938)*x421);
IkReal x611=((0.004231249)*x438);
IkReal x612=((0.004231249)*x481);
IkReal x613=((0.069938)*x515);
IkReal x614=(gclwh8_5*x511);
IkReal x615=(gclwh4_5*x494);
IkReal x616=((0.242)*x476);
IkReal x617=((0.014641)*x532);
IkReal x618=(gclwh6_5*x447);
IkReal x619=(gclwh10_8*x448);
IkReal x620=((0.0021156245)*x526);
IkReal x621=(gclwh6_10*x491);
IkReal x622=(gclwh8_10*x459);
IkReal x623=(gclwh6_8*x399);
IkReal x624=((0.034969)*x455);
IkReal x625=(gclwh14_5*x452);
IkReal x626=(gclwh14_10*x423);
IkReal x627=((0.0021156245)*x418);
IkReal x628=(gclwh12_5*x431);
IkReal x629=((0.014641)*x454);
IkReal x630=((2.0)*x384);
IkReal x631=(x403*x472);
IkReal x632=((0.0035)*gclwh11_7*x390);
IkReal x633=(x392*x429);
IkReal x634=((0.0035)*gclwh7_7*x403);
IkReal x635=((0.0035)*gclwh9_7*x392);
IkReal x636=(x390*x493);
IkReal x637=(x403*x463);
IkReal x638=((0.1445)*gclwh7_11*x402);
IkReal x639=((0.1445)*gclwh11_11*x388);
IkReal x640=((0.00175)*gclwh11_7*x388);
IkReal x641=((0.00175)*gclwh7_7*x402);
IkReal x642=(x390*x486);
IkReal x643=((0.1445)*gclwh9_11*x386);
IkReal x644=((0.00175)*gclwh9_7*x386);
IkReal x645=(x387*x392);
IkReal x646=((0.578)*gclwh14_12*x392);
IkReal x647=((0.289)*gclwh4_12*x388);
IkReal x648=(x390*x478);
IkReal x649=((0.578)*gclwh12_12*x403);
IkReal x650=((0.289)*gclwh14_12*x386);
IkReal x651=(x388*x437);
IkReal x652=((0.289)*gclwh12_12*x402);
IkReal x653=((0.578)*gclwh4_12*x390);
IkReal x654=(x392*x436);
IkReal x655=(x388*x427);
IkReal x656=(x403*x468);
IkReal x657=(x402*x426);
IkReal x658=(x386*x510);
IkReal x659=(x390*x411);
IkReal x660=((2.0)*gclwh13_9*x402);
IkReal x661=(x390*x520);
IkReal x662=((2.0)*gclwh15_9*x386);
IkReal x663=(x392*x432);
IkReal x664=(x403*x433);
IkReal x665=((2.0)*gclwh5_9*x388);
IkReal x666=((0.0035)*gclwh13_15*x402);
IkReal x667=((0.578)*gclwh15_13*x392);
IkReal x668=((0.578)*gclwh13_13*x403);
IkReal x669=((0.289)*gclwh5_13*x388);
IkReal x670=((0.289)*gclwh15_13*x386);
IkReal x671=(x403*x439);
IkReal x672=((0.578)*gclwh5_13*x390);
IkReal x673=((0.289)*gclwh13_13*x402);
IkReal x674=(x390*x391);
IkReal x675=(x403*x405);
IkReal x676=((0.289)*gclwh10_12*x388);
IkReal x677=(x392*x474);
IkReal x678=((0.289)*gclwh6_12*x402);
IkReal x679=((0.289)*gclwh8_12*x386);
IkReal x680=((0.0035)*gclwh8_14*x386);
IkReal x681=((0.0035)*gclwh10_14*x388);
IkReal x682=((0.578)*gclwh6_12*x403);
IkReal x683=((0.578)*gclwh10_12*x390);
IkReal x684=((0.578)*gclwh8_12*x392);
IkReal x685=((0.0035)*gclwh6_14*x402);
IkReal x686=((2.0)*gclwh6_10*x402);
IkReal x687=((2.0)*gclwh8_10*x386);
IkReal x688=((2.0)*gclwh10_10*x388);
IkReal x689=(x403*x507);
IkReal x690=(x392*x444);
IkReal x691=(x390*x480);
IkReal x692=(x403*x522);
IkReal x693=(x390*x409);
IkReal x694=(x392*x492);
IkReal x695=(x388*x486);
IkReal x696=(x402*x463);
IkReal x697=(x386*x387);
IkReal x698=(x392*x464);
IkReal x699=(x389*x390);
IkReal x700=(x403*x524);
IkReal x701=((0.0035)*gclwh11_15*x388);
IkReal x702=((0.0035)*gclwh7_15*x402);
IkReal x703=((0.0035)*gclwh9_15*x386);
IkReal x704=((0.578)*gclwh7_13*x403);
IkReal x705=((0.578)*gclwh11_13*x390);
IkReal x706=((0.289)*gclwh7_13*x402);
IkReal x707=((0.289)*gclwh11_13*x388);
IkReal x708=(x392*x510);
IkReal x709=(x403*x426);
IkReal x710=(x403*x519);
IkReal x711=((0.0035)*gclwh12_5*x403);
IkReal x712=((0.00175)*gclwh4_5*x388);
IkReal x713=((0.0035)*gclwh14_5*x392);
IkReal x714=((0.1445)*gclwh4_8*x388);
IkReal x715=((0.1445)*gclwh12_8*x402);
IkReal x716=((0.00175)*gclwh14_5*x386);
IkReal x717=((0.0035)*gclwh4_5*x390);
IkReal x718=((0.00175)*gclwh12_5*x402);
IkReal x719=(x390*x446);
IkReal x720=(x390*x427);
IkReal x721=(x577+x666);
IkReal x722=(x609+x704+x705);
IkReal x723=(x698+x699+x700);
IkReal x724=(x579+x578+x580+x671);
IkReal x725=(x541+x634+x635+x632);
IkReal x726=(x589+x683+x682+x684);
IkReal x727=(x588+x677+x674+x675);
IkReal x728=(x599+x694+x692+x693);
IkReal x729=(x598+x689+x690+x691);
IkReal x730=(x557+x556+x560+x561+x651);
IkReal x731=(x568+x569+x661+x660+x662);
IkReal x732=(x625+x628+x718+x717+x716);
IkReal x733=(x559+x558+x650+x652+x653);
IkReal x734=(x566+x567+x657+x658+x659);
IkReal x735=(x581+x582+x672+x673+x670);
IkReal x736=(x610+x611+x612+x613+x706+x707);
IkReal x737=(x575+x574+x576+x669+x668+x667);
IkReal x738=(x627+x626+x629+x719+x715+x720);
IkReal x739=(x592+x591+x590+x681+x680+x685);
IkReal x740=((-0.00050575)+x618+x614+x615+x711+x713+x712);
IkReal x741=(x564+x565+x562+x563+x654+x655+x656);
IkReal x742=(x607+x606+x605+x608+x702+x703+x701);
IkReal x743=(x553+x552+x555+x554+x647+x646+x649);
IkReal x744=(x571+x570+x573+x572+x663+x665+x664);
IkReal x745=(x597+x596+x595+x594+x593+x688+x687+x686);
IkReal x746=(x551+x550+x544+x545+x546+x644+x641+x640);
IkReal x747=(x583+x584+x585+x586+x587+x678+x679+x676);
IkReal x748=(x603+x602+x601+x600+x604+x695+x696+x697);
IkReal x749=(x540+x535+x537+x536+x539+x538+x636+x633+x631);
IkReal x750=(x547+x542+x543+x548+x549+x645+x643+x642+x637+x638+x639);
IkReal x751=(x619+x616+x617+x624+x621+x620+x623+x622+x710+x714+x708+x709);
op[19]=((0.0159868125)+(((-0.046464)*x515))+(((0.384)*gclwh7_13*x403))+(((-1.0)*gclwh11_9*x388))+(((0.046464)*x530))+(((-1.0)*gclwh7_9*x402))+(((-1.0)*gclwh9_9*x386))+(((-0.192)*gclwh7_13*x402))+(((0.384)*gclwh11_13*x390))+(((-0.046464)*x421))+(((-0.192)*gclwh11_13*x388))+x725+x750+(((-1.0)*x749))+(((-1.0)*x746))+(((-0.002811072)*x481))+(((-0.002811072)*x438)));
op[20]=((-0.085914375)+(((0.004494787)*gclwh7_0*r20))+(((-0.177446)*gclwh0_1*x392))+(((-0.578)*gclwh11_11*x390))+(((-1.0)*gclwh11_1*x393))+(((0.004494787)*x477))+((gclwh9_11*x451))+(((-0.088723)*gclwh7_1*x402))+(((-0.578)*gclwh7_11*x403))+(((-1.0)*gclwh7_1*x460))+(((-0.004494787)*x488))+(((-0.614)*gclwh7_0*x403))+((x388*x493))+(((-0.088723)*gclwh9_1*x386))+(((0.088723)*gclwh0_1*x386))+(((0.177446)*gclwh7_1*x403))+(((0.074294)*x500))+((x386*x429))+((gclwh9_0*x449))+(((0.074294)*x442))+(((-1.0)*gclwh0_1*x445))+(((-0.614)*gclwh9_0*x392))+(((0.021470966)*gclwh5_1*rxp2_2))+(((0.004231249)*x466))+(((0.307)*gclwh11_0*x388))+(((-0.307)*gclwh0_0*x386))+(((0.307)*gclwh2_0*x402))+(((-0.021470966)*gclwh15_1*rxp1_2))+(((-0.614)*gclwh2_0*x403))+((x402*x472))+(((0.307)*gclwh7_0*x402))+(((0.177446)*gclwh11_1*x390))+((gclwh2_1*x460))+(((0.177446)*gclwh2_1*x403))+(((-1.0)*gclwh13_1*x417))+((gclwh0_0*x449))+(((-1.0)*gclwh9_1*x445))+(((-0.088723)*gclwh2_1*x402))+(((0.614)*gclwh0_0*x392))+(((-1.0)*gclwh5_11*x441))+(((0.177446)*gclwh9_1*x392))+(((-0.614)*gclwh11_0*x390))+x728+(((0.004231249)*x495))+(((0.307)*gclwh9_0*x386))+((gclwh13_11*x529))+(((-1.0)*x748))+(((-0.074294)*x475))+(((-0.088723)*gclwh11_1*x388))+(((-0.578)*gclwh9_11*x392)));
op[21]=((-0.022253)+(((-0.018634)*gclwh5_11*rxp2_2))+(((0.077)*gclwh11_11*x388))+(((-0.154)*gclwh11_11*x390))+(((-0.154)*gclwh7_11*x403))+(((0.001127357)*x495))+(((0.001127357)*x498))+((gclwh13_11*x465))+(((0.077)*gclwh9_11*x386))+(((-0.154)*gclwh9_11*x392))+(((0.077)*gclwh7_11*x402))+x723+(((-1.0)*x742))+(((0.001127357)*x466)));
op[22]=((0.033235)+(((-0.004711089625)*gclwh5_1*rxp2_2))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((-0.1445)*gclwh7_0*pp*r20))+(((0.034969)*gclwh5_0*rxp2_2))+(((0.289)*gclwh9_0*npy*pz))+(((0.057112)*gclwh5_11*rxp2_2))+(((0.242)*pz))+(((0.0002850209223125)*gclwh0_1*r21))+(((0.0002850209223125)*gclwh11_1*r22))+(((-0.034969)*gclwh15_0*rxp1_2))+(((0.472)*gclwh9_11*npy*pz))+(((-0.038934625)*gclwh2_1*npx*pz))+(((-0.236)*gclwh7_11*pp*r20))+(((-0.0021156245)*gclwh7_0*r20))+(((2.0)*gclwh9_1*npy*pp*pz))+(((0.289)*gclwh2_0*npx*pz))+(((-2.562175e-5)*gclwh7_15*r20))+(((0.0035)*gclwh11_15*npz*pz))+((gclwh2_0*pp*pz*r20))+(((-0.0021156245)*gclwh0_0*r21))+(((-0.038934625)*gclwh11_1*npz*pz))+(((0.0002850209223125)*gclwh7_1*r20))+((gclwh7_0*pp*pz*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.472)*gclwh7_11*npx*pz))+(((0.0035)*gclwh9_15*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((0.0048263125)*gclwh7_1*pp*r20))+(((0.0021156245)*gclwh2_0*r20))+(((-0.242)*gclwh5_0*pz*rxp2_2))+(((0.242)*gclwh13_0*pz*rxp0_2))+(((-2.562175e-5)*gclwh9_15*r21))+(((0.004711089625)*gclwh13_1*rxp0_2))+(((0.004711089625)*gclwh15_1*rxp1_2))+(((0.289)*gclwh11_0*npz*pz))+(((0.014641)*gclwh0_0*pz*r21))+(((-0.00175)*gclwh11_15*pp*r22))+(((-2.562175e-5)*gclwh11_15*r22))+(((-0.014641)*gclwh2_0*pz*r20))+(((-1.0)*gclwh9_1*r21*(pp*pp)))+(((-0.0021156245)*gclwh9_0*r21))+(((0.0048263125)*gclwh11_1*pp*r22))+(((0.0002850209223125)*gclwh9_1*r21))+(((0.1445)*gclwh0_0*pp*r21))+(((-0.242)*gclwh13_1*pp*rxp0_2))+(((0.242)*gclwh5_1*pp*rxp2_2))+(((-0.289)*gclwh0_0*npy*pz))+(((-0.1445)*gclwh2_0*pp*r20))+(((-2.0)*gclwh9_0*npy*(pz*pz)))+(((2.0)*gclwh2_1*npx*pp*pz))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-0.0004235)*gclwh13_15*rxp0_2))+(((-0.038934625)*gclwh7_1*npx*pz))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+(((-0.003455276)*gclwh9_11*r21))+((gclwh11_0*pp*pz*r22))+(((-0.057112)*gclwh13_11*rxp0_2))+(((-0.0341083125)*gclwh0_1*pp*r21))+(((-0.1445)*gclwh11_0*pp*r22))+(((0.014641)*gclwh9_0*pz*r21))+(((-0.236)*gclwh11_11*pp*r22))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((0.014641)*gclwh7_0*pz*r20))+(((0.014641)*gclwh11_0*pz*r22))+(((0.0341083125)*gclwh2_1*pp*r20))+(((-0.00175)*gclwh9_15*pp*r21))+(((0.0048263125)*gclwh9_1*pp*r21))+(((-0.0002850209223125)*gclwh2_1*r20))+((gclwh0_1*r21*(pp*pp)))+(((-1.0)*gclwh7_1*r20*(pp*pp)))+(((0.038934625)*gclwh0_1*npy*pz))+(((0.472)*gclwh11_11*npz*pz))+(((2.0)*gclwh7_1*npx*pp*pz))+(((-0.242)*gclwh15_1*pp*rxp1_2))+(((-0.1445)*gclwh9_0*pp*r21))+(((-0.034969)*gclwh13_0*rxp0_2))+(((-0.003455276)*gclwh7_11*r20))+(((-0.003455276)*gclwh11_11*r22))+(((-0.236)*gclwh9_11*pp*r21))+(((-0.00175)*gclwh7_15*pp*r20))+(((0.242)*gclwh15_0*pz*rxp1_2))+(((-0.0021156245)*gclwh11_0*r22))+(((-0.038934625)*gclwh9_1*npy*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh7_0*npx*(pz*pz)))+(((0.0035)*gclwh7_15*npx*pz))+((gclwh9_0*pp*pz*r21))+(((0.289)*gclwh7_0*npx*pz)));
op[23]=((0.0076521875)+(((-0.23)*gclwh7_13*x403))+(((0.115)*gclwh11_13*x388))+((gclwh9_9*x386))+((gclwh7_13*x453))+(((0.02783)*x421))+(((0.001683715)*x438))+((gclwh7_9*x402))+(((0.02783)*x515))+(((-0.23)*gclwh11_13*x390))+(((0.115)*gclwh7_13*x402))+((gclwh11_9*x388))+x725+x749+(((-1.0)*x746))+(((-1.0)*x750))+(((-0.02783)*x530)));
op[24]=((-0.001344)+(((-1.0)*x648))+(((-1.0)*x733))+x730+x743);
op[25]=((((0.384)*gclwh14_2*x386))+(((-0.768)*gclwh14_2*x392))+((gclwh14_2*x435))+(((-0.092928)*x501))+(((-0.005622144)*x398))+(((-0.384)*gclwh4_2*x388))+(((-0.768)*gclwh12_2*x403))+(((-0.092928)*x482))+(((0.384)*pp*x397))+x734+(((0.005622144)*x397))+(((-1.0)*x741))+(((0.768)*gclwh4_2*x390)));
op[26]=((((-1.0)*gclwh4_10*x512))+(((-8.0)*gclwh14_10*x392))+(((1.228)*gclwh4_12*x390))+(((0.008989574)*x400))+((x402*x468))+(((0.058564)*x454))+(((-1.0)*gclwh10_12*x412))+(((-1.228)*gclwh12_12*x403))+(((-1.228)*gclwh14_12*x392))+((x386*x436))+((gclwh14_10*x440))+(((-1.0)*gclwh6_10*x462))+(((-8.0)*gclwh12_10*x403))+(((-1.0)*gclwh6_12*x456))+(((-0.614)*gclwh4_12*x388))+(((0.008989574)*x473))+(((-1.0)*gclwh8_10*x428))+(((-0.148588)*x509))+(((-0.008989574)*x534))+(((8.0)*gclwh4_10*x390))+(((0.614)*gclwh12_12*x402))+(((-0.968)*x476))+(((-1.0)*x388*x411))+(((0.614)*gclwh14_12*x386)));
op[27]=((((-1.0)*x388*x478))+(((0.014)*gclwh4_14*x390))+(((-1.0)*gclwh4_14*x410))+(((-0.001694)*x458))+(((-0.001694)*x525))+(((-1.0)*gclwh10_14*x489)));
op[28]=((0.000805)+(((-1.0)*x733))+(((-1.0)*x730))+x648+x743);
op[29]=((((-0.23)*pp*x397))+(((0.05566)*x482))+(((-0.00336743)*x397))+(((0.05566)*x501))+(((0.23)*gclwh4_2*x388))+(((0.46)*gclwh14_2*x392))+(((0.00336743)*x398))+(((-1.0)*x734))+(((-0.46)*gclwh4_2*x390))+(((-0.23)*gclwh14_2*x386))+x741+(((-1.0)*gclwh14_2*x396))+(((0.46)*gclwh12_2*x403)));
op[30]=(((gclwh15_0*x435))+(((-0.768)*gclwh13_0*x403))+((gclwh13_0*x496))+(((-1.0)*gclwh7_0*x508))+(((-1.0)*x731))+(((0.384)*gclwh15_0*x386))+(((-0.005622144)*x404))+(((0.768)*gclwh5_0*x390))+(((-1.0)*gclwh11_0*x490))+x744+(((-0.092928)*x422))+(((-0.768)*gclwh15_0*x392))+(((-0.384)*gclwh5_0*x388))+(((0.384)*gclwh13_0*x402)));
op[31]=((-0.001344)+(((-1.0)*x721))+(((-1.0)*x735))+x737+x724);
op[32]=((((-1.0)*gclwh13_15*x505))+(((-1.0)*x402*x439))+(((0.001694)*x504))+(((0.001694)*x395))+(((0.014)*gclwh13_15*x403))+((gclwh11_15*x489)));
op[33]=((((-1.0)*gclwh7_13*x456))+(((-1.0)*gclwh7_9*x462))+((gclwh13_13*x533))+(((-8.0)*gclwh15_9*x392))+(((-1.0)*x388*x520))+(((-0.968)*x483))+(((1.228)*gclwh5_13*x390))+(((-0.614)*gclwh5_13*x388))+((x402*x433))+(((-1.0)*gclwh5_9*x512))+(((0.614)*gclwh13_13*x402))+((gclwh15_13*x531))+(((-1.0)*gclwh11_13*x412))+((x386*x432))+(((-1.228)*gclwh13_13*x403))+(((8.0)*gclwh5_9*x390))+(((-0.008989574)*x527))+((gclwh15_9*x440))+(((-8.0)*gclwh13_9*x403))+(((0.614)*gclwh15_13*x386))+(((-1.228)*gclwh15_13*x392))+((gclwh13_9*x497))+(((-1.0)*gclwh9_9*x428)));
op[34]=((((-1.0)*gclwh13_0*x450))+(((-0.23)*gclwh15_0*x386))+(((-0.23)*gclwh13_0*x402))+(((0.46)*gclwh13_0*x403))+(((0.00336743)*x404))+((gclwh11_0*x461))+(((0.46)*gclwh15_0*x392))+((gclwh7_0*x514))+(((-0.46)*gclwh5_0*x390))+x731+(((-1.0)*x744))+(((-1.0)*gclwh15_0*x396))+(((0.23)*gclwh5_0*x388))+(((0.05566)*x422)));
op[35]=((0.000805)+(((-1.0)*x724))+(((-1.0)*x735))+x737+x721);
op[36]=((0.110976)+(((-1.0)*x727))+(((-1.0)*x726))+x739+x747);
op[37]=((0.031961375)+(((-1.0)*gclwh6_2*x496))+(((-1.0)*gclwh8_2*x435))+(((0.384)*gclwh3_2*x402))+(((-0.384)*gclwh1_2*x386))+(((0.768)*gclwh1_2*x392))+((gclwh4_2*x490))+(((-1.0)*gclwh12_2*x508))+(((-0.092928)*x415))+(((-1.0)*gclwh3_2*x496))+((gclwh1_2*x435))+x729+(((-0.384)*gclwh6_2*x402))+(((-0.384)*gclwh8_2*x386))+(((-1.0)*x745))+(((0.768)*gclwh8_2*x392))+(((0.768)*gclwh6_2*x403))+(((-0.768)*gclwh3_2*x403)));
op[38]=((-0.17185325)+(((8.0)*gclwh6_10*x403))+(((-0.058564)*x467))+(((1.228)*gclwh8_12*x392))+(((0.968)*x406))+(((-0.614)*gclwh8_12*x386))+(((-0.968)*x419))+(((-0.148588)*x499))+(((1.228)*gclwh10_12*x390))+(((-0.614)*gclwh10_12*x388))+(((-1.0)*x386*x444))+(((-1.0)*gclwh8_10*x440))+((gclwh4_12*x412))+(((-0.614)*gclwh6_12*x402))+(((-1.0)*gclwh8_12*x531))+(((1.228)*gclwh6_12*x403))+(((-1.0)*gclwh12_10*x462))+(((-1.0)*gclwh6_12*x533))+(((-0.148588)*x420))+(((-1.0)*x388*x480))+(((-1.0)*gclwh6_10*x497))+(((-0.008989574)*x457))+(((-1.0)*x402*x507))+(((8.0)*gclwh10_10*x390))+(((8.0)*gclwh8_10*x392)));
op[39]=((-0.044506)+(((0.014)*gclwh6_14*x403))+(((-1.0)*x386*x474))+(((-1.0)*gclwh6_14*x505))+((gclwh4_14*x489))+(((-1.0)*x388*x391))+(((-1.0)*x402*x405))+(((0.014)*gclwh8_14*x392))+(((-0.000102487)*x408))+(((0.014)*gclwh10_14*x390))+(((-1.0)*gclwh10_14*x410)));
op[40]=((0.06647)+(((-1.0)*x726))+(((-1.0)*x739))+x727+x747);
op[41]=((0.015316625)+(((-1.0)*gclwh4_2*x461))+((gclwh8_2*x396))+((gclwh12_2*x514))+(((0.23)*gclwh1_2*x386))+((gclwh3_2*x450))+(((-0.23)*gclwh3_2*x402))+(((0.05566)*x415))+(((-0.46)*gclwh8_2*x392))+(((-1.0)*gclwh1_2*x396))+(((0.46)*gclwh3_2*x403))+(((-1.0)*x729))+(((-0.46)*gclwh6_2*x403))+((gclwh6_2*x450))+(((0.23)*gclwh6_2*x402))+(((-0.46)*gclwh1_2*x392))+x745+(((0.23)*gclwh8_2*x386)));
op[42]=((-0.031961375)+(((0.384)*gclwh11_0*x388))+(((-0.768)*gclwh11_0*x390))+(((-0.768)*gclwh7_0*x403))+(((0.384)*gclwh7_0*x402))+((gclwh9_0*x435))+(((0.768)*gclwh0_0*x392))+(((0.092928)*x500))+((gclwh7_0*x496))+(((-0.384)*gclwh0_0*x386))+(((0.384)*gclwh9_0*x386))+(((-0.768)*gclwh9_0*x392))+(((0.384)*gclwh2_0*x402))+((gclwh0_0*x435))+(((-0.768)*gclwh2_0*x403))+x728+(((-1.0)*x748))+(((0.005622144)*x477))+(((-0.092928)*x475))+(((0.092928)*x442))+(((-0.005622144)*x488)));
op[43]=((0.110976)+(((-1.0)*x736))+x722+x723+(((-1.0)*x742)));
op[44]=((0.044506)+(((-1.0)*x386*x464))+(((0.014)*gclwh11_15*x390))+(((0.014)*gclwh9_15*x392))+(((-0.001694)*x394))+(((-1.0)*gclwh7_15*x505))+(((-0.000102487)*x430))+(((-1.0)*x402*x524))+(((-1.0)*gclwh11_15*x410))+(((-1.0)*x388*x389))+(((0.014)*gclwh7_15*x403)));
op[45]=((-0.17185325)+(((-1.228)*gclwh11_13*x390))+(((0.148588)*x421))+(((-0.968)*x484))+(((0.614)*gclwh7_13*x402))+(((0.008989574)*x481))+(((0.008989574)*x438))+(((-8.0)*gclwh9_9*x392))+(((0.058564)*x479))+(((0.614)*gclwh11_13*x388))+(((-8.0)*gclwh11_9*x390))+((x388*x409))+((gclwh13_9*x462))+(((-1.0)*gclwh5_13*x412))+(((-1.228)*gclwh7_13*x403))+((x402*x522))+((gclwh15_9*x428))+((gclwh13_13*x456))+(((-8.0)*gclwh7_9*x403))+((x386*x492))+(((0.058564)*x414))+(((0.058564)*x413)));
op[46]=((-0.015316625)+(((-1.0)*gclwh7_0*x450))+(((-0.05566)*x442))+(((-0.05566)*x500))+(((0.46)*gclwh2_0*x403))+((gclwh2_0*x450))+((gclwh5_0*x461))+(((-0.23)*gclwh2_0*x402))+(((0.46)*gclwh11_0*x390))+(((-0.23)*gclwh11_0*x388))+(((-1.0)*gclwh0_0*x396))+(((-1.0)*x728))+(((-0.23)*gclwh9_0*x386))+(((-0.23)*gclwh7_0*x402))+(((0.46)*gclwh9_0*x392))+(((-0.00336743)*x477))+x748+(((0.46)*gclwh7_0*x403))+(((0.23)*gclwh0_0*x386))+(((-0.46)*gclwh0_0*x392))+(((-1.0)*gclwh9_0*x396)));
op[47]=((0.06647)+(((-1.0)*x723))+(((-1.0)*x736))+x722+x742);
op[48]=(((gclwh12_10*x402))+(((-1.0)*gclwh4_10*x388))+(((0.192)*gclwh14_12*x386))+(((0.002811072)*x473))+(((0.384)*gclwh4_12*x390))+(((-0.384)*gclwh14_12*x392))+(((-0.192)*gclwh4_12*x388))+((gclwh14_10*x386))+(((-0.046464)*x509))+(((-0.046464)*x502))+(((-0.002811072)*x534))+(((0.002811072)*x400))+(((-1.0)*x732))+(((-0.384)*gclwh12_12*x403))+x738+x740+(((-0.046464)*x471))+(((0.192)*gclwh12_12*x402))+(((-1.0)*x751)));
op[49]=((((-0.142)*gclwh12_8*x403))+(((0.0284653125)*gclwh14_3*x386))+(((0.1445)*gclwh14_2*x386))+(((-0.034969)*x501))+(((-0.001039511)*x526))+(((-0.00175)*gclwh4_14*x388))+(((-0.017182)*x455))+((x423*x487))+(((-1.0)*x385*x503))+(((-1.0)*gclwh4_3*x390*x424))+(((0.142)*gclwh4_8*x390))+(((0.0006311195213125)*x503))+((x470*x485))+(((-0.1445)*gclwh4_2*x388))+(((-0.289)*gclwh14_2*x392))+(((-0.0021156245)*x398))+((x385*x528))+(((-0.071)*gclwh4_8*x388))+((x390*x437))+(((-1.0)*gclwh6_14*x447))+((x425*x470))+(((-1.0)*gclwh14_2*npy*x630))+(((-0.010431727625)*x485))+(((-1.0)*gclwh8_2*pz*x459))+((x416*x470))+(((0.289)*gclwh4_2*x390))+(((-1.0)*gclwh12_2*npx*x630))+(((-0.086212625)*gclwh14_3*x392))+(((0.001039511)*x418))+(((0.1445)*pp*x397))+((x386*x487))+(((-0.0004235)*x458))+((x397*x517))+((gclwh14_3*x392*x424))+(((-0.242)*pz*x482))+((pp*pz*x397))+(((-1.0)*x398*x517))+(((-1.0)*gclwh4_2*pz*x388))+(((-1.0)*gclwh4_14*x494))+(((-0.289)*gclwh12_2*x403))+(((-1.0)*gclwh6_2*x399))+(((0.0021156245)*gclwh14_2*r21))+(((-0.0284653125)*gclwh4_3*x388))+(((-0.010431727625)*x416))+(((-0.0006311195213125)*x528))+(((0.0021156245)*x397))+(((0.086212625)*gclwh4_3*x390))+((gclwh4_2*npz*x630))+(((0.071)*gclwh12_8*x402))+(((-0.010431727625)*x425))+(((-0.017182)*x523))+(((-0.017182)*x521))+(((-1.0)*gclwh10_14*x407)));
op[50]=((0.0010745)+(((-0.154)*gclwh12_8*x403))+(((-0.018634)*x455))+(((-1.0)*gclwh6_8*x465))+(((0.001127357)*x418))+(((-0.001127357)*x526))+(((0.077)*gclwh12_8*x402))+(((-1.0)*x730))+x648+(((-0.077)*gclwh4_8*x388))+(((-0.018634)*x523))+(((0.154)*gclwh4_8*x390)));
op[51]=((((-0.088723)*gclwh14_3*x386))+(((0.614)*gclwh14_2*x392))+((gclwh4_3*x393))+(((0.074294)*x501))+(((0.307)*gclwh4_2*x388))+(((0.004494787)*x398))+((gclwh10_8*x441))+(((0.578)*gclwh12_8*x403))+(((0.021470966)*x416))+(((-0.307)*gclwh14_2*x386))+(((0.074294)*x482))+(((0.069938)*x521))+(((-1.0)*x402*x519))+((gclwh6_3*x417))+(((0.177446)*gclwh14_3*x392))+(((0.088723)*gclwh4_3*x388))+(((-1.0)*x734))+(((0.069938)*x455))+(((0.021470966)*x425))+(((0.614)*gclwh12_2*x403))+(((-0.578)*gclwh4_8*x390))+(((-0.177446)*gclwh4_3*x390))+(((-1.0)*gclwh14_2*x449))+x741+((x388*x446))+(((-0.004494787)*x397))+(((-1.0)*gclwh14_3*x445))+(((-0.004231249)*x418))+(((0.004231249)*x526))+(((-0.307)*pp*x397))+(((-0.614)*gclwh4_2*x390)));
op[52]=((((0.115)*gclwh4_12*x388))+(((0.02783)*x502))+(((0.02783)*x509))+(((0.001683715)*x534))+(((-0.001683715)*x400))+(((-0.115)*gclwh12_12*x402))+(((-1.0)*gclwh12_10*x402))+(((-1.0)*x732))+(((-1.0)*x738))+(((0.02783)*x471))+((gclwh4_10*x388))+(((-0.23)*gclwh4_12*x390))+x751+x740+(((0.23)*gclwh14_12*x392))+(((0.23)*gclwh12_12*x403))+(((-0.115)*gclwh14_12*x386))+(((-1.0)*gclwh12_12*x453))+(((-1.0)*gclwh14_10*x386)));
IkReal x752=pz*pz;
IkReal x753=pp*pp;
IkReal x754=(gclwh9_0*rxp1_2);
IkReal x755=((0.007)*pz);
IkReal x756=((0.034969)*rxp0_2);
IkReal x757=((0.0004235)*rxp2_2);
IkReal x758=((0.074294)*rxp0_2);
IkReal x759=((0.000847)*rxp0_2);
IkReal x760=(gclwh11_11*rxp2_2);
IkReal x761=(gclwh9_15*rxp1_2);
IkReal x762=((0.0021156245)*r22);
IkReal x763=((0.002811072)*r21);
IkReal x764=((0.074294)*rxp1_2);
IkReal x765=(pp*r20);
IkReal x766=((2.0)*gclwh6_10);
IkReal x767=(npy*pz);
IkReal x768=(pp*r22);
IkReal x769=((2.0)*gclwh5_9);
IkReal x770=((0.614)*pz);
IkReal x771=(gclwh5_0*npz);
IkReal x772=(gclwh8_3*rxp1_2);
IkReal x773=((0.242)*rxp1_2);
IkReal x774=(gclwh9_1*pp);
IkReal x775=(npz*pz);
IkReal x776=(pp*r21);
IkReal x777=((0.014641)*r21);
IkReal x778=((2.0)*pp);
IkReal x779=((0.242)*rxp2_2);
IkReal x780=((2.0)*gclwh7_9);
IkReal x781=((0.029282)*r21);
IkReal x782=(npx*pz);
IkReal x783=((0.029282)*r22);
IkReal x784=(gclwh7_11*rxp0_2);
IkReal x785=((0.021470966)*rxp0_2);
IkReal x786=((0.484)*rxp1_2);
IkReal x787=((0.004494787)*r21);
IkReal x788=((0.242)*rxp0_2);
IkReal x789=(gclwh8_8*r21);
IkReal x790=(gclwh5_1*r22);
IkReal x791=((0.0004235)*rxp1_2);
IkReal x792=((0.289)*gclwh9_11);
IkReal x793=((0.046464)*rxp1_2);
IkReal x794=((0.484)*rxp0_2);
IkReal x795=((0.002811072)*r22);
IkReal x796=((2.0)*gclwh13_9);
IkReal x797=((0.001683715)*r22);
IkReal x798=((0.004494787)*r20);
IkReal x799=((0.001298993443)*r22);
IkReal x800=((0.004711089625)*rxp2_2);
IkReal x801=((2.562175e-5)*r20);
IkReal x802=((0.029282)*r20);
IkReal x803=(gclwh13_0*npx);
IkReal x804=((0.034969)*rxp2_2);
IkReal x805=((0.0004235)*rxp0_2);
IkReal x806=((0.001127357)*r20);
IkReal x807=(gclwh13_1*r20);
IkReal x808=((2.562175e-5)*r22);
IkReal x809=((0.0021156245)*r20);
IkReal x810=((0.484)*rxp2_2);
IkReal x811=(gclwh15_1*r21);
IkReal x812=((0.001298993443)*r21);
IkReal x813=((0.001683715)*r21);
IkReal x814=((0.289)*gclwh8_8);
IkReal x815=((0.021470966)*rxp1_2);
IkReal x816=(gclwh13_11*r20);
IkReal x817=((0.004711089625)*rxp0_2);
IkReal x818=((5.12435e-5)*r21);
IkReal x819=((0.014641)*r22);
IkReal x820=((0.001298993443)*r20);
IkReal x821=(gclwh5_11*r22);
IkReal x822=((2.0)*gclwh10_10);
IkReal x823=((0.289)*gclwh5_11);
IkReal x824=(gclwh12_12*rxp0_2);
IkReal x825=((0.000847)*rxp2_2);
IkReal x826=(gclwh6_12*r20);
IkReal x827=((0.021470966)*rxp2_2);
IkReal x828=((5.12435e-5)*r20);
IkReal x829=(gclwh11_13*rxp2_2);
IkReal x830=((1.0)*pz);
IkReal x831=((0.289)*gclwh7_11);
IkReal x832=((0.074294)*rxp2_2);
IkReal x833=(gclwh9_11*rxp1_2);
IkReal x834=((0.289)*gclwh10_8);
IkReal x835=((0.004494787)*r22);
IkReal x836=((0.014641)*r20);
IkReal x837=(gclwh13_11*rxp0_2);
IkReal x838=((2.562175e-5)*r21);
IkReal x839=(gclwh4_8*rxp2_2);
IkReal x840=(gclwh14_2*pz);
IkReal x841=(gclwh9_11*r21);
IkReal x842=(gclwh15_0*pz);
IkReal x843=(gclwh13_0*pz);
IkReal x844=(gclwh7_13*rxp0_2);
IkReal x845=((0.289)*gclwh11_11);
IkReal x846=((2.0)*gclwh11_9);
IkReal x847=(gclwh4_12*rxp2_2);
IkReal x848=((0.289)*gclwh6_8);
IkReal x849=(gclwh11_11*r22);
IkReal x850=(gclwh9_1*rxp1_2);
IkReal x851=((0.0035)*gclwh13_15);
IkReal x852=(gclwh14_3*r21);
IkReal x853=((0.0021156245)*r21);
IkReal x854=(gclwh12_2*pz);
IkReal x855=(gclwh4_3*r22);
IkReal x856=(gclwh12_8*rxp0_2);
IkReal x857=(gclwh13_13*r20);
IkReal x858=((0.004231249)*r20);
IkReal x859=(gclwh10_8*r22);
IkReal x860=(gclwh5_11*rxp2_2);
IkReal x861=((5.12435e-5)*r22);
IkReal x862=(gclwh13_15*x801);
IkReal x863=(gclwh15_0*x853);
IkReal x864=(gclwh13_0*x809);
IkReal x865=((0.0004235)*x761);
IkReal x866=(gclwh11_0*x804);
IkReal x867=(gclwh7_0*x756);
IkReal x868=(gclwh5_0*x762);
IkReal x869=(gclwh11_15*x757);
IkReal x870=((0.034969)*x754);
IkReal x871=(gclwh7_15*x805);
IkReal x872=(gclwh5_7*x808);
IkReal x873=((0.034969)*x760);
IkReal x874=(gclwh7_9*x788);
IkReal x875=((0.034969)*x833);
IkReal x876=(gclwh5_11*x762);
IkReal x877=(gclwh11_7*x757);
IkReal x878=(gclwh5_9*x819);
IkReal x879=(gclwh7_7*x805);
IkReal x880=(gclwh11_9*x779);
IkReal x881=(gclwh7_11*x756);
IkReal x882=(gclwh9_7*x791);
IkReal x883=(gclwh9_9*x773);
IkReal x884=(gclwh15_9*x777);
IkReal x885=(gclwh13_7*x801);
IkReal x886=(gclwh13_9*x836);
IkReal x887=(gclwh15_7*x838);
IkReal x888=(gclwh13_11*x809);
IkReal x889=(gclwh12_8*x756);
IkReal x890=(gclwh6_8*x809);
IkReal x891=(gclwh8_10*x777);
IkReal x892=(gclwh12_5*x805);
IkReal x893=(gclwh10_10*x819);
IkReal x894=(gclwh14_10*x773);
IkReal x895=(gclwh8_5*x838);
IkReal x896=(gclwh12_10*x788);
IkReal x897=(gclwh6_5*x801);
IkReal x898=(gclwh6_10*x836);
IkReal x899=(gclwh10_8*x762);
IkReal x900=((0.0021156245)*x789);
IkReal x901=(gclwh14_5*x791);
IkReal x902=(gclwh4_5*x757);
IkReal x903=(gclwh4_10*x779);
IkReal x904=(gclwh4_8*x804);
IkReal x905=((2.0)*x776);
IkReal x906=(gclwh13_11*x782);
IkReal x907=((2.0)*x752);
IkReal x908=((1.0)*x753);
IkReal x909=(x776*x842);
IkReal x910=(x765*x843);
IkReal x911=((0.289)*pz*x771);
IkReal x912=((0.00175)*gclwh13_15*x765);
IkReal x913=((0.1445)*gclwh15_0*x776);
IkReal x914=(x773*x774);
IkReal x915=(x836*x843);
IkReal x916=(x777*x842);
IkReal x917=((0.1445)*gclwh13_0*x765);
IkReal x918=(gclwh11_1*pp*x779);
IkReal x919=(x753*x790);
IkReal x920=(gclwh7_1*pp*x788);
IkReal x921=(gclwh11_0*pz*x779);
IkReal x922=(gclwh5_0*pz*x819);
IkReal x923=(x782*x851);
IkReal x924=((0.289)*gclwh15_0*x767);
IkReal x925=((0.1445)*gclwh5_0*x768);
IkReal x926=(gclwh7_0*pz*x788);
IkReal x927=((0.289)*gclwh13_0*x782);
IkReal x928=((0.242)*pz*x754);
IkReal x929=((0.289)*x906);
IkReal x930=((0.00175)*gclwh5_7*x768);
IkReal x931=((0.1445)*gclwh5_11*x768);
IkReal x932=(x782*x796);
IkReal x933=((0.0035)*gclwh15_7*x767);
IkReal x934=((0.0035)*gclwh13_7*x782);
IkReal x935=((2.0)*gclwh15_9*x767);
IkReal x936=(x769*x775);
IkReal x937=((0.0035)*gclwh5_7*x775);
IkReal x938=((0.00175)*gclwh15_7*x776);
IkReal x939=((0.00175)*gclwh13_7*x765);
IkReal x940=(x775*x823);
IkReal x941=((0.1445)*gclwh13_11*x765);
IkReal x942=((0.1445)*gclwh8_8*x776);
IkReal x943=((0.00175)*gclwh6_5*x765);
IkReal x944=((0.1445)*gclwh10_8*x768);
IkReal x945=((0.00175)*gclwh8_5*x776);
IkReal x946=((0.1445)*gclwh6_8*x765);
IkReal x947=((0.0035)*gclwh6_5*x782);
IkReal x948=(x766*x782);
IkReal x949=(x775*x822);
IkReal x950=((2.0)*gclwh8_10*x767);
IkReal x951=(x767*x814);
IkReal x952=((0.0035)*gclwh8_5*x767);
IkReal x953=(x782*x848);
IkReal x954=(x775*x834);
IkReal x955=(gclwh13_1*x778*x782);
IkReal x956=(x771*x907);
IkReal x957=(gclwh15_1*x767*x778);
IkReal x958=(x803*x907);
IkReal x959=(gclwh5_1*x775*x778);
IkReal x960=(gclwh15_0*npy*x907);
IkReal x961=(gclwh5_0*x768*x830);
IkReal x962=(x811*x908);
IkReal x963=(x807*x908);
IkReal x964=(x862+x912);
IkReal x965=(x902+x952+x947);
IkReal x966=(x869+x865+x871+x923);
IkReal x967=(x885+x887+x939+x938+x937);
IkReal x968=(x897+x895+x892+x901+x943+x945);
IkReal x969=(x884+x886+x888+x936+x940+x941);
IkReal x970=((-0.00050575)+x879+x872+x877+x882+x934+x930+x933);
IkReal x971=(x904+x903+x954+x953+x951+x950+x948+x949);
IkReal x972=(x889+x896+x894+x893+x890+x891+x898+x899+x900+x942+x944+x946);
IkReal x973=(x878+x873+x874+x875+x876+x881+x880+x883+x935+x931+x932+x929);
IkReal x974=(x864+x863+x920+x919+x918+x913+x911+x910+x917+x916+x915+x914+x909+x957+x956+x955);
IkReal x975=(x868+x867+x866+x870+x928+x926+x927+x924+x925+x922+x921+x962+x963+x960+x961+x959+x958);
op[53]=((((-0.0002850209223125)*x855))+(((0.001452)*gclwh8_8*rxp1_2))+((gclwh6_3*pp*x788))+(((-1.0)*gclwh4_2*x762))+(((-1.0)*gclwh6_2*pz*x788))+(((-0.012)*gclwh4_8*x775))+(((-0.034969)*gclwh8_2*rxp1_2))+((x753*x855))+(((-1.0)*gclwh10_3*x800))+(((0.012)*gclwh12_8*x782))+(((0.0002850209223125)*x852))+(((-1.0)*gclwh4_2*pz*x819))+((gclwh14_2*x853))+((x765*x854))+(((-0.0035)*gclwh4_14*x775))+(((-0.289)*gclwh12_2*x782))+(((-1.0)*gclwh14_2*npy*x907))+(((-1.0)*gclwh4_3*x775*x778))+(((-0.004711089625)*x772))+((gclwh4_2*npz*x907))+((gclwh6_14*x805))+(((-1.0)*gclwh8_2*pz*x773))+((gclwh10_3*pp*x779))+(((0.242)*pp*x772))+(((-0.289)*gclwh14_2*x767))+((gclwh12_2*x809))+((x776*x840))+(((0.289)*gclwh4_2*x775))+(((-0.038934625)*gclwh14_3*x767))+((gclwh8_14*x791))+((x777*x840))+(((8.7846e-5)*gclwh4_8*r22))+(((-1.0)*gclwh6_2*x756))+(((-1.0)*gclwh12_2*npx*x907))+(((-1.0)*gclwh4_2*x768*x830))+((gclwh14_3*x767*x778))+((gclwh4_14*x808))+(((0.038934625)*gclwh4_3*x775))+(((-8.7846e-5)*gclwh12_8*r20))+(((0.001452)*gclwh10_8*rxp2_2))+(((-0.006)*gclwh12_8*x765))+(((0.00175)*gclwh4_14*x768))+(((0.1445)*gclwh12_2*x765))+(((0.1445)*gclwh14_2*x776))+((gclwh10_14*x757))+(((-0.1445)*gclwh4_2*x768))+(((0.0048263125)*gclwh14_3*x776))+(((-0.0048263125)*gclwh4_3*x768))+(((-1.0)*gclwh6_3*x817))+(((0.001452)*gclwh6_8*rxp0_2))+((x836*x854))+(((-1.0)*x852*x908))+(((0.006)*gclwh4_8*x768)));
op[54]=((((-0.086212625)*gclwh15_1*x767))+(((0.0006311195213125)*x807))+(((-0.313)*gclwh13_11*x765))+(((-0.0284653125)*gclwh5_1*x768))+(((-0.086212625)*gclwh13_1*x782))+(((0.0284653125)*gclwh13_1*x765))+(((0.075746)*x760))+(((0.086212625)*gclwh5_1*x775))+(((-0.010431727625)*gclwh7_1*rxp0_2))+(((0.075746)*x833))+(((-0.0006311195213125)*x790))+(((0.075746)*x784))+(((0.626)*x906))+(((-0.010431727625)*x850))+(((0.0006311195213125)*x811))+(((0.0284653125)*gclwh15_1*x776))+(((-0.004582633)*x816))+(((-0.010431727625)*gclwh11_1*rxp2_2))+x974+x966+(((-1.0)*x964))+(((-0.626)*gclwh5_11*x775))+(((-1.0)*x975))+(((0.313)*gclwh5_11*x768))+(((0.004582633)*x821)));
op[55]=((((-0.046464)*x829))+((gclwh13_9*x765))+((gclwh15_9*x776))+(((0.002811072)*x857))+(((-0.192)*gclwh5_13*x768))+(((-0.046464)*x844))+(((0.384)*gclwh5_13*x775))+(((0.192)*gclwh13_13*x765))+(((-0.384)*gclwh13_13*x782))+(((-1.0)*gclwh5_9*x768))+(((0.192)*gclwh15_13*x776))+(((-1.0)*gclwh5_13*x795))+((gclwh15_13*x763))+(((-0.384)*gclwh15_13*x767))+x970+x969+(((-1.0)*x967))+(((-1.0)*x973)));
op[56]=((((0.578)*gclwh5_11*x775))+((gclwh15_9*x781))+(((0.177446)*gclwh15_1*x767))+(((-0.004231249)*x821))+((gclwh11_0*x832))+(((0.307)*gclwh5_0*x768))+(((-1.0)*x768*x823))+(((-1.0)*gclwh15_0*x787))+(((-1.0)*gclwh9_9*x786))+(((-4.0)*gclwh13_9*x782))+(((0.088723)*gclwh5_1*x768))+(((-0.088723)*gclwh15_1*x776))+(((-0.307)*gclwh13_0*x765))+(((0.289)*gclwh13_11*x765))+(((-1.0)*gclwh11_9*x810))+(((-0.069938)*x833))+(((-0.001298993443)*x807))+(((0.614)*gclwh15_0*x767))+((gclwh7_1*x785))+(((-0.069938)*x784))+((gclwh9_1*x815))+(((-0.088723)*gclwh13_1*x765))+((x765*x796))+(((-1.0)*gclwh5_9*x783))+(((-0.069938)*x760))+(((0.004231249)*x816))+((gclwh11_1*x827))+(((-0.177446)*gclwh5_1*x775))+(((0.001298993443)*x790))+((gclwh5_0*x835))+(((0.074294)*x754))+((x770*x803))+(((-0.001298993443)*x811))+(((-0.307)*gclwh15_0*x776))+(((-0.578)*x906))+(((-4.0)*gclwh15_9*x767))+(((4.0)*gclwh5_9*x775))+(((-1.0)*x768*x769))+(((-1.0)*gclwh7_9*x794))+((gclwh7_0*x758))+(((-1.0)*gclwh13_0*x798))+(((0.177446)*gclwh13_1*x782))+(((-1.0)*x770*x771))+((gclwh15_9*x905))+((gclwh13_9*x802)));
op[57]=((0.0010745)+(((-0.154)*x906))+(((-1.0)*gclwh13_15*npx*x755))+((x765*x851))+(((-1.0)*gclwh11_15*x825))+(((-0.018634)*x833))+(((-1.0)*gclwh7_15*x759))+(((-0.018634)*x784))+((gclwh13_11*x806))+(((0.154)*gclwh5_11*x775))+(((-0.018634)*x760))+(((0.077)*gclwh13_11*x765))+(((-0.077)*gclwh5_11*x768))+(((-0.000847)*x761))+(((-0.001127357)*x821))+((gclwh13_15*x828)));
op[58]=((((-0.0002850209223125)*x790))+(((-1.0)*gclwh7_1*x817))+(((-0.236)*gclwh13_11*x765))+(((-0.003455276)*x816))+(((0.057112)*x784))+(((0.0048263125)*gclwh13_1*x765))+(((-0.004711089625)*x850))+(((0.003455276)*x821))+(((-0.038934625)*gclwh15_1*x767))+(((0.472)*x906))+(((0.236)*gclwh5_11*x768))+(((-0.0048263125)*gclwh5_1*x768))+(((0.038934625)*gclwh5_1*x775))+(((0.0048263125)*gclwh15_1*x776))+(((-0.038934625)*gclwh13_1*x782))+(((0.0002850209223125)*x811))+(((0.057112)*x833))+(((-1.0)*gclwh11_1*x800))+(((-0.472)*gclwh5_11*x775))+x974+x964+(((-1.0)*x966))+(((0.057112)*x760))+(((0.0002850209223125)*x807))+(((-1.0)*x975)));
op[59]=((((-0.115)*gclwh15_13*x776))+(((-0.115)*gclwh13_13*x765))+(((0.02783)*x844))+((gclwh5_13*x797))+(((-1.0)*gclwh15_13*x813))+(((-0.001683715)*x857))+((gclwh5_9*x768))+(((0.23)*gclwh13_13*x782))+(((-1.0)*gclwh15_9*x776))+(((-1.0)*gclwh13_9*x765))+(((0.115)*gclwh5_13*x768))+(((0.23)*gclwh15_13*x767))+x970+x973+(((-1.0)*x967))+(((-1.0)*x969))+(((0.02783)*x829))+(((-0.23)*gclwh5_13*x775)));
op[60]=((-0.0159868125)+(((-1.0)*gclwh14_12*x793))+(((-0.046464)*x824))+(((-0.192)*gclwh8_12*x776))+(((0.384)*gclwh6_12*x782))+(((-1.0)*gclwh8_10*x776))+(((0.046464)*x847))+(((-1.0)*gclwh6_10*x765))+(((-1.0)*gclwh10_10*x768))+(((-0.192)*gclwh10_12*x768))+(((-1.0)*gclwh8_12*x763))+(((-1.0)*gclwh10_12*x795))+(((0.384)*gclwh10_12*x775))+(((-0.192)*gclwh6_12*x765))+x971+x968+(((0.384)*gclwh8_12*x767))+(((-0.002811072)*x826))+(((-1.0)*x965))+(((-1.0)*x972)));
op[61]=((0.055488)+(((0.0035)*gclwh8_14*npy*pz))+(((0.142)*gclwh8_8*npy*pz))+(((-0.0006311195213125)*gclwh6_3*r20))+(((0.0577473125)*gclwh3_3*pp*r20))+(((0.086212625)*gclwh8_3*npy*pz))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((-0.086212625)*gclwh3_3*npx*pz))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((0.142)*gclwh10_8*npz*pz))+(((0.242)*pz))+(((-0.242)*gclwh14_2*pz*rxp1_2))+(((-0.034969)*gclwh14_2*rxp1_2))+(((-0.014641)*gclwh8_2*pz*r21))+(((-2.562175e-5)*gclwh10_14*r22))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((-0.010431727625)*gclwh14_3*rxp1_2))+(((0.0035)*gclwh10_14*npz*pz))+(((-0.00175)*gclwh8_14*pp*r21))+(((-2.562175e-5)*gclwh8_14*r21))+(((-0.0006311195213125)*gclwh8_3*r21))+(((2.0)*gclwh6_2*npx*(pz*pz)))+(((-0.0284653125)*gclwh8_3*pp*r21))+(((-2.0)*gclwh8_3*npy*pp*pz))+(((-0.0021156245)*gclwh3_2*r20))+(((0.0006311195213125)*gclwh1_3*r21))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0284653125)*gclwh10_3*pp*r22))+(((-0.0577473125)*gclwh1_3*pp*r21))+(((-0.001039511)*gclwh6_8*r20))+(((0.0035)*gclwh6_14*npx*pz))+(((2.0)*gclwh8_2*npy*(pz*pz)))+((gclwh3_2*pp*pz*r20))+(((-0.071)*gclwh8_8*pp*r21))+(((0.242)*gclwh4_2*pz*rxp2_2))+(((-2.0)*gclwh1_3*npy*pp*pz))+(((0.0021156245)*gclwh1_2*r21))+((gclwh10_3*r22*(pp*pp)))+(((-0.1445)*gclwh8_2*pp*r21))+(((-0.0021156245)*gclwh6_2*r20))+(((-0.001039511)*gclwh10_8*r22))+(((0.086212625)*gclwh10_3*npz*pz))+(((-0.289)*gclwh3_2*npx*pz))+((gclwh1_3*r21*(pp*pp)))+(((-0.0284653125)*gclwh6_3*pp*r20))+(((0.242)*gclwh14_3*pp*rxp1_2))+(((-0.0006311195213125)*gclwh10_3*r22))+(((0.289)*gclwh1_2*npy*pz))+(((2.0)*gclwh3_3*npx*pp*pz))+(((-0.071)*gclwh10_8*pp*r22))+(((-0.014641)*gclwh6_2*pz*r20))+(((0.1445)*gclwh3_2*pp*r20))+(((-0.014641)*gclwh3_2*pz*r20))+(((-1.0)*gclwh6_2*pp*pz*r20))+(((0.017182)*gclwh4_8*rxp2_2))+(((-0.0021156245)*gclwh8_2*r21))+(((-0.001039511)*gclwh8_8*r21))+(((0.086212625)*gclwh1_3*npy*pz))+(((-0.1445)*gclwh1_2*pp*r21))+(((0.0004235)*gclwh4_14*rxp2_2))+(((-0.034969)*gclwh12_2*rxp0_2))+(((-0.1445)*gclwh6_2*pp*r20))+(((0.086212625)*gclwh6_3*npx*pz))+(((0.289)*gclwh6_2*npx*pz))+(((0.010431727625)*gclwh4_3*rxp2_2))+(((-2.562175e-5)*gclwh6_14*r20))+(((0.014641)*gclwh1_2*pz*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-0.071)*gclwh6_8*pp*r20))+(((0.142)*gclwh6_8*npx*pz))+(((-0.242)*gclwh12_2*pz*rxp0_2))+(((-2.0)*gclwh6_3*npx*pp*pz))+((gclwh6_3*r20*(pp*pp)))+(((0.034969)*gclwh4_2*rxp2_2))+(((-0.017182)*gclwh12_8*rxp0_2))+(((-1.0)*gclwh8_2*pp*pz*r21))+(((0.289)*gclwh8_2*npy*pz))+(((-0.00175)*gclwh10_14*pp*r22))+(((-0.0006311195213125)*gclwh3_3*r20))+(((-0.00175)*gclwh6_14*pp*r20))+(((-0.242)*gclwh4_3*pp*rxp2_2))+((gclwh8_3*r21*(pp*pp))));
op[62]=((0.022253)+(((-0.0035)*gclwh6_14*x765))+(((-1.0)*gclwh6_8*x806))+(((-1.0)*gclwh10_14*x861))+(((-0.077)*gclwh10_8*x768))+((gclwh4_14*x825))+(((-0.001127357)*x859))+(((-0.0035)*gclwh8_14*x776))+(((0.018634)*x839))+(((-0.077)*gclwh8_8*x776))+(((0.154)*gclwh10_8*x775))+(((-1.0)*gclwh6_14*x828))+(((0.154)*gclwh8_8*x767))+(((-0.001127357)*x789))+((gclwh10_14*npz*x755))+(((0.154)*gclwh6_8*x782))+(((-1.0)*gclwh8_14*x818))+((gclwh6_14*npx*x755))+(((-0.077)*gclwh6_8*x765))+(((-0.0035)*gclwh10_14*x768))+((gclwh8_14*npy*x755))+(((-0.018634)*x856)));
op[63]=((-0.085914375)+(((0.088723)*gclwh6_3*x765))+(((-1.0)*gclwh1_3*x812))+((gclwh6_3*x820))+((gclwh14_3*x815))+((gclwh6_2*x798))+((gclwh3_2*x798))+(((-1.0)*gclwh4_3*x827))+(((0.307)*gclwh6_2*x765))+(((0.177446)*gclwh3_3*x782))+((gclwh3_3*x820))+(((-1.0)*gclwh1_2*x787))+(((0.088723)*gclwh10_3*x768))+((gclwh6_10*x802))+(((-0.578)*gclwh8_8*x767))+((gclwh10_3*x799))+(((0.307)*gclwh8_2*x776))+(((0.004231249)*x859))+((gclwh10_10*x783))+((x776*x814))+(((-0.069938)*x839))+((x768*x834))+((x768*x822))+(((-0.578)*gclwh10_8*x775))+((gclwh12_10*x794))+((gclwh14_2*x764))+((gclwh8_3*x812))+((gclwh3_2*npx*x770))+(((0.004231249)*x789))+(((-0.177446)*gclwh10_3*x775))+(((-0.177446)*gclwh1_3*x767))+(((-0.177446)*gclwh8_3*x767))+(((0.088723)*gclwh1_3*x776))+((gclwh6_8*x858))+(((-0.614)*gclwh8_2*x767))+((x765*x766))+(((0.307)*gclwh1_2*x776))+(((0.069938)*x856))+(((-1.0)*gclwh6_2*npx*x770))+(((-1.0)*gclwh4_2*x832))+(((-0.088723)*gclwh3_3*x765))+((x765*x848))+((gclwh14_10*x786))+((gclwh8_10*x905))+((gclwh12_2*x758))+(((-4.0)*gclwh6_10*x782))+(((-0.307)*gclwh3_2*x765))+((gclwh8_10*x781))+(((-4.0)*gclwh10_10*x775))+(((-0.614)*gclwh1_2*x767))+(((-0.578)*gclwh6_8*x782))+(((-1.0)*gclwh4_10*x810))+(((0.088723)*gclwh8_3*x776))+(((-4.0)*gclwh8_10*x767))+((gclwh8_2*x787))+(((-0.177446)*gclwh6_3*x782)));
op[64]=((-0.0076521875)+(((-0.02783)*x847))+((gclwh8_12*x813))+(((-0.23)*gclwh6_12*x782))+(((0.001683715)*x826))+(((0.02783)*gclwh14_12*rxp1_2))+(((-0.23)*gclwh8_12*x767))+((gclwh10_10*x768))+((gclwh10_12*x797))+(((0.115)*gclwh6_12*x765))+((gclwh8_10*x776))+(((0.115)*gclwh10_12*x768))+(((-0.23)*gclwh10_12*x775))+x972+x968+(((-1.0)*x965))+(((0.115)*gclwh8_12*x776))+(((0.02783)*x824))+((gclwh6_10*x765))+(((-1.0)*x971)));
op[65]=((0.033235)+(((-0.0035)*gclwh6_14*npx*pz))+(((2.562175e-5)*gclwh10_14*r22))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((0.006)*gclwh8_8*pp*r21))+(((0.242)*pz))+(((-0.242)*gclwh14_2*pz*rxp1_2))+(((0.038934625)*gclwh10_3*npz*pz))+(((-0.034969)*gclwh14_2*rxp1_2))+(((-0.0002850209223125)*gclwh3_3*r20))+(((-0.012)*gclwh8_8*npy*pz))+(((0.006)*gclwh10_8*pp*r22))+(((-0.014641)*gclwh8_2*pz*r21))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((-0.0035)*gclwh8_14*npy*pz))+(((2.562175e-5)*gclwh6_14*r20))+(((8.7846e-5)*gclwh8_8*r21))+(((2.0)*gclwh6_2*npx*(pz*pz)))+(((-0.0048263125)*gclwh8_3*pp*r21))+(((0.038934625)*gclwh1_3*npy*pz))+(((8.7846e-5)*gclwh6_8*r20))+(((-2.0)*gclwh8_3*npy*pp*pz))+(((2.562175e-5)*gclwh8_14*r21))+(((-0.0021156245)*gclwh3_2*r20))+(((0.00175)*gclwh6_14*pp*r20))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0002850209223125)*gclwh6_3*r20))+(((2.0)*gclwh8_2*npy*(pz*pz)))+((gclwh3_2*pp*pz*r20))+(((0.242)*gclwh4_2*pz*rxp2_2))+(((-2.0)*gclwh1_3*npy*pp*pz))+(((0.0021156245)*gclwh1_2*r21))+((gclwh10_3*r22*(pp*pp)))+(((-0.1445)*gclwh8_2*pp*r21))+(((-0.0021156245)*gclwh6_2*r20))+(((-0.0004235)*gclwh4_14*rxp2_2))+(((-0.0048263125)*gclwh6_3*pp*r20))+(((-0.004711089625)*gclwh14_3*rxp1_2))+(((-0.289)*gclwh3_2*npx*pz))+((gclwh1_3*r21*(pp*pp)))+(((0.0002850209223125)*gclwh1_3*r21))+(((-0.038934625)*gclwh3_3*npx*pz))+(((0.242)*gclwh14_3*pp*rxp1_2))+(((0.001452)*gclwh12_8*rxp0_2))+(((-0.0048263125)*gclwh10_3*pp*r22))+(((0.289)*gclwh1_2*npy*pz))+(((2.0)*gclwh3_3*npx*pp*pz))+(((-0.014641)*gclwh6_2*pz*r20))+(((0.1445)*gclwh3_2*pp*r20))+(((0.004711089625)*gclwh4_3*rxp2_2))+(((-0.014641)*gclwh3_2*pz*r20))+(((-1.0)*gclwh6_2*pp*pz*r20))+(((0.038934625)*gclwh6_3*npx*pz))+(((0.0341083125)*gclwh3_3*pp*r20))+(((-0.0021156245)*gclwh8_2*r21))+(((0.00175)*gclwh10_14*pp*r22))+(((0.038934625)*gclwh8_3*npy*pz))+(((-0.1445)*gclwh1_2*pp*r21))+(((-0.012)*gclwh6_8*npx*pz))+(((0.00175)*gclwh8_14*pp*r21))+(((-0.034969)*gclwh12_2*rxp0_2))+(((-0.1445)*gclwh6_2*pp*r20))+(((-0.0341083125)*gclwh1_3*pp*r21))+(((0.006)*gclwh6_8*pp*r20))+(((0.289)*gclwh6_2*npx*pz))+(((0.014641)*gclwh1_2*pz*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-0.242)*gclwh12_2*pz*rxp0_2))+(((-0.0035)*gclwh10_14*npz*pz))+(((-2.0)*gclwh6_3*npx*pp*pz))+(((8.7846e-5)*gclwh10_8*r22))+((gclwh6_3*r20*(pp*pp)))+(((0.034969)*gclwh4_2*rxp2_2))+(((-0.001452)*gclwh4_8*rxp2_2))+(((-1.0)*gclwh8_2*pp*pz*r21))+(((0.289)*gclwh8_2*npy*pz))+(((-0.242)*gclwh4_3*pp*rxp2_2))+(((-0.012)*gclwh10_8*npz*pz))+(((-0.0002850209223125)*gclwh10_3*r22))+(((-0.0002850209223125)*gclwh8_3*r21))+((gclwh8_3*r21*(pp*pp))));
op[66]=((-0.055488)+(((0.1445)*gclwh9_0*pp*r21))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((0.1445)*gclwh11_0*pp*r22))+(((0.0284653125)*gclwh9_1*pp*r21))+(((0.242)*pz))+(((-0.086212625)*gclwh7_1*npx*pz))+(((2.0)*gclwh9_1*npy*pp*pz))+(((-2.562175e-5)*gclwh7_15*r20))+(((0.0035)*gclwh11_15*npz*pz))+(((-0.289)*gclwh11_0*npz*pz))+(((-0.1445)*gclwh0_0*pp*r21))+((gclwh2_0*pp*pz*r20))+(((-0.313)*gclwh9_11*pp*r21))+((gclwh7_0*pp*pz*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.0035)*gclwh9_15*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((-0.313)*gclwh7_11*pp*r20))+(((0.0284653125)*gclwh11_1*pp*r22))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((-0.242)*gclwh5_0*pz*rxp2_2))+(((0.242)*gclwh13_0*pz*rxp0_2))+(((-2.562175e-5)*gclwh9_15*r21))+(((-0.289)*gclwh2_0*npx*pz))+(((0.014641)*gclwh0_0*pz*r21))+(((0.1445)*gclwh2_0*pp*r20))+(((-0.00175)*gclwh11_15*pp*r22))+(((-2.562175e-5)*gclwh11_15*r22))+(((-0.014641)*gclwh2_0*pz*r20))+(((0.0021156245)*gclwh7_0*r20))+(((-1.0)*gclwh9_1*r21*(pp*pp)))+(((0.0006311195213125)*gclwh11_1*r22))+(((0.626)*gclwh7_11*npx*pz))+(((-0.075746)*gclwh13_11*rxp0_2))+(((-0.289)*gclwh9_0*npy*pz))+(((-0.086212625)*gclwh2_1*npx*pz))+(((-0.010431727625)*gclwh5_1*rxp2_2))+(((-0.289)*gclwh7_0*npx*pz))+(((-0.004582633)*gclwh11_11*r22))+(((-0.034969)*gclwh5_0*rxp2_2))+(((0.0284653125)*gclwh7_1*pp*r20))+(((0.626)*gclwh9_11*npy*pz))+(((0.1445)*gclwh7_0*pp*r20))+(((-0.242)*gclwh13_1*pp*rxp0_2))+(((0.242)*gclwh5_1*pp*rxp2_2))+(((-2.0)*gclwh9_0*npy*(pz*pz)))+(((2.0)*gclwh2_1*npx*pp*pz))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-0.0004235)*gclwh13_15*rxp0_2))+(((0.0021156245)*gclwh9_0*r21))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+((gclwh11_0*pp*pz*r22))+(((-0.004582633)*gclwh9_11*r21))+(((-0.0021156245)*gclwh2_0*r20))+(((0.010431727625)*gclwh15_1*rxp1_2))+(((0.014641)*gclwh9_0*pz*r21))+(((-0.086212625)*gclwh11_1*npz*pz))+(((-0.313)*gclwh11_11*pp*r22))+(((0.0006311195213125)*gclwh0_1*r21))+(((0.075746)*gclwh5_11*rxp2_2))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((0.014641)*gclwh7_0*pz*r20))+(((-0.086212625)*gclwh9_1*npy*pz))+(((0.014641)*gclwh11_0*pz*r22))+(((-0.00175)*gclwh9_15*pp*r21))+((gclwh0_1*r21*(pp*pp)))+(((-0.0577473125)*gclwh0_1*pp*r21))+(((-1.0)*gclwh7_1*r20*(pp*pp)))+(((0.626)*gclwh11_11*npz*pz))+(((0.034969)*gclwh15_0*rxp1_2))+(((2.0)*gclwh7_1*npx*pp*pz))+(((-0.242)*gclwh15_1*pp*rxp1_2))+(((0.289)*gclwh0_0*npy*pz))+(((0.0021156245)*gclwh11_0*r22))+(((0.010431727625)*gclwh13_1*rxp0_2))+(((-0.004582633)*gclwh7_11*r20))+(((-0.00175)*gclwh7_15*pp*r20))+(((0.242)*gclwh15_0*pz*rxp1_2))+(((0.0021156245)*gclwh0_0*r21))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.0577473125)*gclwh2_1*pp*r20))+(((0.034969)*gclwh13_0*rxp0_2))+(((0.086212625)*gclwh0_1*npy*pz))+(((-2.0)*gclwh7_0*npx*(pz*pz)))+(((0.0035)*gclwh7_15*npx*pz))+(((0.0006311195213125)*gclwh7_1*r20))+((gclwh9_0*pp*pz*r21))+(((0.0006311195213125)*gclwh9_1*r21))+(((-0.0006311195213125)*gclwh2_1*r20)));
op[67]=((-0.0159868125)+((gclwh11_9*x819))+((gclwh13_9*x788))+((gclwh7_11*x809))+((gclwh11_13*x795))+(((-1.0)*gclwh9_7*x838))+((gclwh13_11*x756))+((gclwh9_9*x777))+((gclwh9_9*x776))+(((0.1445)*gclwh9_11*x776))+((gclwh5_7*x757))+((gclwh15_9*x773))+(((0.1445)*gclwh11_11*x768))+((gclwh7_9*x836))+(((-1.0)*x767*x792))+(((0.192)*gclwh11_13*x768))+(((0.0035)*gclwh11_7*x775))+(((0.1445)*gclwh7_11*x765))+((gclwh11_9*x768))+(((-1.0)*gclwh15_7*x791))+(((0.002811072)*gclwh7_13*r20))+(((-0.384)*gclwh11_13*x775))+(((-1.0)*gclwh7_7*x801))+(((-1.0)*gclwh13_7*x805))+(((-0.00175)*gclwh9_7*x776))+(((-1.0)*x782*x831))+(((-1.0)*gclwh5_9*x779))+(((-0.046464)*gclwh5_13*rxp2_2))+((gclwh15_13*x793))+(((-0.00175)*gclwh11_7*x768))+(((0.0021156245)*x841))+(((0.0035)*gclwh7_7*x782))+(((-2.0)*gclwh9_9*x767))+((gclwh11_11*x762))+(((-0.00175)*gclwh7_7*x765))+(((-1.0)*x780*x782))+(((-1.0)*gclwh11_7*x808))+(((0.0035)*gclwh9_7*x767))+(((-0.384)*gclwh7_13*x782))+(((0.046464)*gclwh13_13*rxp0_2))+((gclwh7_9*x765))+(((-1.0)*x775*x846))+(((-1.0)*x775*x845))+(((0.192)*gclwh7_13*x765))+(((-1.0)*gclwh5_11*x804)));
op[68]=((0.085914375)+((gclwh13_9*x794))+((gclwh15_9*x786))+(((-1.0)*gclwh7_0*x798))+(((-1.0)*gclwh15_1*x815))+(((-0.578)*gclwh11_11*x775))+(((-1.0)*gclwh0_0*x787))+(((-4.0)*gclwh7_9*x782))+((gclwh2_0*npx*x770))+(((0.069938)*x837))+((gclwh5_1*x827))+(((-1.0)*gclwh9_1*x812))+((gclwh7_11*x858))+((x768*x846))+((x768*x845))+(((0.088723)*gclwh0_1*x776))+(((-1.0)*gclwh0_1*x812))+(((-1.0)*gclwh7_1*x820))+(((-1.0)*gclwh15_0*x764))+((gclwh11_9*x783))+(((-4.0)*gclwh11_9*x775))+(((0.177446)*gclwh2_1*x782))+((gclwh9_9*x781))+(((-4.0)*gclwh9_9*x767))+(((-0.578)*gclwh9_11*x767))+(((0.177446)*gclwh11_1*x775))+(((-0.088723)*gclwh2_1*x765))+((gclwh2_0*x798))+(((-1.0)*gclwh9_0*x787))+(((0.177446)*gclwh9_1*x767))+((x765*x780))+(((-0.307)*gclwh9_0*x776))+((gclwh7_9*x802))+((gclwh9_9*x905))+(((-0.177446)*gclwh0_1*x767))+((gclwh11_0*npz*x770))+(((0.307)*gclwh0_0*x776))+((gclwh5_0*x832))+(((-0.614)*gclwh0_0*x767))+((x765*x831))+(((-0.578)*gclwh7_11*x782))+(((-0.307)*gclwh2_0*x765))+(((-0.307)*gclwh11_0*x768))+(((-1.0)*gclwh11_1*x799))+(((-0.069938)*x860))+(((0.004231249)*x841))+(((0.004231249)*x849))+(((-0.307)*gclwh7_0*x765))+(((0.177446)*gclwh7_1*x782))+(((-1.0)*gclwh5_9*x810))+(((0.614)*gclwh9_0*x767))+(((-0.088723)*gclwh7_1*x765))+(((-1.0)*gclwh11_0*x835))+(((-0.088723)*r21*x774))+((gclwh7_0*npx*x770))+((x776*x792))+(((-0.088723)*gclwh11_1*x768))+((gclwh2_1*x820))+(((-1.0)*gclwh13_0*x758))+(((-1.0)*gclwh13_1*x785)));
op[69]=((0.022253)+(((0.077)*gclwh7_11*x765))+((gclwh7_11*x806))+((gclwh9_15*x818))+(((0.0035)*gclwh7_15*x765))+(((-0.154)*gclwh9_11*x767))+(((0.0035)*gclwh9_15*x776))+(((-1.0)*gclwh9_15*npy*x755))+(((-1.0)*gclwh7_15*npx*x755))+((gclwh7_15*x828))+(((0.018634)*x837))+(((0.0035)*gclwh11_15*x768))+(((0.077)*gclwh11_11*x768))+(((-0.154)*gclwh7_11*x782))+((gclwh11_15*x861))+(((-0.018634)*x860))+((gclwh13_15*x759))+(((0.001127357)*x849))+(((0.001127357)*x841))+(((0.077)*gclwh9_11*x776))+(((-0.154)*gclwh11_11*x775))+(((-1.0)*gclwh11_15*npz*x755)));
op[70]=((-0.033235)+(((0.00175)*gclwh11_15*pp*r22))+(((0.1445)*gclwh9_0*pp*r21))+(((-0.004711089625)*gclwh5_1*rxp2_2))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((0.1445)*gclwh11_0*pp*r22))+(((0.057112)*gclwh5_11*rxp2_2))+(((-0.0035)*gclwh11_15*npz*pz))+(((0.242)*pz))+(((0.0002850209223125)*gclwh0_1*r21))+(((0.0002850209223125)*gclwh11_1*r22))+(((0.472)*gclwh9_11*npy*pz))+(((-0.038934625)*gclwh2_1*npx*pz))+(((-0.236)*gclwh7_11*pp*r20))+(((2.0)*gclwh9_1*npy*pp*pz))+(((-0.289)*gclwh11_0*npz*pz))+(((-0.1445)*gclwh0_0*pp*r21))+((gclwh2_0*pp*pz*r20))+(((-0.038934625)*gclwh11_1*npz*pz))+(((0.0002850209223125)*gclwh7_1*r20))+((gclwh7_0*pp*pz*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.472)*gclwh7_11*npx*pz))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((0.0048263125)*gclwh7_1*pp*r20))+(((-0.242)*gclwh5_0*pz*rxp2_2))+(((0.242)*gclwh13_0*pz*rxp0_2))+(((-0.289)*gclwh2_0*npx*pz))+(((0.004711089625)*gclwh13_1*rxp0_2))+(((0.004711089625)*gclwh15_1*rxp1_2))+(((0.014641)*gclwh0_0*pz*r21))+(((0.1445)*gclwh2_0*pp*r20))+(((-0.014641)*gclwh2_0*pz*r20))+(((0.0021156245)*gclwh7_0*r20))+(((-1.0)*gclwh9_1*r21*(pp*pp)))+(((0.00175)*gclwh9_15*pp*r21))+(((-0.289)*gclwh9_0*npy*pz))+(((-0.289)*gclwh7_0*npx*pz))+(((0.0048263125)*gclwh11_1*pp*r22))+(((-0.034969)*gclwh5_0*rxp2_2))+(((0.0004235)*gclwh13_15*rxp0_2))+(((0.0002850209223125)*gclwh9_1*r21))+(((0.1445)*gclwh7_0*pp*r20))+(((-0.242)*gclwh13_1*pp*rxp0_2))+(((0.242)*gclwh5_1*pp*rxp2_2))+(((2.562175e-5)*gclwh7_15*r20))+(((-2.0)*gclwh9_0*npy*(pz*pz)))+(((2.0)*gclwh2_1*npx*pp*pz))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-0.038934625)*gclwh7_1*npx*pz))+(((0.0021156245)*gclwh9_0*r21))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+(((-0.003455276)*gclwh9_11*r21))+((gclwh11_0*pp*pz*r22))+(((-0.057112)*gclwh13_11*rxp0_2))+(((-0.0021156245)*gclwh2_0*r20))+(((-0.0341083125)*gclwh0_1*pp*r21))+(((0.014641)*gclwh9_0*pz*r21))+(((-0.236)*gclwh11_11*pp*r22))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((0.014641)*gclwh7_0*pz*r20))+(((0.014641)*gclwh11_0*pz*r22))+(((0.0341083125)*gclwh2_1*pp*r20))+(((0.0048263125)*gclwh9_1*pp*r21))+(((-0.0002850209223125)*gclwh2_1*r20))+((gclwh0_1*r21*(pp*pp)))+(((-1.0)*gclwh7_1*r20*(pp*pp)))+(((0.038934625)*gclwh0_1*npy*pz))+(((2.562175e-5)*gclwh11_15*r22))+(((-0.0035)*gclwh9_15*npy*pz))+(((0.472)*gclwh11_11*npz*pz))+(((0.034969)*gclwh15_0*rxp1_2))+(((2.0)*gclwh7_1*npx*pp*pz))+(((-0.242)*gclwh15_1*pp*rxp1_2))+(((0.289)*gclwh0_0*npy*pz))+(((0.0021156245)*gclwh11_0*r22))+(((-0.003455276)*gclwh7_11*r20))+(((-0.003455276)*gclwh11_11*r22))+(((-0.236)*gclwh9_11*pp*r21))+(((0.242)*gclwh15_0*pz*rxp1_2))+(((0.0021156245)*gclwh0_0*r21))+(((-0.038934625)*gclwh9_1*npy*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.034969)*gclwh13_0*rxp0_2))+(((-2.0)*gclwh7_0*npx*(pz*pz)))+(((-0.0035)*gclwh7_15*npx*pz))+((gclwh9_0*pp*pz*r21))+(((0.00175)*gclwh7_15*pp*r20))+(((2.562175e-5)*gclwh9_15*r21)));
IkReal x976=(pp*r20);
IkReal x977=(gclwh11_13*r22);
IkReal x978=(gclwh9_7*r21);
IkReal x979=(gclwh9_11*r21);
IkReal x980=((0.00175)*pp);
IkReal x981=(npx*pz);
IkReal x982=(npz*pz);
IkReal x983=((1.0)*pp);
IkReal x984=(gclwh11_9*r22);
IkReal x985=(gclwh11_11*r22);
IkReal x986=(npy*pz);
IkReal x987=(gclwh9_9*r21);
IkReal x988=(gclwh11_7*r22);
IkReal x989=((0.1445)*pp);
op[71]=((-0.0076521875)+(((0.23)*gclwh11_13*x982))+(((2.0)*gclwh11_9*x982))+(((-2.562175e-5)*x978))+(((-0.014641)*x987))+(((-0.014641)*x984))+(((-0.0004235)*gclwh15_7*rxp1_2))+(((-2.562175e-5)*x988))+(((0.0035)*gclwh7_7*x981))+(((0.289)*gclwh7_11*x981))+(((-0.242)*gclwh15_9*rxp1_2))+(((0.289)*gclwh11_11*x982))+(((-0.014641)*gclwh7_9*r20))+(((-0.00175)*gclwh7_7*x976))+(((-0.1445)*gclwh7_11*x976))+(((-0.0021156245)*gclwh7_11*r20))+(((-0.034969)*gclwh13_11*rxp0_2))+(((2.0)*gclwh9_9*x986))+(((-1.0)*gclwh7_9*x976))+(((0.034969)*gclwh5_11*rxp2_2))+(((-0.0021156245)*x985))+(((-1.0)*x978*x980))+(((-0.02783)*gclwh13_13*rxp0_2))+(((0.289)*gclwh9_11*x986))+(((2.0)*gclwh7_9*x981))+(((-0.0021156245)*x979))+(((-0.115)*pp*x977))+(((-0.0004235)*gclwh13_7*rxp0_2))+(((0.0035)*gclwh9_7*x986))+(((0.23)*gclwh7_13*x981))+(((-0.001683715)*gclwh7_13*r20))+(((0.02783)*gclwh5_13*rxp2_2))+(((-0.242)*gclwh13_9*rxp0_2))+(((-2.562175e-5)*gclwh7_7*r20))+(((0.0004235)*gclwh5_7*rxp2_2))+(((-1.0)*x980*x988))+(((0.242)*gclwh5_9*rxp2_2))+(((-1.0)*x979*x989))+(((-0.115)*gclwh7_13*x976))+(((0.0035)*gclwh11_7*x982))+(((-0.001683715)*x977))+(((-1.0)*x985*x989))+(((-1.0)*x983*x984))+(((-1.0)*x983*x987))+(((-0.02783)*gclwh15_13*rxp1_2)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x990=htj1*htj1;
CheckValue<IkReal> x991=IKPowWithIntegerCheck(((1.0)+x990),-1);
if(!x991.valid){
continue;
}
cj1array[numsolutions]=((x991.value)*(((1.0)+(((-1.0)*x990)))));
CheckValue<IkReal> x992=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x992.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x992.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x993=htj2*htj2;
CheckValue<IkReal> x994=IKPowWithIntegerCheck(((1.0)+x993),-1);
if(!x994.valid){
continue;
}
cj2array[numsolutions]=((x994.value)*(((1.0)+(((-1.0)*x993)))));
CheckValue<IkReal> x995=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x995.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x995.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x996=htj3*htj3;
CheckValue<IkReal> x997=IKPowWithIntegerCheck(((1.0)+x996),-1);
if(!x997.valid){
continue;
}
cj3array[numsolutions]=((x997.value)*(((1.0)+(((-1.0)*x996)))));
CheckValue<IkReal> x998=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x998.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x998.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x999=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x999);
rxp1_0=(pz*r11);
rxp1_1=(r01*x999);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1000=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1000);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1000);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(r22,-1);
if(!x1001.valid){
continue;
}
CheckValue<IkReal> x1002=IKPowWithIntegerCheck(sj3,-1);
if(!x1002.valid){
continue;
}
cj4array[0]=((x1001.value)*(x1002.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=(((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1003=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1003);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1003);
IkReal x1004=(cj3*sj4);
IkReal x1005=((16.0)*r00);
IkReal x1006=(cj1*sj2);
IkReal x1007=(cj2*sj1);
IkReal x1008=(r02*sj4);
IkReal x1009=(r01*sj3);
IkReal x1010=(cj4*r10);
IkReal x1011=((4.0)*r01);
IkReal x1012=((4.0)*r11);
IkReal x1013=(cj3*cj4);
IkReal x1014=((4.0)*r12);
IkReal x1015=((4.0)*sj3);
IkReal x1016=(r11*sj3);
IkReal x1017=(r10*x1015);
IkReal x1018=(r00*x1015);
IkReal x1019=((8.0)*cj4*r00);
IkReal x1020=((12.0)*r12*sj4);
IkReal x1021=(x1004*x1012);
IkReal x1022=(x1004*x1011);
IkReal x1023=((12.0)*r02*x1013);
IkReal x1024=((12.0)*r12*x1013);
IkReal x1025=(cj4*x1006*x1011);
IkReal x1026=(cj4*x1007*x1011);
IkReal x1027=(cj4*x1007*x1012);
IkReal x1028=(cj4*x1006*x1012);
IkReal x1029=(x1006*x1020);
IkReal x1030=(x1007*x1020);
IkReal x1031=((12.0)*x1006*x1008);
IkReal x1032=((12.0)*x1007*x1008);
IkReal x1033=(x1032+x1031);
IkReal x1034=(x1018+x1027+x1028);
IkReal x1035=(x1030+x1023+x1029);
IkReal x1036=(x1025+x1026+x1021);
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*x1016))+(((-1.0)*cj4*x1005*x1007))+(((-1.0)*cj4*x1005*x1006))+(((-16.0)*r10*x1004)))))))+(((0.5)*(IKabs(((((4.0)*x1006*x1008))+x1036+(((-1.0)*x1017))+(((-1.0)*x1013*x1014))+(((4.0)*x1007*x1008)))))))+(((0.5)*(IKabs(((((-1.0)*sj4*x1006*x1014))+(((-1.0)*x1034))+x1022+(((-4.0)*r02*x1013))+(((-1.0)*sj4*x1007*x1014)))))))+(((0.5)*(IKabs(((((-16.0)*x1009))+(((-1.0)*x1004*x1005))+(((16.0)*x1007*x1010))+(((16.0)*x1006*x1010)))))))+(IKabs(((((-1.0)*x1006*x1019))+(((-8.0)*x1016))+(((-8.0)*r10*x1004))+(((-1.0)*x1007*x1019)))))+(((0.5)*(IKabs((x1033+x1036+(((-1.0)*x1017))+(((-1.0)*x1024)))))))+(((0.5)*(IKabs(((((-1.0)*x1035))+x1034+(((-1.0)*x1022)))))))+(((0.5)*(IKabs(((((-1.0)*x1036))+x1017+x1033+(((-1.0)*x1024)))))))+(IKabs(((((-8.0)*x1009))+(((-8.0)*r00*x1004))+(((8.0)*x1007*x1010))+(((8.0)*x1006*x1010)))))+(((0.5)*(IKabs(((((-1.0)*x1035))+(((-1.0)*x1034))+x1022))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1037=(cj2*sj1);
IkReal x1038=(cj1*sj2);
IkReal x1039=(cj3*sj4);
IkReal x1040=(r11*sj3);
IkReal x1041=((4.0)*r10*sj3);
IkReal x1042=((8.0)*cj4*r00);
IkReal x1043=(cj3*cj4*r12);
IkReal x1044=((4.0)*r02*sj4);
IkReal x1045=((16.0)*cj4*r00);
IkReal x1046=((12.0)*r02*sj4);
IkReal x1047=((4.0)*cj4*r01);
IkReal x1048=((4.0)*r11*x1039);
IkReal x1049=((12.0)*x1043);
IkReal x1050=((4.0)*x1043);
IkReal x1051=(x1038*x1047);
IkReal x1052=(x1037*x1047);
IkReal x1053=(x1038*x1046);
IkReal x1054=(x1037*x1046);
IkReal x1055=(x1037*x1044);
IkReal x1056=(x1038*x1044);
IkReal x1057=(x1053+x1054);
IkReal x1058=(x1055+x1056);
IkReal x1059=(x1051+x1052+x1048);
IkReal x1060=((((-8.0)*x1040))+(((-1.0)*x1038*x1042))+(((-1.0)*x1037*x1042))+(((-8.0)*r10*x1039)));
op[0]=((((-1.0)*x1050))+x1058+x1059+(((-1.0)*x1041)));
op[1]=x1060;
op[2]=(x1057+x1059+(((-1.0)*x1041))+(((-1.0)*x1049)));
op[3]=((((-16.0)*r10*x1039))+(((-1.0)*x1038*x1045))+(((-1.0)*x1037*x1045))+(((-16.0)*x1040)));
op[4]=((((-1.0)*x1059))+x1057+x1041+(((-1.0)*x1049)));
op[5]=x1060;
op[6]=((((-1.0)*x1059))+(((-1.0)*x1050))+x1058+x1041);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1061=(cj1*sj2);
IkReal x1062=(cj2*sj1);
IkReal x1063=(cj3*sj4);
IkReal x1064=(r01*sj3);
IkReal x1065=((4.0)*r00*sj3);
IkReal x1066=((8.0)*cj4*r10);
IkReal x1067=((16.0)*cj4*r10);
IkReal x1068=((12.0)*r12*sj4);
IkReal x1069=(cj3*cj4*r02);
IkReal x1070=((4.0)*r12*sj4);
IkReal x1071=((4.0)*cj4*r11);
IkReal x1072=((4.0)*r01*x1063);
IkReal x1073=((12.0)*x1069);
IkReal x1074=((4.0)*x1069);
IkReal x1075=(x1062*x1071);
IkReal x1076=(x1061*x1071);
IkReal x1077=(x1061*x1068);
IkReal x1078=(x1062*x1068);
IkReal x1079=(x1062*x1070);
IkReal x1080=(x1061*x1070);
IkReal x1081=(x1076+x1075+x1065);
IkReal x1082=(x1078+x1077+x1073);
IkReal x1083=(x1079+x1074+x1080);
IkReal x1084=((((-8.0)*r00*x1063))+((x1061*x1066))+((x1062*x1066))+(((-8.0)*x1064)));
j5evalpoly[0]=(x1081+(((htj5*htj5*htj5)*((((x1061*x1067))+((x1062*x1067))+(((-16.0)*r00*x1063))+(((-16.0)*x1064))))))+(((htj5*htj5)*((x1081+(((-1.0)*x1082))+(((-1.0)*x1072))))))+(((htj5*htj5*htj5*htj5)*((x1072+(((-1.0)*x1081))+(((-1.0)*x1082))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1072+(((-1.0)*x1083))+(((-1.0)*x1081))))))+((htj5*x1084))+((x1084*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1083))+(((-1.0)*x1072)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1085=(cj4*cj5);
IkReal x1086=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x1086))+(((-1.0)*r01*x1085))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1086))+((r11*x1085))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1086))+(((-1.0)*r01*x1085))+((r02*sj4))))+IKsqr((((r10*x1086))+((r11*x1085))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1086))+(((-1.0)*r01*x1085))+((r02*sj4))), (((r10*x1086))+((r11*x1085))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1087=IKcos(j0);
IkReal x1088=IKsin(j0);
IkReal x1089=((1.0)*sj3);
IkReal x1090=(cj4*r02);
IkReal x1091=(cj3*cj5);
IkReal x1092=(r11*sj4);
IkReal x1093=(r11*sj5);
IkReal x1094=((1.0)*sj2);
IkReal x1095=((1.0)*r10);
IkReal x1096=(cj5*r00);
IkReal x1097=(sj4*sj5);
IkReal x1098=((0.1535)*sj2);
IkReal x1099=((1.0)*r00);
IkReal x1100=((1.0)*cj2);
IkReal x1101=(cj4*r12);
IkReal x1102=(r01*sj4);
IkReal x1103=((0.1535)*cj2);
IkReal x1104=(cj4*sj5);
IkReal x1105=(cj5*r10);
IkReal x1106=(r01*sj5);
IkReal x1107=(cj1*x1087);
IkReal x1108=(cj1*x1088);
IkReal x1109=(sj1*x1087);
IkReal x1110=(sj1*x1088);
IkReal x1111=((1.0)*cj4*cj5);
evalcond[0]=((((-1.0)*r11*x1111))+x1087+((r12*sj4))+(((-1.0)*x1095*x1104)));
evalcond[1]=((((-1.0)*r01*x1111))+(((-1.0)*x1088))+((r02*sj4))+(((-1.0)*x1099*x1104)));
evalcond[2]=(((sj3*x1106))+((cj3*r00*x1097))+(((-1.0)*x1089*x1096))+((x1091*x1102))+(((-1.0)*x1094*x1107))+(((-1.0)*x1100*x1109))+((cj3*x1090)));
evalcond[3]=(((cj3*r10*x1097))+(((-1.0)*x1089*x1105))+(((-1.0)*x1094*x1108))+(((-1.0)*x1100*x1110))+((cj3*x1101))+((x1091*x1092))+((sj3*x1093)));
evalcond[4]=((((-1.0)*x1091*x1099))+(((-1.0)*x1089*x1090))+(((-1.0)*cj5*x1089*x1102))+(((-1.0)*x1094*x1109))+((cj2*x1107))+((cj3*x1106))+(((-1.0)*r00*x1089*x1097)));
evalcond[5]=((((-1.0)*x1091*x1095))+(((-1.0)*cj5*x1089*x1092))+(((-1.0)*x1089*x1101))+(((-1.0)*x1094*x1110))+((cj2*x1108))+(((-1.0)*r10*x1089*x1097))+((cj3*x1093)));
evalcond[6]=((((-0.00175)*x1088))+(((-1.0)*x1098*x1109))+(((0.121)*x1096))+(((-1.0)*px))+(((0.1445)*x1109))+(((0.0385)*x1107))+(((-0.121)*x1106))+((x1103*x1107)));
evalcond[7]=((((-1.0)*x1098*x1110))+(((0.121)*x1105))+(((0.00175)*x1087))+(((-1.0)*py))+(((0.1445)*x1110))+(((-0.121)*x1093))+(((0.0385)*x1108))+((x1103*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1112=IKPowWithIntegerCheck(cj3,-1);
if(!x1112.valid){
continue;
}
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(r22,-1);
if(!x1113.valid){
continue;
}
cj4array[0]=((-1.0)*(x1112.value)*(x1113.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1114=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1114);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1114);
IkReal x1115=(cj3*sj4);
IkReal x1116=((16.0)*r00);
IkReal x1117=(cj1*sj2);
IkReal x1118=(cj2*sj1);
IkReal x1119=(r02*sj4);
IkReal x1120=(r01*sj3);
IkReal x1121=(cj4*r10);
IkReal x1122=((4.0)*r01);
IkReal x1123=((4.0)*r11);
IkReal x1124=(cj3*cj4);
IkReal x1125=((4.0)*r12);
IkReal x1126=((4.0)*sj3);
IkReal x1127=(r11*sj3);
IkReal x1128=(r10*x1126);
IkReal x1129=(r00*x1126);
IkReal x1130=((8.0)*cj4*r00);
IkReal x1131=((12.0)*r12*sj4);
IkReal x1132=(x1115*x1123);
IkReal x1133=(x1115*x1122);
IkReal x1134=((12.0)*r02*x1124);
IkReal x1135=((12.0)*r12*x1124);
IkReal x1136=(cj4*x1117*x1122);
IkReal x1137=(cj4*x1118*x1122);
IkReal x1138=(cj4*x1118*x1123);
IkReal x1139=(cj4*x1117*x1123);
IkReal x1140=(x1117*x1131);
IkReal x1141=(x1118*x1131);
IkReal x1142=((12.0)*x1117*x1119);
IkReal x1143=((12.0)*x1118*x1119);
IkReal x1144=(x1142+x1143);
IkReal x1145=(x1129+x1139+x1138);
IkReal x1146=(x1140+x1141+x1134);
IkReal x1147=(x1132+x1137+x1136);
j5eval[0]=((IKabs(((((-8.0)*x1120))+(((-8.0)*r00*x1115))+(((8.0)*x1118*x1121))+(((8.0)*x1117*x1121)))))+(((0.5)*(IKabs((x1133+(((-1.0)*x1145))+(((-1.0)*x1146)))))))+(((0.5)*(IKabs((x1147+x1144+(((-1.0)*x1135))+(((-1.0)*x1128)))))))+(((0.5)*(IKabs(((((-1.0)*cj4*x1116*x1117))+(((-1.0)*cj4*x1116*x1118))+(((-16.0)*r10*x1115))+(((-16.0)*x1127)))))))+(((0.5)*(IKabs(((((-4.0)*r02*x1124))+x1133+(((-1.0)*x1145))+(((-1.0)*sj4*x1117*x1125))+(((-1.0)*sj4*x1118*x1125)))))))+(((0.5)*(IKabs(((((16.0)*x1118*x1121))+(((-16.0)*x1120))+(((-1.0)*x1115*x1116))+(((16.0)*x1117*x1121)))))))+(((0.5)*(IKabs((x1144+x1128+(((-1.0)*x1147))+(((-1.0)*x1135)))))))+(((0.5)*(IKabs((x1147+(((4.0)*x1118*x1119))+(((-1.0)*x1128))+(((4.0)*x1117*x1119))+(((-1.0)*x1124*x1125)))))))+(((0.5)*(IKabs((x1145+(((-1.0)*x1146))+(((-1.0)*x1133)))))))+(IKabs(((((-1.0)*x1117*x1130))+(((-8.0)*x1127))+(((-8.0)*r10*x1115))+(((-1.0)*x1118*x1130))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1148=(cj2*sj1);
IkReal x1149=(cj1*sj2);
IkReal x1150=(cj3*sj4);
IkReal x1151=(r11*sj3);
IkReal x1152=((4.0)*r10*sj3);
IkReal x1153=((8.0)*cj4*r00);
IkReal x1154=(cj3*cj4*r12);
IkReal x1155=((4.0)*r02*sj4);
IkReal x1156=((16.0)*cj4*r00);
IkReal x1157=((12.0)*r02*sj4);
IkReal x1158=((4.0)*cj4*r01);
IkReal x1159=((4.0)*r11*x1150);
IkReal x1160=((12.0)*x1154);
IkReal x1161=((4.0)*x1154);
IkReal x1162=(x1149*x1158);
IkReal x1163=(x1148*x1158);
IkReal x1164=(x1149*x1157);
IkReal x1165=(x1148*x1157);
IkReal x1166=(x1148*x1155);
IkReal x1167=(x1149*x1155);
IkReal x1168=(x1164+x1165);
IkReal x1169=(x1166+x1167);
IkReal x1170=(x1159+x1162+x1163);
IkReal x1171=((((-1.0)*x1149*x1153))+(((-8.0)*x1151))+(((-1.0)*x1148*x1153))+(((-8.0)*r10*x1150)));
op[0]=(x1169+x1170+(((-1.0)*x1152))+(((-1.0)*x1161)));
op[1]=x1171;
op[2]=(x1168+x1170+(((-1.0)*x1152))+(((-1.0)*x1160)));
op[3]=((((-1.0)*x1149*x1156))+(((-1.0)*x1148*x1156))+(((-16.0)*r10*x1150))+(((-16.0)*x1151)));
op[4]=(x1152+x1168+(((-1.0)*x1170))+(((-1.0)*x1160)));
op[5]=x1171;
op[6]=(x1152+x1169+(((-1.0)*x1170))+(((-1.0)*x1161)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1172=(cj1*sj2);
IkReal x1173=(cj2*sj1);
IkReal x1174=(cj3*sj4);
IkReal x1175=(r01*sj3);
IkReal x1176=((4.0)*r00*sj3);
IkReal x1177=((8.0)*cj4*r10);
IkReal x1178=((16.0)*cj4*r10);
IkReal x1179=((12.0)*r12*sj4);
IkReal x1180=(cj3*cj4*r02);
IkReal x1181=((4.0)*r12*sj4);
IkReal x1182=((4.0)*cj4*r11);
IkReal x1183=((4.0)*r01*x1174);
IkReal x1184=((12.0)*x1180);
IkReal x1185=((4.0)*x1180);
IkReal x1186=(x1173*x1182);
IkReal x1187=(x1172*x1182);
IkReal x1188=(x1172*x1179);
IkReal x1189=(x1173*x1179);
IkReal x1190=(x1173*x1181);
IkReal x1191=(x1172*x1181);
IkReal x1192=(x1186+x1187+x1176);
IkReal x1193=(x1188+x1189+x1184);
IkReal x1194=(x1185+x1191+x1190);
IkReal x1195=(((x1173*x1177))+(((-8.0)*x1175))+(((-8.0)*r00*x1174))+((x1172*x1177)));
j5evalpoly[0]=((((htj5*htj5)*((x1192+(((-1.0)*x1193))+(((-1.0)*x1183))))))+x1192+(((htj5*htj5*htj5)*((((x1173*x1178))+(((-16.0)*x1175))+((x1172*x1178))+(((-16.0)*r00*x1174))))))+(((htj5*htj5*htj5*htj5)*((x1183+(((-1.0)*x1192))+(((-1.0)*x1193))))))+(((-1.0)*x1194))+((x1195*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1183))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1183+(((-1.0)*x1194))+(((-1.0)*x1192))))))+((htj5*x1195)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1196=(cj4*cj5);
IkReal x1197=(cj4*sj5);
if( IKabs(((((-1.0)*r01*x1196))+(((-1.0)*r00*x1197))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1197))+((r11*x1196))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1196))+(((-1.0)*r00*x1197))+((r02*sj4))))+IKsqr((((r10*x1197))+((r11*x1196))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1196))+(((-1.0)*r00*x1197))+((r02*sj4))), (((r10*x1197))+((r11*x1196))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1198=IKcos(j0);
IkReal x1199=IKsin(j0);
IkReal x1200=((1.0)*sj3);
IkReal x1201=(cj4*r02);
IkReal x1202=(cj3*cj5);
IkReal x1203=(r11*sj4);
IkReal x1204=(r11*sj5);
IkReal x1205=((1.0)*sj2);
IkReal x1206=((1.0)*r10);
IkReal x1207=(cj5*r00);
IkReal x1208=(sj4*sj5);
IkReal x1209=((0.1535)*sj2);
IkReal x1210=((1.0)*r00);
IkReal x1211=((1.0)*cj2);
IkReal x1212=(cj4*r12);
IkReal x1213=(r01*sj4);
IkReal x1214=((0.1535)*cj2);
IkReal x1215=(cj4*sj5);
IkReal x1216=(cj5*r10);
IkReal x1217=(r01*sj5);
IkReal x1218=(cj1*x1198);
IkReal x1219=(cj1*x1199);
IkReal x1220=(sj1*x1198);
IkReal x1221=(sj1*x1199);
IkReal x1222=((1.0)*cj4*cj5);
evalcond[0]=(x1198+(((-1.0)*x1206*x1215))+(((-1.0)*r11*x1222))+((r12*sj4)));
evalcond[1]=((((-1.0)*r01*x1222))+((r02*sj4))+(((-1.0)*x1210*x1215))+(((-1.0)*x1199)));
evalcond[2]=((((-1.0)*x1205*x1218))+(((-1.0)*x1200*x1207))+((sj3*x1217))+((cj3*x1201))+((x1202*x1213))+((cj3*r00*x1208))+(((-1.0)*x1211*x1220)));
evalcond[3]=(((cj3*r10*x1208))+(((-1.0)*x1200*x1216))+((x1202*x1203))+(((-1.0)*x1205*x1219))+((cj3*x1212))+((sj3*x1204))+(((-1.0)*x1211*x1221)));
evalcond[4]=((((-1.0)*x1202*x1210))+(((-1.0)*cj5*x1200*x1213))+(((-1.0)*x1200*x1201))+((cj3*x1217))+((cj2*x1218))+(((-1.0)*r00*x1200*x1208))+(((-1.0)*x1205*x1220)));
evalcond[5]=((((-1.0)*x1200*x1212))+(((-1.0)*x1202*x1206))+((cj3*x1204))+((cj2*x1219))+(((-1.0)*cj5*x1200*x1203))+(((-1.0)*r10*x1200*x1208))+(((-1.0)*x1205*x1221)));
evalcond[6]=(((x1214*x1218))+(((-0.121)*x1217))+(((0.1445)*x1220))+(((-1.0)*px))+(((0.121)*x1207))+(((-1.0)*x1209*x1220))+(((-0.00175)*x1199))+(((0.0385)*x1218)));
evalcond[7]=(((x1214*x1219))+(((-0.121)*x1204))+(((0.1445)*x1221))+(((-1.0)*py))+(((0.121)*x1216))+(((-1.0)*x1209*x1221))+(((0.00175)*x1198))+(((0.0385)*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1223=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1223);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1223);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1224=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1224);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1224);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1225=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1225);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1225);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1226=IKPowWithIntegerCheck(r22,-1);
if(!x1226.valid){
continue;
}
cj4array[0]=((-1.0)*(x1226.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1227=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1227);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1227);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1229 = IKatan2WithCheck(IkReal((r01*sj4)),IkReal((r00*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1229.valid){
continue;
}
IkReal x1228=x1229.value;
j5array[0]=((-1.0)*x1228);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1228)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKsin(j5))))+((r11*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1230=(cj4*sj5);
IkReal x1231=(cj4*cj5);
if( IKabs(((((-1.0)*r01*x1231))+(((-1.0)*r00*x1230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1230))+((r11*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1231))+(((-1.0)*r00*x1230))))+IKsqr((((r10*x1230))+((r11*x1231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1231))+(((-1.0)*r00*x1230))), (((r10*x1230))+((r11*x1231))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1232=IKcos(j0);
IkReal x1233=IKsin(j0);
IkReal x1234=(cj1*cj2);
IkReal x1235=((0.0385)*cj1);
IkReal x1236=((1.0)*cj5);
IkReal x1237=(r11*sj5);
IkReal x1238=((0.121)*cj5);
IkReal x1239=(r01*sj5);
IkReal x1240=(sj1*x1232);
IkReal x1241=((1.0)*cj4*sj5);
IkReal x1242=(sj1*sj2*x1233);
evalcond[0]=(x1232+(((-1.0)*r10*x1241))+(((-1.0)*cj4*r11*x1236)));
evalcond[1]=((((-1.0)*x1233))+(((-1.0)*cj4*r01*x1236))+(((-1.0)*r00*x1241)));
evalcond[2]=((((-1.0)*r00*x1236))+x1239+(((-1.0)*sj2*x1240))+((x1232*x1234)));
evalcond[3]=(x1237+(((-1.0)*x1242))+((x1233*x1234))+(((-1.0)*r10*x1236)));
evalcond[4]=(((r00*x1238))+(((0.1535)*x1232*x1234))+(((-1.0)*px))+(((-0.121)*x1239))+(((-0.1535)*sj2*x1240))+(((0.1445)*x1240))+((x1232*x1235))+(((-0.00175)*x1233)));
evalcond[5]=((((0.00175)*x1232))+(((0.1535)*x1233*x1234))+((r10*x1238))+(((-1.0)*py))+((x1233*x1235))+(((-0.121)*x1237))+(((-0.1535)*x1242))+(((0.1445)*sj1*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1243=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1243);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1243);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(r22,-1);
if(!x1244.valid){
continue;
}
cj4array[0]=((x1244.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1245=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1245);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1245);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1246=((-1.0)*sj4);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal((r01*x1246)),IkReal((r00*x1246)),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
IkReal x1247=x1248.value;
j5array[0]=((-1.0)*x1247);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1247)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1249=((1.0)*sj4);
evalcond[0]=((((-1.0)*r10*x1249*(IKsin(j5))))+(((-1.0)*r11*x1249*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1250=(cj4*sj5);
IkReal x1251=(cj4*cj5);
if( IKabs(((((-1.0)*r01*x1251))+(((-1.0)*r00*x1250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1251))+((r10*x1250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1251))+(((-1.0)*r00*x1250))))+IKsqr((((r11*x1251))+((r10*x1250))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1251))+(((-1.0)*r00*x1250))), (((r11*x1251))+((r10*x1250))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1252=IKcos(j0);
IkReal x1253=IKsin(j0);
IkReal x1254=(cj5*r10);
IkReal x1255=(r11*sj5);
IkReal x1256=(cj5*r00);
IkReal x1257=((0.1535)*cj2);
IkReal x1258=((1.0)*cj4);
IkReal x1259=(r01*sj5);
IkReal x1260=(cj1*x1253);
IkReal x1261=(cj1*x1252);
IkReal x1262=(sj1*x1252);
IkReal x1263=(sj1*sj2*x1253);
evalcond[0]=((((-1.0)*cj5*r11*x1258))+x1252+(((-1.0)*r10*sj5*x1258)));
evalcond[1]=((((-1.0)*cj5*r01*x1258))+(((-1.0)*x1253))+(((-1.0)*r00*sj5*x1258)));
evalcond[2]=(x1256+((cj2*x1261))+(((-1.0)*x1259))+(((-1.0)*sj2*x1262)));
evalcond[3]=(x1254+((cj2*x1260))+(((-1.0)*x1263))+(((-1.0)*x1255)));
evalcond[4]=((((0.1445)*x1262))+(((0.121)*x1256))+(((-0.1535)*sj2*x1262))+(((-0.00175)*x1253))+(((0.0385)*x1261))+(((-0.121)*x1259))+(((-1.0)*px))+((x1257*x1261)));
evalcond[5]=((((0.121)*x1254))+(((-0.1535)*x1263))+(((0.0385)*x1260))+(((-0.121)*x1255))+(((0.00175)*x1252))+(((-1.0)*py))+(((0.1445)*sj1*x1253))+((x1257*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1264=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1264);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1264);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1265=IKPowWithIntegerCheck(r22,-1);
if(!x1265.valid){
continue;
}
cj4array[0]=((x1265.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1266=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1266);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1266);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1267=((-1.0)*sj4);
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal((r01*x1267)),IkReal((r00*x1267)),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
IkReal x1268=x1269.value;
j5array[0]=((-1.0)*x1268);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1268)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1270=((1.0)*sj4);
evalcond[0]=((((-1.0)*r11*x1270*(IKcos(j5))))+(((-1.0)*r10*x1270*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1271=(cj4*sj5);
IkReal x1272=(cj4*cj5);
if( IKabs(((((-1.0)*r00*x1271))+(((-1.0)*r01*x1272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1271))+((r11*x1272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1271))+(((-1.0)*r01*x1272))))+IKsqr((((r10*x1271))+((r11*x1272))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1271))+(((-1.0)*r01*x1272))), (((r10*x1271))+((r11*x1272))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1273=IKcos(j0);
IkReal x1274=IKsin(j0);
IkReal x1275=((1.0)*sj2);
IkReal x1276=((1.0)*cj5);
IkReal x1277=(r11*sj5);
IkReal x1278=((1.0)*cj2);
IkReal x1279=((0.121)*cj5);
IkReal x1280=(r01*sj5);
IkReal x1281=(cj1*x1273);
IkReal x1282=(cj1*x1274);
IkReal x1283=(sj1*x1273);
IkReal x1284=((1.0)*cj4*sj5);
IkReal x1285=(sj1*x1274);
evalcond[0]=(x1273+(((-1.0)*cj4*r11*x1276))+(((-1.0)*r10*x1284)));
evalcond[1]=((((-1.0)*r00*x1284))+(((-1.0)*x1274))+(((-1.0)*cj4*r01*x1276)));
evalcond[2]=(x1280+(((-1.0)*r00*x1276))+(((-1.0)*x1275*x1281))+(((-1.0)*x1278*x1283)));
evalcond[3]=(x1277+(((-1.0)*x1275*x1282))+(((-1.0)*x1278*x1285))+(((-1.0)*r10*x1276)));
evalcond[4]=((((-0.121)*x1280))+(((-0.00175)*x1274))+(((0.1445)*x1283))+(((-1.0)*px))+((r00*x1279))+(((0.0385)*x1281)));
evalcond[5]=(((r10*x1279))+(((0.1445)*x1285))+(((-1.0)*py))+(((-0.121)*x1277))+(((0.00175)*x1273))+(((0.0385)*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1286=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1286);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1286);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(r22,-1);
if(!x1287.valid){
continue;
}
cj4array[0]=((-1.0)*(x1287.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1288=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1288);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1288);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal((r01*sj4)),IkReal((r00*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
IkReal x1289=x1290.value;
j5array[0]=((-1.0)*x1289);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1289)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKsin(j5))))+((r11*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1291=(cj4*sj5);
IkReal x1292=(cj4*cj5);
if( IKabs(((((-1.0)*r00*x1291))+(((-1.0)*r01*x1292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1292))+((r10*x1291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1291))+(((-1.0)*r01*x1292))))+IKsqr((((r11*x1292))+((r10*x1291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1291))+(((-1.0)*r01*x1292))), (((r11*x1292))+((r10*x1291))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1293=IKcos(j0);
IkReal x1294=IKsin(j0);
IkReal x1295=((1.0)*sj5);
IkReal x1296=((1.0)*sj2);
IkReal x1297=((1.0)*cj2);
IkReal x1298=((0.121)*sj5);
IkReal x1299=(cj5*r00);
IkReal x1300=(cj5*r10);
IkReal x1301=(cj1*x1293);
IkReal x1302=(cj1*x1294);
IkReal x1303=(sj1*x1293);
IkReal x1304=((1.0)*cj4*cj5);
IkReal x1305=(sj1*x1294);
evalcond[0]=(x1293+(((-1.0)*cj4*r10*x1295))+(((-1.0)*r11*x1304)));
evalcond[1]=((((-1.0)*r01*x1304))+(((-1.0)*x1294))+(((-1.0)*cj4*r00*x1295)));
evalcond[2]=((((-1.0)*r01*x1295))+x1299+(((-1.0)*x1297*x1303))+(((-1.0)*x1296*x1301)));
evalcond[3]=(x1300+(((-1.0)*x1297*x1305))+(((-1.0)*r11*x1295))+(((-1.0)*x1296*x1302)));
evalcond[4]=((((-1.0)*r01*x1298))+(((0.121)*x1299))+(((-0.00175)*x1294))+(((-1.0)*px))+(((0.0385)*x1301))+(((0.1445)*x1303)));
evalcond[5]=((((0.121)*x1300))+(((-1.0)*r11*x1298))+(((-1.0)*py))+(((0.00175)*x1293))+(((0.0385)*x1302))+(((0.1445)*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1306=IKPowWithIntegerCheck(r22,-1);
if(!x1306.valid){
continue;
}
CheckValue<IkReal> x1307=IKPowWithIntegerCheck(sj3,-1);
if(!x1307.valid){
continue;
}
cj4array[0]=((x1306.value)*(x1307.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=(((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1308=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1308);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1308);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1309=((0.484)*r10);
IkReal x1310=((0.484)*r00);
IkReal x1311=((12.0)*py);
IkReal x1312=((12.0)*px);
IkReal x1313=((0.028)*cj4);
IkReal x1314=(cj4*r00);
IkReal x1315=(sj1*sj2);
IkReal x1316=((0.308)*cj1);
IkReal x1317=(cj1*cj4);
IkReal x1318=((0.614)*r11);
IkReal x1319=(cj4*r01);
IkReal x1320=((0.578)*sj1);
IkReal x1321=((2.312)*sj1);
IkReal x1322=(cj4*r10);
IkReal x1323=((1.156)*sj1);
IkReal x1324=(cj4*r11);
IkReal x1325=((1.228)*cj2);
IkReal x1326=((2.456)*cj2);
IkReal x1327=((0.007)*x1324);
IkReal x1328=((0.007)*x1319);
IkReal x1329=((0.154)*r11*x1317);
IkReal x1330=(x1320*x1324);
IkReal x1331=(x1319*x1320);
IkReal x1332=((0.154)*r01*x1317);
IkReal x1333=((0.614)*x1315*x1319);
IkReal x1334=(cj4*x1315*x1318);
IkReal x1335=(cj2*x1317*x1318);
IkReal x1336=((0.614)*cj2*r01*x1317);
IkReal x1337=(x1309+x1327+x1333);
IkReal x1338=(x1336+x1331+x1332);
IkReal x1339=(x1310+x1328+x1329+x1335+x1330);
j5eval[0]=((((0.5)*(IKabs((x1337+(((-1.0)*x1311))+(((-1.0)*x1338)))))))+(IKabs(((((1.228)*x1314*x1315))+(((-1.0)*x1314*x1323))+(((-1.0)*x1314*x1316))+(((-0.968)*r11))+(((0.014)*x1322))+(((-1.0)*cj1*x1314*x1325)))))+(((0.5)*(IKabs((x1338+(((-1.0)*x1311))+(((-1.0)*x1337)))))))+(((0.5)*(IKabs((x1334+(((-1.0)*x1312))+(((-1.0)*x1339)))))))+(IKabs((((x1316*x1322))+((r10*x1317*x1325))+((x1322*x1323))+(((-0.968)*r01))+(((0.014)*x1314))+(((-1.228)*x1315*x1322)))))+(((0.5)*(IKabs((x1339+(((-1.0)*x1312))+(((-1.0)*x1334)))))))+(((0.5)*(IKabs((x1338+(((-4.0)*py))+(((-1.0)*x1337)))))))+(((0.5)*(IKabs((((r00*x1313))+(((-1.936)*r01))+((r10*x1317*x1326))+(((0.616)*r10*x1317))+((x1321*x1322))+(((-2.456)*x1315*x1322)))))))+(((0.5)*(IKabs(((((-1.936)*r11))+(((-1.0)*x1314*x1321))+((r10*x1313))+(((2.456)*x1314*x1315))+(((-0.616)*cj1*x1314))+(((-1.0)*cj1*x1314*x1326)))))))+(((0.5)*(IKabs((x1334+(((-4.0)*px))+(((-1.0)*x1339))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1340=((0.484)*r10);
IkReal x1341=((12.0)*py);
IkReal x1342=((4.0)*py);
IkReal x1343=(cj4*r10);
IkReal x1344=(cj4*r01);
IkReal x1345=((0.007)*cj4*r11);
IkReal x1346=(cj4*r00*sj1);
IkReal x1347=(cj1*cj4*r00);
IkReal x1348=((0.578)*sj1*x1344);
IkReal x1349=((0.154)*cj1*x1344);
IkReal x1350=(sj2*x1346);
IkReal x1351=((0.614)*sj1*sj2*x1344);
IkReal x1352=((0.614)*cj1*cj2*x1344);
IkReal x1353=(x1340+x1345+x1351);
IkReal x1354=(x1348+x1349+x1352);
IkReal x1355=((((-0.308)*x1347))+(((-0.968)*r11))+(((-1.156)*x1346))+(((-1.228)*cj2*x1347))+(((1.228)*x1350))+(((0.014)*x1343)));
op[0]=(x1354+(((-1.0)*x1353))+(((-1.0)*x1342)));
op[1]=x1355;
op[2]=(x1354+(((-1.0)*x1353))+(((-1.0)*x1341)));
op[3]=((((-2.312)*x1346))+(((-1.936)*r11))+(((2.456)*x1350))+(((-0.616)*x1347))+(((-2.456)*cj2*x1347))+(((0.028)*x1343)));
op[4]=(x1353+(((-1.0)*x1354))+(((-1.0)*x1341)));
op[5]=x1355;
op[6]=(x1353+(((-1.0)*x1354))+(((-1.0)*x1342)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1356=((0.484)*r00);
IkReal x1357=((12.0)*px);
IkReal x1358=((4.0)*px);
IkReal x1359=(cj1*cj4);
IkReal x1360=(cj4*r00);
IkReal x1361=((0.614)*r11);
IkReal x1362=(cj4*sj1);
IkReal x1363=(r10*sj2);
IkReal x1364=(cj2*r10);
IkReal x1365=((0.007)*cj4*r01);
IkReal x1366=((0.154)*r11*x1359);
IkReal x1367=((0.578)*r11*x1362);
IkReal x1368=(cj2*x1359*x1361);
IkReal x1369=(sj2*x1361*x1362);
IkReal x1370=(x1356+x1366+x1367+x1365+x1368);
IkReal x1371=((((-1.228)*x1362*x1363))+(((1.228)*x1359*x1364))+(((1.156)*r10*x1362))+(((-0.968)*r01))+(((0.308)*r10*x1359))+(((0.014)*x1360)));
j5evalpoly[0]=(((x1371*(htj5*htj5*htj5*htj5*htj5)))+x1370+(((-1.0)*x1358))+(((htj5*htj5*htj5*htj5)*((x1369+(((-1.0)*x1357))+(((-1.0)*x1370))))))+(((htj5*htj5*htj5)*(((((0.028)*x1360))+(((-2.456)*x1362*x1363))+(((-1.936)*r01))+(((0.616)*r10*x1359))+(((2.312)*r10*x1362))+(((2.456)*x1359*x1364))))))+((htj5*x1371))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1369+(((-1.0)*x1358))+(((-1.0)*x1370))))))+(((htj5*htj5)*((x1370+(((-1.0)*x1357))+(((-1.0)*x1369))))))+(((-1.0)*x1369)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1372=(cj4*sj5);
IkReal x1373=(cj4*cj5);
if( IKabs(((((-1.0)*r00*x1372))+(((-1.0)*r01*x1373)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1372))+((r11*x1373)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1372))+(((-1.0)*r01*x1373))))+IKsqr((((r10*x1372))+((r11*x1373))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1372))+(((-1.0)*r01*x1373))), (((r10*x1372))+((r11*x1373))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1374=IKcos(j0);
IkReal x1375=IKsin(j0);
IkReal x1376=((1.0)*cj5);
IkReal x1377=(cj3*r10);
IkReal x1378=(r11*sj5);
IkReal x1379=((1.0)*sj2);
IkReal x1380=(r00*sj3);
IkReal x1381=(sj4*sj5);
IkReal x1382=(cj3*r00);
IkReal x1383=((1.0)*cj2);
IkReal x1384=(r11*sj4);
IkReal x1385=(cj3*cj5);
IkReal x1386=(r01*sj4);
IkReal x1387=((0.1535)*cj2);
IkReal x1388=(r10*sj3);
IkReal x1389=((0.121)*cj5);
IkReal x1390=(r01*sj5);
IkReal x1391=(cj1*x1374);
IkReal x1392=(cj1*x1375);
IkReal x1393=((0.1535)*sj1*sj2);
IkReal x1394=(sj1*x1374);
IkReal x1395=((1.0)*cj4*sj5);
IkReal x1396=(sj1*x1375);
evalcond[0]=(x1374+(((-1.0)*r10*x1395))+(((-1.0)*cj4*r11*x1376)));
evalcond[1]=((((-1.0)*cj4*r01*x1376))+(((-1.0)*x1375))+(((-1.0)*r00*x1395)));
evalcond[2]=(((x1381*x1382))+(((-1.0)*x1383*x1394))+(((-1.0)*x1376*x1380))+((sj3*x1390))+((x1385*x1386))+(((-1.0)*x1379*x1391)));
evalcond[3]=(((sj3*x1378))+(((-1.0)*x1383*x1396))+(((-1.0)*x1376*x1388))+((x1377*x1381))+((x1384*x1385))+(((-1.0)*x1379*x1392)));
evalcond[4]=((((-1.0)*x1380*x1381))+((cj2*x1391))+((cj3*x1390))+(((-1.0)*x1376*x1382))+(((-1.0)*sj3*x1376*x1386))+(((-1.0)*x1379*x1394)));
evalcond[5]=(((cj2*x1392))+(((-1.0)*sj3*x1376*x1384))+((cj3*x1378))+(((-1.0)*x1376*x1377))+(((-1.0)*x1381*x1388))+(((-1.0)*x1379*x1396)));
evalcond[6]=((((-0.00175)*x1375))+(((0.0385)*x1391))+(((-1.0)*x1374*x1393))+(((-1.0)*px))+(((0.1445)*x1394))+(((-0.121)*x1390))+((x1387*x1391))+((r00*x1389)));
evalcond[7]=(((r10*x1389))+(((-0.121)*x1378))+(((-1.0)*x1375*x1393))+(((0.0385)*x1392))+(((-1.0)*py))+(((0.1445)*x1396))+((x1387*x1392))+(((0.00175)*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1397=IKPowWithIntegerCheck(cj3,-1);
if(!x1397.valid){
continue;
}
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(r22,-1);
if(!x1398.valid){
continue;
}
cj4array[0]=((-1.0)*(x1397.value)*(x1398.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1399=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1399);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1399);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1400=((0.484)*r10);
IkReal x1401=((0.484)*r00);
IkReal x1402=((12.0)*py);
IkReal x1403=((12.0)*px);
IkReal x1404=((0.028)*cj4);
IkReal x1405=(cj4*r00);
IkReal x1406=(sj1*sj2);
IkReal x1407=((0.308)*cj1);
IkReal x1408=(cj1*cj4);
IkReal x1409=((0.614)*r11);
IkReal x1410=(cj4*r01);
IkReal x1411=((0.578)*sj1);
IkReal x1412=((2.312)*sj1);
IkReal x1413=(cj4*r10);
IkReal x1414=((1.156)*sj1);
IkReal x1415=(cj4*r11);
IkReal x1416=((1.228)*cj2);
IkReal x1417=((2.456)*cj2);
IkReal x1418=((0.007)*x1415);
IkReal x1419=((0.007)*x1410);
IkReal x1420=((0.154)*r11*x1408);
IkReal x1421=(x1411*x1415);
IkReal x1422=(x1410*x1411);
IkReal x1423=((0.154)*r01*x1408);
IkReal x1424=((0.614)*x1406*x1410);
IkReal x1425=(cj4*x1406*x1409);
IkReal x1426=(cj2*x1408*x1409);
IkReal x1427=((0.614)*cj2*r01*x1408);
IkReal x1428=(x1424+x1418+x1400);
IkReal x1429=(x1423+x1422+x1427);
IkReal x1430=(x1421+x1420+x1426+x1419+x1401);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x1430))+x1425+(((-4.0)*px)))))))+(((0.5)*(IKabs((x1429+(((-4.0)*py))+(((-1.0)*x1428)))))))+(((0.5)*(IKabs(((((-1.0)*x1403))+x1430+(((-1.0)*x1425)))))))+(((0.5)*(IKabs(((((-1.0)*x1402))+x1428+(((-1.0)*x1429)))))))+(((0.5)*(IKabs(((((-1.0)*x1430))+(((-1.0)*x1403))+x1425)))))+(((0.5)*(IKabs(((((-1.0)*x1402))+x1429+(((-1.0)*x1428)))))))+(((0.5)*(IKabs(((((-1.936)*r11))+(((-0.616)*cj1*x1405))+(((-1.0)*cj1*x1405*x1417))+(((-1.0)*x1405*x1412))+((r10*x1404))+(((2.456)*x1405*x1406)))))))+(IKabs((((x1407*x1413))+((x1413*x1414))+(((-0.968)*r01))+(((-1.228)*x1406*x1413))+((r10*x1408*x1416))+(((0.014)*x1405)))))+(IKabs(((((1.228)*x1405*x1406))+(((-0.968)*r11))+(((-1.0)*x1405*x1407))+(((-1.0)*cj1*x1405*x1416))+(((-1.0)*x1405*x1414))+(((0.014)*x1413)))))+(((0.5)*(IKabs(((((-2.456)*x1406*x1413))+(((-1.936)*r01))+((x1412*x1413))+(((0.616)*r10*x1408))+((r00*x1404))+((r10*x1408*x1417))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1431=((0.484)*r10);
IkReal x1432=((12.0)*py);
IkReal x1433=((4.0)*py);
IkReal x1434=(cj4*r10);
IkReal x1435=(cj4*r01);
IkReal x1436=((0.007)*cj4*r11);
IkReal x1437=(cj4*r00*sj1);
IkReal x1438=(cj1*cj4*r00);
IkReal x1439=((0.578)*sj1*x1435);
IkReal x1440=((0.154)*cj1*x1435);
IkReal x1441=(sj2*x1437);
IkReal x1442=((0.614)*sj1*sj2*x1435);
IkReal x1443=((0.614)*cj1*cj2*x1435);
IkReal x1444=(x1436+x1431+x1442);
IkReal x1445=(x1439+x1443+x1440);
IkReal x1446=((((-0.308)*x1438))+(((-0.968)*r11))+(((-1.228)*cj2*x1438))+(((-1.156)*x1437))+(((1.228)*x1441))+(((0.014)*x1434)));
op[0]=((((-1.0)*x1433))+x1445+(((-1.0)*x1444)));
op[1]=x1446;
op[2]=((((-1.0)*x1432))+x1445+(((-1.0)*x1444)));
op[3]=((((-1.936)*r11))+(((-2.456)*cj2*x1438))+(((2.456)*x1441))+(((-2.312)*x1437))+(((0.028)*x1434))+(((-0.616)*x1438)));
op[4]=((((-1.0)*x1432))+x1444+(((-1.0)*x1445)));
op[5]=x1446;
op[6]=((((-1.0)*x1433))+x1444+(((-1.0)*x1445)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1447=((0.484)*r00);
IkReal x1448=((12.0)*px);
IkReal x1449=((4.0)*px);
IkReal x1450=(cj1*cj4);
IkReal x1451=(cj4*r00);
IkReal x1452=((0.614)*r11);
IkReal x1453=(cj4*sj1);
IkReal x1454=(r10*sj2);
IkReal x1455=(cj2*r10);
IkReal x1456=((0.007)*cj4*r01);
IkReal x1457=((0.154)*r11*x1450);
IkReal x1458=((0.578)*r11*x1453);
IkReal x1459=(cj2*x1450*x1452);
IkReal x1460=(sj2*x1452*x1453);
IkReal x1461=(x1456+x1457+x1458+x1459+x1447);
IkReal x1462=((((-1.228)*x1453*x1454))+(((1.156)*r10*x1453))+(((-0.968)*r01))+(((0.014)*x1451))+(((1.228)*x1450*x1455))+(((0.308)*r10*x1450)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x1460))+x1461+(((-1.0)*x1448))))))+(((-1.0)*x1460))+((htj5*x1462))+((x1462*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1461))+x1460+(((-1.0)*x1449))))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1461))+x1460+(((-1.0)*x1448))))))+x1461+(((htj5*htj5*htj5)*(((((2.456)*x1450*x1455))+(((-1.936)*r01))+(((0.616)*r10*x1450))+(((2.312)*r10*x1453))+(((-2.456)*x1453*x1454))+(((0.028)*x1451))))))+(((-1.0)*x1449)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1463=(cj4*sj5);
IkReal x1464=(cj4*cj5);
if( IKabs(((((-1.0)*r00*x1463))+(((-1.0)*r01*x1464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1464))+((r10*x1463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1463))+(((-1.0)*r01*x1464))))+IKsqr((((r11*x1464))+((r10*x1463))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1463))+(((-1.0)*r01*x1464))), (((r11*x1464))+((r10*x1463))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1465=IKcos(j0);
IkReal x1466=IKsin(j0);
IkReal x1467=((1.0)*cj5);
IkReal x1468=(cj3*r10);
IkReal x1469=(r11*sj5);
IkReal x1470=((1.0)*sj2);
IkReal x1471=(r00*sj3);
IkReal x1472=(sj4*sj5);
IkReal x1473=(cj3*r00);
IkReal x1474=((1.0)*cj2);
IkReal x1475=(r11*sj4);
IkReal x1476=(cj3*cj5);
IkReal x1477=(r01*sj4);
IkReal x1478=((0.1535)*cj2);
IkReal x1479=(r10*sj3);
IkReal x1480=((0.121)*cj5);
IkReal x1481=(r01*sj5);
IkReal x1482=(cj1*x1465);
IkReal x1483=(cj1*x1466);
IkReal x1484=((0.1535)*sj1*sj2);
IkReal x1485=(sj1*x1465);
IkReal x1486=((1.0)*cj4*sj5);
IkReal x1487=(sj1*x1466);
evalcond[0]=(x1465+(((-1.0)*cj4*r11*x1467))+(((-1.0)*r10*x1486)));
evalcond[1]=((((-1.0)*r00*x1486))+(((-1.0)*cj4*r01*x1467))+(((-1.0)*x1466)));
evalcond[2]=((((-1.0)*x1470*x1482))+((sj3*x1481))+((x1472*x1473))+(((-1.0)*x1474*x1485))+(((-1.0)*x1467*x1471))+((x1476*x1477)));
evalcond[3]=((((-1.0)*x1470*x1483))+((sj3*x1469))+(((-1.0)*x1474*x1487))+(((-1.0)*x1467*x1479))+((x1468*x1472))+((x1475*x1476)));
evalcond[4]=(((cj2*x1482))+((cj3*x1481))+(((-1.0)*x1470*x1485))+(((-1.0)*sj3*x1467*x1477))+(((-1.0)*x1467*x1473))+(((-1.0)*x1471*x1472)));
evalcond[5]=(((cj2*x1483))+(((-1.0)*x1470*x1487))+(((-1.0)*x1467*x1468))+((cj3*x1469))+(((-1.0)*sj3*x1467*x1475))+(((-1.0)*x1472*x1479)));
evalcond[6]=((((-0.121)*x1481))+((r00*x1480))+(((-1.0)*x1465*x1484))+(((-1.0)*px))+(((-0.00175)*x1466))+((x1478*x1482))+(((0.1445)*x1485))+(((0.0385)*x1482)));
evalcond[7]=((((0.00175)*x1465))+(((-1.0)*x1466*x1484))+(((-0.121)*x1469))+((r10*x1480))+(((-1.0)*py))+((x1478*x1483))+(((0.1445)*x1487))+(((0.0385)*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal(((0.121)*r20)),IkReal(((-0.121)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
IkReal x1488=((1.0)*(x1490.value));
if((((((0.014641)*(r21*r21)))+(((0.014641)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.014641)*(r21*r21)))+(((0.014641)*(r20*r20)))))),-1);
if(!x1491.valid){
continue;
}
if( (((x1491.value)*(((((-0.1535)*cj1*sj2))+(((-1.0)*pz))+(((-0.0385)*sj1))+(((-0.1535)*cj2*sj1))+(((0.1445)*cj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x1491.value)*(((((-0.1535)*cj1*sj2))+(((-1.0)*pz))+(((-0.0385)*sj1))+(((-0.1535)*cj2*sj1))+(((0.1445)*cj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1489=IKasin(((x1491.value)*(((((-0.1535)*cj1*sj2))+(((-1.0)*pz))+(((-0.0385)*sj1))+(((-0.1535)*cj2*sj1))+(((0.1445)*cj1))))));
j5array[0]=((((-1.0)*x1488))+(((-1.0)*x1489)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1488))+x1489);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1492=cj5*cj5;
IkReal x1493=r20*r20;
IkReal x1494=((1.0)*sj3);
IkReal x1495=((((-1.0)*x1494*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1492*x1494*(r21*r21)))+(((-1.0)*x1493*x1494))+((sj3*x1492*x1493)));
j4eval[0]=x1495;
j4eval[1]=IKsign(x1495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1496=cj5*cj5;
IkReal x1497=r20*r20;
IkReal x1498=(cj3*x1496);
IkReal x1499=(((cj3*x1497))+((cj3*(r22*r22)))+((x1498*(r21*r21)))+(((-1.0)*x1497*x1498))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1499;
j4eval[1]=IKsign(x1499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1500=cj1*cj1;
IkReal x1501=cj2*cj2;
IkReal x1502=(cj1*sj1);
IkReal x1503=((709784.0)*sj2);
IkReal x1504=(cj2*sj2);
IkReal x1505=((3.98701298701299)*sj2);
IkReal x1506=(cj2*x1500);
IkReal x1507=(x1500*x1501);
j0eval[0]=((3.99456814811486)+(((-1.0)*x1505))+(((-3.86107491124792)*x1500))+(((-4.23533905540826)*x1502*x1504))+(((3.98701298701299)*cj2*x1502))+(((-1.06228373702422)*sj2*x1502))+x1502+((x1500*x1505))+(((1.06228373702422)*x1506))+(((-2.11766952770413)*x1501))+(((4.23533905540826)*x1507)));
j0eval[1]=IKsign(((711129.0)+(((-1.0)*x1503))+(((-189112.0)*sj2*x1502))+(((-376996.0)*x1501))+(((753992.0)*x1507))+(((178024.0)*x1502))+((x1500*x1503))+(((-687364.0)*x1500))+(((-753992.0)*x1502*x1504))+(((709784.0)*cj2*x1502))+(((189112.0)*x1506))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1508=((1.0)*sj5);
IkReal x1509=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1509;
j0eval[1]=((IKabs(((((-1.0)*r01*x1508))+((cj5*r00)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*x1508))))));
j0eval[2]=IKsign(x1509);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1510=r20*r20;
IkReal x1511=cj5*cj5;
IkReal x1512=(cj5*r21);
IkReal x1513=(cj2*sj1);
IkReal x1514=(cj1*sj2);
IkReal x1515=(r20*sj5);
IkReal x1516=(((x1510*x1511))+(((-2.0)*x1512*x1515))+(((-1.0)*x1510))+(((-1.0)*x1511*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x1516;
j4eval[1]=((IKabs((((x1513*x1515))+((x1514*x1515))+((x1512*x1514))+((x1512*x1513)))))+(IKabs((((r22*x1513))+((r22*x1514))))));
j4eval[2]=IKsign(x1516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0474678447733665)*px))+(((5.20790068370649)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.20790068370649)*px))+(((0.0474678447733665)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0474678447733665)*px))+(((5.20790068370649)*py))))+IKsqr(((((5.20790068370649)*px))+(((0.0474678447733665)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0474678447733665)*px))+(((5.20790068370649)*py))), ((((5.20790068370649)*px))+(((0.0474678447733665)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1517=IKcos(j0);
IkReal x1518=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.192)*x1517))+(((-0.00175)*x1518)));
evalcond[1]=((((-1.0)*py))+(((0.192)*x1518))+(((0.00175)*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1519=((1.0)*cj5);
IkReal x1520=(((r01*sj5))+(((-1.0)*r00*x1519)));
j4eval[0]=x1520;
j4eval[1]=IKsign(x1520);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1519)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1521=cj5*cj5;
IkReal x1522=(r10*r20);
IkReal x1523=((1.0)*r21);
IkReal x1524=((1.0)*r20*sj5);
IkReal x1525=((((-1.0)*r11*x1521*x1523))+(((-1.0)*r12*r22))+((x1521*x1522))+(((-1.0)*cj5*r11*x1524))+(((-1.0)*cj5*r10*sj5*x1523))+(((-1.0)*x1522)));
j4eval[0]=x1525;
j4eval[1]=IKsign(x1525);
j4eval[2]=((IKabs(((((-1.0)*cj0*x1524))+(((-1.0)*cj0*cj5*x1523)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1526=cj5*cj5;
IkReal x1527=((1.0)*r00);
IkReal x1528=(cj5*r21);
IkReal x1529=((1.0)*cj0);
IkReal x1530=(r20*sj5);
IkReal x1531=((1.0)*r01);
IkReal x1532=(((r00*r20*x1526))+(((-1.0)*r21*x1526*x1531))+(((-1.0)*r02*r22))+(((-1.0)*sj5*x1527*x1528))+(((-1.0)*cj5*x1530*x1531))+(((-1.0)*r20*x1527)));
j4eval[0]=x1532;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x1529*x1530))+(((-1.0)*x1528*x1529))))));
j4eval[2]=IKsign(x1532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1533=cj5*cj5;
IkReal x1534=((1.0)*r00);
IkReal x1535=(cj5*r21);
IkReal x1536=((1.0)*cj0);
IkReal x1537=(r20*sj5);
IkReal x1538=((1.0)*r01);
CheckValue<IkReal> x1539 = IKatan2WithCheck(IkReal(((((-1.0)*x1535*x1536))+(((-1.0)*x1536*x1537)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r21*x1533*x1538))+(((-1.0)*cj5*x1537*x1538))+(((-1.0)*sj5*x1534*x1535))+(((-1.0)*r20*x1534))+((r00*r20*x1533)))),-1);
if(!x1540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1539.value)+(((1.5707963267949)*(x1540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1541=IKcos(j4);
IkReal x1542=IKsin(j4);
IkReal x1543=(cj5*r21);
IkReal x1544=(cj5*r11);
IkReal x1545=(r00*sj5);
IkReal x1546=(r20*sj5);
IkReal x1547=(cj5*r01);
IkReal x1548=(r10*sj5);
IkReal x1549=((1.0)*x1541);
IkReal x1550=((1.0)*x1542);
evalcond[0]=((((-1.0)*x1543*x1549))+(((-1.0)*x1546*x1549))+((r22*x1542)));
evalcond[1]=(cj0+(((-1.0)*x1548*x1549))+((r12*x1542))+(((-1.0)*x1544*x1549)));
evalcond[2]=((((-1.0)*x1546*x1550))+(((-1.0)*x1543*x1550))+(((-1.0)*r22*x1549)));
evalcond[3]=((((-1.0)*r02*x1549))+cj0+(((-1.0)*x1545*x1550))+(((-1.0)*x1547*x1550)));
evalcond[4]=(sj0+(((-1.0)*x1548*x1550))+(((-1.0)*x1544*x1550))+(((-1.0)*r12*x1549)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1547*x1549))+((r02*x1542))+(((-1.0)*x1545*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1551=cj5*cj5;
IkReal x1552=((1.0)*cj5);
IkReal x1553=(r20*sj5);
IkReal x1554=(r10*r20);
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(IKsign((((x1551*x1554))+(((-1.0)*x1554))+(((-1.0)*r11*r21*x1551))+(((-1.0)*r12*r22))+(((-1.0)*r10*r21*sj5*x1552))+(((-1.0)*r11*x1552*x1553)))),-1);
if(!x1555.valid){
continue;
}
CheckValue<IkReal> x1556 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*x1553))+(((-1.0)*cj0*r21*x1552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1555.value)))+(x1556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1557=IKcos(j4);
IkReal x1558=IKsin(j4);
IkReal x1559=(cj5*r21);
IkReal x1560=(cj5*r11);
IkReal x1561=(r00*sj5);
IkReal x1562=(r20*sj5);
IkReal x1563=(cj5*r01);
IkReal x1564=(r10*sj5);
IkReal x1565=((1.0)*x1557);
IkReal x1566=((1.0)*x1558);
evalcond[0]=((((-1.0)*x1559*x1565))+(((-1.0)*x1562*x1565))+((r22*x1558)));
evalcond[1]=(cj0+(((-1.0)*x1560*x1565))+((r12*x1558))+(((-1.0)*x1564*x1565)));
evalcond[2]=((((-1.0)*x1559*x1566))+(((-1.0)*x1562*x1566))+(((-1.0)*r22*x1565)));
evalcond[3]=((((-1.0)*r02*x1565))+cj0+(((-1.0)*x1563*x1566))+(((-1.0)*x1561*x1566)));
evalcond[4]=(sj0+(((-1.0)*x1560*x1566))+(((-1.0)*x1564*x1566))+(((-1.0)*r12*x1565)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1563*x1565))+((r02*x1558))+(((-1.0)*x1561*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1567=((1.0)*cj0);
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1567))+(((-1.0)*cj5*r21*x1567)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
CheckValue<IkReal> x1569=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1568.value)+(((1.5707963267949)*(x1569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1570=IKcos(j4);
IkReal x1571=IKsin(j4);
IkReal x1572=(cj5*r21);
IkReal x1573=(cj5*r11);
IkReal x1574=(r00*sj5);
IkReal x1575=(r20*sj5);
IkReal x1576=(cj5*r01);
IkReal x1577=(r10*sj5);
IkReal x1578=((1.0)*x1570);
IkReal x1579=((1.0)*x1571);
evalcond[0]=((((-1.0)*x1572*x1578))+(((-1.0)*x1575*x1578))+((r22*x1571)));
evalcond[1]=(cj0+(((-1.0)*x1573*x1578))+((r12*x1571))+(((-1.0)*x1577*x1578)));
evalcond[2]=((((-1.0)*x1572*x1579))+(((-1.0)*x1575*x1579))+(((-1.0)*r22*x1578)));
evalcond[3]=((((-1.0)*x1576*x1579))+(((-1.0)*r02*x1578))+cj0+(((-1.0)*x1574*x1579)));
evalcond[4]=(sj0+(((-1.0)*x1573*x1579))+(((-1.0)*x1577*x1579))+(((-1.0)*r12*x1578)));
evalcond[5]=((((-1.0)*x1576*x1578))+(((-1.0)*sj0))+(((-1.0)*x1574*x1578))+((r02*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.69363899664067)*py))+(((-0.132294506470619)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.69363899664067)*px))+(((0.132294506470619)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.69363899664067)*py))+(((-0.132294506470619)*px))))+IKsqr(((((-8.69363899664067)*px))+(((0.132294506470619)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.69363899664067)*py))+(((-0.132294506470619)*px))), ((((-8.69363899664067)*px))+(((0.132294506470619)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1580=IKcos(j0);
IkReal x1581=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.115)*x1580))+(((-0.00175)*x1581)));
evalcond[1]=((((0.00175)*x1580))+(((-1.0)*py))+(((-0.115)*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1582=((1.0)*cj5);
IkReal x1583=(((r01*sj5))+(((-1.0)*r00*x1582)));
j4eval[0]=x1583;
j4eval[1]=IKsign(x1583);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1582)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1584=((1.0)*cj5);
IkReal x1585=(((r11*sj5))+(((-1.0)*r10*x1584)));
j4eval[0]=x1585;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1584))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x1585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1586=cj5*cj5;
IkReal x1587=((1.0)*r20);
IkReal x1588=(cj5*r21);
IkReal x1589=(((cj5*r01*r20*sj5))+((r00*sj5*x1588))+((r00*r20))+((r01*r21*x1586))+((r02*r22))+(((-1.0)*r00*x1586*x1587)));
j4eval[0]=x1589;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x1587))+(((-1.0)*cj0*x1588))))));
j4eval[2]=IKsign(x1589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1590=cj5*cj5;
IkReal x1591=((1.0)*r20);
IkReal x1592=(cj5*r21);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*sj5*x1592))+(((-1.0)*r00*x1590*x1591))+((r00*r20))+((r01*r21*x1590))+((r02*r22)))),-1);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x1591))+(((-1.0)*cj0*x1592)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1593.value)))+(x1594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1595=IKcos(j4);
IkReal x1596=IKsin(j4);
IkReal x1597=((1.0)*sj0);
IkReal x1598=(r00*sj5);
IkReal x1599=(r20*sj5);
IkReal x1600=(r10*sj5);
IkReal x1601=((1.0)*x1595);
IkReal x1602=((1.0)*x1596);
IkReal x1603=(cj5*x1602);
evalcond[0]=((((-1.0)*x1599*x1601))+((r22*x1596))+(((-1.0)*cj5*r21*x1601)));
evalcond[1]=(cj0+((r12*x1596))+(((-1.0)*cj5*r11*x1601))+(((-1.0)*x1600*x1601)));
evalcond[2]=((((-1.0)*r21*x1603))+(((-1.0)*r22*x1601))+(((-1.0)*x1599*x1602)));
evalcond[3]=((((-1.0)*x1597))+(((-1.0)*cj5*r01*x1601))+((r02*x1596))+(((-1.0)*x1598*x1601)));
evalcond[4]=((((-1.0)*r01*x1603))+(((-1.0)*r02*x1601))+(((-1.0)*cj0))+(((-1.0)*x1598*x1602)));
evalcond[5]=((((-1.0)*x1597))+(((-1.0)*x1600*x1602))+(((-1.0)*r12*x1601))+(((-1.0)*r11*x1603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1604=((1.0)*cj5);
CheckValue<IkReal> x1605 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x1604))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1605.valid){
continue;
}
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x1604)))),-1);
if(!x1606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1605.value)+(((1.5707963267949)*(x1606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1607=IKcos(j4);
IkReal x1608=IKsin(j4);
IkReal x1609=((1.0)*sj0);
IkReal x1610=(r00*sj5);
IkReal x1611=(r20*sj5);
IkReal x1612=(r10*sj5);
IkReal x1613=((1.0)*x1607);
IkReal x1614=((1.0)*x1608);
IkReal x1615=(cj5*x1614);
evalcond[0]=((((-1.0)*x1611*x1613))+((r22*x1608))+(((-1.0)*cj5*r21*x1613)));
evalcond[1]=(cj0+((r12*x1608))+(((-1.0)*cj5*r11*x1613))+(((-1.0)*x1612*x1613)));
evalcond[2]=((((-1.0)*r21*x1615))+(((-1.0)*x1611*x1614))+(((-1.0)*r22*x1613)));
evalcond[3]=((((-1.0)*x1609))+(((-1.0)*cj5*r01*x1613))+(((-1.0)*x1610*x1613))+((r02*x1608)));
evalcond[4]=((((-1.0)*x1610*x1614))+(((-1.0)*r01*x1615))+(((-1.0)*r02*x1613))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x1615))+(((-1.0)*r12*x1613))+(((-1.0)*x1609))+(((-1.0)*x1612*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1616=((1.0)*cj0);
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1616))+(((-1.0)*cj5*r21*x1616)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1617.value)))+(x1618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1619=IKcos(j4);
IkReal x1620=IKsin(j4);
IkReal x1621=((1.0)*sj0);
IkReal x1622=(r00*sj5);
IkReal x1623=(r20*sj5);
IkReal x1624=(r10*sj5);
IkReal x1625=((1.0)*x1619);
IkReal x1626=((1.0)*x1620);
IkReal x1627=(cj5*x1626);
evalcond[0]=((((-1.0)*x1623*x1625))+((r22*x1620))+(((-1.0)*cj5*r21*x1625)));
evalcond[1]=(cj0+((r12*x1620))+(((-1.0)*x1624*x1625))+(((-1.0)*cj5*r11*x1625)));
evalcond[2]=((((-1.0)*r21*x1627))+(((-1.0)*x1623*x1626))+(((-1.0)*r22*x1625)));
evalcond[3]=(((r02*x1620))+(((-1.0)*cj5*r01*x1625))+(((-1.0)*x1621))+(((-1.0)*x1622*x1625)));
evalcond[4]=((((-1.0)*r01*x1627))+(((-1.0)*r02*x1625))+(((-1.0)*x1622*x1626))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1625))+(((-1.0)*r11*x1627))+(((-1.0)*x1621))+(((-1.0)*x1624*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-107.063197026022)*py))+(((-20.817843866171)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-107.063197026022)*px))+(((20.817843866171)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-107.063197026022)*py))+(((-20.817843866171)*px))))+IKsqr(((((-107.063197026022)*px))+(((20.817843866171)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-107.063197026022)*py))+(((-20.817843866171)*px))), ((((-107.063197026022)*px))+(((20.817843866171)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1628=IKcos(j0);
IkReal x1629=IKsin(j0);
evalcond[0]=((((-0.009)*x1628))+(((-1.0)*px))+(((-0.00175)*x1629)));
evalcond[1]=((((-0.009)*x1629))+(((-1.0)*py))+(((0.00175)*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1630=((1.0)*cj5);
IkReal x1631=(((r01*sj5))+(((-1.0)*r00*x1630)));
j4eval[0]=x1631;
j4eval[1]=IKsign(x1631);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1630)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1632=((1.0)*cj5);
IkReal x1633=(((r11*sj5))+(((-1.0)*r10*x1632)));
j4eval[0]=x1633;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*sj5))+(((-1.0)*r21*sj0*x1632))))));
j4eval[2]=IKsign(x1633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1634=cj5*cj5;
IkReal x1635=((1.0)*r20);
IkReal x1636=(cj5*r21);
IkReal x1637=(((cj5*r01*r20*sj5))+((r01*r21*x1634))+((r00*r20))+((r00*sj5*x1636))+(((-1.0)*r00*x1634*x1635))+((r02*r22)));
j4eval[0]=x1637;
j4eval[1]=((IKabs(((((-1.0)*cj0*x1636))+(((-1.0)*cj0*sj5*x1635)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1638=cj5*cj5;
IkReal x1639=((1.0)*r20);
IkReal x1640=(cj5*r21);
CheckValue<IkReal> x1641=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r01*r21*x1638))+(((-1.0)*r00*x1638*x1639))+((r00*r20))+((r00*sj5*x1640))+((r02*r22)))),-1);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x1639))+(((-1.0)*cj0*x1640)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1641.value)))+(x1642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1643=IKcos(j4);
IkReal x1644=IKsin(j4);
IkReal x1645=((1.0)*sj0);
IkReal x1646=(r00*sj5);
IkReal x1647=(r20*sj5);
IkReal x1648=(r10*sj5);
IkReal x1649=((1.0)*x1643);
IkReal x1650=((1.0)*x1644);
IkReal x1651=(cj5*x1650);
evalcond[0]=((((-1.0)*x1647*x1649))+(((-1.0)*cj5*r21*x1649))+((r22*x1644)));
evalcond[1]=(cj0+(((-1.0)*cj5*r11*x1649))+((r12*x1644))+(((-1.0)*x1648*x1649)));
evalcond[2]=((((-1.0)*r22*x1649))+(((-1.0)*x1647*x1650))+(((-1.0)*r21*x1651)));
evalcond[3]=((((-1.0)*x1646*x1649))+((r02*x1644))+(((-1.0)*x1645))+(((-1.0)*cj5*r01*x1649)));
evalcond[4]=((((-1.0)*r01*x1651))+(((-1.0)*x1646*x1650))+(((-1.0)*r02*x1649))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1649))+(((-1.0)*r11*x1651))+(((-1.0)*x1645))+(((-1.0)*x1648*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1652=((1.0)*cj5);
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x1652))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1652))+((r11*sj5)))),-1);
if(!x1654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1653.value)+(((1.5707963267949)*(x1654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1655=IKcos(j4);
IkReal x1656=IKsin(j4);
IkReal x1657=((1.0)*sj0);
IkReal x1658=(r00*sj5);
IkReal x1659=(r20*sj5);
IkReal x1660=(r10*sj5);
IkReal x1661=((1.0)*x1655);
IkReal x1662=((1.0)*x1656);
IkReal x1663=(cj5*x1662);
evalcond[0]=((((-1.0)*cj5*r21*x1661))+((r22*x1656))+(((-1.0)*x1659*x1661)));
evalcond[1]=(((r12*x1656))+cj0+(((-1.0)*cj5*r11*x1661))+(((-1.0)*x1660*x1661)));
evalcond[2]=((((-1.0)*r22*x1661))+(((-1.0)*r21*x1663))+(((-1.0)*x1659*x1662)));
evalcond[3]=(((r02*x1656))+(((-1.0)*cj5*r01*x1661))+(((-1.0)*x1657))+(((-1.0)*x1658*x1661)));
evalcond[4]=((((-1.0)*r01*x1663))+(((-1.0)*r02*x1661))+(((-1.0)*x1658*x1662))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1661))+(((-1.0)*r11*x1663))+(((-1.0)*x1657))+(((-1.0)*x1660*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1664=((1.0)*cj0);
CheckValue<IkReal> x1665=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1665.valid){
continue;
}
CheckValue<IkReal> x1666 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x1664))+(((-1.0)*r20*sj5*x1664)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1665.value)))+(x1666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1667=IKcos(j4);
IkReal x1668=IKsin(j4);
IkReal x1669=((1.0)*sj0);
IkReal x1670=(r00*sj5);
IkReal x1671=(r20*sj5);
IkReal x1672=(r10*sj5);
IkReal x1673=((1.0)*x1667);
IkReal x1674=((1.0)*x1668);
IkReal x1675=(cj5*x1674);
evalcond[0]=((((-1.0)*cj5*r21*x1673))+(((-1.0)*x1671*x1673))+((r22*x1668)));
evalcond[1]=((((-1.0)*x1672*x1673))+cj0+((r12*x1668))+(((-1.0)*cj5*r11*x1673)));
evalcond[2]=((((-1.0)*x1671*x1674))+(((-1.0)*r21*x1675))+(((-1.0)*r22*x1673)));
evalcond[3]=((((-1.0)*cj5*r01*x1673))+((r02*x1668))+(((-1.0)*x1669))+(((-1.0)*x1670*x1673)));
evalcond[4]=((((-1.0)*r02*x1673))+(((-1.0)*r01*x1675))+(((-1.0)*x1670*x1674))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1672*x1674))+(((-1.0)*r11*x1675))+(((-1.0)*r12*x1673))+(((-1.0)*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.35558897694651)*py))+(((-0.0197056399652899)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.35558897694651)*px))+(((0.0197056399652899)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.35558897694651)*py))+(((-0.0197056399652899)*px))))+IKsqr(((((3.35558897694651)*px))+(((0.0197056399652899)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.35558897694651)*py))+(((-0.0197056399652899)*px))), ((((3.35558897694651)*px))+(((0.0197056399652899)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1676=IKcos(j0);
IkReal x1677=IKsin(j0);
evalcond[0]=((((-0.00175)*x1677))+(((-1.0)*px))+(((0.298)*x1676)));
evalcond[1]=((((0.00175)*x1676))+(((-1.0)*py))+(((0.298)*x1677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1678=((1.0)*cj5);
IkReal x1679=(((r01*sj5))+(((-1.0)*r00*x1678)));
j4eval[0]=x1679;
j4eval[1]=IKsign(x1679);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1678)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1680=cj5*cj5;
IkReal x1681=(r10*r20);
IkReal x1682=((1.0)*r21);
IkReal x1683=((1.0)*r20*sj5);
IkReal x1684=(((x1680*x1681))+(((-1.0)*r11*x1680*x1682))+(((-1.0)*r12*r22))+(((-1.0)*x1681))+(((-1.0)*cj5*r10*sj5*x1682))+(((-1.0)*cj5*r11*x1683)));
j4eval[0]=x1684;
j4eval[1]=IKsign(x1684);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*x1682))+(((-1.0)*cj0*x1683)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1685=cj5*cj5;
IkReal x1686=((1.0)*r00);
IkReal x1687=(cj5*r21);
IkReal x1688=((1.0)*cj0);
IkReal x1689=(r20*sj5);
IkReal x1690=((1.0)*r01);
IkReal x1691=((((-1.0)*r02*r22))+(((-1.0)*cj5*x1689*x1690))+(((-1.0)*r20*x1686))+((r00*r20*x1685))+(((-1.0)*r21*x1685*x1690))+(((-1.0)*sj5*x1686*x1687)));
j4eval[0]=x1691;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x1687*x1688))+(((-1.0)*x1688*x1689))))));
j4eval[2]=IKsign(x1691);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1692=cj5*cj5;
IkReal x1693=((1.0)*r00);
IkReal x1694=(cj5*r21);
IkReal x1695=((1.0)*cj0);
IkReal x1696=(r20*sj5);
IkReal x1697=((1.0)*r01);
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r20*x1693))+(((-1.0)*cj5*x1696*x1697))+(((-1.0)*r21*x1692*x1697))+((r00*r20*x1692))+(((-1.0)*sj5*x1693*x1694)))),-1);
if(!x1698.valid){
continue;
}
CheckValue<IkReal> x1699 = IKatan2WithCheck(IkReal(((((-1.0)*x1694*x1695))+(((-1.0)*x1695*x1696)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1698.value)))+(x1699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1700=IKcos(j4);
IkReal x1701=IKsin(j4);
IkReal x1702=(cj5*r21);
IkReal x1703=(cj5*r11);
IkReal x1704=(r00*sj5);
IkReal x1705=(r20*sj5);
IkReal x1706=(cj5*r01);
IkReal x1707=(r10*sj5);
IkReal x1708=((1.0)*x1700);
IkReal x1709=((1.0)*x1701);
evalcond[0]=((((-1.0)*x1702*x1708))+((r22*x1701))+(((-1.0)*x1705*x1708)));
evalcond[1]=(((r12*x1701))+cj0+(((-1.0)*x1707*x1708))+(((-1.0)*x1703*x1708)));
evalcond[2]=((((-1.0)*x1702*x1709))+(((-1.0)*x1705*x1709))+(((-1.0)*r22*x1708)));
evalcond[3]=(cj0+(((-1.0)*r02*x1708))+(((-1.0)*x1704*x1709))+(((-1.0)*x1706*x1709)));
evalcond[4]=(sj0+(((-1.0)*x1707*x1709))+(((-1.0)*x1703*x1709))+(((-1.0)*r12*x1708)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1701))+(((-1.0)*x1704*x1708))+(((-1.0)*x1706*x1708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1710=cj5*cj5;
IkReal x1711=((1.0)*cj5);
IkReal x1712=(r20*sj5);
IkReal x1713=(r10*r20);
CheckValue<IkReal> x1714=IKPowWithIntegerCheck(IKsign((((x1710*x1713))+(((-1.0)*r12*r22))+(((-1.0)*x1713))+(((-1.0)*r11*x1711*x1712))+(((-1.0)*r11*r21*x1710))+(((-1.0)*r10*r21*sj5*x1711)))),-1);
if(!x1714.valid){
continue;
}
CheckValue<IkReal> x1715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*x1712))+(((-1.0)*cj0*r21*x1711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1714.value)))+(x1715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1716=IKcos(j4);
IkReal x1717=IKsin(j4);
IkReal x1718=(cj5*r21);
IkReal x1719=(cj5*r11);
IkReal x1720=(r00*sj5);
IkReal x1721=(r20*sj5);
IkReal x1722=(cj5*r01);
IkReal x1723=(r10*sj5);
IkReal x1724=((1.0)*x1716);
IkReal x1725=((1.0)*x1717);
evalcond[0]=(((r22*x1717))+(((-1.0)*x1718*x1724))+(((-1.0)*x1721*x1724)));
evalcond[1]=(cj0+((r12*x1717))+(((-1.0)*x1723*x1724))+(((-1.0)*x1719*x1724)));
evalcond[2]=((((-1.0)*r22*x1724))+(((-1.0)*x1718*x1725))+(((-1.0)*x1721*x1725)));
evalcond[3]=(cj0+(((-1.0)*x1722*x1725))+(((-1.0)*x1720*x1725))+(((-1.0)*r02*x1724)));
evalcond[4]=(sj0+(((-1.0)*r12*x1724))+(((-1.0)*x1723*x1725))+(((-1.0)*x1719*x1725)));
evalcond[5]=(((r02*x1717))+(((-1.0)*sj0))+(((-1.0)*x1722*x1724))+(((-1.0)*x1720*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1726=((1.0)*cj0);
CheckValue<IkReal> x1727=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1727.valid){
continue;
}
CheckValue<IkReal> x1728 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1726))+(((-1.0)*cj5*r21*x1726)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1727.value)))+(x1728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1729=IKcos(j4);
IkReal x1730=IKsin(j4);
IkReal x1731=(cj5*r21);
IkReal x1732=(cj5*r11);
IkReal x1733=(r00*sj5);
IkReal x1734=(r20*sj5);
IkReal x1735=(cj5*r01);
IkReal x1736=(r10*sj5);
IkReal x1737=((1.0)*x1729);
IkReal x1738=((1.0)*x1730);
evalcond[0]=((((-1.0)*x1731*x1737))+((r22*x1730))+(((-1.0)*x1734*x1737)));
evalcond[1]=(cj0+(((-1.0)*x1736*x1737))+((r12*x1730))+(((-1.0)*x1732*x1737)));
evalcond[2]=((((-1.0)*x1731*x1738))+(((-1.0)*x1734*x1738))+(((-1.0)*r22*x1737)));
evalcond[3]=((((-1.0)*x1733*x1738))+cj0+(((-1.0)*x1735*x1738))+(((-1.0)*r02*x1737)));
evalcond[4]=(sj0+(((-1.0)*r12*x1737))+(((-1.0)*x1736*x1738))+(((-1.0)*x1732*x1738)));
evalcond[5]=((((-1.0)*x1733*x1737))+(((-1.0)*sj0))+((r02*x1730))+(((-1.0)*x1735*x1737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0474678447733665)*px))+(((-5.20790068370649)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0474678447733665)*py))+(((-5.20790068370649)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0474678447733665)*px))+(((-5.20790068370649)*py))))+IKsqr(((((0.0474678447733665)*py))+(((-5.20790068370649)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0474678447733665)*px))+(((-5.20790068370649)*py))), ((((0.0474678447733665)*py))+(((-5.20790068370649)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1739=IKcos(j0);
IkReal x1740=IKsin(j0);
evalcond[0]=((((-0.00175)*x1740))+(((-1.0)*px))+(((-0.192)*x1739)));
evalcond[1]=((((-1.0)*py))+(((-0.192)*x1740))+(((0.00175)*x1739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1741=((1.0)*cj5);
IkReal x1742=(((r01*sj5))+(((-1.0)*r00*x1741)));
j4eval[0]=x1742;
j4eval[1]=IKsign(x1742);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1741))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1743=((1.0)*cj5);
IkReal x1744=((((-1.0)*r10*x1743))+((r11*sj5)));
j4eval[0]=x1744;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1743))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x1744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1745=cj5*cj5;
IkReal x1746=((1.0)*r20);
IkReal x1747=(cj5*r21);
IkReal x1748=(((cj5*r01*r20*sj5))+((r01*r21*x1745))+((r00*r20))+((r00*sj5*x1747))+((r02*r22))+(((-1.0)*r00*x1745*x1746)));
j4eval[0]=x1748;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x1746))+(((-1.0)*cj0*x1747)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1749=cj5*cj5;
IkReal x1750=((1.0)*r20);
IkReal x1751=(cj5*r21);
CheckValue<IkReal> x1752 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x1750))+(((-1.0)*cj0*x1751)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1752.valid){
continue;
}
CheckValue<IkReal> x1753=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r01*r21*x1749))+((r00*r20))+(((-1.0)*r00*x1749*x1750))+((r00*sj5*x1751))+((r02*r22)))),-1);
if(!x1753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1752.value)+(((1.5707963267949)*(x1753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1754=IKcos(j4);
IkReal x1755=IKsin(j4);
IkReal x1756=((1.0)*sj0);
IkReal x1757=(r00*sj5);
IkReal x1758=(r20*sj5);
IkReal x1759=(r10*sj5);
IkReal x1760=((1.0)*x1754);
IkReal x1761=((1.0)*x1755);
IkReal x1762=(cj5*x1761);
evalcond[0]=((((-1.0)*cj5*r21*x1760))+((r22*x1755))+(((-1.0)*x1758*x1760)));
evalcond[1]=(cj0+(((-1.0)*x1759*x1760))+(((-1.0)*cj5*r11*x1760))+((r12*x1755)));
evalcond[2]=((((-1.0)*r21*x1762))+(((-1.0)*x1758*x1761))+(((-1.0)*r22*x1760)));
evalcond[3]=((((-1.0)*cj5*r01*x1760))+((r02*x1755))+(((-1.0)*x1757*x1760))+(((-1.0)*x1756)));
evalcond[4]=((((-1.0)*r01*x1762))+(((-1.0)*r02*x1760))+(((-1.0)*x1757*x1761))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1759*x1761))+(((-1.0)*r11*x1762))+(((-1.0)*r12*x1760))+(((-1.0)*x1756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1763=((1.0)*cj5);
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x1763)))),-1);
if(!x1764.valid){
continue;
}
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*sj5))+(((-1.0)*r21*sj0*x1763)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1764.value)))+(x1765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1766=IKcos(j4);
IkReal x1767=IKsin(j4);
IkReal x1768=((1.0)*sj0);
IkReal x1769=(r00*sj5);
IkReal x1770=(r20*sj5);
IkReal x1771=(r10*sj5);
IkReal x1772=((1.0)*x1766);
IkReal x1773=((1.0)*x1767);
IkReal x1774=(cj5*x1773);
evalcond[0]=((((-1.0)*x1770*x1772))+((r22*x1767))+(((-1.0)*cj5*r21*x1772)));
evalcond[1]=((((-1.0)*cj5*r11*x1772))+cj0+((r12*x1767))+(((-1.0)*x1771*x1772)));
evalcond[2]=((((-1.0)*r21*x1774))+(((-1.0)*x1770*x1773))+(((-1.0)*r22*x1772)));
evalcond[3]=((((-1.0)*x1768))+((r02*x1767))+(((-1.0)*cj5*r01*x1772))+(((-1.0)*x1769*x1772)));
evalcond[4]=((((-1.0)*r02*x1772))+(((-1.0)*r01*x1774))+(((-1.0)*cj0))+(((-1.0)*x1769*x1773)));
evalcond[5]=((((-1.0)*x1768))+(((-1.0)*x1771*x1773))+(((-1.0)*r12*x1772))+(((-1.0)*r11*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1775=((1.0)*cj0);
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1775))+(((-1.0)*cj5*r21*x1775)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1776.value)+(((1.5707963267949)*(x1777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1778=IKcos(j4);
IkReal x1779=IKsin(j4);
IkReal x1780=((1.0)*sj0);
IkReal x1781=(r00*sj5);
IkReal x1782=(r20*sj5);
IkReal x1783=(r10*sj5);
IkReal x1784=((1.0)*x1778);
IkReal x1785=((1.0)*x1779);
IkReal x1786=(cj5*x1785);
evalcond[0]=(((r22*x1779))+(((-1.0)*cj5*r21*x1784))+(((-1.0)*x1782*x1784)));
evalcond[1]=((((-1.0)*x1783*x1784))+((r12*x1779))+cj0+(((-1.0)*cj5*r11*x1784)));
evalcond[2]=((((-1.0)*r22*x1784))+(((-1.0)*r21*x1786))+(((-1.0)*x1782*x1785)));
evalcond[3]=((((-1.0)*x1780))+((r02*x1779))+(((-1.0)*cj5*r01*x1784))+(((-1.0)*x1781*x1784)));
evalcond[4]=((((-1.0)*r01*x1786))+(((-1.0)*x1781*x1785))+(((-1.0)*r02*x1784))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1783*x1785))+(((-1.0)*x1780))+(((-1.0)*r12*x1784))+(((-1.0)*r11*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.69363899664067)*py))+(((-0.132294506470619)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.69363899664067)*px))+(((0.132294506470619)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.69363899664067)*py))+(((-0.132294506470619)*px))))+IKsqr(((((8.69363899664067)*px))+(((0.132294506470619)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.69363899664067)*py))+(((-0.132294506470619)*px))), ((((8.69363899664067)*px))+(((0.132294506470619)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1787=IKcos(j0);
IkReal x1788=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.115)*x1787))+(((-0.00175)*x1788)));
evalcond[1]=((((-1.0)*py))+(((0.115)*x1788))+(((0.00175)*x1787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1789=((1.0)*cj5);
IkReal x1790=(((r01*sj5))+(((-1.0)*r00*x1789)));
j4eval[0]=x1790;
j4eval[1]=IKsign(x1790);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1789)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1791=cj5*cj5;
IkReal x1792=(r10*r20);
IkReal x1793=((1.0)*r21);
IkReal x1794=((1.0)*r20*sj5);
IkReal x1795=((((-1.0)*cj5*r10*sj5*x1793))+(((-1.0)*r12*r22))+(((-1.0)*r11*x1791*x1793))+(((-1.0)*x1792))+(((-1.0)*cj5*r11*x1794))+((x1791*x1792)));
j4eval[0]=x1795;
j4eval[1]=IKsign(x1795);
j4eval[2]=((IKabs(((((-1.0)*cj0*x1794))+(((-1.0)*cj0*cj5*x1793)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1796=cj5*cj5;
IkReal x1797=((1.0)*r00);
IkReal x1798=(cj5*r21);
IkReal x1799=((1.0)*cj0);
IkReal x1800=(r20*sj5);
IkReal x1801=((1.0)*r01);
IkReal x1802=(((r00*r20*x1796))+(((-1.0)*r02*r22))+(((-1.0)*cj5*x1800*x1801))+(((-1.0)*r21*x1796*x1801))+(((-1.0)*sj5*x1797*x1798))+(((-1.0)*r20*x1797)));
j4eval[0]=x1802;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x1799*x1800))+(((-1.0)*x1798*x1799))))));
j4eval[2]=IKsign(x1802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1803=cj5*cj5;
IkReal x1804=((1.0)*r00);
IkReal x1805=(cj5*r21);
IkReal x1806=((1.0)*cj0);
IkReal x1807=(r20*sj5);
IkReal x1808=((1.0)*r01);
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal(((((-1.0)*x1805*x1806))+(((-1.0)*x1806*x1807)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x1807*x1808))+(((-1.0)*r20*x1804))+(((-1.0)*r02*r22))+((r00*r20*x1803))+(((-1.0)*sj5*x1804*x1805))+(((-1.0)*r21*x1803*x1808)))),-1);
if(!x1810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1809.value)+(((1.5707963267949)*(x1810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1811=IKcos(j4);
IkReal x1812=IKsin(j4);
IkReal x1813=(cj5*r21);
IkReal x1814=(cj5*r11);
IkReal x1815=(r00*sj5);
IkReal x1816=(r20*sj5);
IkReal x1817=(cj5*r01);
IkReal x1818=(r10*sj5);
IkReal x1819=((1.0)*x1811);
IkReal x1820=((1.0)*x1812);
evalcond[0]=(((r22*x1812))+(((-1.0)*x1813*x1819))+(((-1.0)*x1816*x1819)));
evalcond[1]=(cj0+(((-1.0)*x1814*x1819))+(((-1.0)*x1818*x1819))+((r12*x1812)));
evalcond[2]=((((-1.0)*x1813*x1820))+(((-1.0)*x1816*x1820))+(((-1.0)*r22*x1819)));
evalcond[3]=(cj0+(((-1.0)*x1817*x1820))+(((-1.0)*r02*x1819))+(((-1.0)*x1815*x1820)));
evalcond[4]=(sj0+(((-1.0)*x1818*x1820))+(((-1.0)*r12*x1819))+(((-1.0)*x1814*x1820)));
evalcond[5]=(((r02*x1812))+(((-1.0)*sj0))+(((-1.0)*x1815*x1819))+(((-1.0)*x1817*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1821=cj5*cj5;
IkReal x1822=((1.0)*cj5);
IkReal x1823=(r20*sj5);
IkReal x1824=(r10*r20);
CheckValue<IkReal> x1825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r21*sj5*x1822))+(((-1.0)*x1824))+(((-1.0)*r12*r22))+((x1821*x1824))+(((-1.0)*r11*x1822*x1823))+(((-1.0)*r11*r21*x1821)))),-1);
if(!x1825.valid){
continue;
}
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1822))+(((-1.0)*cj0*x1823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1825.value)))+(x1826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1827=IKcos(j4);
IkReal x1828=IKsin(j4);
IkReal x1829=(cj5*r21);
IkReal x1830=(cj5*r11);
IkReal x1831=(r00*sj5);
IkReal x1832=(r20*sj5);
IkReal x1833=(cj5*r01);
IkReal x1834=(r10*sj5);
IkReal x1835=((1.0)*x1827);
IkReal x1836=((1.0)*x1828);
evalcond[0]=((((-1.0)*x1832*x1835))+((r22*x1828))+(((-1.0)*x1829*x1835)));
evalcond[1]=((((-1.0)*x1834*x1835))+cj0+((r12*x1828))+(((-1.0)*x1830*x1835)));
evalcond[2]=((((-1.0)*x1832*x1836))+(((-1.0)*r22*x1835))+(((-1.0)*x1829*x1836)));
evalcond[3]=(cj0+(((-1.0)*x1833*x1836))+(((-1.0)*r02*x1835))+(((-1.0)*x1831*x1836)));
evalcond[4]=((((-1.0)*x1834*x1836))+sj0+(((-1.0)*r12*x1835))+(((-1.0)*x1830*x1836)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1833*x1835))+((r02*x1828))+(((-1.0)*x1831*x1835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1837=((1.0)*cj0);
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x1837))+(((-1.0)*r20*sj5*x1837)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1838.value)+(((1.5707963267949)*(x1839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1840=IKcos(j4);
IkReal x1841=IKsin(j4);
IkReal x1842=(cj5*r21);
IkReal x1843=(cj5*r11);
IkReal x1844=(r00*sj5);
IkReal x1845=(r20*sj5);
IkReal x1846=(cj5*r01);
IkReal x1847=(r10*sj5);
IkReal x1848=((1.0)*x1840);
IkReal x1849=((1.0)*x1841);
evalcond[0]=(((r22*x1841))+(((-1.0)*x1842*x1848))+(((-1.0)*x1845*x1848)));
evalcond[1]=((((-1.0)*x1843*x1848))+cj0+(((-1.0)*x1847*x1848))+((r12*x1841)));
evalcond[2]=((((-1.0)*x1842*x1849))+(((-1.0)*r22*x1848))+(((-1.0)*x1845*x1849)));
evalcond[3]=(cj0+(((-1.0)*r02*x1848))+(((-1.0)*x1844*x1849))+(((-1.0)*x1846*x1849)));
evalcond[4]=((((-1.0)*x1843*x1849))+sj0+(((-1.0)*r12*x1848))+(((-1.0)*x1847*x1849)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1841))+(((-1.0)*x1844*x1848))+(((-1.0)*x1846*x1848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((107.063197026022)*py))+(((-20.817843866171)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((107.063197026022)*px))+(((20.817843866171)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((107.063197026022)*py))+(((-20.817843866171)*px))))+IKsqr(((((107.063197026022)*px))+(((20.817843866171)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((107.063197026022)*py))+(((-20.817843866171)*px))), ((((107.063197026022)*px))+(((20.817843866171)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1850=IKsin(j0);
IkReal x1851=IKcos(j0);
evalcond[0]=((((0.009)*x1851))+(((-0.00175)*x1850))+(((-1.0)*px)));
evalcond[1]=((((0.009)*x1850))+(((-1.0)*py))+(((0.00175)*x1851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1852=((1.0)*cj5);
IkReal x1853=(((r01*sj5))+(((-1.0)*r00*x1852)));
j4eval[0]=x1853;
j4eval[1]=IKsign(x1853);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1852)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1854=cj5*cj5;
IkReal x1855=(r10*r20);
IkReal x1856=((1.0)*r21);
IkReal x1857=((1.0)*r20*sj5);
IkReal x1858=((((-1.0)*r12*r22))+(((-1.0)*r11*x1854*x1856))+(((-1.0)*x1855))+((x1854*x1855))+(((-1.0)*cj5*r10*sj5*x1856))+(((-1.0)*cj5*r11*x1857)));
j4eval[0]=x1858;
j4eval[1]=IKsign(x1858);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*x1856))+(((-1.0)*cj0*x1857)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1859=cj5*cj5;
IkReal x1860=((1.0)*r00);
IkReal x1861=(cj5*r21);
IkReal x1862=((1.0)*cj0);
IkReal x1863=(r20*sj5);
IkReal x1864=((1.0)*r01);
IkReal x1865=((((-1.0)*sj5*x1860*x1861))+(((-1.0)*r02*r22))+(((-1.0)*cj5*x1863*x1864))+(((-1.0)*r21*x1859*x1864))+(((-1.0)*r20*x1860))+((r00*r20*x1859)));
j4eval[0]=x1865;
j4eval[1]=((IKabs(((((-1.0)*x1862*x1863))+(((-1.0)*x1861*x1862)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1866=cj5*cj5;
IkReal x1867=((1.0)*r00);
IkReal x1868=(cj5*r21);
IkReal x1869=((1.0)*cj0);
IkReal x1870=(r20*sj5);
IkReal x1871=((1.0)*r01);
CheckValue<IkReal> x1872 = IKatan2WithCheck(IkReal(((((-1.0)*x1869*x1870))+(((-1.0)*x1868*x1869)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*sj5*x1867*x1868))+(((-1.0)*cj5*x1870*x1871))+(((-1.0)*r20*x1867))+((r00*r20*x1866))+(((-1.0)*r21*x1866*x1871)))),-1);
if(!x1873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1872.value)+(((1.5707963267949)*(x1873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1874=IKcos(j4);
IkReal x1875=IKsin(j4);
IkReal x1876=(cj5*r21);
IkReal x1877=(cj5*r11);
IkReal x1878=(r00*sj5);
IkReal x1879=(r20*sj5);
IkReal x1880=(cj5*r01);
IkReal x1881=(r10*sj5);
IkReal x1882=((1.0)*x1874);
IkReal x1883=((1.0)*x1875);
evalcond[0]=((((-1.0)*x1876*x1882))+(((-1.0)*x1879*x1882))+((r22*x1875)));
evalcond[1]=(cj0+((r12*x1875))+(((-1.0)*x1881*x1882))+(((-1.0)*x1877*x1882)));
evalcond[2]=((((-1.0)*x1876*x1883))+(((-1.0)*x1879*x1883))+(((-1.0)*r22*x1882)));
evalcond[3]=((((-1.0)*x1880*x1883))+cj0+(((-1.0)*r02*x1882))+(((-1.0)*x1878*x1883)));
evalcond[4]=(sj0+(((-1.0)*r12*x1882))+(((-1.0)*x1881*x1883))+(((-1.0)*x1877*x1883)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1880*x1882))+((r02*x1875))+(((-1.0)*x1878*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1884=cj5*cj5;
IkReal x1885=((1.0)*cj5);
IkReal x1886=(r20*sj5);
IkReal x1887=(r10*r20);
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r21*sj5*x1885))+(((-1.0)*r12*r22))+(((-1.0)*r11*r21*x1884))+(((-1.0)*r11*x1885*x1886))+(((-1.0)*x1887))+((x1884*x1887)))),-1);
if(!x1888.valid){
continue;
}
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*x1886))+(((-1.0)*cj0*r21*x1885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1888.value)))+(x1889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1890=IKcos(j4);
IkReal x1891=IKsin(j4);
IkReal x1892=(cj5*r21);
IkReal x1893=(cj5*r11);
IkReal x1894=(r00*sj5);
IkReal x1895=(r20*sj5);
IkReal x1896=(cj5*r01);
IkReal x1897=(r10*sj5);
IkReal x1898=((1.0)*x1890);
IkReal x1899=((1.0)*x1891);
evalcond[0]=((((-1.0)*x1892*x1898))+((r22*x1891))+(((-1.0)*x1895*x1898)));
evalcond[1]=((((-1.0)*x1893*x1898))+(((-1.0)*x1897*x1898))+cj0+((r12*x1891)));
evalcond[2]=((((-1.0)*x1892*x1899))+(((-1.0)*r22*x1898))+(((-1.0)*x1895*x1899)));
evalcond[3]=((((-1.0)*r02*x1898))+cj0+(((-1.0)*x1894*x1899))+(((-1.0)*x1896*x1899)));
evalcond[4]=((((-1.0)*x1893*x1899))+(((-1.0)*x1897*x1899))+sj0+(((-1.0)*r12*x1898)));
evalcond[5]=(((r02*x1891))+(((-1.0)*sj0))+(((-1.0)*x1894*x1898))+(((-1.0)*x1896*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1900=((1.0)*cj0);
CheckValue<IkReal> x1901=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1901.valid){
continue;
}
CheckValue<IkReal> x1902 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1900))+(((-1.0)*cj5*r21*x1900)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1901.value)))+(x1902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1903=IKcos(j4);
IkReal x1904=IKsin(j4);
IkReal x1905=(cj5*r21);
IkReal x1906=(cj5*r11);
IkReal x1907=(r00*sj5);
IkReal x1908=(r20*sj5);
IkReal x1909=(cj5*r01);
IkReal x1910=(r10*sj5);
IkReal x1911=((1.0)*x1903);
IkReal x1912=((1.0)*x1904);
evalcond[0]=((((-1.0)*x1905*x1911))+((r22*x1904))+(((-1.0)*x1908*x1911)));
evalcond[1]=((((-1.0)*x1910*x1911))+cj0+((r12*x1904))+(((-1.0)*x1906*x1911)));
evalcond[2]=((((-1.0)*r22*x1911))+(((-1.0)*x1905*x1912))+(((-1.0)*x1908*x1912)));
evalcond[3]=((((-1.0)*r02*x1911))+cj0+(((-1.0)*x1907*x1912))+(((-1.0)*x1909*x1912)));
evalcond[4]=((((-1.0)*x1910*x1912))+sj0+(((-1.0)*r12*x1911))+(((-1.0)*x1906*x1912)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1907*x1911))+(((-1.0)*x1909*x1911))+((r02*x1904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0197056399652899)*px))+(((-3.35558897694651)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.35558897694651)*px))+(((0.0197056399652899)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0197056399652899)*px))+(((-3.35558897694651)*py))))+IKsqr(((((-3.35558897694651)*px))+(((0.0197056399652899)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0197056399652899)*px))+(((-3.35558897694651)*py))), ((((-3.35558897694651)*px))+(((0.0197056399652899)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1913=IKcos(j0);
IkReal x1914=IKsin(j0);
evalcond[0]=((((-0.00175)*x1914))+(((-1.0)*px))+(((-0.298)*x1913)));
evalcond[1]=((((0.00175)*x1913))+(((-1.0)*py))+(((-0.298)*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1915=((1.0)*cj5);
IkReal x1916=((((-1.0)*r00*x1915))+((r01*sj5)));
j4eval[0]=x1916;
j4eval[1]=IKsign(x1916);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1915))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1917=((1.0)*cj5);
IkReal x1918=(((r11*sj5))+(((-1.0)*r10*x1917)));
j4eval[0]=x1918;
j4eval[1]=((IKabs(((((-1.0)*r21*sj0*x1917))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1919=cj5*cj5;
IkReal x1920=((1.0)*r20);
IkReal x1921=(cj5*r21);
IkReal x1922=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x1919*x1920))+((r00*sj5*x1921))+((r00*r20))+((r01*r21*x1919))+((r02*r22)));
j4eval[0]=x1922;
j4eval[1]=((IKabs(((((-1.0)*cj0*x1921))+(((-1.0)*cj0*sj5*x1920)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1923=cj5*cj5;
IkReal x1924=((1.0)*r20);
IkReal x1925=(cj5*r21);
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x1925))+(((-1.0)*cj0*sj5*x1924)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*sj5*x1925))+((r00*r20))+(((-1.0)*r00*x1923*x1924))+((r01*r21*x1923))+((r02*r22)))),-1);
if(!x1927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1926.value)+(((1.5707963267949)*(x1927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1928=IKcos(j4);
IkReal x1929=IKsin(j4);
IkReal x1930=((1.0)*sj0);
IkReal x1931=(r00*sj5);
IkReal x1932=(r20*sj5);
IkReal x1933=(r10*sj5);
IkReal x1934=((1.0)*x1928);
IkReal x1935=((1.0)*x1929);
IkReal x1936=(cj5*x1935);
evalcond[0]=((((-1.0)*cj5*r21*x1934))+((r22*x1929))+(((-1.0)*x1932*x1934)));
evalcond[1]=(cj0+(((-1.0)*x1933*x1934))+(((-1.0)*cj5*r11*x1934))+((r12*x1929)));
evalcond[2]=((((-1.0)*r22*x1934))+(((-1.0)*x1932*x1935))+(((-1.0)*r21*x1936)));
evalcond[3]=(((r02*x1929))+(((-1.0)*cj5*r01*x1934))+(((-1.0)*x1931*x1934))+(((-1.0)*x1930)));
evalcond[4]=((((-1.0)*r01*x1936))+(((-1.0)*x1931*x1935))+(((-1.0)*cj0))+(((-1.0)*r02*x1934)));
evalcond[5]=((((-1.0)*x1933*x1935))+(((-1.0)*r12*x1934))+(((-1.0)*r11*x1936))+(((-1.0)*x1930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1937=((1.0)*cj5);
CheckValue<IkReal> x1938 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x1937))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1938.valid){
continue;
}
CheckValue<IkReal> x1939=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x1937)))),-1);
if(!x1939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1938.value)+(((1.5707963267949)*(x1939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1940=IKcos(j4);
IkReal x1941=IKsin(j4);
IkReal x1942=((1.0)*sj0);
IkReal x1943=(r00*sj5);
IkReal x1944=(r20*sj5);
IkReal x1945=(r10*sj5);
IkReal x1946=((1.0)*x1940);
IkReal x1947=((1.0)*x1941);
IkReal x1948=(cj5*x1947);
evalcond[0]=((((-1.0)*cj5*r21*x1946))+(((-1.0)*x1944*x1946))+((r22*x1941)));
evalcond[1]=((((-1.0)*cj5*r11*x1946))+cj0+(((-1.0)*x1945*x1946))+((r12*x1941)));
evalcond[2]=((((-1.0)*r21*x1948))+(((-1.0)*r22*x1946))+(((-1.0)*x1944*x1947)));
evalcond[3]=((((-1.0)*x1942))+(((-1.0)*x1943*x1946))+(((-1.0)*cj5*r01*x1946))+((r02*x1941)));
evalcond[4]=((((-1.0)*x1943*x1947))+(((-1.0)*r02*x1946))+(((-1.0)*r01*x1948))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1945*x1947))+(((-1.0)*x1942))+(((-1.0)*r12*x1946))+(((-1.0)*r11*x1948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1949=((1.0)*cj0);
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1950.valid){
continue;
}
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x1949))+(((-1.0)*r20*sj5*x1949)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1950.value)))+(x1951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1952=IKcos(j4);
IkReal x1953=IKsin(j4);
IkReal x1954=((1.0)*sj0);
IkReal x1955=(r00*sj5);
IkReal x1956=(r20*sj5);
IkReal x1957=(r10*sj5);
IkReal x1958=((1.0)*x1952);
IkReal x1959=((1.0)*x1953);
IkReal x1960=(cj5*x1959);
evalcond[0]=((((-1.0)*cj5*r21*x1958))+((r22*x1953))+(((-1.0)*x1956*x1958)));
evalcond[1]=((((-1.0)*x1957*x1958))+cj0+(((-1.0)*cj5*r11*x1958))+((r12*x1953)));
evalcond[2]=((((-1.0)*r22*x1958))+(((-1.0)*r21*x1960))+(((-1.0)*x1956*x1959)));
evalcond[3]=((((-1.0)*x1954))+(((-1.0)*cj5*r01*x1958))+(((-1.0)*x1955*x1958))+((r02*x1953)));
evalcond[4]=((((-1.0)*r02*x1958))+(((-1.0)*r01*x1960))+(((-1.0)*x1955*x1959))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1957*x1959))+(((-1.0)*x1954))+(((-1.0)*r12*x1958))+(((-1.0)*r11*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1961=(cj1*sj2);
IkReal x1962=(r01*sj5);
IkReal x1963=(cj2*sj1);
IkReal x1964=((4000.0)*px);
IkReal x1965=((614.0)*cj2);
IkReal x1966=(cj5*r00);
IkReal x1967=((578.0)*sj1);
IkReal x1968=(cj1*x1966);
IkReal x1969=((614.0)*sj1*sj2);
CheckValue<IkReal> x1970=IKPowWithIntegerCheck(((((-7.0)*x1963))+(((-7.0)*x1961))),-1);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(((((-1.0)*x1961))+(((-1.0)*x1963))),-1);
if(!x1971.valid){
continue;
}
if( IKabs(((x1970.value)*(((((154.0)*x1968))+(((-484.0)*x1961*x1966))+(((-1.0)*cj1*x1962*x1965))+(((-484.0)*x1963*x1966))+(((-1.0)*x1966*x1969))+(((484.0)*x1961*x1962))+(((-154.0)*cj1*x1962))+(((484.0)*x1962*x1963))+((x1961*x1964))+((x1965*x1968))+((x1962*x1969))+((x1966*x1967))+(((-1.0)*x1962*x1967))+((x1963*x1964)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1971.value)*(((((-1.0)*x1962))+x1966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1970.value)*(((((154.0)*x1968))+(((-484.0)*x1961*x1966))+(((-1.0)*cj1*x1962*x1965))+(((-484.0)*x1963*x1966))+(((-1.0)*x1966*x1969))+(((484.0)*x1961*x1962))+(((-154.0)*cj1*x1962))+(((484.0)*x1962*x1963))+((x1961*x1964))+((x1965*x1968))+((x1962*x1969))+((x1966*x1967))+(((-1.0)*x1962*x1967))+((x1963*x1964))))))+IKsqr(((x1971.value)*(((((-1.0)*x1962))+x1966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1970.value)*(((((154.0)*x1968))+(((-484.0)*x1961*x1966))+(((-1.0)*cj1*x1962*x1965))+(((-484.0)*x1963*x1966))+(((-1.0)*x1966*x1969))+(((484.0)*x1961*x1962))+(((-154.0)*cj1*x1962))+(((484.0)*x1962*x1963))+((x1961*x1964))+((x1965*x1968))+((x1962*x1969))+((x1966*x1967))+(((-1.0)*x1962*x1967))+((x1963*x1964))))), ((x1971.value)*(((((-1.0)*x1962))+x1966))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1972=IKcos(j0);
IkReal x1973=IKsin(j0);
IkReal x1974=((0.1535)*sj1);
IkReal x1975=((1.0)*cj5);
IkReal x1976=(r11*sj5);
IkReal x1977=((1.0)*cj2);
IkReal x1978=((0.1535)*cj2);
IkReal x1979=((0.121)*cj5);
IkReal x1980=(r01*sj5);
IkReal x1981=(sj2*x1973);
IkReal x1982=(cj1*x1972);
IkReal x1983=(cj1*x1973);
IkReal x1984=(sj1*x1972);
IkReal x1985=(sj1*x1973);
evalcond[0]=((((-1.0)*sj2*x1982))+(((-1.0)*r00*x1975))+x1980+(((-1.0)*x1977*x1984)));
evalcond[1]=((((-1.0)*cj1*x1981))+x1976+(((-1.0)*r10*x1975))+(((-1.0)*x1977*x1985)));
evalcond[2]=((((0.1445)*x1984))+(((-0.00175)*x1973))+(((0.0385)*x1982))+((x1978*x1982))+(((-1.0)*px))+((r00*x1979))+(((-1.0)*sj2*x1972*x1974))+(((-0.121)*x1980)));
evalcond[3]=((((-0.121)*x1976))+(((0.1445)*x1985))+((r10*x1979))+(((-1.0)*x1974*x1981))+(((0.0385)*x1983))+((x1978*x1983))+(((0.00175)*x1972))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1986=((1.0)*cj5);
IkReal x1987=(((r01*sj5))+(((-1.0)*r00*x1986)));
j4eval[0]=x1987;
j4eval[1]=IKsign(x1987);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x1986)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1988=((1.0)*cj5);
IkReal x1989=(((r11*sj5))+(((-1.0)*r10*x1988)));
j4eval[0]=x1989;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1988))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x1989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1990=((1.0)*sj0);
IkReal x1991=((1.0)*sj5);
IkReal x1992=((1.0)*cj0);
IkReal x1993=((((-1.0)*r21*x1991))+((cj5*r20)));
j4eval[0]=x1993;
j4eval[1]=((IKabs(((((-1.0)*r02*x1992))+(((-1.0)*r12*x1990)))))+(IKabs(((((-1.0)*cj5*r01*x1992))+(((-1.0)*cj5*r11*x1990))+(((-1.0)*cj0*r00*x1991))+(((-1.0)*r10*sj5*x1990))))));
j4eval[2]=IKsign(x1993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1994=((-1.0)*r21);
IkReal x1996 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1996)==0){
continue;
}
IkReal x1995=pow(x1996,-0.5);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(r20),IkReal(x1994),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
IkReal gconst112=((-1.0)*(x1997.value));
IkReal gconst113=((-1.0)*r20*x1995);
IkReal gconst114=(x1994*x1995);
CheckValue<IkReal> x1998 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1998.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1999=((-1.0)*r21);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(r20),IkReal(x1999),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
IkReal x2000=((-1.0)*(x2002.value));
IkReal x2001=x1995;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst113;
cj5=gconst114;
j5=x2000;
IkReal gconst112=x2000;
IkReal gconst113=((-1.0)*r20*x2001);
IkReal gconst114=(x1999*x2001);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2003=((-1.0)*r21);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(r20),IkReal(x2003),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
IkReal x2004=((-1.0)*(x2006.value));
IkReal x2005=x1995;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst113;
cj5=gconst114;
j5=x2004;
IkReal gconst112=x2004;
IkReal gconst113=((-1.0)*r20*x2005);
IkReal gconst114=(x2003*x2005);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2007=((-1.0)*r21);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(r20),IkReal(x2007),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
IkReal x2008=((-1.0)*(x2010.value));
IkReal x2009=x1995;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst113;
cj5=gconst114;
j5=x2008;
IkReal gconst112=x2008;
IkReal gconst113=((-1.0)*r20*x2009);
IkReal gconst114=(x2007*x2009);
IkReal x2011=((1.0)*(r22*r22));
CheckValue<IkReal> x2015=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2011))),-1);
if(!x2015.valid){
continue;
}
IkReal x2012=x2015.value;
IkReal x2013=((1.0)*x2012);
IkReal x2014=((((-1.0)*x2011))+(((-2.0)*x2012*(r20*r20)*(r21*r21)))+(((-1.0)*x2013*(r20*r20*r20*r20)))+(((-1.0)*x2013*(r21*r21*r21*r21))));
j4eval[0]=x2014;
j4eval[1]=IKsign(x2014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2016=(gconst114*r21);
IkReal x2017=(cj2*sj1);
IkReal x2018=(cj1*sj2);
IkReal x2019=(gconst113*r20);
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2016*x2019))+(((-1.0)*(x2016*x2016)))+(((-1.0)*(x2019*x2019)))+(((-1.0)*(r22*r22))))),-1);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal((((x2016*x2017))+((x2016*x2018))+((x2017*x2019))+((x2018*x2019)))),IkReal((((r22*x2018))+((r22*x2017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2020.value)))+(x2021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2022=IKcos(j4);
IkReal x2023=IKsin(j4);
IkReal x2024=(cj1*cj2);
IkReal x2025=(gconst114*r01);
IkReal x2026=(gconst114*r21);
IkReal x2027=(gconst113*r20);
IkReal x2028=(gconst113*r00);
IkReal x2029=((1.0)*sj1);
IkReal x2030=(gconst113*r10);
IkReal x2031=(gconst114*r11);
IkReal x2032=((1.0)*x2022);
IkReal x2033=((1.0)*x2023);
evalcond[0]=(((r22*x2023))+(((-1.0)*x2026*x2032))+(((-1.0)*x2027*x2032)));
evalcond[1]=(cj0+(((-1.0)*x2030*x2032))+(((-1.0)*x2031*x2032))+((r12*x2023)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2023))+(((-1.0)*x2025*x2032))+(((-1.0)*x2028*x2032)));
evalcond[3]=((((-1.0)*cj2*x2029))+(((-1.0)*r22*x2032))+(((-1.0)*cj1*sj2))+(((-1.0)*x2026*x2033))+(((-1.0)*x2027*x2033)));
evalcond[4]=((((-1.0)*cj0*sj2*x2029))+((cj0*x2024))+(((-1.0)*r02*x2032))+(((-1.0)*x2025*x2033))+(((-1.0)*x2028*x2033)));
evalcond[5]=((((-1.0)*r12*x2032))+((sj0*x2024))+(((-1.0)*sj0*sj2*x2029))+(((-1.0)*x2030*x2033))+(((-1.0)*x2031*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2034=((1.0)*sj0);
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal(((((-1.0)*gconst114*r21*x2034))+(((-1.0)*gconst113*r20*x2034)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
CheckValue<IkReal> x2036=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst114*r10))+((gconst113*r11)))),-1);
if(!x2036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2035.value)+(((1.5707963267949)*(x2036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2037=IKcos(j4);
IkReal x2038=IKsin(j4);
IkReal x2039=(cj1*cj2);
IkReal x2040=(gconst114*r01);
IkReal x2041=(gconst114*r21);
IkReal x2042=(gconst113*r20);
IkReal x2043=(gconst113*r00);
IkReal x2044=((1.0)*sj1);
IkReal x2045=(gconst113*r10);
IkReal x2046=(gconst114*r11);
IkReal x2047=((1.0)*x2037);
IkReal x2048=((1.0)*x2038);
evalcond[0]=(((r22*x2038))+(((-1.0)*x2041*x2047))+(((-1.0)*x2042*x2047)));
evalcond[1]=(cj0+((r12*x2038))+(((-1.0)*x2045*x2047))+(((-1.0)*x2046*x2047)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2038))+(((-1.0)*x2040*x2047))+(((-1.0)*x2043*x2047)));
evalcond[3]=((((-1.0)*cj2*x2044))+(((-1.0)*r22*x2047))+(((-1.0)*cj1*sj2))+(((-1.0)*x2041*x2048))+(((-1.0)*x2042*x2048)));
evalcond[4]=((((-1.0)*r02*x2047))+(((-1.0)*cj0*sj2*x2044))+((cj0*x2039))+(((-1.0)*x2040*x2048))+(((-1.0)*x2043*x2048)));
evalcond[5]=((((-1.0)*x2045*x2048))+(((-1.0)*sj0*sj2*x2044))+((sj0*x2039))+(((-1.0)*x2046*x2048))+(((-1.0)*r12*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2049=((1.0)*gconst114);
CheckValue<IkReal> x2050 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x2049))+(((-1.0)*cj0*gconst113*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2050.valid){
continue;
}
CheckValue<IkReal> x2051=IKPowWithIntegerCheck(IKsign((((gconst113*r01))+(((-1.0)*r00*x2049)))),-1);
if(!x2051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2050.value)+(((1.5707963267949)*(x2051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2052=IKcos(j4);
IkReal x2053=IKsin(j4);
IkReal x2054=(cj1*cj2);
IkReal x2055=(gconst114*r01);
IkReal x2056=(gconst114*r21);
IkReal x2057=(gconst113*r20);
IkReal x2058=(gconst113*r00);
IkReal x2059=((1.0)*sj1);
IkReal x2060=(gconst113*r10);
IkReal x2061=(gconst114*r11);
IkReal x2062=((1.0)*x2052);
IkReal x2063=((1.0)*x2053);
evalcond[0]=(((r22*x2053))+(((-1.0)*x2057*x2062))+(((-1.0)*x2056*x2062)));
evalcond[1]=(((r12*x2053))+cj0+(((-1.0)*x2061*x2062))+(((-1.0)*x2060*x2062)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2058*x2062))+(((-1.0)*x2055*x2062))+((r02*x2053)));
evalcond[3]=((((-1.0)*cj2*x2059))+(((-1.0)*x2057*x2063))+(((-1.0)*r22*x2062))+(((-1.0)*cj1*sj2))+(((-1.0)*x2056*x2063)));
evalcond[4]=((((-1.0)*cj0*sj2*x2059))+(((-1.0)*r02*x2062))+(((-1.0)*x2058*x2063))+(((-1.0)*x2055*x2063))+((cj0*x2054)));
evalcond[5]=((((-1.0)*r12*x2062))+(((-1.0)*sj0*sj2*x2059))+((sj0*x2054))+(((-1.0)*x2061*x2063))+(((-1.0)*x2060*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2066 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2066)==0){
continue;
}
IkReal x2064=pow(x2066,-0.5);
IkReal x2065=((1.0)*x2064);
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
IkReal gconst115=((3.14159265358979)+(((-1.0)*(x2067.value))));
IkReal gconst116=(r20*x2065);
IkReal gconst117=(r21*x2065);
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2068.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
IkReal x2069=((1.0)*(x2072.value));
IkReal x2070=x2064;
IkReal x2071=((1.0)*x2070);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2069)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2069)));
IkReal gconst116=(r20*x2071);
IkReal gconst117=(r21*x2071);
IkReal x2073=r22*r22;
IkReal x2074=((1.0)*x2073);
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(((-1.0)+x2073),-1);
if(!x2078.valid){
continue;
}
IkReal x2075=x2078.value;
if((((1.0)+(((-1.0)*x2074)))) < -0.00001)
continue;
IkReal x2076=IKsqrt(((1.0)+(((-1.0)*x2074))));
IkReal x2077=(cj0*x2075*x2076);
j4eval[0]=((IKabs((x2077+(((-1.0)*x2074*x2077)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
IkReal x2079=((1.0)*(x2082.value));
IkReal x2080=x2064;
IkReal x2081=((1.0)*x2080);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2079)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2079)));
IkReal gconst116=(r20*x2081);
IkReal gconst117=(r21*x2081);
IkReal x2083=r22*r22;
IkReal x2084=((1.0)*x2083);
CheckValue<IkReal> x2088=IKPowWithIntegerCheck(((-1.0)+x2083),-1);
if(!x2088.valid){
continue;
}
IkReal x2085=x2088.value;
if((((1.0)+(((-1.0)*x2084)))) < -0.00001)
continue;
IkReal x2086=IKsqrt(((1.0)+(((-1.0)*x2084))));
IkReal x2087=(sj0*x2085*x2086);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2087+(((-1.0)*x2084*x2087))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2092 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2092.valid){
continue;
}
IkReal x2089=((1.0)*(x2092.value));
IkReal x2090=x2064;
IkReal x2091=((1.0)*x2090);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2089)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2089)));
IkReal gconst116=(r20*x2091);
IkReal gconst117=(r21*x2091);
IkReal x2093=r22*r22;
IkReal x2094=((1.0)*r12*sj0);
IkReal x2095=((1.0)*cj0*r02);
CheckValue<IkReal> x2099=IKPowWithIntegerCheck(((-1.0)+x2093),-1);
if(!x2099.valid){
continue;
}
IkReal x2096=x2099.value;
if((((1.0)+(((-1.0)*x2093)))) < -0.00001)
continue;
IkReal x2097=IKsqrt(((1.0)+(((-1.0)*x2093))));
IkReal x2098=(r22*x2096*x2097);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2094))+(((-1.0)*x2095)))))+(IKabs(((((-1.0)*x2094*x2098))+(((-1.0)*x2095*x2098))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2100=((1.0)*sj0);
IkReal x2101=((1.0)*cj0);
CheckValue<IkReal> x2102 = IKatan2WithCheck(IkReal(((((-1.0)*gconst117*r11*x2100))+(((-1.0)*gconst117*r01*x2101))+(((-1.0)*gconst116*r10*x2100))+(((-1.0)*gconst116*r00*x2101)))),IkReal(((((-1.0)*r02*x2101))+(((-1.0)*r12*x2100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2102.valid){
continue;
}
CheckValue<IkReal> x2103=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r21))+((gconst117*r20)))),-1);
if(!x2103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2102.value)+(((1.5707963267949)*(x2103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2104=IKcos(j4);
IkReal x2105=IKsin(j4);
IkReal x2106=(cj1*cj2);
IkReal x2107=((1.0)*sj1);
IkReal x2108=((1.0)*x2104);
IkReal x2109=((1.0)*gconst117*x2105);
IkReal x2110=((1.0)*gconst116*x2105);
evalcond[0]=((((-1.0)*gconst117*r21*x2108))+((r22*x2105))+(((-1.0)*gconst116*r20*x2108)));
evalcond[1]=(((r12*x2105))+cj0+(((-1.0)*gconst117*r11*x2108))+(((-1.0)*gconst116*r10*x2108)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2105))+(((-1.0)*gconst117*r01*x2108))+(((-1.0)*gconst116*r00*x2108)));
evalcond[3]=((((-1.0)*r22*x2108))+(((-1.0)*r20*x2110))+(((-1.0)*cj2*x2107))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2109)));
evalcond[4]=((((-1.0)*r02*x2108))+(((-1.0)*r00*x2110))+(((-1.0)*cj0*sj2*x2107))+((cj0*x2106))+(((-1.0)*r01*x2109)));
evalcond[5]=((((-1.0)*r10*x2110))+(((-1.0)*r12*x2108))+(((-1.0)*r11*x2109))+(((-1.0)*sj0*sj2*x2107))+((sj0*x2106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2111=((1.0)*sj0);
CheckValue<IkReal> x2112=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst117*r10))+((gconst116*r11)))),-1);
if(!x2112.valid){
continue;
}
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(((((-1.0)*gconst117*r21*x2111))+(((-1.0)*gconst116*r20*x2111)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2112.value)))+(x2113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2114=IKcos(j4);
IkReal x2115=IKsin(j4);
IkReal x2116=(cj1*cj2);
IkReal x2117=((1.0)*sj1);
IkReal x2118=((1.0)*x2114);
IkReal x2119=((1.0)*gconst117*x2115);
IkReal x2120=((1.0)*gconst116*x2115);
evalcond[0]=((((-1.0)*gconst117*r21*x2118))+(((-1.0)*gconst116*r20*x2118))+((r22*x2115)));
evalcond[1]=(((r12*x2115))+cj0+(((-1.0)*gconst116*r10*x2118))+(((-1.0)*gconst117*r11*x2118)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst117*r01*x2118))+((r02*x2115))+(((-1.0)*gconst116*r00*x2118)));
evalcond[3]=((((-1.0)*r21*x2119))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2118))+(((-1.0)*r20*x2120))+(((-1.0)*cj2*x2117)));
evalcond[4]=((((-1.0)*r01*x2119))+(((-1.0)*r00*x2120))+(((-1.0)*cj0*sj2*x2117))+((cj0*x2116))+(((-1.0)*r02*x2118)));
evalcond[5]=(((sj0*x2116))+(((-1.0)*r10*x2120))+(((-1.0)*sj0*sj2*x2117))+(((-1.0)*r11*x2119))+(((-1.0)*r12*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2121=((1.0)*cj0);
CheckValue<IkReal> x2122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst117*r00))+((gconst116*r01)))),-1);
if(!x2122.valid){
continue;
}
CheckValue<IkReal> x2123 = IKatan2WithCheck(IkReal(((((-1.0)*gconst117*r21*x2121))+(((-1.0)*gconst116*r20*x2121)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2122.value)))+(x2123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2124=IKcos(j4);
IkReal x2125=IKsin(j4);
IkReal x2126=(cj1*cj2);
IkReal x2127=((1.0)*sj1);
IkReal x2128=((1.0)*x2124);
IkReal x2129=((1.0)*gconst117*x2125);
IkReal x2130=((1.0)*gconst116*x2125);
evalcond[0]=((((-1.0)*gconst117*r21*x2128))+((r22*x2125))+(((-1.0)*gconst116*r20*x2128)));
evalcond[1]=((((-1.0)*gconst116*r10*x2128))+cj0+((r12*x2125))+(((-1.0)*gconst117*r11*x2128)));
evalcond[2]=((((-1.0)*gconst116*r00*x2128))+(((-1.0)*sj0))+((r02*x2125))+(((-1.0)*gconst117*r01*x2128)));
evalcond[3]=((((-1.0)*r22*x2128))+(((-1.0)*cj2*x2127))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x2130))+(((-1.0)*r21*x2129)));
evalcond[4]=((((-1.0)*r01*x2129))+(((-1.0)*r02*x2128))+(((-1.0)*cj0*sj2*x2127))+(((-1.0)*r00*x2130))+((cj0*x2126)));
evalcond[5]=(((sj0*x2126))+(((-1.0)*r11*x2129))+(((-1.0)*r12*x2128))+(((-1.0)*sj0*sj2*x2127))+(((-1.0)*r10*x2130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2132 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2132)==0){
continue;
}
IkReal x2131=pow(x2132,-0.5);
CheckValue<IkReal> x2133 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2133.valid){
continue;
}
IkReal gconst118=((-1.0)*(x2133.value));
IkReal gconst119=(r10*x2131);
IkReal gconst120=(r11*x2131);
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2134.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
IkReal x2135=((-1.0)*(x2137.value));
IkReal x2136=x2131;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst119;
cj5=gconst120;
j5=x2135;
IkReal gconst118=x2135;
IkReal gconst119=(r10*x2136);
IkReal gconst120=(r11*x2136);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2138=((1.0)*sj0);
IkReal x2139=((1.0)*cj0);
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(((((-1.0)*gconst120*r11*x2138))+(((-1.0)*gconst119*r10*x2138))+(((-1.0)*gconst119*r00*x2139))+(((-1.0)*gconst120*r01*x2139)))),IkReal(((((-1.0)*r12*x2138))+(((-1.0)*r02*x2139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
CheckValue<IkReal> x2141=IKPowWithIntegerCheck(IKsign((((gconst120*r20))+(((-1.0)*gconst119*r21)))),-1);
if(!x2141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2140.value)+(((1.5707963267949)*(x2141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2142=IKcos(j4);
IkReal x2143=IKsin(j4);
IkReal x2144=(cj1*cj2);
IkReal x2145=(gconst119*r20);
IkReal x2146=(gconst119*r10);
IkReal x2147=((1.0)*sj1);
IkReal x2148=(gconst119*r00);
IkReal x2149=(gconst120*r11);
IkReal x2150=(gconst120*r01);
IkReal x2151=(gconst120*r21);
IkReal x2152=((1.0)*x2142);
IkReal x2153=((1.0)*x2143);
evalcond[0]=(((r22*x2143))+(((-1.0)*x2151*x2152))+(((-1.0)*x2145*x2152)));
evalcond[1]=((((-1.0)*x2149*x2152))+cj0+((r12*x2143))+(((-1.0)*x2146*x2152)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2148*x2152))+((r02*x2143))+(((-1.0)*x2150*x2152)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x2152))+(((-1.0)*cj2*x2147))+(((-1.0)*x2151*x2153))+(((-1.0)*x2145*x2153)));
evalcond[4]=((((-1.0)*x2148*x2153))+(((-1.0)*r02*x2152))+((cj0*x2144))+(((-1.0)*cj0*sj2*x2147))+(((-1.0)*x2150*x2153)));
evalcond[5]=((((-1.0)*x2149*x2153))+(((-1.0)*r12*x2152))+((sj0*x2144))+(((-1.0)*sj0*sj2*x2147))+(((-1.0)*x2146*x2153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2154=((1.0)*gconst120);
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2154))+((gconst119*r01)))),-1);
if(!x2155.valid){
continue;
}
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x2154))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2155.value)))+(x2156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2157=IKcos(j4);
IkReal x2158=IKsin(j4);
IkReal x2159=(cj1*cj2);
IkReal x2160=(gconst119*r20);
IkReal x2161=(gconst119*r10);
IkReal x2162=((1.0)*sj1);
IkReal x2163=(gconst119*r00);
IkReal x2164=(gconst120*r11);
IkReal x2165=(gconst120*r01);
IkReal x2166=(gconst120*r21);
IkReal x2167=((1.0)*x2157);
IkReal x2168=((1.0)*x2158);
evalcond[0]=((((-1.0)*x2160*x2167))+(((-1.0)*x2166*x2167))+((r22*x2158)));
evalcond[1]=(cj0+(((-1.0)*x2161*x2167))+(((-1.0)*x2164*x2167))+((r12*x2158)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2163*x2167))+((r02*x2158))+(((-1.0)*x2165*x2167)));
evalcond[3]=((((-1.0)*cj2*x2162))+(((-1.0)*x2160*x2168))+(((-1.0)*cj1*sj2))+(((-1.0)*x2166*x2168))+(((-1.0)*r22*x2167)));
evalcond[4]=((((-1.0)*x2163*x2168))+(((-1.0)*cj0*sj2*x2162))+((cj0*x2159))+(((-1.0)*x2165*x2168))+(((-1.0)*r02*x2167)));
evalcond[5]=((((-1.0)*sj0*sj2*x2162))+(((-1.0)*x2161*x2168))+(((-1.0)*x2164*x2168))+((sj0*x2159))+(((-1.0)*r12*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2171 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2171)==0){
continue;
}
IkReal x2169=pow(x2171,-0.5);
IkReal x2170=((-1.0)*x2169);
CheckValue<IkReal> x2172 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2172.valid){
continue;
}
IkReal gconst121=((3.14159265358979)+(((-1.0)*(x2172.value))));
IkReal gconst122=(r10*x2170);
IkReal gconst123=(r11*x2170);
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2173.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2177 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2177.valid){
continue;
}
IkReal x2174=((1.0)*(x2177.value));
IkReal x2175=x2169;
IkReal x2176=((-1.0)*x2175);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2174)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2174)));
IkReal gconst122=(r10*x2176);
IkReal gconst123=(r11*x2176);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2181 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
IkReal x2178=((1.0)*(x2181.value));
IkReal x2179=x2169;
IkReal x2180=((-1.0)*x2179);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2178)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2178)));
IkReal gconst122=(r10*x2180);
IkReal gconst123=(r11*x2180);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
IkReal x2182=((1.0)*(x2185.value));
IkReal x2183=x2169;
IkReal x2184=((-1.0)*x2183);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2182)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2182)));
IkReal gconst122=(r10*x2184);
IkReal gconst123=(r11*x2184);
IkReal x2186=r12*r12;
IkReal x2187=((1.0)*sj0);
IkReal x2188=(cj0*r02);
IkReal x2189=x2169;
j4eval[0]=((IKabs(((((-1.0)*x2188))+(((-1.0)*r12*x2187)))))+(IKabs((((r12*x2188*x2189))+((sj0*x2186*x2189))+(((-1.0)*x2187*x2189))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2190=((1.0)*sj0);
IkReal x2191=((1.0)*cj0);
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+((gconst123*r20)))),-1);
if(!x2192.valid){
continue;
}
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r00*x2191))+(((-1.0)*gconst123*r01*x2191))+(((-1.0)*gconst123*r11*x2190))+(((-1.0)*gconst122*r10*x2190)))),IkReal(((((-1.0)*r02*x2191))+(((-1.0)*r12*x2190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2192.value)))+(x2193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2194=IKcos(j4);
IkReal x2195=IKsin(j4);
IkReal x2196=(gconst123*r11);
IkReal x2197=(gconst122*r00);
IkReal x2198=(cj1*cj2);
IkReal x2199=((1.0)*sj1);
IkReal x2200=(gconst123*r01);
IkReal x2201=(gconst123*r21);
IkReal x2202=(gconst122*r10);
IkReal x2203=(gconst122*r20);
IkReal x2204=((1.0)*x2194);
IkReal x2205=((1.0)*x2195);
evalcond[0]=((((-1.0)*x2203*x2204))+((r22*x2195))+(((-1.0)*x2201*x2204)));
evalcond[1]=(cj0+(((-1.0)*x2196*x2204))+(((-1.0)*x2202*x2204))+((r12*x2195)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2197*x2204))+(((-1.0)*x2200*x2204))+((r02*x2195)));
evalcond[3]=((((-1.0)*x2203*x2205))+(((-1.0)*r22*x2204))+(((-1.0)*cj1*sj2))+(((-1.0)*x2201*x2205))+(((-1.0)*cj2*x2199)));
evalcond[4]=((((-1.0)*x2197*x2205))+((cj0*x2198))+(((-1.0)*x2200*x2205))+(((-1.0)*cj0*sj2*x2199))+(((-1.0)*r02*x2204)));
evalcond[5]=((((-1.0)*sj0*sj2*x2199))+(((-1.0)*r12*x2204))+(((-1.0)*x2196*x2205))+((sj0*x2198))+(((-1.0)*x2202*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2206=((1.0)*sj0);
CheckValue<IkReal> x2207=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst123*r10))+((gconst122*r11)))),-1);
if(!x2207.valid){
continue;
}
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r20*x2206))+(((-1.0)*gconst123*r21*x2206)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2207.value)))+(x2208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2209=IKcos(j4);
IkReal x2210=IKsin(j4);
IkReal x2211=(gconst123*r11);
IkReal x2212=(gconst122*r00);
IkReal x2213=(cj1*cj2);
IkReal x2214=((1.0)*sj1);
IkReal x2215=(gconst123*r01);
IkReal x2216=(gconst123*r21);
IkReal x2217=(gconst122*r10);
IkReal x2218=(gconst122*r20);
IkReal x2219=((1.0)*x2209);
IkReal x2220=((1.0)*x2210);
evalcond[0]=((((-1.0)*x2218*x2219))+(((-1.0)*x2216*x2219))+((r22*x2210)));
evalcond[1]=(cj0+((r12*x2210))+(((-1.0)*x2217*x2219))+(((-1.0)*x2211*x2219)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2215*x2219))+(((-1.0)*x2212*x2219))+((r02*x2210)));
evalcond[3]=((((-1.0)*r22*x2219))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2214))+(((-1.0)*x2216*x2220))+(((-1.0)*x2218*x2220)));
evalcond[4]=((((-1.0)*cj0*sj2*x2214))+(((-1.0)*x2212*x2220))+((cj0*x2213))+(((-1.0)*x2215*x2220))+(((-1.0)*r02*x2219)));
evalcond[5]=((((-1.0)*x2217*x2220))+(((-1.0)*r12*x2219))+(((-1.0)*x2211*x2220))+((sj0*x2213))+(((-1.0)*sj0*sj2*x2214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2221=((1.0)*gconst123);
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2221))+((gconst122*r01)))),-1);
if(!x2222.valid){
continue;
}
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+(((-1.0)*cj0*r21*x2221)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2222.value)))+(x2223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2224=IKcos(j4);
IkReal x2225=IKsin(j4);
IkReal x2226=(gconst123*r11);
IkReal x2227=(gconst122*r00);
IkReal x2228=(cj1*cj2);
IkReal x2229=((1.0)*sj1);
IkReal x2230=(gconst123*r01);
IkReal x2231=(gconst123*r21);
IkReal x2232=(gconst122*r10);
IkReal x2233=(gconst122*r20);
IkReal x2234=((1.0)*x2224);
IkReal x2235=((1.0)*x2225);
evalcond[0]=(((r22*x2225))+(((-1.0)*x2233*x2234))+(((-1.0)*x2231*x2234)));
evalcond[1]=(((r12*x2225))+(((-1.0)*x2226*x2234))+cj0+(((-1.0)*x2232*x2234)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2227*x2234))+((r02*x2225))+(((-1.0)*x2230*x2234)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x2234))+(((-1.0)*x2233*x2235))+(((-1.0)*x2231*x2235))+(((-1.0)*cj2*x2229)));
evalcond[4]=((((-1.0)*x2227*x2235))+(((-1.0)*r02*x2234))+((cj0*x2228))+(((-1.0)*cj0*sj2*x2229))+(((-1.0)*x2230*x2235)));
evalcond[5]=((((-1.0)*x2226*x2235))+(((-1.0)*sj0*sj2*x2229))+((sj0*x2228))+(((-1.0)*x2232*x2235))+(((-1.0)*r12*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2236=((1.0)*cj5);
IkReal x2237=(((r01*sj5))+(((-1.0)*r00*x2236)));
j4eval[0]=x2237;
j4eval[1]=IKsign(x2237);
j4eval[2]=((IKabs(((((-1.0)*r21*x2236))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2238=((1.0)*sj5);
IkReal x2239=((((-1.0)*r21*x2238))+((cj5*r20)));
j4eval[0]=x2239;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2238))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x2239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2240=cj5*cj5;
IkReal x2241=r10*r10;
IkReal x2242=(cj5*r11);
IkReal x2243=(r10*sj5);
IkReal x2244=((((-1.0)*x2240*(r11*r11)))+(((-1.0)*x2241))+(((-2.0)*x2242*x2243))+(((-1.0)*(r12*r12)))+((x2240*x2241)));
j4eval[0]=x2244;
j4eval[1]=IKsign(x2244);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2242))+(((-1.0)*x2243))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2245=cj5*cj5;
IkReal x2246=r10*r10;
IkReal x2247=(cj5*r11);
IkReal x2248=(r10*sj5);
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2247))+(((-1.0)*x2248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
CheckValue<IkReal> x2250=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2246))+(((-1.0)*(r12*r12)))+(((-2.0)*x2247*x2248))+(((-1.0)*x2245*(r11*r11)))+((x2245*x2246)))),-1);
if(!x2250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2249.value)+(((1.5707963267949)*(x2250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2251=IKcos(j4);
IkReal x2252=IKsin(j4);
IkReal x2253=(r00*sj5);
IkReal x2254=(cj5*r01);
IkReal x2255=(r20*sj5);
IkReal x2256=((1.0)*sj2);
IkReal x2257=(cj5*r21);
IkReal x2258=(cj5*r11);
IkReal x2259=(r10*sj5);
IkReal x2260=((1.0)*x2251);
IkReal x2261=((1.0)*x2252);
evalcond[0]=((((-1.0)*x2255*x2260))+(((-1.0)*x2257*x2260))+((r22*x2252)));
evalcond[1]=((((-1.0)*x2254*x2260))+(((-1.0)*x2253*x2260))+((r02*x2252)));
evalcond[2]=((1.0)+((r12*x2252))+(((-1.0)*x2258*x2260))+(((-1.0)*x2259*x2260)));
evalcond[3]=((((-1.0)*x2258*x2261))+(((-1.0)*x2259*x2261))+(((-1.0)*r12*x2260)));
evalcond[4]=((((-1.0)*sj1*x2256))+(((-1.0)*x2254*x2261))+(((-1.0)*x2253*x2261))+((cj1*cj2))+(((-1.0)*r02*x2260)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x2255*x2261))+(((-1.0)*x2257*x2261))+(((-1.0)*r22*x2260))+(((-1.0)*cj1*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2262=((1.0)*sj5);
CheckValue<IkReal> x2263=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x2262)))),-1);
if(!x2263.valid){
continue;
}
CheckValue<IkReal> x2264 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2262))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2263.value)))+(x2264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2265=IKcos(j4);
IkReal x2266=IKsin(j4);
IkReal x2267=(r00*sj5);
IkReal x2268=(cj5*r01);
IkReal x2269=(r20*sj5);
IkReal x2270=((1.0)*sj2);
IkReal x2271=(cj5*r21);
IkReal x2272=(cj5*r11);
IkReal x2273=(r10*sj5);
IkReal x2274=((1.0)*x2265);
IkReal x2275=((1.0)*x2266);
evalcond[0]=(((r22*x2266))+(((-1.0)*x2269*x2274))+(((-1.0)*x2271*x2274)));
evalcond[1]=(((r02*x2266))+(((-1.0)*x2268*x2274))+(((-1.0)*x2267*x2274)));
evalcond[2]=((1.0)+(((-1.0)*x2273*x2274))+((r12*x2266))+(((-1.0)*x2272*x2274)));
evalcond[3]=((((-1.0)*x2273*x2275))+(((-1.0)*x2272*x2275))+(((-1.0)*r12*x2274)));
evalcond[4]=((((-1.0)*sj1*x2270))+(((-1.0)*r02*x2274))+(((-1.0)*x2268*x2275))+((cj1*cj2))+(((-1.0)*x2267*x2275)));
evalcond[5]=((((-1.0)*cj1*x2270))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2274))+(((-1.0)*x2269*x2275))+(((-1.0)*x2271*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2276=((1.0)*cj5);
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2276))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
CheckValue<IkReal> x2278=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x2276)))),-1);
if(!x2278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2277.value)+(((1.5707963267949)*(x2278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2279=IKcos(j4);
IkReal x2280=IKsin(j4);
IkReal x2281=(r00*sj5);
IkReal x2282=(cj5*r01);
IkReal x2283=(r20*sj5);
IkReal x2284=((1.0)*sj2);
IkReal x2285=(cj5*r21);
IkReal x2286=(cj5*r11);
IkReal x2287=(r10*sj5);
IkReal x2288=((1.0)*x2279);
IkReal x2289=((1.0)*x2280);
evalcond[0]=((((-1.0)*x2285*x2288))+((r22*x2280))+(((-1.0)*x2283*x2288)));
evalcond[1]=((((-1.0)*x2282*x2288))+(((-1.0)*x2281*x2288))+((r02*x2280)));
evalcond[2]=((1.0)+((r12*x2280))+(((-1.0)*x2287*x2288))+(((-1.0)*x2286*x2288)));
evalcond[3]=((((-1.0)*r12*x2288))+(((-1.0)*x2287*x2289))+(((-1.0)*x2286*x2289)));
evalcond[4]=((((-1.0)*r02*x2288))+(((-1.0)*x2282*x2289))+(((-1.0)*sj1*x2284))+(((-1.0)*x2281*x2289))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2284))+(((-1.0)*x2285*x2289))+(((-1.0)*r22*x2288))+(((-1.0)*x2283*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2290=((1.0)*sj5);
IkReal x2291=((((-1.0)*r01*x2290))+((cj5*r00)));
j4eval[0]=x2291;
j4eval[1]=IKsign(x2291);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2290)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2292=((1.0)*cj5);
IkReal x2293=(((r21*sj5))+(((-1.0)*r20*x2292)));
j4eval[0]=x2293;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2292))+(((-1.0)*r00*sj5))))));
j4eval[2]=IKsign(x2293);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2294=cj5*cj5;
IkReal x2295=r10*r10;
IkReal x2296=(cj5*r11);
IkReal x2297=(r10*sj5);
IkReal x2298=((r12*r12)+x2295+(((-1.0)*x2294*x2295))+((x2294*(r11*r11)))+(((2.0)*x2296*x2297)));
j4eval[0]=x2298;
j4eval[1]=IKsign(x2298);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2297))+(((-1.0)*x2296))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2299=cj5*cj5;
IkReal x2300=r10*r10;
IkReal x2301=(cj5*r11);
IkReal x2302=(r10*sj5);
CheckValue<IkReal> x2303=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2300+(((-1.0)*x2299*x2300))+(((2.0)*x2301*x2302))+((x2299*(r11*r11))))),-1);
if(!x2303.valid){
continue;
}
CheckValue<IkReal> x2304 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2301))+(((-1.0)*x2302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2303.value)))+(x2304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2305=IKcos(j4);
IkReal x2306=IKsin(j4);
IkReal x2307=(r00*sj5);
IkReal x2308=(cj5*r01);
IkReal x2309=(r20*sj5);
IkReal x2310=((1.0)*cj2);
IkReal x2311=(cj5*r21);
IkReal x2312=(cj5*r11);
IkReal x2313=(r10*sj5);
IkReal x2314=((1.0)*x2305);
IkReal x2315=((1.0)*x2306);
evalcond[0]=((((-1.0)*x2309*x2314))+(((-1.0)*x2311*x2314))+((r22*x2306)));
evalcond[1]=(((r02*x2306))+(((-1.0)*x2308*x2314))+(((-1.0)*x2307*x2314)));
evalcond[2]=((-1.0)+((r12*x2306))+(((-1.0)*x2312*x2314))+(((-1.0)*x2313*x2314)));
evalcond[3]=((((-1.0)*x2312*x2315))+(((-1.0)*r12*x2314))+(((-1.0)*x2313*x2315)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x2308*x2315))+(((-1.0)*r02*x2314))+(((-1.0)*cj1*x2310))+(((-1.0)*x2307*x2315)));
evalcond[5]=((((-1.0)*r22*x2314))+(((-1.0)*x2309*x2315))+(((-1.0)*x2311*x2315))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2316=((1.0)*cj5);
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2316)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2316))+((r21*sj5)))),-1);
if(!x2318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2317.value)+(((1.5707963267949)*(x2318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2319=IKcos(j4);
IkReal x2320=IKsin(j4);
IkReal x2321=(r00*sj5);
IkReal x2322=(cj5*r01);
IkReal x2323=(r20*sj5);
IkReal x2324=((1.0)*cj2);
IkReal x2325=(cj5*r21);
IkReal x2326=(cj5*r11);
IkReal x2327=(r10*sj5);
IkReal x2328=((1.0)*x2319);
IkReal x2329=((1.0)*x2320);
evalcond[0]=(((r22*x2320))+(((-1.0)*x2323*x2328))+(((-1.0)*x2325*x2328)));
evalcond[1]=(((r02*x2320))+(((-1.0)*x2321*x2328))+(((-1.0)*x2322*x2328)));
evalcond[2]=((-1.0)+((r12*x2320))+(((-1.0)*x2327*x2328))+(((-1.0)*x2326*x2328)));
evalcond[3]=((((-1.0)*r12*x2328))+(((-1.0)*x2327*x2329))+(((-1.0)*x2326*x2329)));
evalcond[4]=((((-1.0)*x2321*x2329))+(((-1.0)*x2322*x2329))+((sj1*sj2))+(((-1.0)*cj1*x2324))+(((-1.0)*r02*x2328)));
evalcond[5]=((((-1.0)*r22*x2328))+(((-1.0)*cj1*sj2))+(((-1.0)*x2323*x2329))+(((-1.0)*x2325*x2329))+(((-1.0)*sj1*x2324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2330=((1.0)*sj5);
CheckValue<IkReal> x2331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2330))+((cj5*r00)))),-1);
if(!x2331.valid){
continue;
}
CheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2330)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2331.value)))+(x2332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2333=IKcos(j4);
IkReal x2334=IKsin(j4);
IkReal x2335=(r00*sj5);
IkReal x2336=(cj5*r01);
IkReal x2337=(r20*sj5);
IkReal x2338=((1.0)*cj2);
IkReal x2339=(cj5*r21);
IkReal x2340=(cj5*r11);
IkReal x2341=(r10*sj5);
IkReal x2342=((1.0)*x2333);
IkReal x2343=((1.0)*x2334);
evalcond[0]=((((-1.0)*x2337*x2342))+(((-1.0)*x2339*x2342))+((r22*x2334)));
evalcond[1]=(((r02*x2334))+(((-1.0)*x2335*x2342))+(((-1.0)*x2336*x2342)));
evalcond[2]=((-1.0)+(((-1.0)*x2340*x2342))+((r12*x2334))+(((-1.0)*x2341*x2342)));
evalcond[3]=((((-1.0)*x2340*x2343))+(((-1.0)*x2341*x2343))+(((-1.0)*r12*x2342)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x2335*x2343))+(((-1.0)*cj1*x2338))+(((-1.0)*x2336*x2343))+(((-1.0)*r02*x2342)));
evalcond[5]=((((-1.0)*x2337*x2343))+(((-1.0)*x2339*x2343))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2342))+(((-1.0)*sj1*x2338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2345 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2345)==0){
continue;
}
IkReal x2344=pow(x2345,-0.5);
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
IkReal gconst124=((-1.0)*(x2346.value));
IkReal gconst125=(r00*x2344);
IkReal gconst126=(r01*x2344);
CheckValue<IkReal> x2347 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2347.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2347.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
IkReal x2348=((-1.0)*(x2350.value));
IkReal x2349=x2344;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst125;
cj5=gconst126;
j5=x2348;
IkReal gconst124=x2348;
IkReal gconst125=(r00*x2349);
IkReal gconst126=(r01*x2349);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2351=((1.0)*sj0);
IkReal x2352=((1.0)*gconst125);
IkReal x2353=((1.0)*cj0);
CheckValue<IkReal> x2354=IKPowWithIntegerCheck(IKsign((((gconst126*r20))+(((-1.0)*r21*x2352)))),-1);
if(!x2354.valid){
continue;
}
CheckValue<IkReal> x2355 = IKatan2WithCheck(IkReal(((((-1.0)*gconst126*r01*x2353))+(((-1.0)*gconst126*r11*x2351))+(((-1.0)*cj0*r00*x2352))+(((-1.0)*gconst125*r10*x2351)))),IkReal(((((-1.0)*r02*x2353))+(((-1.0)*r12*x2351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2354.value)))+(x2355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2356=IKcos(j4);
IkReal x2357=IKsin(j4);
IkReal x2358=(cj1*cj2);
IkReal x2359=(gconst125*r20);
IkReal x2360=(gconst126*r11);
IkReal x2361=((1.0)*sj1);
IkReal x2362=(gconst126*r01);
IkReal x2363=(gconst126*r21);
IkReal x2364=(gconst125*r00);
IkReal x2365=(gconst125*r10);
IkReal x2366=((1.0)*x2356);
IkReal x2367=((1.0)*x2357);
evalcond[0]=(((r22*x2357))+(((-1.0)*x2359*x2366))+(((-1.0)*x2363*x2366)));
evalcond[1]=(cj0+((r12*x2357))+(((-1.0)*x2365*x2366))+(((-1.0)*x2360*x2366)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2364*x2366))+(((-1.0)*x2362*x2366))+((r02*x2357)));
evalcond[3]=((((-1.0)*cj2*x2361))+(((-1.0)*cj1*sj2))+(((-1.0)*x2359*x2367))+(((-1.0)*r22*x2366))+(((-1.0)*x2363*x2367)));
evalcond[4]=(((cj0*x2358))+(((-1.0)*cj0*sj2*x2361))+(((-1.0)*x2364*x2367))+(((-1.0)*x2362*x2367))+(((-1.0)*r02*x2366)));
evalcond[5]=(((sj0*x2358))+(((-1.0)*sj0*sj2*x2361))+(((-1.0)*x2365*x2367))+(((-1.0)*x2360*x2367))+(((-1.0)*r12*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2368=((1.0)*sj0);
CheckValue<IkReal> x2369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst126*r10))+((gconst125*r11)))),-1);
if(!x2369.valid){
continue;
}
CheckValue<IkReal> x2370 = IKatan2WithCheck(IkReal(((((-1.0)*gconst126*r21*x2368))+(((-1.0)*gconst125*r20*x2368)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2369.value)))+(x2370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2371=IKcos(j4);
IkReal x2372=IKsin(j4);
IkReal x2373=(cj1*cj2);
IkReal x2374=(gconst125*r20);
IkReal x2375=(gconst126*r11);
IkReal x2376=((1.0)*sj1);
IkReal x2377=(gconst126*r01);
IkReal x2378=(gconst126*r21);
IkReal x2379=(gconst125*r00);
IkReal x2380=(gconst125*r10);
IkReal x2381=((1.0)*x2371);
IkReal x2382=((1.0)*x2372);
evalcond[0]=((((-1.0)*x2374*x2381))+(((-1.0)*x2378*x2381))+((r22*x2372)));
evalcond[1]=((((-1.0)*x2380*x2381))+cj0+((r12*x2372))+(((-1.0)*x2375*x2381)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2372))+(((-1.0)*x2377*x2381))+(((-1.0)*x2379*x2381)));
evalcond[3]=((((-1.0)*x2374*x2382))+(((-1.0)*cj2*x2376))+(((-1.0)*x2378*x2382))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2381)));
evalcond[4]=((((-1.0)*r02*x2381))+(((-1.0)*cj0*sj2*x2376))+((cj0*x2373))+(((-1.0)*x2377*x2382))+(((-1.0)*x2379*x2382)));
evalcond[5]=((((-1.0)*x2380*x2382))+(((-1.0)*r12*x2381))+(((-1.0)*sj0*sj2*x2376))+((sj0*x2373))+(((-1.0)*x2375*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2383=((-1.0)*r00);
IkReal x2385 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2385)==0){
continue;
}
IkReal x2384=pow(x2385,-0.5);
CheckValue<IkReal> x2386 = IKatan2WithCheck(IkReal(x2383),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2386.valid){
continue;
}
IkReal gconst127=((3.14159265358979)+(((-1.0)*(x2386.value))));
IkReal gconst128=(x2383*x2384);
IkReal gconst129=((-1.0)*r01*x2384);
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2387.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2388=((-1.0)*r00);
CheckValue<IkReal> x2391 = IKatan2WithCheck(IkReal(x2388),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2391.valid){
continue;
}
IkReal x2389=((1.0)*(x2391.value));
IkReal x2390=x2384;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x2389)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x2389)));
IkReal gconst128=(x2388*x2390);
IkReal gconst129=((-1.0)*r01*x2390);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2392=((-1.0)*r00);
CheckValue<IkReal> x2395 = IKatan2WithCheck(IkReal(x2392),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2395.valid){
continue;
}
IkReal x2393=((1.0)*(x2395.value));
IkReal x2394=x2384;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x2393)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x2393)));
IkReal gconst128=(x2392*x2394);
IkReal gconst129=((-1.0)*r01*x2394);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2396=((-1.0)*r00);
CheckValue<IkReal> x2399 = IKatan2WithCheck(IkReal(x2396),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2399.valid){
continue;
}
IkReal x2397=((1.0)*(x2399.value));
IkReal x2398=x2384;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x2397)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x2397)));
IkReal gconst128=(x2396*x2398);
IkReal gconst129=((-1.0)*r01*x2398);
IkReal x2400=r02*r02;
IkReal x2401=(r12*sj0);
IkReal x2402=((1.0)*cj0);
IkReal x2403=x2384;
j4eval[0]=((IKabs((((cj0*x2400*x2403))+((r02*x2401*x2403))+(((-1.0)*x2402*x2403)))))+(IKabs(((((-1.0)*x2401))+(((-1.0)*r02*x2402))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2404=((1.0)*sj0);
IkReal x2405=((1.0)*gconst128);
IkReal x2406=((1.0)*cj0);
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign((((gconst129*r20))+(((-1.0)*r21*x2405)))),-1);
if(!x2407.valid){
continue;
}
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal(((((-1.0)*gconst129*r01*x2406))+(((-1.0)*gconst128*r10*x2404))+(((-1.0)*cj0*r00*x2405))+(((-1.0)*gconst129*r11*x2404)))),IkReal(((((-1.0)*r02*x2406))+(((-1.0)*r12*x2404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2407.value)))+(x2408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2409=IKcos(j4);
IkReal x2410=IKsin(j4);
IkReal x2411=(cj1*cj2);
IkReal x2412=(gconst129*r21);
IkReal x2413=(gconst128*r10);
IkReal x2414=(gconst129*r11);
IkReal x2415=((1.0)*sj1);
IkReal x2416=(gconst128*r00);
IkReal x2417=(gconst129*r01);
IkReal x2418=(gconst128*r20);
IkReal x2419=((1.0)*x2409);
IkReal x2420=((1.0)*x2410);
evalcond[0]=(((r22*x2410))+(((-1.0)*x2412*x2419))+(((-1.0)*x2418*x2419)));
evalcond[1]=(cj0+(((-1.0)*x2414*x2419))+(((-1.0)*x2413*x2419))+((r12*x2410)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2416*x2419))+(((-1.0)*x2417*x2419))+((r02*x2410)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x2418*x2420))+(((-1.0)*x2412*x2420))+(((-1.0)*r22*x2419))+(((-1.0)*cj2*x2415)));
evalcond[4]=(((cj0*x2411))+(((-1.0)*r02*x2419))+(((-1.0)*x2417*x2420))+(((-1.0)*x2416*x2420))+(((-1.0)*cj0*sj2*x2415)));
evalcond[5]=((((-1.0)*r12*x2419))+((sj0*x2411))+(((-1.0)*x2413*x2420))+(((-1.0)*sj0*sj2*x2415))+(((-1.0)*x2414*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2421=((1.0)*sj0);
CheckValue<IkReal> x2422=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst129*r10))+((gconst128*r11)))),-1);
if(!x2422.valid){
continue;
}
CheckValue<IkReal> x2423 = IKatan2WithCheck(IkReal(((((-1.0)*gconst129*r21*x2421))+(((-1.0)*gconst128*r20*x2421)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2422.value)))+(x2423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2424=IKcos(j4);
IkReal x2425=IKsin(j4);
IkReal x2426=(cj1*cj2);
IkReal x2427=(gconst129*r21);
IkReal x2428=(gconst128*r10);
IkReal x2429=(gconst129*r11);
IkReal x2430=((1.0)*sj1);
IkReal x2431=(gconst128*r00);
IkReal x2432=(gconst129*r01);
IkReal x2433=(gconst128*r20);
IkReal x2434=((1.0)*x2424);
IkReal x2435=((1.0)*x2425);
evalcond[0]=((((-1.0)*x2433*x2434))+((r22*x2425))+(((-1.0)*x2427*x2434)));
evalcond[1]=(cj0+(((-1.0)*x2428*x2434))+(((-1.0)*x2429*x2434))+((r12*x2425)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2431*x2434))+(((-1.0)*x2432*x2434))+((r02*x2425)));
evalcond[3]=((((-1.0)*r22*x2434))+(((-1.0)*x2433*x2435))+(((-1.0)*cj2*x2430))+(((-1.0)*x2427*x2435))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj2*x2430))+(((-1.0)*x2431*x2435))+(((-1.0)*r02*x2434))+(((-1.0)*x2432*x2435))+((cj0*x2426)));
evalcond[5]=((((-1.0)*sj0*sj2*x2430))+((sj0*x2426))+(((-1.0)*x2428*x2435))+(((-1.0)*x2429*x2435))+(((-1.0)*r12*x2434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2436=((1.0)*gconst129);
CheckValue<IkReal> x2437 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x2436))+(((-1.0)*cj0*gconst128*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2436))+((gconst128*r01)))),-1);
if(!x2438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2437.value)+(((1.5707963267949)*(x2438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2439=IKcos(j4);
IkReal x2440=IKsin(j4);
IkReal x2441=(cj1*cj2);
IkReal x2442=(gconst129*r21);
IkReal x2443=(gconst128*r10);
IkReal x2444=(gconst129*r11);
IkReal x2445=((1.0)*sj1);
IkReal x2446=(gconst128*r00);
IkReal x2447=(gconst129*r01);
IkReal x2448=(gconst128*r20);
IkReal x2449=((1.0)*x2439);
IkReal x2450=((1.0)*x2440);
evalcond[0]=(((r22*x2440))+(((-1.0)*x2448*x2449))+(((-1.0)*x2442*x2449)));
evalcond[1]=((((-1.0)*x2443*x2449))+cj0+(((-1.0)*x2444*x2449))+((r12*x2440)));
evalcond[2]=(((r02*x2440))+(((-1.0)*sj0))+(((-1.0)*x2446*x2449))+(((-1.0)*x2447*x2449)));
evalcond[3]=((((-1.0)*x2442*x2450))+(((-1.0)*x2448*x2450))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2449))+(((-1.0)*cj2*x2445)));
evalcond[4]=((((-1.0)*x2446*x2450))+((cj0*x2441))+(((-1.0)*cj0*sj2*x2445))+(((-1.0)*x2447*x2450))+(((-1.0)*r02*x2449)));
evalcond[5]=(((sj0*x2441))+(((-1.0)*x2444*x2450))+(((-1.0)*r12*x2449))+(((-1.0)*sj0*sj2*x2445))+(((-1.0)*x2443*x2450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2451=((1.0)*cj5);
IkReal x2452=((((-1.0)*r10*x2451))+((r11*sj5)));
j4eval[0]=x2452;
j4eval[1]=((IKabs(((((-1.0)*r21*x2451))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2453=((1.0)*sj5);
IkReal x2454=(((cj5*r20))+(((-1.0)*r21*x2453)));
j4eval[0]=x2454;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2453))))));
j4eval[2]=IKsign(x2454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2455=cj5*cj5;
IkReal x2456=r00*r00;
IkReal x2457=(r00*sj5);
IkReal x2458=(cj5*r01);
IkReal x2459=(x2456+(((2.0)*x2457*x2458))+(((-1.0)*x2455*x2456))+(r02*r02)+((x2455*(r01*r01))));
j4eval[0]=x2459;
j4eval[1]=IKsign(x2459);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2457))+(((-1.0)*x2458))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2460=cj5*cj5;
IkReal x2461=r00*r00;
IkReal x2462=(cj5*r01);
IkReal x2463=(r00*sj5);
CheckValue<IkReal> x2464=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2460*x2461))+x2461+(((2.0)*x2462*x2463))+((x2460*(r01*r01)))+(r02*r02))),-1);
if(!x2464.valid){
continue;
}
CheckValue<IkReal> x2465 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2463))+(((-1.0)*x2462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2464.value)))+(x2465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2466=IKcos(j4);
IkReal x2467=IKsin(j4);
IkReal x2468=(r00*sj5);
IkReal x2469=(cj5*r01);
IkReal x2470=(r20*sj5);
IkReal x2471=((1.0)*sj2);
IkReal x2472=(cj5*r21);
IkReal x2473=(cj5*r11);
IkReal x2474=(r10*sj5);
IkReal x2475=((1.0)*x2466);
IkReal x2476=((1.0)*x2467);
evalcond[0]=((((-1.0)*x2472*x2475))+(((-1.0)*x2470*x2475))+((r22*x2467)));
evalcond[1]=(((r12*x2467))+(((-1.0)*x2473*x2475))+(((-1.0)*x2474*x2475)));
evalcond[2]=((-1.0)+(((-1.0)*x2468*x2475))+((r02*x2467))+(((-1.0)*x2469*x2475)));
evalcond[3]=((((-1.0)*x2468*x2476))+(((-1.0)*x2469*x2476))+(((-1.0)*r02*x2475)));
evalcond[4]=((((-1.0)*r12*x2475))+(((-1.0)*x2473*x2476))+(((-1.0)*x2474*x2476))+(((-1.0)*sj1*x2471))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x2472*x2476))+(((-1.0)*x2470*x2476))+(((-1.0)*r22*x2475))+(((-1.0)*cj1*x2471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2477=((1.0)*sj5);
CheckValue<IkReal> x2478=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x2477)))),-1);
if(!x2478.valid){
continue;
}
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2477)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2478.value)))+(x2479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2480=IKcos(j4);
IkReal x2481=IKsin(j4);
IkReal x2482=(r00*sj5);
IkReal x2483=(cj5*r01);
IkReal x2484=(r20*sj5);
IkReal x2485=((1.0)*sj2);
IkReal x2486=(cj5*r21);
IkReal x2487=(cj5*r11);
IkReal x2488=(r10*sj5);
IkReal x2489=((1.0)*x2480);
IkReal x2490=((1.0)*x2481);
evalcond[0]=(((r22*x2481))+(((-1.0)*x2486*x2489))+(((-1.0)*x2484*x2489)));
evalcond[1]=((((-1.0)*x2488*x2489))+(((-1.0)*x2487*x2489))+((r12*x2481)));
evalcond[2]=((-1.0)+((r02*x2481))+(((-1.0)*x2482*x2489))+(((-1.0)*x2483*x2489)));
evalcond[3]=((((-1.0)*x2482*x2490))+(((-1.0)*r02*x2489))+(((-1.0)*x2483*x2490)));
evalcond[4]=((((-1.0)*sj1*x2485))+(((-1.0)*x2488*x2490))+((cj1*cj2))+(((-1.0)*x2487*x2490))+(((-1.0)*r12*x2489)));
evalcond[5]=((((-1.0)*r22*x2489))+(((-1.0)*cj2*sj1))+(((-1.0)*x2486*x2490))+(((-1.0)*cj1*x2485))+(((-1.0)*x2484*x2490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2491=((1.0)*cj5);
CheckValue<IkReal> x2492 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2491))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2491))+((r11*sj5)))),-1);
if(!x2493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2492.value)+(((1.5707963267949)*(x2493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2494=IKcos(j4);
IkReal x2495=IKsin(j4);
IkReal x2496=(r00*sj5);
IkReal x2497=(cj5*r01);
IkReal x2498=(r20*sj5);
IkReal x2499=((1.0)*sj2);
IkReal x2500=(cj5*r21);
IkReal x2501=(cj5*r11);
IkReal x2502=(r10*sj5);
IkReal x2503=((1.0)*x2494);
IkReal x2504=((1.0)*x2495);
evalcond[0]=((((-1.0)*x2498*x2503))+((r22*x2495))+(((-1.0)*x2500*x2503)));
evalcond[1]=((((-1.0)*x2502*x2503))+(((-1.0)*x2501*x2503))+((r12*x2495)));
evalcond[2]=((-1.0)+((r02*x2495))+(((-1.0)*x2496*x2503))+(((-1.0)*x2497*x2503)));
evalcond[3]=((((-1.0)*r02*x2503))+(((-1.0)*x2496*x2504))+(((-1.0)*x2497*x2504)));
evalcond[4]=((((-1.0)*r12*x2503))+(((-1.0)*x2502*x2504))+(((-1.0)*sj1*x2499))+(((-1.0)*x2501*x2504))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x2498*x2504))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2503))+(((-1.0)*x2500*x2504))+(((-1.0)*cj1*x2499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2505=((1.0)*sj5);
IkReal x2506=(((cj5*r10))+(((-1.0)*r11*x2505)));
j4eval[0]=x2506;
j4eval[1]=IKsign(x2506);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2505))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2507=((1.0)*cj5);
IkReal x2508=(((r21*sj5))+(((-1.0)*r20*x2507)));
j4eval[0]=x2508;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2507)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2509=cj5*cj5;
IkReal x2510=r00*r00;
IkReal x2511=(cj5*r01);
IkReal x2512=(r00*sj5);
IkReal x2513=((((-1.0)*(r02*r02)))+(((-1.0)*x2509*(r01*r01)))+(((-2.0)*x2511*x2512))+(((-1.0)*x2510))+((x2509*x2510)));
j4eval[0]=x2513;
j4eval[1]=IKsign(x2513);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2511))+(((-1.0)*x2512))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2514=cj5*cj5;
IkReal x2515=r00*r00;
IkReal x2516=(cj5*r01);
IkReal x2517=(r00*sj5);
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2514*(r01*r01)))+((x2514*x2515))+(((-2.0)*x2516*x2517))+(((-1.0)*(r02*r02)))+(((-1.0)*x2515)))),-1);
if(!x2518.valid){
continue;
}
CheckValue<IkReal> x2519 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2516))+(((-1.0)*x2517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2518.value)))+(x2519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2520=IKcos(j4);
IkReal x2521=IKsin(j4);
IkReal x2522=(r00*sj5);
IkReal x2523=(cj5*r01);
IkReal x2524=(r20*sj5);
IkReal x2525=((1.0)*cj2);
IkReal x2526=(cj5*r21);
IkReal x2527=(cj5*r11);
IkReal x2528=(r10*sj5);
IkReal x2529=((1.0)*x2520);
IkReal x2530=((1.0)*x2521);
evalcond[0]=((((-1.0)*x2524*x2529))+((r22*x2521))+(((-1.0)*x2526*x2529)));
evalcond[1]=((((-1.0)*x2527*x2529))+((r12*x2521))+(((-1.0)*x2528*x2529)));
evalcond[2]=((1.0)+((r02*x2521))+(((-1.0)*x2523*x2529))+(((-1.0)*x2522*x2529)));
evalcond[3]=((((-1.0)*x2522*x2530))+(((-1.0)*x2523*x2530))+(((-1.0)*r02*x2529)));
evalcond[4]=((((-1.0)*x2528*x2530))+(((-1.0)*r12*x2529))+((sj1*sj2))+(((-1.0)*x2527*x2530))+(((-1.0)*cj1*x2525)));
evalcond[5]=((((-1.0)*x2524*x2530))+(((-1.0)*cj1*sj2))+(((-1.0)*x2526*x2530))+(((-1.0)*sj1*x2525))+(((-1.0)*r22*x2529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2531=((1.0)*cj5);
CheckValue<IkReal> x2532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2531))+((r21*sj5)))),-1);
if(!x2532.valid){
continue;
}
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2531)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2532.value)))+(x2533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2534=IKcos(j4);
IkReal x2535=IKsin(j4);
IkReal x2536=(r00*sj5);
IkReal x2537=(cj5*r01);
IkReal x2538=(r20*sj5);
IkReal x2539=((1.0)*cj2);
IkReal x2540=(cj5*r21);
IkReal x2541=(cj5*r11);
IkReal x2542=(r10*sj5);
IkReal x2543=((1.0)*x2534);
IkReal x2544=((1.0)*x2535);
evalcond[0]=((((-1.0)*x2538*x2543))+((r22*x2535))+(((-1.0)*x2540*x2543)));
evalcond[1]=((((-1.0)*x2542*x2543))+(((-1.0)*x2541*x2543))+((r12*x2535)));
evalcond[2]=((1.0)+(((-1.0)*x2536*x2543))+((r02*x2535))+(((-1.0)*x2537*x2543)));
evalcond[3]=((((-1.0)*x2536*x2544))+(((-1.0)*r02*x2543))+(((-1.0)*x2537*x2544)));
evalcond[4]=((((-1.0)*x2542*x2544))+(((-1.0)*r12*x2543))+(((-1.0)*x2541*x2544))+((sj1*sj2))+(((-1.0)*cj1*x2539)));
evalcond[5]=((((-1.0)*sj1*x2539))+(((-1.0)*cj1*sj2))+(((-1.0)*x2538*x2544))+(((-1.0)*r22*x2543))+(((-1.0)*x2540*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2545=((1.0)*sj5);
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2545))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x2545)))),-1);
if(!x2547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2546.value)+(((1.5707963267949)*(x2547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2548=IKcos(j4);
IkReal x2549=IKsin(j4);
IkReal x2550=(r00*sj5);
IkReal x2551=(cj5*r01);
IkReal x2552=(r20*sj5);
IkReal x2553=((1.0)*cj2);
IkReal x2554=(cj5*r21);
IkReal x2555=(cj5*r11);
IkReal x2556=(r10*sj5);
IkReal x2557=((1.0)*x2548);
IkReal x2558=((1.0)*x2549);
evalcond[0]=((((-1.0)*x2554*x2557))+(((-1.0)*x2552*x2557))+((r22*x2549)));
evalcond[1]=((((-1.0)*x2556*x2557))+(((-1.0)*x2555*x2557))+((r12*x2549)));
evalcond[2]=((1.0)+(((-1.0)*x2550*x2557))+(((-1.0)*x2551*x2557))+((r02*x2549)));
evalcond[3]=((((-1.0)*x2550*x2558))+(((-1.0)*r02*x2557))+(((-1.0)*x2551*x2558)));
evalcond[4]=((((-1.0)*r12*x2557))+(((-1.0)*x2556*x2558))+(((-1.0)*x2555*x2558))+((sj1*sj2))+(((-1.0)*cj1*x2553)));
evalcond[5]=((((-1.0)*x2554*x2558))+(((-1.0)*cj1*sj2))+(((-1.0)*x2552*x2558))+(((-1.0)*sj1*x2553))+(((-1.0)*r22*x2557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2559=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2559);
rxp1_1=(px*r21);
rxp1_2=(r11*x2559);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2560=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2560);
rxp1_1=(px*r21);
rxp1_2=(r11*x2560);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2561=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2561);
rxp1_1=(px*r21);
rxp1_2=(r11*x2561);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2564=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x2564.valid){
continue;
}
IkReal x2562=x2564.value;
IkReal x2563=(sj0*x2562);
sj4array[0]=((((-1.0)*cj1*cj2*x2563))+((sj1*sj2*x2563)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2565=IKcos(j4);
IkReal x2566=IKsin(j4);
IkReal x2567=(r20*sj5);
IkReal x2568=((1.0)*cj5*r21);
IkReal x2569=((1.0)*x2565);
evalcond[0]=((-1.0)*r02*x2565);
evalcond[1]=((((-1.0)*sj0))+((r02*x2566)));
evalcond[2]=((((-1.0)*x2565*x2568))+(((-1.0)*x2567*x2569)));
evalcond[3]=((((-1.0)*r10*sj5*x2569))+(((-1.0)*cj5*r11*x2569)));
evalcond[4]=((((-1.0)*x2566*x2568))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2566*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2571=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x2571.valid){
continue;
}
IkReal x2570=x2571.value;
sj4array[0]=(((cj1*sj2*x2570))+((cj2*sj1*x2570)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2572=IKcos(j4);
IkReal x2573=IKsin(j4);
IkReal x2574=((1.0)*sj0);
IkReal x2575=(r10*sj5);
IkReal x2576=((1.0)*x2573);
IkReal x2577=((1.0)*x2572);
IkReal x2578=(cj5*x2577);
evalcond[0]=((-1.0)*r02*x2572);
evalcond[1]=((((-1.0)*x2574))+((r02*x2573)));
evalcond[2]=((((-1.0)*r20*sj5*x2577))+(((-1.0)*r21*x2578)));
evalcond[3]=((((-1.0)*x2575*x2577))+(((-1.0)*r11*x2578)));
evalcond[4]=((((-1.0)*x2575*x2576))+((cj1*cj2*sj0))+(((-1.0)*cj5*r11*x2576))+(((-1.0)*sj1*sj2*x2574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2579=IKPowWithIntegerCheck(r02,-1);
if(!x2579.valid){
continue;
}
sj4array[0]=(sj0*(x2579.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2580=IKcos(j4);
IkReal x2581=IKsin(j4);
IkReal x2582=((1.0)*sj1);
IkReal x2583=((1.0)*cj5*r21);
IkReal x2584=((1.0)*cj5*r11);
IkReal x2585=((1.0)*sj5*x2581);
IkReal x2586=((1.0)*sj5*x2580);
evalcond[0]=((-1.0)*r02*x2580);
evalcond[1]=((((-1.0)*r20*x2586))+(((-1.0)*x2580*x2583)));
evalcond[2]=((((-1.0)*r10*x2586))+(((-1.0)*x2580*x2584)));
evalcond[3]=((((-1.0)*r20*x2585))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2582))+(((-1.0)*x2581*x2583)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x2582))+(((-1.0)*r10*x2585))+(((-1.0)*x2581*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2587=((1.0)*sj0);
IkReal x2588=((1.0)*cj0);
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5*x2587))+(((-1.0)*cj5*r11*x2587))+(((-1.0)*r00*sj5*x2588))+(((-1.0)*cj5*r01*x2588)))),IkReal(((((-1.0)*r02*x2588))+(((-1.0)*r12*x2587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2589.value)+(((1.5707963267949)*(x2590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2591=IKcos(j4);
IkReal x2592=IKsin(j4);
IkReal x2593=(cj1*cj2);
IkReal x2594=(r00*sj5);
IkReal x2595=(cj5*r01);
IkReal x2596=(r20*sj5);
IkReal x2597=(cj5*r21);
IkReal x2598=((1.0)*sj1);
IkReal x2599=(cj5*r11);
IkReal x2600=(r10*sj5);
IkReal x2601=((1.0)*x2591);
IkReal x2602=((1.0)*x2592);
evalcond[0]=(((r22*x2592))+(((-1.0)*x2596*x2601))+(((-1.0)*x2597*x2601)));
evalcond[1]=(cj0+(((-1.0)*x2600*x2601))+((r12*x2592))+(((-1.0)*x2599*x2601)));
evalcond[2]=((((-1.0)*x2595*x2601))+(((-1.0)*sj0))+(((-1.0)*x2594*x2601))+((r02*x2592)));
evalcond[3]=((((-1.0)*x2596*x2602))+(((-1.0)*x2597*x2602))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2598))+(((-1.0)*r22*x2601)));
evalcond[4]=((((-1.0)*x2595*x2602))+(((-1.0)*cj0*sj2*x2598))+((cj0*x2593))+(((-1.0)*r02*x2601))+(((-1.0)*x2594*x2602)));
evalcond[5]=((((-1.0)*sj0*sj2*x2598))+(((-1.0)*x2600*x2602))+(((-1.0)*r12*x2601))+((sj0*x2593))+(((-1.0)*x2599*x2602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2603=((1.0)*cj5);
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x2603)))),-1);
if(!x2604.valid){
continue;
}
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x2603))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2604.value)))+(x2605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2606=IKcos(j4);
IkReal x2607=IKsin(j4);
IkReal x2608=(cj1*cj2);
IkReal x2609=(r00*sj5);
IkReal x2610=(cj5*r01);
IkReal x2611=(r20*sj5);
IkReal x2612=(cj5*r21);
IkReal x2613=((1.0)*sj1);
IkReal x2614=(cj5*r11);
IkReal x2615=(r10*sj5);
IkReal x2616=((1.0)*x2606);
IkReal x2617=((1.0)*x2607);
evalcond[0]=((((-1.0)*x2611*x2616))+(((-1.0)*x2612*x2616))+((r22*x2607)));
evalcond[1]=(cj0+((r12*x2607))+(((-1.0)*x2615*x2616))+(((-1.0)*x2614*x2616)));
evalcond[2]=((((-1.0)*x2609*x2616))+(((-1.0)*sj0))+(((-1.0)*x2610*x2616))+((r02*x2607)));
evalcond[3]=((((-1.0)*x2611*x2617))+(((-1.0)*x2612*x2617))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2616))+(((-1.0)*cj2*x2613)));
evalcond[4]=((((-1.0)*x2609*x2617))+(((-1.0)*x2610*x2617))+(((-1.0)*cj0*sj2*x2613))+((cj0*x2608))+(((-1.0)*r02*x2616)));
evalcond[5]=((((-1.0)*r12*x2616))+((sj0*x2608))+(((-1.0)*sj0*sj2*x2613))+(((-1.0)*x2615*x2617))+(((-1.0)*x2614*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2618=((1.0)*cj0);
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x2619.valid){
continue;
}
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2618))+(((-1.0)*cj5*r21*x2618)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2619.value)))+(x2620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2621=IKcos(j4);
IkReal x2622=IKsin(j4);
IkReal x2623=(cj1*cj2);
IkReal x2624=(r00*sj5);
IkReal x2625=(cj5*r01);
IkReal x2626=(r20*sj5);
IkReal x2627=(cj5*r21);
IkReal x2628=((1.0)*sj1);
IkReal x2629=(cj5*r11);
IkReal x2630=(r10*sj5);
IkReal x2631=((1.0)*x2621);
IkReal x2632=((1.0)*x2622);
evalcond[0]=(((r22*x2622))+(((-1.0)*x2626*x2631))+(((-1.0)*x2627*x2631)));
evalcond[1]=(cj0+(((-1.0)*x2629*x2631))+(((-1.0)*x2630*x2631))+((r12*x2622)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2622))+(((-1.0)*x2625*x2631))+(((-1.0)*x2624*x2631)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2628))+(((-1.0)*x2626*x2632))+(((-1.0)*r22*x2631))+(((-1.0)*x2627*x2632)));
evalcond[4]=((((-1.0)*r02*x2631))+(((-1.0)*cj0*sj2*x2628))+((cj0*x2623))+(((-1.0)*x2625*x2632))+(((-1.0)*x2624*x2632)));
evalcond[5]=((((-1.0)*x2629*x2632))+(((-1.0)*r12*x2631))+(((-1.0)*x2630*x2632))+((sj0*x2623))+(((-1.0)*sj0*sj2*x2628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2633=r20*r20;
IkReal x2634=cj5*cj5;
IkReal x2635=(cj5*r21);
IkReal x2636=(cj2*sj1);
IkReal x2637=(cj1*sj2);
IkReal x2638=(r20*sj5);
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2635*x2638))+(((-1.0)*(r22*r22)))+((x2633*x2634))+(((-1.0)*x2633))+(((-1.0)*x2634*(r21*r21))))),-1);
if(!x2639.valid){
continue;
}
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal((((x2637*x2638))+((x2635*x2637))+((x2635*x2636))+((x2636*x2638)))),IkReal((((r22*x2637))+((r22*x2636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2639.value)))+(x2640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2641=IKcos(j4);
IkReal x2642=IKsin(j4);
IkReal x2643=(cj5*r21);
IkReal x2644=(r20*sj5);
IkReal x2645=((1.0)*x2641);
IkReal x2646=((1.0)*x2642);
evalcond[0]=((((-1.0)*x2644*x2645))+((r22*x2642))+(((-1.0)*x2643*x2645)));
evalcond[1]=((((-1.0)*r22*x2645))+(((-1.0)*x2644*x2646))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2643*x2646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2647=(cj4*cj5);
IkReal x2648=(cj4*sj5);
if( IKabs(((((-1.0)*r01*x2647))+((r02*sj4))+(((-1.0)*r00*x2648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2647))+((r10*x2648))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2647))+((r02*sj4))+(((-1.0)*r00*x2648))))+IKsqr((((r11*x2647))+((r10*x2648))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2647))+((r02*sj4))+(((-1.0)*r00*x2648))), (((r11*x2647))+((r10*x2648))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2649=IKcos(j0);
IkReal x2650=IKsin(j0);
IkReal x2651=((1.0)*sj2);
IkReal x2652=((1.0)*r00);
IkReal x2653=(sj4*sj5);
IkReal x2654=((1.0)*r10);
IkReal x2655=(r11*sj5);
IkReal x2656=((1.0)*cj2);
IkReal x2657=((0.1535)*cj2);
IkReal x2658=((1.0)*cj5);
IkReal x2659=(cj4*sj5);
IkReal x2660=((1.0)*cj4);
IkReal x2661=((0.121)*cj5);
IkReal x2662=(r01*sj5);
IkReal x2663=(cj1*x2649);
IkReal x2664=(cj1*x2650);
IkReal x2665=(sj1*x2649);
IkReal x2666=(sj1*x2650);
IkReal x2667=(sj2*x2666);
evalcond[0]=((((-1.0)*cj4*r11*x2658))+((r12*sj4))+(((-1.0)*x2654*x2659))+x2649);
evalcond[1]=((((-1.0)*x2652*x2659))+(((-1.0)*cj4*r01*x2658))+((r02*sj4))+(((-1.0)*x2650)));
evalcond[2]=((((-1.0)*cj5*x2652))+(((-1.0)*x2651*x2663))+(((-1.0)*x2656*x2665))+x2662);
evalcond[3]=((((-1.0)*cj5*x2654))+(((-1.0)*x2651*x2664))+(((-1.0)*x2656*x2666))+x2655);
evalcond[4]=((((-1.0)*x2652*x2653))+(((-1.0)*r02*x2660))+((cj2*x2663))+(((-1.0)*r01*sj4*x2658))+(((-1.0)*x2651*x2665)));
evalcond[5]=((((-1.0)*r12*x2660))+(((-1.0)*r11*sj4*x2658))+((cj2*x2664))+(((-1.0)*x2651*x2666))+(((-1.0)*x2653*x2654)));
evalcond[6]=((((-0.00175)*x2650))+((x2657*x2663))+(((-0.1535)*sj2*x2665))+(((0.0385)*x2663))+(((-0.121)*x2662))+(((-1.0)*px))+(((0.1445)*x2665))+((r00*x2661)));
evalcond[7]=(((x2657*x2664))+(((0.0385)*x2664))+(((-0.1535)*x2667))+((r10*x2661))+(((-0.121)*x2655))+(((-1.0)*py))+(((0.1445)*x2666))+(((0.00175)*x2649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2668=((1.0)*sj5);
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x2668)))),IkReal(((((-1.0)*r01*x2668))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
CheckValue<IkReal> x2670=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x2670.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2669.value)+(((1.5707963267949)*(x2670.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2671=IKcos(j0);
IkReal x2672=IKsin(j0);
IkReal x2673=((0.1535)*sj1);
IkReal x2674=((1.0)*cj5);
IkReal x2675=(r11*sj5);
IkReal x2676=((1.0)*cj2);
IkReal x2677=((0.1535)*cj2);
IkReal x2678=((0.121)*cj5);
IkReal x2679=(r01*sj5);
IkReal x2680=(sj2*x2672);
IkReal x2681=(cj1*x2671);
IkReal x2682=(cj1*x2672);
IkReal x2683=(sj1*x2671);
IkReal x2684=(sj1*x2672);
evalcond[0]=((((-1.0)*sj2*x2681))+(((-1.0)*r00*x2674))+(((-1.0)*x2676*x2683))+x2679);
evalcond[1]=((((-1.0)*x2676*x2684))+(((-1.0)*cj1*x2680))+(((-1.0)*r10*x2674))+x2675);
evalcond[2]=((((0.0385)*x2681))+(((-0.00175)*x2672))+(((-0.121)*x2679))+(((-1.0)*px))+(((0.1445)*x2683))+((r00*x2678))+((x2677*x2681))+(((-1.0)*sj2*x2671*x2673)));
evalcond[3]=((((0.0385)*x2682))+(((-0.121)*x2675))+((r10*x2678))+(((-1.0)*py))+(((0.1445)*x2684))+(((-1.0)*x2673*x2680))+(((0.00175)*x2671))+((x2677*x2682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2685=((1.0)*cj5);
IkReal x2686=(((r01*sj5))+(((-1.0)*r00*x2685)));
j4eval[0]=x2686;
j4eval[1]=IKsign(x2686);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x2685)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2687=((1.0)*cj5);
IkReal x2688=(((r11*sj5))+(((-1.0)*r10*x2687)));
j4eval[0]=x2688;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x2687))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x2688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2689=((1.0)*sj0);
IkReal x2690=((1.0)*sj5);
IkReal x2691=((1.0)*cj0);
IkReal x2692=(((cj5*r20))+(((-1.0)*r21*x2690)));
j4eval[0]=x2692;
j4eval[1]=((IKabs(((((-1.0)*r12*x2689))+(((-1.0)*r02*x2691)))))+(IKabs(((((-1.0)*cj5*r01*x2691))+(((-1.0)*cj0*r00*x2690))+(((-1.0)*r10*sj5*x2689))+(((-1.0)*cj5*r11*x2689))))));
j4eval[2]=IKsign(x2692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2693=((-1.0)*r21);
IkReal x2695 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2695)==0){
continue;
}
IkReal x2694=pow(x2695,-0.5);
CheckValue<IkReal> x2696 = IKatan2WithCheck(IkReal(r20),IkReal(x2693),IKFAST_ATAN2_MAGTHRESH);
if(!x2696.valid){
continue;
}
IkReal gconst112=((-1.0)*(x2696.value));
IkReal gconst113=((-1.0)*r20*x2694);
IkReal gconst114=(x2693*x2694);
CheckValue<IkReal> x2697 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2697.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2697.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2698=((-1.0)*r21);
CheckValue<IkReal> x2701 = IKatan2WithCheck(IkReal(r20),IkReal(x2698),IKFAST_ATAN2_MAGTHRESH);
if(!x2701.valid){
continue;
}
IkReal x2699=((-1.0)*(x2701.value));
IkReal x2700=x2694;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst113;
cj5=gconst114;
j5=x2699;
IkReal gconst112=x2699;
IkReal gconst113=((-1.0)*r20*x2700);
IkReal gconst114=(x2698*x2700);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2702=((-1.0)*r21);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(r20),IkReal(x2702),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
IkReal x2703=((-1.0)*(x2705.value));
IkReal x2704=x2694;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst113;
cj5=gconst114;
j5=x2703;
IkReal gconst112=x2703;
IkReal gconst113=((-1.0)*r20*x2704);
IkReal gconst114=(x2702*x2704);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2706=((-1.0)*r21);
CheckValue<IkReal> x2709 = IKatan2WithCheck(IkReal(r20),IkReal(x2706),IKFAST_ATAN2_MAGTHRESH);
if(!x2709.valid){
continue;
}
IkReal x2707=((-1.0)*(x2709.value));
IkReal x2708=x2694;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst113;
cj5=gconst114;
j5=x2707;
IkReal gconst112=x2707;
IkReal gconst113=((-1.0)*r20*x2708);
IkReal gconst114=(x2706*x2708);
IkReal x2710=((1.0)*(r22*r22));
CheckValue<IkReal> x2714=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2710))),-1);
if(!x2714.valid){
continue;
}
IkReal x2711=x2714.value;
IkReal x2712=((1.0)*x2711);
IkReal x2713=((((-1.0)*x2710))+(((-1.0)*x2712*(r21*r21*r21*r21)))+(((-1.0)*x2712*(r20*r20*r20*r20)))+(((-2.0)*x2711*(r20*r20)*(r21*r21))));
j4eval[0]=x2713;
j4eval[1]=IKsign(x2713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2715=(gconst114*r21);
IkReal x2716=(cj2*sj1);
IkReal x2717=(cj1*sj2);
IkReal x2718=(gconst113*r20);
CheckValue<IkReal> x2719=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x2718*x2718)))+(((-1.0)*(x2715*x2715)))+(((-1.0)*(r22*r22)))+(((-2.0)*x2715*x2718)))),-1);
if(!x2719.valid){
continue;
}
CheckValue<IkReal> x2720 = IKatan2WithCheck(IkReal((((x2716*x2718))+((x2715*x2717))+((x2715*x2716))+((x2717*x2718)))),IkReal((((r22*x2716))+((r22*x2717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2719.value)))+(x2720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2721=IKcos(j4);
IkReal x2722=IKsin(j4);
IkReal x2723=(cj1*cj2);
IkReal x2724=(gconst114*r01);
IkReal x2725=(gconst114*r21);
IkReal x2726=(gconst113*r20);
IkReal x2727=(gconst113*r00);
IkReal x2728=((1.0)*sj1);
IkReal x2729=(gconst113*r10);
IkReal x2730=(gconst114*r11);
IkReal x2731=((1.0)*x2721);
IkReal x2732=((1.0)*x2722);
evalcond[0]=((((-1.0)*x2726*x2731))+((r22*x2722))+(((-1.0)*x2725*x2731)));
evalcond[1]=((((-1.0)*x2730*x2731))+cj0+((r12*x2722))+(((-1.0)*x2729*x2731)));
evalcond[2]=(((r02*x2722))+(((-1.0)*sj0))+(((-1.0)*x2727*x2731))+(((-1.0)*x2724*x2731)));
evalcond[3]=((((-1.0)*cj2*x2728))+(((-1.0)*x2726*x2732))+(((-1.0)*x2725*x2732))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2731)));
evalcond[4]=((((-1.0)*x2727*x2732))+(((-1.0)*x2724*x2732))+(((-1.0)*r02*x2731))+(((-1.0)*cj0*sj2*x2728))+((cj0*x2723)));
evalcond[5]=((((-1.0)*x2730*x2732))+(((-1.0)*r12*x2731))+(((-1.0)*sj0*sj2*x2728))+((sj0*x2723))+(((-1.0)*x2729*x2732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2733=((1.0)*sj0);
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal(((((-1.0)*gconst114*r21*x2733))+(((-1.0)*gconst113*r20*x2733)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
CheckValue<IkReal> x2735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst114*r10))+((gconst113*r11)))),-1);
if(!x2735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2734.value)+(((1.5707963267949)*(x2735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2736=IKcos(j4);
IkReal x2737=IKsin(j4);
IkReal x2738=(cj1*cj2);
IkReal x2739=(gconst114*r01);
IkReal x2740=(gconst114*r21);
IkReal x2741=(gconst113*r20);
IkReal x2742=(gconst113*r00);
IkReal x2743=((1.0)*sj1);
IkReal x2744=(gconst113*r10);
IkReal x2745=(gconst114*r11);
IkReal x2746=((1.0)*x2736);
IkReal x2747=((1.0)*x2737);
evalcond[0]=(((r22*x2737))+(((-1.0)*x2740*x2746))+(((-1.0)*x2741*x2746)));
evalcond[1]=((((-1.0)*x2744*x2746))+cj0+(((-1.0)*x2745*x2746))+((r12*x2737)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2737))+(((-1.0)*x2739*x2746))+(((-1.0)*x2742*x2746)));
evalcond[3]=((((-1.0)*x2740*x2747))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2743))+(((-1.0)*x2741*x2747))+(((-1.0)*r22*x2746)));
evalcond[4]=((((-1.0)*x2739*x2747))+(((-1.0)*cj0*sj2*x2743))+((cj0*x2738))+(((-1.0)*r02*x2746))+(((-1.0)*x2742*x2747)));
evalcond[5]=((((-1.0)*x2744*x2747))+(((-1.0)*x2745*x2747))+(((-1.0)*r12*x2746))+((sj0*x2738))+(((-1.0)*sj0*sj2*x2743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2748=((1.0)*gconst114);
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x2748))+(((-1.0)*cj0*gconst113*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
CheckValue<IkReal> x2750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2748))+((gconst113*r01)))),-1);
if(!x2750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2749.value)+(((1.5707963267949)*(x2750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2751=IKcos(j4);
IkReal x2752=IKsin(j4);
IkReal x2753=(cj1*cj2);
IkReal x2754=(gconst114*r01);
IkReal x2755=(gconst114*r21);
IkReal x2756=(gconst113*r20);
IkReal x2757=(gconst113*r00);
IkReal x2758=((1.0)*sj1);
IkReal x2759=(gconst113*r10);
IkReal x2760=(gconst114*r11);
IkReal x2761=((1.0)*x2751);
IkReal x2762=((1.0)*x2752);
evalcond[0]=((((-1.0)*x2755*x2761))+((r22*x2752))+(((-1.0)*x2756*x2761)));
evalcond[1]=(cj0+((r12*x2752))+(((-1.0)*x2760*x2761))+(((-1.0)*x2759*x2761)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2757*x2761))+(((-1.0)*x2754*x2761))+((r02*x2752)));
evalcond[3]=((((-1.0)*x2755*x2762))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2758))+(((-1.0)*x2756*x2762))+(((-1.0)*r22*x2761)));
evalcond[4]=(((cj0*x2753))+(((-1.0)*cj0*sj2*x2758))+(((-1.0)*r02*x2761))+(((-1.0)*x2757*x2762))+(((-1.0)*x2754*x2762)));
evalcond[5]=((((-1.0)*r12*x2761))+(((-1.0)*x2760*x2762))+(((-1.0)*x2759*x2762))+((sj0*x2753))+(((-1.0)*sj0*sj2*x2758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2765 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2765)==0){
continue;
}
IkReal x2763=pow(x2765,-0.5);
IkReal x2764=((1.0)*x2763);
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
IkReal gconst115=((3.14159265358979)+(((-1.0)*(x2766.value))));
IkReal gconst116=(r20*x2764);
IkReal gconst117=(r21*x2764);
CheckValue<IkReal> x2767 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2767.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2767.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2771 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2771.valid){
continue;
}
IkReal x2768=((1.0)*(x2771.value));
IkReal x2769=x2763;
IkReal x2770=((1.0)*x2769);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2768)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2768)));
IkReal gconst116=(r20*x2770);
IkReal gconst117=(r21*x2770);
IkReal x2772=r22*r22;
IkReal x2773=((1.0)*x2772);
CheckValue<IkReal> x2777=IKPowWithIntegerCheck(((-1.0)+x2772),-1);
if(!x2777.valid){
continue;
}
IkReal x2774=x2777.value;
if((((1.0)+(((-1.0)*x2773)))) < -0.00001)
continue;
IkReal x2775=IKsqrt(((1.0)+(((-1.0)*x2773))));
IkReal x2776=(cj0*x2774*x2775);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2776+(((-1.0)*x2773*x2776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2781 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2781.valid){
continue;
}
IkReal x2778=((1.0)*(x2781.value));
IkReal x2779=x2763;
IkReal x2780=((1.0)*x2779);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2778)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2778)));
IkReal gconst116=(r20*x2780);
IkReal gconst117=(r21*x2780);
IkReal x2782=r22*r22;
IkReal x2783=((1.0)*x2782);
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(((-1.0)+x2782),-1);
if(!x2787.valid){
continue;
}
IkReal x2784=x2787.value;
if((((1.0)+(((-1.0)*x2783)))) < -0.00001)
continue;
IkReal x2785=IKsqrt(((1.0)+(((-1.0)*x2783))));
IkReal x2786=(sj0*x2784*x2785);
j4eval[0]=((IKabs((x2786+(((-1.0)*x2783*x2786)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
IkReal x2788=((1.0)*(x2791.value));
IkReal x2789=x2763;
IkReal x2790=((1.0)*x2789);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2788)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2788)));
IkReal gconst116=(r20*x2790);
IkReal gconst117=(r21*x2790);
IkReal x2792=r22*r22;
IkReal x2793=((1.0)*r12*sj0);
IkReal x2794=((1.0)*cj0*r02);
CheckValue<IkReal> x2798=IKPowWithIntegerCheck(((-1.0)+x2792),-1);
if(!x2798.valid){
continue;
}
IkReal x2795=x2798.value;
if((((1.0)+(((-1.0)*x2792)))) < -0.00001)
continue;
IkReal x2796=IKsqrt(((1.0)+(((-1.0)*x2792))));
IkReal x2797=(r22*x2795*x2796);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2793*x2797))+(((-1.0)*x2794*x2797)))))+(IKabs(((((-1.0)*x2793))+(((-1.0)*x2794))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2799=((1.0)*sj0);
IkReal x2800=((1.0)*cj0);
CheckValue<IkReal> x2801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r21))+((gconst117*r20)))),-1);
if(!x2801.valid){
continue;
}
CheckValue<IkReal> x2802 = IKatan2WithCheck(IkReal(((((-1.0)*gconst117*r01*x2800))+(((-1.0)*gconst116*r00*x2800))+(((-1.0)*gconst117*r11*x2799))+(((-1.0)*gconst116*r10*x2799)))),IkReal(((((-1.0)*r02*x2800))+(((-1.0)*r12*x2799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2801.value)))+(x2802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2803=IKcos(j4);
IkReal x2804=IKsin(j4);
IkReal x2805=(cj1*cj2);
IkReal x2806=((1.0)*sj1);
IkReal x2807=((1.0)*x2803);
IkReal x2808=((1.0)*gconst117*x2804);
IkReal x2809=((1.0)*gconst116*x2804);
evalcond[0]=((((-1.0)*gconst117*r21*x2807))+(((-1.0)*gconst116*r20*x2807))+((r22*x2804)));
evalcond[1]=(((r12*x2804))+cj0+(((-1.0)*gconst116*r10*x2807))+(((-1.0)*gconst117*r11*x2807)));
evalcond[2]=((((-1.0)*gconst117*r01*x2807))+(((-1.0)*sj0))+((r02*x2804))+(((-1.0)*gconst116*r00*x2807)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*x2808))+(((-1.0)*r20*x2809))+(((-1.0)*r22*x2807))+(((-1.0)*cj2*x2806)));
evalcond[4]=((((-1.0)*r01*x2808))+(((-1.0)*r00*x2809))+(((-1.0)*cj0*sj2*x2806))+((cj0*x2805))+(((-1.0)*r02*x2807)));
evalcond[5]=((((-1.0)*r10*x2809))+(((-1.0)*r11*x2808))+(((-1.0)*r12*x2807))+(((-1.0)*sj0*sj2*x2806))+((sj0*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2810=((1.0)*sj0);
CheckValue<IkReal> x2811 = IKatan2WithCheck(IkReal(((((-1.0)*gconst117*r21*x2810))+(((-1.0)*gconst116*r20*x2810)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst117*r10))+((gconst116*r11)))),-1);
if(!x2812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2811.value)+(((1.5707963267949)*(x2812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2813=IKcos(j4);
IkReal x2814=IKsin(j4);
IkReal x2815=(cj1*cj2);
IkReal x2816=((1.0)*sj1);
IkReal x2817=((1.0)*x2813);
IkReal x2818=((1.0)*gconst117*x2814);
IkReal x2819=((1.0)*gconst116*x2814);
evalcond[0]=((((-1.0)*gconst117*r21*x2817))+((r22*x2814))+(((-1.0)*gconst116*r20*x2817)));
evalcond[1]=(cj0+((r12*x2814))+(((-1.0)*gconst117*r11*x2817))+(((-1.0)*gconst116*r10*x2817)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst117*r01*x2817))+((r02*x2814))+(((-1.0)*gconst116*r00*x2817)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x2817))+(((-1.0)*r20*x2819))+(((-1.0)*r21*x2818))+(((-1.0)*cj2*x2816)));
evalcond[4]=((((-1.0)*cj0*sj2*x2816))+(((-1.0)*r02*x2817))+(((-1.0)*r00*x2819))+(((-1.0)*r01*x2818))+((cj0*x2815)));
evalcond[5]=((((-1.0)*r12*x2817))+(((-1.0)*r11*x2818))+((sj0*x2815))+(((-1.0)*sj0*sj2*x2816))+(((-1.0)*r10*x2819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2820=((1.0)*cj0);
CheckValue<IkReal> x2821=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst117*r00))+((gconst116*r01)))),-1);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822 = IKatan2WithCheck(IkReal(((((-1.0)*gconst117*r21*x2820))+(((-1.0)*gconst116*r20*x2820)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2821.value)))+(x2822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2823=IKcos(j4);
IkReal x2824=IKsin(j4);
IkReal x2825=(cj1*cj2);
IkReal x2826=((1.0)*sj1);
IkReal x2827=((1.0)*x2823);
IkReal x2828=((1.0)*gconst117*x2824);
IkReal x2829=((1.0)*gconst116*x2824);
evalcond[0]=((((-1.0)*gconst117*r21*x2827))+(((-1.0)*gconst116*r20*x2827))+((r22*x2824)));
evalcond[1]=(cj0+(((-1.0)*gconst116*r10*x2827))+(((-1.0)*gconst117*r11*x2827))+((r12*x2824)));
evalcond[2]=(((r02*x2824))+(((-1.0)*sj0))+(((-1.0)*gconst116*r00*x2827))+(((-1.0)*gconst117*r01*x2827)));
evalcond[3]=((((-1.0)*r20*x2829))+(((-1.0)*r21*x2828))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2827))+(((-1.0)*cj2*x2826)));
evalcond[4]=((((-1.0)*cj0*sj2*x2826))+(((-1.0)*r00*x2829))+(((-1.0)*r01*x2828))+(((-1.0)*r02*x2827))+((cj0*x2825)));
evalcond[5]=((((-1.0)*r12*x2827))+(((-1.0)*r11*x2828))+(((-1.0)*r10*x2829))+(((-1.0)*sj0*sj2*x2826))+((sj0*x2825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2831 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2831)==0){
continue;
}
IkReal x2830=pow(x2831,-0.5);
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
IkReal gconst118=((-1.0)*(x2832.value));
IkReal gconst119=(r10*x2830);
IkReal gconst120=(r11*x2830);
CheckValue<IkReal> x2833 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2833.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2833.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2836 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2836.valid){
continue;
}
IkReal x2834=((-1.0)*(x2836.value));
IkReal x2835=x2830;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst119;
cj5=gconst120;
j5=x2834;
IkReal gconst118=x2834;
IkReal gconst119=(r10*x2835);
IkReal gconst120=(r11*x2835);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2837=((1.0)*sj0);
IkReal x2838=((1.0)*cj0);
CheckValue<IkReal> x2839=IKPowWithIntegerCheck(IKsign((((gconst120*r20))+(((-1.0)*gconst119*r21)))),-1);
if(!x2839.valid){
continue;
}
CheckValue<IkReal> x2840 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r10*x2837))+(((-1.0)*gconst119*r00*x2838))+(((-1.0)*gconst120*r01*x2838))+(((-1.0)*gconst120*r11*x2837)))),IkReal(((((-1.0)*r12*x2837))+(((-1.0)*r02*x2838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2839.value)))+(x2840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2841=IKcos(j4);
IkReal x2842=IKsin(j4);
IkReal x2843=(cj1*cj2);
IkReal x2844=(gconst119*r20);
IkReal x2845=(gconst119*r10);
IkReal x2846=((1.0)*sj1);
IkReal x2847=(gconst119*r00);
IkReal x2848=(gconst120*r11);
IkReal x2849=(gconst120*r01);
IkReal x2850=(gconst120*r21);
IkReal x2851=((1.0)*x2841);
IkReal x2852=((1.0)*x2842);
evalcond[0]=((((-1.0)*x2850*x2851))+((r22*x2842))+(((-1.0)*x2844*x2851)));
evalcond[1]=(cj0+(((-1.0)*x2845*x2851))+((r12*x2842))+(((-1.0)*x2848*x2851)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2849*x2851))+(((-1.0)*x2847*x2851))+((r02*x2842)));
evalcond[3]=((((-1.0)*x2850*x2852))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2851))+(((-1.0)*x2844*x2852))+(((-1.0)*cj2*x2846)));
evalcond[4]=((((-1.0)*x2849*x2852))+(((-1.0)*r02*x2851))+(((-1.0)*cj0*sj2*x2846))+((cj0*x2843))+(((-1.0)*x2847*x2852)));
evalcond[5]=((((-1.0)*x2845*x2852))+((sj0*x2843))+(((-1.0)*r12*x2851))+(((-1.0)*sj0*sj2*x2846))+(((-1.0)*x2848*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2853=((1.0)*gconst120);
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2853))+((gconst119*r01)))),-1);
if(!x2854.valid){
continue;
}
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x2853))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2854.value)))+(x2855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2856=IKcos(j4);
IkReal x2857=IKsin(j4);
IkReal x2858=(cj1*cj2);
IkReal x2859=(gconst119*r20);
IkReal x2860=(gconst119*r10);
IkReal x2861=((1.0)*sj1);
IkReal x2862=(gconst119*r00);
IkReal x2863=(gconst120*r11);
IkReal x2864=(gconst120*r01);
IkReal x2865=(gconst120*r21);
IkReal x2866=((1.0)*x2856);
IkReal x2867=((1.0)*x2857);
evalcond[0]=((((-1.0)*x2865*x2866))+(((-1.0)*x2859*x2866))+((r22*x2857)));
evalcond[1]=(cj0+((r12*x2857))+(((-1.0)*x2860*x2866))+(((-1.0)*x2863*x2866)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2862*x2866))+(((-1.0)*x2864*x2866))+((r02*x2857)));
evalcond[3]=((((-1.0)*x2865*x2867))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2866))+(((-1.0)*x2859*x2867))+(((-1.0)*cj2*x2861)));
evalcond[4]=((((-1.0)*r02*x2866))+(((-1.0)*x2862*x2867))+(((-1.0)*x2864*x2867))+((cj0*x2858))+(((-1.0)*cj0*sj2*x2861)));
evalcond[5]=((((-1.0)*sj0*sj2*x2861))+(((-1.0)*r12*x2866))+((sj0*x2858))+(((-1.0)*x2860*x2867))+(((-1.0)*x2863*x2867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2870 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2870)==0){
continue;
}
IkReal x2868=pow(x2870,-0.5);
IkReal x2869=((-1.0)*x2868);
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
IkReal gconst121=((3.14159265358979)+(((-1.0)*(x2871.value))));
IkReal gconst122=(r10*x2869);
IkReal gconst123=(r11*x2869);
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2872.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2876 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2876.valid){
continue;
}
IkReal x2873=((1.0)*(x2876.value));
IkReal x2874=x2868;
IkReal x2875=((-1.0)*x2874);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2873)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2873)));
IkReal gconst122=(r10*x2875);
IkReal gconst123=(r11*x2875);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2880 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2880.valid){
continue;
}
IkReal x2877=((1.0)*(x2880.value));
IkReal x2878=x2868;
IkReal x2879=((-1.0)*x2878);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2877)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2877)));
IkReal gconst122=(r10*x2879);
IkReal gconst123=(r11*x2879);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2884 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2884.valid){
continue;
}
IkReal x2881=((1.0)*(x2884.value));
IkReal x2882=x2868;
IkReal x2883=((-1.0)*x2882);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2881)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2881)));
IkReal gconst122=(r10*x2883);
IkReal gconst123=(r11*x2883);
IkReal x2885=r12*r12;
IkReal x2886=((1.0)*sj0);
IkReal x2887=(cj0*r02);
IkReal x2888=x2868;
j4eval[0]=((IKabs(((((-1.0)*x2887))+(((-1.0)*r12*x2886)))))+(IKabs((((sj0*x2885*x2888))+((r12*x2887*x2888))+(((-1.0)*x2886*x2888))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2889=((1.0)*sj0);
IkReal x2890=((1.0)*cj0);
CheckValue<IkReal> x2891=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+((gconst123*r20)))),-1);
if(!x2891.valid){
continue;
}
CheckValue<IkReal> x2892 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r00*x2890))+(((-1.0)*gconst123*r01*x2890))+(((-1.0)*gconst123*r11*x2889))+(((-1.0)*gconst122*r10*x2889)))),IkReal(((((-1.0)*r02*x2890))+(((-1.0)*r12*x2889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2891.value)))+(x2892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2893=IKcos(j4);
IkReal x2894=IKsin(j4);
IkReal x2895=(gconst123*r11);
IkReal x2896=(gconst122*r00);
IkReal x2897=(cj1*cj2);
IkReal x2898=((1.0)*sj1);
IkReal x2899=(gconst123*r01);
IkReal x2900=(gconst123*r21);
IkReal x2901=(gconst122*r10);
IkReal x2902=(gconst122*r20);
IkReal x2903=((1.0)*x2893);
IkReal x2904=((1.0)*x2894);
evalcond[0]=((((-1.0)*x2902*x2903))+(((-1.0)*x2900*x2903))+((r22*x2894)));
evalcond[1]=((((-1.0)*x2901*x2903))+cj0+((r12*x2894))+(((-1.0)*x2895*x2903)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2896*x2903))+((r02*x2894))+(((-1.0)*x2899*x2903)));
evalcond[3]=((((-1.0)*x2902*x2904))+(((-1.0)*cj2*x2898))+(((-1.0)*x2900*x2904))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2903)));
evalcond[4]=((((-1.0)*r02*x2903))+((cj0*x2897))+(((-1.0)*x2896*x2904))+(((-1.0)*x2899*x2904))+(((-1.0)*cj0*sj2*x2898)));
evalcond[5]=((((-1.0)*x2901*x2904))+(((-1.0)*sj0*sj2*x2898))+((sj0*x2897))+(((-1.0)*r12*x2903))+(((-1.0)*x2895*x2904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2905=((1.0)*sj0);
CheckValue<IkReal> x2906=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst123*r10))+((gconst122*r11)))),-1);
if(!x2906.valid){
continue;
}
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r20*x2905))+(((-1.0)*gconst123*r21*x2905)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2906.value)))+(x2907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2908=IKcos(j4);
IkReal x2909=IKsin(j4);
IkReal x2910=(gconst123*r11);
IkReal x2911=(gconst122*r00);
IkReal x2912=(cj1*cj2);
IkReal x2913=((1.0)*sj1);
IkReal x2914=(gconst123*r01);
IkReal x2915=(gconst123*r21);
IkReal x2916=(gconst122*r10);
IkReal x2917=(gconst122*r20);
IkReal x2918=((1.0)*x2908);
IkReal x2919=((1.0)*x2909);
evalcond[0]=((((-1.0)*x2915*x2918))+(((-1.0)*x2917*x2918))+((r22*x2909)));
evalcond[1]=(cj0+(((-1.0)*x2910*x2918))+((r12*x2909))+(((-1.0)*x2916*x2918)));
evalcond[2]=(((r02*x2909))+(((-1.0)*sj0))+(((-1.0)*x2914*x2918))+(((-1.0)*x2911*x2918)));
evalcond[3]=((((-1.0)*x2915*x2919))+(((-1.0)*x2917*x2919))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2913))+(((-1.0)*r22*x2918)));
evalcond[4]=(((cj0*x2912))+(((-1.0)*cj0*sj2*x2913))+(((-1.0)*x2914*x2919))+(((-1.0)*x2911*x2919))+(((-1.0)*r02*x2918)));
evalcond[5]=((((-1.0)*sj0*sj2*x2913))+((sj0*x2912))+(((-1.0)*r12*x2918))+(((-1.0)*x2910*x2919))+(((-1.0)*x2916*x2919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2920=((1.0)*gconst123);
CheckValue<IkReal> x2921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2920))+((gconst122*r01)))),-1);
if(!x2921.valid){
continue;
}
CheckValue<IkReal> x2922 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+(((-1.0)*cj0*r21*x2920)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2921.value)))+(x2922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2923=IKcos(j4);
IkReal x2924=IKsin(j4);
IkReal x2925=(gconst123*r11);
IkReal x2926=(gconst122*r00);
IkReal x2927=(cj1*cj2);
IkReal x2928=((1.0)*sj1);
IkReal x2929=(gconst123*r01);
IkReal x2930=(gconst123*r21);
IkReal x2931=(gconst122*r10);
IkReal x2932=(gconst122*r20);
IkReal x2933=((1.0)*x2923);
IkReal x2934=((1.0)*x2924);
evalcond[0]=((((-1.0)*x2930*x2933))+((r22*x2924))+(((-1.0)*x2932*x2933)));
evalcond[1]=((((-1.0)*x2931*x2933))+cj0+(((-1.0)*x2925*x2933))+((r12*x2924)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2929*x2933))+((r02*x2924))+(((-1.0)*x2926*x2933)));
evalcond[3]=((((-1.0)*x2930*x2934))+(((-1.0)*cj1*sj2))+(((-1.0)*x2932*x2934))+(((-1.0)*cj2*x2928))+(((-1.0)*r22*x2933)));
evalcond[4]=((((-1.0)*cj0*sj2*x2928))+((cj0*x2927))+(((-1.0)*x2929*x2934))+(((-1.0)*r02*x2933))+(((-1.0)*x2926*x2934)));
evalcond[5]=((((-1.0)*x2931*x2934))+((sj0*x2927))+(((-1.0)*sj0*sj2*x2928))+(((-1.0)*x2925*x2934))+(((-1.0)*r12*x2933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2935=((1.0)*cj5);
IkReal x2936=(((r01*sj5))+(((-1.0)*r00*x2935)));
j4eval[0]=x2936;
j4eval[1]=IKsign(x2936);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x2935))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2937=((1.0)*sj5);
IkReal x2938=(((cj5*r20))+(((-1.0)*r21*x2937)));
j4eval[0]=x2938;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2937))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x2938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2939=cj5*cj5;
IkReal x2940=r10*r10;
IkReal x2941=(cj5*r11);
IkReal x2942=(r10*sj5);
IkReal x2943=(((x2939*x2940))+(((-1.0)*x2940))+(((-1.0)*x2939*(r11*r11)))+(((-2.0)*x2941*x2942))+(((-1.0)*(r12*r12))));
j4eval[0]=x2943;
j4eval[1]=IKsign(x2943);
j4eval[2]=((IKabs(((((-1.0)*x2941))+(((-1.0)*x2942)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2944=cj5*cj5;
IkReal x2945=r10*r10;
IkReal x2946=(cj5*r11);
IkReal x2947=(r10*sj5);
CheckValue<IkReal> x2948=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2945))+(((-2.0)*x2946*x2947))+(((-1.0)*(r12*r12)))+(((-1.0)*x2944*(r11*r11)))+((x2944*x2945)))),-1);
if(!x2948.valid){
continue;
}
CheckValue<IkReal> x2949 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2947))+(((-1.0)*x2946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2948.value)))+(x2949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2950=IKcos(j4);
IkReal x2951=IKsin(j4);
IkReal x2952=(r00*sj5);
IkReal x2953=(cj5*r01);
IkReal x2954=(r20*sj5);
IkReal x2955=((1.0)*sj2);
IkReal x2956=(cj5*r21);
IkReal x2957=(cj5*r11);
IkReal x2958=(r10*sj5);
IkReal x2959=((1.0)*x2950);
IkReal x2960=((1.0)*x2951);
evalcond[0]=(((r22*x2951))+(((-1.0)*x2954*x2959))+(((-1.0)*x2956*x2959)));
evalcond[1]=((((-1.0)*x2953*x2959))+(((-1.0)*x2952*x2959))+((r02*x2951)));
evalcond[2]=((1.0)+(((-1.0)*x2958*x2959))+((r12*x2951))+(((-1.0)*x2957*x2959)));
evalcond[3]=((((-1.0)*x2957*x2960))+(((-1.0)*x2958*x2960))+(((-1.0)*r12*x2959)));
evalcond[4]=((((-1.0)*r02*x2959))+(((-1.0)*sj1*x2955))+((cj1*cj2))+(((-1.0)*x2952*x2960))+(((-1.0)*x2953*x2960)));
evalcond[5]=((((-1.0)*x2954*x2960))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2959))+(((-1.0)*x2956*x2960))+(((-1.0)*cj1*x2955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2961=((1.0)*sj5);
CheckValue<IkReal> x2962=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x2961)))),-1);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2961))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2962.value)))+(x2963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2964=IKcos(j4);
IkReal x2965=IKsin(j4);
IkReal x2966=(r00*sj5);
IkReal x2967=(cj5*r01);
IkReal x2968=(r20*sj5);
IkReal x2969=((1.0)*sj2);
IkReal x2970=(cj5*r21);
IkReal x2971=(cj5*r11);
IkReal x2972=(r10*sj5);
IkReal x2973=((1.0)*x2964);
IkReal x2974=((1.0)*x2965);
evalcond[0]=(((r22*x2965))+(((-1.0)*x2968*x2973))+(((-1.0)*x2970*x2973)));
evalcond[1]=(((r02*x2965))+(((-1.0)*x2967*x2973))+(((-1.0)*x2966*x2973)));
evalcond[2]=((1.0)+(((-1.0)*x2972*x2973))+((r12*x2965))+(((-1.0)*x2971*x2973)));
evalcond[3]=((((-1.0)*x2972*x2974))+(((-1.0)*r12*x2973))+(((-1.0)*x2971*x2974)));
evalcond[4]=((((-1.0)*r02*x2973))+(((-1.0)*sj1*x2969))+(((-1.0)*x2967*x2974))+((cj1*cj2))+(((-1.0)*x2966*x2974)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x2968*x2974))+(((-1.0)*r22*x2973))+(((-1.0)*cj1*x2969))+(((-1.0)*x2970*x2974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2975=((1.0)*cj5);
CheckValue<IkReal> x2976=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x2975)))),-1);
if(!x2976.valid){
continue;
}
CheckValue<IkReal> x2977 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2975))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2976.value)))+(x2977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2978=IKcos(j4);
IkReal x2979=IKsin(j4);
IkReal x2980=(r00*sj5);
IkReal x2981=(cj5*r01);
IkReal x2982=(r20*sj5);
IkReal x2983=((1.0)*sj2);
IkReal x2984=(cj5*r21);
IkReal x2985=(cj5*r11);
IkReal x2986=(r10*sj5);
IkReal x2987=((1.0)*x2978);
IkReal x2988=((1.0)*x2979);
evalcond[0]=((((-1.0)*x2982*x2987))+(((-1.0)*x2984*x2987))+((r22*x2979)));
evalcond[1]=((((-1.0)*x2981*x2987))+((r02*x2979))+(((-1.0)*x2980*x2987)));
evalcond[2]=((1.0)+(((-1.0)*x2985*x2987))+((r12*x2979))+(((-1.0)*x2986*x2987)));
evalcond[3]=((((-1.0)*x2985*x2988))+(((-1.0)*r12*x2987))+(((-1.0)*x2986*x2988)));
evalcond[4]=((((-1.0)*x2981*x2988))+(((-1.0)*x2980*x2988))+(((-1.0)*sj1*x2983))+((cj1*cj2))+(((-1.0)*r02*x2987)));
evalcond[5]=((((-1.0)*x2982*x2988))+(((-1.0)*x2984*x2988))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2983))+(((-1.0)*r22*x2987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2989=((1.0)*sj5);
IkReal x2990=((((-1.0)*r01*x2989))+((cj5*r00)));
j4eval[0]=x2990;
j4eval[1]=IKsign(x2990);
j4eval[2]=((IKabs(((((-1.0)*r20*x2989))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2991=((1.0)*cj5);
IkReal x2992=(((r21*sj5))+(((-1.0)*r20*x2991)));
j4eval[0]=x2992;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2991))))));
j4eval[2]=IKsign(x2992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2993=cj5*cj5;
IkReal x2994=r10*r10;
IkReal x2995=(cj5*r11);
IkReal x2996=(r10*sj5);
IkReal x2997=((r12*r12)+(((-1.0)*x2993*x2994))+(((2.0)*x2995*x2996))+((x2993*(r11*r11)))+x2994);
j4eval[0]=x2997;
j4eval[1]=IKsign(x2997);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2995))+(((-1.0)*x2996))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2998=cj5*cj5;
IkReal x2999=r10*r10;
IkReal x3000=(cj5*r11);
IkReal x3001=(r10*sj5);
CheckValue<IkReal> x3002 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x3001))+(((-1.0)*x3000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3002.valid){
continue;
}
CheckValue<IkReal> x3003=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2998*(r11*r11)))+(((-1.0)*x2998*x2999))+(((2.0)*x3000*x3001))+x2999)),-1);
if(!x3003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3002.value)+(((1.5707963267949)*(x3003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3004=IKcos(j4);
IkReal x3005=IKsin(j4);
IkReal x3006=(r00*sj5);
IkReal x3007=(cj5*r01);
IkReal x3008=(r20*sj5);
IkReal x3009=((1.0)*cj2);
IkReal x3010=(cj5*r21);
IkReal x3011=(cj5*r11);
IkReal x3012=(r10*sj5);
IkReal x3013=((1.0)*x3004);
IkReal x3014=((1.0)*x3005);
evalcond[0]=(((r22*x3005))+(((-1.0)*x3010*x3013))+(((-1.0)*x3008*x3013)));
evalcond[1]=((((-1.0)*x3007*x3013))+(((-1.0)*x3006*x3013))+((r02*x3005)));
evalcond[2]=((-1.0)+((r12*x3005))+(((-1.0)*x3011*x3013))+(((-1.0)*x3012*x3013)));
evalcond[3]=((((-1.0)*r12*x3013))+(((-1.0)*x3011*x3014))+(((-1.0)*x3012*x3014)));
evalcond[4]=((((-1.0)*r02*x3013))+((sj1*sj2))+(((-1.0)*cj1*x3009))+(((-1.0)*x3007*x3014))+(((-1.0)*x3006*x3014)));
evalcond[5]=((((-1.0)*r22*x3013))+(((-1.0)*cj1*sj2))+(((-1.0)*x3010*x3014))+(((-1.0)*sj1*x3009))+(((-1.0)*x3008*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3015=((1.0)*cj5);
CheckValue<IkReal> x3016 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3015)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x3015)))),-1);
if(!x3017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3016.value)+(((1.5707963267949)*(x3017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3018=IKcos(j4);
IkReal x3019=IKsin(j4);
IkReal x3020=(r00*sj5);
IkReal x3021=(cj5*r01);
IkReal x3022=(r20*sj5);
IkReal x3023=((1.0)*cj2);
IkReal x3024=(cj5*r21);
IkReal x3025=(cj5*r11);
IkReal x3026=(r10*sj5);
IkReal x3027=((1.0)*x3018);
IkReal x3028=((1.0)*x3019);
evalcond[0]=(((r22*x3019))+(((-1.0)*x3024*x3027))+(((-1.0)*x3022*x3027)));
evalcond[1]=((((-1.0)*x3021*x3027))+(((-1.0)*x3020*x3027))+((r02*x3019)));
evalcond[2]=((-1.0)+(((-1.0)*x3026*x3027))+(((-1.0)*x3025*x3027))+((r12*x3019)));
evalcond[3]=((((-1.0)*r12*x3027))+(((-1.0)*x3026*x3028))+(((-1.0)*x3025*x3028)));
evalcond[4]=((((-1.0)*x3021*x3028))+(((-1.0)*x3020*x3028))+(((-1.0)*cj1*x3023))+((sj1*sj2))+(((-1.0)*r02*x3027)));
evalcond[5]=((((-1.0)*sj1*x3023))+(((-1.0)*cj1*sj2))+(((-1.0)*x3024*x3028))+(((-1.0)*x3022*x3028))+(((-1.0)*r22*x3027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3029=((1.0)*sj5);
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3029))+((cj5*r00)))),-1);
if(!x3030.valid){
continue;
}
CheckValue<IkReal> x3031 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3029))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3030.value)))+(x3031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3032=IKcos(j4);
IkReal x3033=IKsin(j4);
IkReal x3034=(r00*sj5);
IkReal x3035=(cj5*r01);
IkReal x3036=(r20*sj5);
IkReal x3037=((1.0)*cj2);
IkReal x3038=(cj5*r21);
IkReal x3039=(cj5*r11);
IkReal x3040=(r10*sj5);
IkReal x3041=((1.0)*x3032);
IkReal x3042=((1.0)*x3033);
evalcond[0]=((((-1.0)*x3038*x3041))+((r22*x3033))+(((-1.0)*x3036*x3041)));
evalcond[1]=(((r02*x3033))+(((-1.0)*x3034*x3041))+(((-1.0)*x3035*x3041)));
evalcond[2]=((-1.0)+(((-1.0)*x3039*x3041))+((r12*x3033))+(((-1.0)*x3040*x3041)));
evalcond[3]=((((-1.0)*r12*x3041))+(((-1.0)*x3039*x3042))+(((-1.0)*x3040*x3042)));
evalcond[4]=((((-1.0)*cj1*x3037))+((sj1*sj2))+(((-1.0)*x3034*x3042))+(((-1.0)*x3035*x3042))+(((-1.0)*r02*x3041)));
evalcond[5]=((((-1.0)*x3038*x3042))+(((-1.0)*r22*x3041))+(((-1.0)*cj1*sj2))+(((-1.0)*x3036*x3042))+(((-1.0)*sj1*x3037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3044 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3044)==0){
continue;
}
IkReal x3043=pow(x3044,-0.5);
CheckValue<IkReal> x3045 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3045.valid){
continue;
}
IkReal gconst124=((-1.0)*(x3045.value));
IkReal gconst125=(r00*x3043);
IkReal gconst126=(r01*x3043);
CheckValue<IkReal> x3046 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3046.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3046.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3049 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
IkReal x3047=((-1.0)*(x3049.value));
IkReal x3048=x3043;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst125;
cj5=gconst126;
j5=x3047;
IkReal gconst124=x3047;
IkReal gconst125=(r00*x3048);
IkReal gconst126=(r01*x3048);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3050=((1.0)*sj0);
IkReal x3051=((1.0)*gconst125);
IkReal x3052=((1.0)*cj0);
CheckValue<IkReal> x3053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3051))+((gconst126*r20)))),-1);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054 = IKatan2WithCheck(IkReal(((((-1.0)*gconst125*r10*x3050))+(((-1.0)*cj0*r00*x3051))+(((-1.0)*gconst126*r01*x3052))+(((-1.0)*gconst126*r11*x3050)))),IkReal(((((-1.0)*r02*x3052))+(((-1.0)*r12*x3050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3053.value)))+(x3054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3055=IKcos(j4);
IkReal x3056=IKsin(j4);
IkReal x3057=(cj1*cj2);
IkReal x3058=(gconst125*r20);
IkReal x3059=(gconst126*r11);
IkReal x3060=((1.0)*sj1);
IkReal x3061=(gconst126*r01);
IkReal x3062=(gconst126*r21);
IkReal x3063=(gconst125*r00);
IkReal x3064=(gconst125*r10);
IkReal x3065=((1.0)*x3055);
IkReal x3066=((1.0)*x3056);
evalcond[0]=((((-1.0)*x3058*x3065))+(((-1.0)*x3062*x3065))+((r22*x3056)));
evalcond[1]=(cj0+((r12*x3056))+(((-1.0)*x3064*x3065))+(((-1.0)*x3059*x3065)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3056))+(((-1.0)*x3061*x3065))+(((-1.0)*x3063*x3065)));
evalcond[3]=((((-1.0)*r22*x3065))+(((-1.0)*x3058*x3066))+(((-1.0)*x3062*x3066))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3060)));
evalcond[4]=((((-1.0)*cj0*sj2*x3060))+(((-1.0)*x3061*x3066))+(((-1.0)*x3063*x3066))+(((-1.0)*r02*x3065))+((cj0*x3057)));
evalcond[5]=((((-1.0)*sj0*sj2*x3060))+(((-1.0)*r12*x3065))+((sj0*x3057))+(((-1.0)*x3064*x3066))+(((-1.0)*x3059*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3067=((1.0)*sj0);
CheckValue<IkReal> x3068=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst126*r10))+((gconst125*r11)))),-1);
if(!x3068.valid){
continue;
}
CheckValue<IkReal> x3069 = IKatan2WithCheck(IkReal(((((-1.0)*gconst125*r20*x3067))+(((-1.0)*gconst126*r21*x3067)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3068.value)))+(x3069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3070=IKcos(j4);
IkReal x3071=IKsin(j4);
IkReal x3072=(cj1*cj2);
IkReal x3073=(gconst125*r20);
IkReal x3074=(gconst126*r11);
IkReal x3075=((1.0)*sj1);
IkReal x3076=(gconst126*r01);
IkReal x3077=(gconst126*r21);
IkReal x3078=(gconst125*r00);
IkReal x3079=(gconst125*r10);
IkReal x3080=((1.0)*x3070);
IkReal x3081=((1.0)*x3071);
evalcond[0]=(((r22*x3071))+(((-1.0)*x3077*x3080))+(((-1.0)*x3073*x3080)));
evalcond[1]=((((-1.0)*x3079*x3080))+cj0+((r12*x3071))+(((-1.0)*x3074*x3080)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3076*x3080))+(((-1.0)*x3078*x3080))+((r02*x3071)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x3077*x3081))+(((-1.0)*cj2*x3075))+(((-1.0)*r22*x3080))+(((-1.0)*x3073*x3081)));
evalcond[4]=(((cj0*x3072))+(((-1.0)*x3076*x3081))+(((-1.0)*x3078*x3081))+(((-1.0)*r02*x3080))+(((-1.0)*cj0*sj2*x3075)));
evalcond[5]=((((-1.0)*sj0*sj2*x3075))+(((-1.0)*x3079*x3081))+((sj0*x3072))+(((-1.0)*x3074*x3081))+(((-1.0)*r12*x3080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3082=((-1.0)*r00);
IkReal x3084 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3084)==0){
continue;
}
IkReal x3083=pow(x3084,-0.5);
CheckValue<IkReal> x3085 = IKatan2WithCheck(IkReal(x3082),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3085.valid){
continue;
}
IkReal gconst127=((3.14159265358979)+(((-1.0)*(x3085.value))));
IkReal gconst128=(x3082*x3083);
IkReal gconst129=((-1.0)*r01*x3083);
CheckValue<IkReal> x3086 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3086.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3086.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3087=((-1.0)*r00);
CheckValue<IkReal> x3090 = IKatan2WithCheck(IkReal(x3087),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3090.valid){
continue;
}
IkReal x3088=((1.0)*(x3090.value));
IkReal x3089=x3083;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x3088)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x3088)));
IkReal gconst128=(x3087*x3089);
IkReal gconst129=((-1.0)*r01*x3089);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3091=((-1.0)*r00);
CheckValue<IkReal> x3094 = IKatan2WithCheck(IkReal(x3091),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3094.valid){
continue;
}
IkReal x3092=((1.0)*(x3094.value));
IkReal x3093=x3083;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x3092)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x3092)));
IkReal gconst128=(x3091*x3093);
IkReal gconst129=((-1.0)*r01*x3093);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3095=((-1.0)*r00);
CheckValue<IkReal> x3098 = IKatan2WithCheck(IkReal(x3095),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3098.valid){
continue;
}
IkReal x3096=((1.0)*(x3098.value));
IkReal x3097=x3083;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x3096)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x3096)));
IkReal gconst128=(x3095*x3097);
IkReal gconst129=((-1.0)*r01*x3097);
IkReal x3099=r02*r02;
IkReal x3100=(r12*sj0);
IkReal x3101=((1.0)*cj0);
IkReal x3102=x3083;
j4eval[0]=((IKabs((((r02*x3100*x3102))+(((-1.0)*x3101*x3102))+((cj0*x3099*x3102)))))+(IKabs(((((-1.0)*x3100))+(((-1.0)*r02*x3101))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3103=((1.0)*sj0);
IkReal x3104=((1.0)*gconst128);
IkReal x3105=((1.0)*cj0);
CheckValue<IkReal> x3106=IKPowWithIntegerCheck(IKsign((((gconst129*r20))+(((-1.0)*r21*x3104)))),-1);
if(!x3106.valid){
continue;
}
CheckValue<IkReal> x3107 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r10*x3103))+(((-1.0)*cj0*r00*x3104))+(((-1.0)*gconst129*r11*x3103))+(((-1.0)*gconst129*r01*x3105)))),IkReal(((((-1.0)*r12*x3103))+(((-1.0)*r02*x3105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3106.value)))+(x3107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3108=IKcos(j4);
IkReal x3109=IKsin(j4);
IkReal x3110=(cj1*cj2);
IkReal x3111=(gconst129*r21);
IkReal x3112=(gconst128*r10);
IkReal x3113=(gconst129*r11);
IkReal x3114=((1.0)*sj1);
IkReal x3115=(gconst128*r00);
IkReal x3116=(gconst129*r01);
IkReal x3117=(gconst128*r20);
IkReal x3118=((1.0)*x3108);
IkReal x3119=((1.0)*x3109);
evalcond[0]=((((-1.0)*x3117*x3118))+((r22*x3109))+(((-1.0)*x3111*x3118)));
evalcond[1]=((((-1.0)*x3113*x3118))+cj0+(((-1.0)*x3112*x3118))+((r12*x3109)));
evalcond[2]=((((-1.0)*x3115*x3118))+(((-1.0)*sj0))+((r02*x3109))+(((-1.0)*x3116*x3118)));
evalcond[3]=((((-1.0)*x3117*x3119))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3114))+(((-1.0)*r22*x3118))+(((-1.0)*x3111*x3119)));
evalcond[4]=((((-1.0)*x3115*x3119))+(((-1.0)*r02*x3118))+(((-1.0)*cj0*sj2*x3114))+((cj0*x3110))+(((-1.0)*x3116*x3119)));
evalcond[5]=((((-1.0)*x3113*x3119))+((sj0*x3110))+(((-1.0)*r12*x3118))+(((-1.0)*sj0*sj2*x3114))+(((-1.0)*x3112*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3120=((1.0)*sj0);
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst129*r10))+((gconst128*r11)))),-1);
if(!x3121.valid){
continue;
}
CheckValue<IkReal> x3122 = IKatan2WithCheck(IkReal(((((-1.0)*gconst129*r21*x3120))+(((-1.0)*gconst128*r20*x3120)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3121.value)))+(x3122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3123=IKcos(j4);
IkReal x3124=IKsin(j4);
IkReal x3125=(cj1*cj2);
IkReal x3126=(gconst129*r21);
IkReal x3127=(gconst128*r10);
IkReal x3128=(gconst129*r11);
IkReal x3129=((1.0)*sj1);
IkReal x3130=(gconst128*r00);
IkReal x3131=(gconst129*r01);
IkReal x3132=(gconst128*r20);
IkReal x3133=((1.0)*x3123);
IkReal x3134=((1.0)*x3124);
evalcond[0]=((((-1.0)*x3132*x3133))+((r22*x3124))+(((-1.0)*x3126*x3133)));
evalcond[1]=(cj0+(((-1.0)*x3128*x3133))+((r12*x3124))+(((-1.0)*x3127*x3133)));
evalcond[2]=((((-1.0)*x3131*x3133))+(((-1.0)*sj0))+(((-1.0)*x3130*x3133))+((r02*x3124)));
evalcond[3]=((((-1.0)*x3132*x3134))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3129))+(((-1.0)*r22*x3133))+(((-1.0)*x3126*x3134)));
evalcond[4]=((((-1.0)*x3131*x3134))+(((-1.0)*x3130*x3134))+(((-1.0)*r02*x3133))+(((-1.0)*cj0*sj2*x3129))+((cj0*x3125)));
evalcond[5]=((((-1.0)*x3128*x3134))+(((-1.0)*r12*x3133))+(((-1.0)*sj0*sj2*x3129))+(((-1.0)*x3127*x3134))+((sj0*x3125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3135=((1.0)*gconst129);
CheckValue<IkReal> x3136=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+(((-1.0)*r00*x3135)))),-1);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3135))+(((-1.0)*cj0*gconst128*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3136.value)))+(x3137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3138=IKcos(j4);
IkReal x3139=IKsin(j4);
IkReal x3140=(cj1*cj2);
IkReal x3141=(gconst129*r21);
IkReal x3142=(gconst128*r10);
IkReal x3143=(gconst129*r11);
IkReal x3144=((1.0)*sj1);
IkReal x3145=(gconst128*r00);
IkReal x3146=(gconst129*r01);
IkReal x3147=(gconst128*r20);
IkReal x3148=((1.0)*x3138);
IkReal x3149=((1.0)*x3139);
evalcond[0]=((((-1.0)*x3147*x3148))+(((-1.0)*x3141*x3148))+((r22*x3139)));
evalcond[1]=((((-1.0)*x3143*x3148))+(((-1.0)*x3142*x3148))+cj0+((r12*x3139)));
evalcond[2]=((((-1.0)*x3146*x3148))+(((-1.0)*sj0))+(((-1.0)*x3145*x3148))+((r02*x3139)));
evalcond[3]=((((-1.0)*r22*x3148))+(((-1.0)*x3147*x3149))+(((-1.0)*x3141*x3149))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3144)));
evalcond[4]=((((-1.0)*x3146*x3149))+((cj0*x3140))+(((-1.0)*x3145*x3149))+(((-1.0)*r02*x3148))+(((-1.0)*cj0*sj2*x3144)));
evalcond[5]=((((-1.0)*x3143*x3149))+(((-1.0)*r12*x3148))+(((-1.0)*sj0*sj2*x3144))+(((-1.0)*x3142*x3149))+((sj0*x3140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3150=((1.0)*cj5);
IkReal x3151=(((r11*sj5))+(((-1.0)*r10*x3150)));
j4eval[0]=x3151;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x3150))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x3151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3152=((1.0)*sj5);
IkReal x3153=(((cj5*r20))+(((-1.0)*r21*x3152)));
j4eval[0]=x3153;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3152))))));
j4eval[2]=IKsign(x3153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3154=cj5*cj5;
IkReal x3155=r00*r00;
IkReal x3156=(r00*sj5);
IkReal x3157=(cj5*r01);
IkReal x3158=(x3155+(((2.0)*x3156*x3157))+((x3154*(r01*r01)))+(r02*r02)+(((-1.0)*x3154*x3155)));
j4eval[0]=x3158;
j4eval[1]=IKsign(x3158);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3157))+(((-1.0)*x3156))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3159=cj5*cj5;
IkReal x3160=r00*r00;
IkReal x3161=(cj5*r01);
IkReal x3162=(r00*sj5);
CheckValue<IkReal> x3163=IKPowWithIntegerCheck(IKsign((x3160+(((2.0)*x3161*x3162))+(r02*r02)+(((-1.0)*x3159*x3160))+((x3159*(r01*r01))))),-1);
if(!x3163.valid){
continue;
}
CheckValue<IkReal> x3164 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x3162))+(((-1.0)*x3161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3163.value)))+(x3164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3165=IKcos(j4);
IkReal x3166=IKsin(j4);
IkReal x3167=(r00*sj5);
IkReal x3168=(cj5*r01);
IkReal x3169=(r20*sj5);
IkReal x3170=((1.0)*sj2);
IkReal x3171=(cj5*r21);
IkReal x3172=(cj5*r11);
IkReal x3173=(r10*sj5);
IkReal x3174=((1.0)*x3165);
IkReal x3175=((1.0)*x3166);
evalcond[0]=((((-1.0)*x3169*x3174))+((r22*x3166))+(((-1.0)*x3171*x3174)));
evalcond[1]=(((r12*x3166))+(((-1.0)*x3173*x3174))+(((-1.0)*x3172*x3174)));
evalcond[2]=((-1.0)+((r02*x3166))+(((-1.0)*x3168*x3174))+(((-1.0)*x3167*x3174)));
evalcond[3]=((((-1.0)*x3168*x3175))+(((-1.0)*x3167*x3175))+(((-1.0)*r02*x3174)));
evalcond[4]=((((-1.0)*sj1*x3170))+(((-1.0)*r12*x3174))+(((-1.0)*x3173*x3175))+(((-1.0)*x3172*x3175))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3169*x3175))+(((-1.0)*cj1*x3170))+(((-1.0)*cj2*sj1))+(((-1.0)*x3171*x3175))+(((-1.0)*r22*x3174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3176=((1.0)*sj5);
CheckValue<IkReal> x3177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3176))+((cj5*r20)))),-1);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3176)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3177.value)))+(x3178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3179=IKcos(j4);
IkReal x3180=IKsin(j4);
IkReal x3181=(r00*sj5);
IkReal x3182=(cj5*r01);
IkReal x3183=(r20*sj5);
IkReal x3184=((1.0)*sj2);
IkReal x3185=(cj5*r21);
IkReal x3186=(cj5*r11);
IkReal x3187=(r10*sj5);
IkReal x3188=((1.0)*x3179);
IkReal x3189=((1.0)*x3180);
evalcond[0]=(((r22*x3180))+(((-1.0)*x3183*x3188))+(((-1.0)*x3185*x3188)));
evalcond[1]=((((-1.0)*x3187*x3188))+((r12*x3180))+(((-1.0)*x3186*x3188)));
evalcond[2]=((-1.0)+(((-1.0)*x3181*x3188))+(((-1.0)*x3182*x3188))+((r02*x3180)));
evalcond[3]=((((-1.0)*r02*x3188))+(((-1.0)*x3181*x3189))+(((-1.0)*x3182*x3189)));
evalcond[4]=((((-1.0)*x3187*x3189))+(((-1.0)*x3186*x3189))+((cj1*cj2))+(((-1.0)*sj1*x3184))+(((-1.0)*r12*x3188)));
evalcond[5]=((((-1.0)*x3183*x3189))+(((-1.0)*r22*x3188))+(((-1.0)*x3185*x3189))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3190=((1.0)*cj5);
CheckValue<IkReal> x3191 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3190))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3191.valid){
continue;
}
CheckValue<IkReal> x3192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3190))+((r11*sj5)))),-1);
if(!x3192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3191.value)+(((1.5707963267949)*(x3192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3193=IKcos(j4);
IkReal x3194=IKsin(j4);
IkReal x3195=(r00*sj5);
IkReal x3196=(cj5*r01);
IkReal x3197=(r20*sj5);
IkReal x3198=((1.0)*sj2);
IkReal x3199=(cj5*r21);
IkReal x3200=(cj5*r11);
IkReal x3201=(r10*sj5);
IkReal x3202=((1.0)*x3193);
IkReal x3203=((1.0)*x3194);
evalcond[0]=((((-1.0)*x3199*x3202))+(((-1.0)*x3197*x3202))+((r22*x3194)));
evalcond[1]=((((-1.0)*x3200*x3202))+(((-1.0)*x3201*x3202))+((r12*x3194)));
evalcond[2]=((-1.0)+(((-1.0)*x3196*x3202))+((r02*x3194))+(((-1.0)*x3195*x3202)));
evalcond[3]=((((-1.0)*x3196*x3203))+(((-1.0)*r02*x3202))+(((-1.0)*x3195*x3203)));
evalcond[4]=((((-1.0)*x3200*x3203))+(((-1.0)*r12*x3202))+(((-1.0)*x3201*x3203))+(((-1.0)*sj1*x3198))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3199*x3203))+(((-1.0)*cj2*sj1))+(((-1.0)*x3197*x3203))+(((-1.0)*r22*x3202))+(((-1.0)*cj1*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3204=((1.0)*sj5);
IkReal x3205=(((cj5*r10))+(((-1.0)*r11*x3204)));
j4eval[0]=x3205;
j4eval[1]=IKsign(x3205);
j4eval[2]=((IKabs(((((-1.0)*r20*x3204))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3206=((1.0)*cj5);
IkReal x3207=(((r21*sj5))+(((-1.0)*r20*x3206)));
j4eval[0]=x3207;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3206))))));
j4eval[2]=IKsign(x3207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3208=cj5*cj5;
IkReal x3209=r00*r00;
IkReal x3210=(cj5*r01);
IkReal x3211=(r00*sj5);
IkReal x3212=(((x3208*x3209))+(((-1.0)*(r02*r02)))+(((-1.0)*x3209))+(((-1.0)*x3208*(r01*r01)))+(((-2.0)*x3210*x3211)));
j4eval[0]=x3212;
j4eval[1]=IKsign(x3212);
j4eval[2]=((IKabs(((((-1.0)*x3210))+(((-1.0)*x3211)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3213=cj5*cj5;
IkReal x3214=r00*r00;
IkReal x3215=(cj5*r01);
IkReal x3216=(r00*sj5);
CheckValue<IkReal> x3217=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3215*x3216))+((x3213*x3214))+(((-1.0)*(r02*r02)))+(((-1.0)*x3214))+(((-1.0)*x3213*(r01*r01))))),-1);
if(!x3217.valid){
continue;
}
CheckValue<IkReal> x3218 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x3215))+(((-1.0)*x3216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3217.value)))+(x3218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3219=IKcos(j4);
IkReal x3220=IKsin(j4);
IkReal x3221=(r00*sj5);
IkReal x3222=(cj5*r01);
IkReal x3223=(r20*sj5);
IkReal x3224=((1.0)*cj2);
IkReal x3225=(cj5*r21);
IkReal x3226=(cj5*r11);
IkReal x3227=(r10*sj5);
IkReal x3228=((1.0)*x3219);
IkReal x3229=((1.0)*x3220);
evalcond[0]=((((-1.0)*x3225*x3228))+((r22*x3220))+(((-1.0)*x3223*x3228)));
evalcond[1]=(((r12*x3220))+(((-1.0)*x3227*x3228))+(((-1.0)*x3226*x3228)));
evalcond[2]=((1.0)+((r02*x3220))+(((-1.0)*x3221*x3228))+(((-1.0)*x3222*x3228)));
evalcond[3]=((((-1.0)*r02*x3228))+(((-1.0)*x3221*x3229))+(((-1.0)*x3222*x3229)));
evalcond[4]=((((-1.0)*x3227*x3229))+((sj1*sj2))+(((-1.0)*x3226*x3229))+(((-1.0)*cj1*x3224))+(((-1.0)*r12*x3228)));
evalcond[5]=((((-1.0)*sj1*x3224))+(((-1.0)*x3225*x3229))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3228))+(((-1.0)*x3223*x3229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3230=((1.0)*cj5);
CheckValue<IkReal> x3231 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3230)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3231.valid){
continue;
}
CheckValue<IkReal> x3232=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x3230)))),-1);
if(!x3232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3231.value)+(((1.5707963267949)*(x3232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3233=IKcos(j4);
IkReal x3234=IKsin(j4);
IkReal x3235=(r00*sj5);
IkReal x3236=(cj5*r01);
IkReal x3237=(r20*sj5);
IkReal x3238=((1.0)*cj2);
IkReal x3239=(cj5*r21);
IkReal x3240=(cj5*r11);
IkReal x3241=(r10*sj5);
IkReal x3242=((1.0)*x3233);
IkReal x3243=((1.0)*x3234);
evalcond[0]=((((-1.0)*x3239*x3242))+((r22*x3234))+(((-1.0)*x3237*x3242)));
evalcond[1]=((((-1.0)*x3240*x3242))+((r12*x3234))+(((-1.0)*x3241*x3242)));
evalcond[2]=((1.0)+(((-1.0)*x3236*x3242))+(((-1.0)*x3235*x3242))+((r02*x3234)));
evalcond[3]=((((-1.0)*x3236*x3243))+(((-1.0)*x3235*x3243))+(((-1.0)*r02*x3242)));
evalcond[4]=((((-1.0)*x3240*x3243))+(((-1.0)*r12*x3242))+((sj1*sj2))+(((-1.0)*cj1*x3238))+(((-1.0)*x3241*x3243)));
evalcond[5]=((((-1.0)*x3239*x3243))+(((-1.0)*x3237*x3243))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3238))+(((-1.0)*r22*x3242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3244=((1.0)*sj5);
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x3244)))),-1);
if(!x3245.valid){
continue;
}
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3244))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3245.value)))+(x3246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3247=IKcos(j4);
IkReal x3248=IKsin(j4);
IkReal x3249=(r00*sj5);
IkReal x3250=(cj5*r01);
IkReal x3251=(r20*sj5);
IkReal x3252=((1.0)*cj2);
IkReal x3253=(cj5*r21);
IkReal x3254=(cj5*r11);
IkReal x3255=(r10*sj5);
IkReal x3256=((1.0)*x3247);
IkReal x3257=((1.0)*x3248);
evalcond[0]=(((r22*x3248))+(((-1.0)*x3253*x3256))+(((-1.0)*x3251*x3256)));
evalcond[1]=((((-1.0)*x3254*x3256))+((r12*x3248))+(((-1.0)*x3255*x3256)));
evalcond[2]=((1.0)+(((-1.0)*x3249*x3256))+(((-1.0)*x3250*x3256))+((r02*x3248)));
evalcond[3]=((((-1.0)*r02*x3256))+(((-1.0)*x3249*x3257))+(((-1.0)*x3250*x3257)));
evalcond[4]=((((-1.0)*x3254*x3257))+((sj1*sj2))+(((-1.0)*cj1*x3252))+(((-1.0)*r12*x3256))+(((-1.0)*x3255*x3257)));
evalcond[5]=((((-1.0)*x3253*x3257))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3256))+(((-1.0)*x3251*x3257))+(((-1.0)*sj1*x3252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3258=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3258);
rxp1_1=(px*r21);
rxp1_2=(r11*x3258);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3259=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3259);
rxp1_1=(px*r21);
rxp1_2=(r11*x3259);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3260=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3260);
rxp1_1=(px*r21);
rxp1_2=(r11*x3260);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x3263.valid){
continue;
}
IkReal x3261=x3263.value;
IkReal x3262=(sj0*x3261);
sj4array[0]=(((sj1*sj2*x3262))+(((-1.0)*cj1*cj2*x3262)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3264=IKcos(j4);
IkReal x3265=IKsin(j4);
IkReal x3266=(r20*sj5);
IkReal x3267=((1.0)*cj5*r21);
IkReal x3268=((1.0)*x3264);
evalcond[0]=((-1.0)*r02*x3264);
evalcond[1]=((((-1.0)*sj0))+((r02*x3265)));
evalcond[2]=((((-1.0)*x3264*x3267))+(((-1.0)*x3266*x3268)));
evalcond[3]=((((-1.0)*cj5*r11*x3268))+(((-1.0)*r10*sj5*x3268)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3265*x3266))+(((-1.0)*x3265*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3270=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x3270.valid){
continue;
}
IkReal x3269=x3270.value;
sj4array[0]=(((cj2*sj1*x3269))+((cj1*sj2*x3269)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3271=IKcos(j4);
IkReal x3272=IKsin(j4);
IkReal x3273=((1.0)*sj0);
IkReal x3274=(r10*sj5);
IkReal x3275=((1.0)*x3272);
IkReal x3276=((1.0)*x3271);
IkReal x3277=(cj5*x3276);
evalcond[0]=((-1.0)*r02*x3271);
evalcond[1]=((((-1.0)*x3273))+((r02*x3272)));
evalcond[2]=((((-1.0)*r21*x3277))+(((-1.0)*r20*sj5*x3276)));
evalcond[3]=((((-1.0)*r11*x3277))+(((-1.0)*x3274*x3276)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*cj5*r11*x3275))+(((-1.0)*x3274*x3275))+(((-1.0)*sj1*sj2*x3273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3278=IKPowWithIntegerCheck(r02,-1);
if(!x3278.valid){
continue;
}
sj4array[0]=(sj0*(x3278.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3279=IKcos(j4);
IkReal x3280=IKsin(j4);
IkReal x3281=((1.0)*sj1);
IkReal x3282=((1.0)*cj5*r21);
IkReal x3283=((1.0)*cj5*r11);
IkReal x3284=((1.0)*sj5*x3280);
IkReal x3285=((1.0)*sj5*x3279);
evalcond[0]=((-1.0)*r02*x3279);
evalcond[1]=((((-1.0)*r20*x3285))+(((-1.0)*x3279*x3282)));
evalcond[2]=((((-1.0)*r10*x3285))+(((-1.0)*x3279*x3283)));
evalcond[3]=((((-1.0)*x3280*x3282))+(((-1.0)*r20*x3284))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3281)));
evalcond[4]=((((-1.0)*r10*x3284))+((cj1*cj2*sj0))+(((-1.0)*x3280*x3283))+(((-1.0)*sj0*sj2*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3286=((1.0)*sj0);
IkReal x3287=((1.0)*cj0);
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r01*x3287))+(((-1.0)*r00*sj5*x3287))+(((-1.0)*cj5*r11*x3286))+(((-1.0)*r10*sj5*x3286)))),IkReal(((((-1.0)*r12*x3286))+(((-1.0)*r02*x3287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x3289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3288.value)+(((1.5707963267949)*(x3289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j4);
IkReal x3291=IKsin(j4);
IkReal x3292=(cj1*cj2);
IkReal x3293=(r00*sj5);
IkReal x3294=(cj5*r01);
IkReal x3295=(r20*sj5);
IkReal x3296=(cj5*r21);
IkReal x3297=((1.0)*sj1);
IkReal x3298=(cj5*r11);
IkReal x3299=(r10*sj5);
IkReal x3300=((1.0)*x3290);
IkReal x3301=((1.0)*x3291);
evalcond[0]=(((r22*x3291))+(((-1.0)*x3296*x3300))+(((-1.0)*x3295*x3300)));
evalcond[1]=(cj0+(((-1.0)*x3298*x3300))+(((-1.0)*x3299*x3300))+((r12*x3291)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3291))+(((-1.0)*x3294*x3300))+(((-1.0)*x3293*x3300)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x3300))+(((-1.0)*x3296*x3301))+(((-1.0)*x3295*x3301))+(((-1.0)*cj2*x3297)));
evalcond[4]=((((-1.0)*x3294*x3301))+(((-1.0)*r02*x3300))+((cj0*x3292))+(((-1.0)*x3293*x3301))+(((-1.0)*cj0*sj2*x3297)));
evalcond[5]=((((-1.0)*x3298*x3301))+((sj0*x3292))+(((-1.0)*sj0*sj2*x3297))+(((-1.0)*r12*x3300))+(((-1.0)*x3299*x3301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3302=((1.0)*cj5);
CheckValue<IkReal> x3303 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x3302))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3303.valid){
continue;
}
CheckValue<IkReal> x3304=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x3302)))),-1);
if(!x3304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3303.value)+(((1.5707963267949)*(x3304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3305=IKcos(j4);
IkReal x3306=IKsin(j4);
IkReal x3307=(cj1*cj2);
IkReal x3308=(r00*sj5);
IkReal x3309=(cj5*r01);
IkReal x3310=(r20*sj5);
IkReal x3311=(cj5*r21);
IkReal x3312=((1.0)*sj1);
IkReal x3313=(cj5*r11);
IkReal x3314=(r10*sj5);
IkReal x3315=((1.0)*x3305);
IkReal x3316=((1.0)*x3306);
evalcond[0]=(((r22*x3306))+(((-1.0)*x3310*x3315))+(((-1.0)*x3311*x3315)));
evalcond[1]=(cj0+(((-1.0)*x3314*x3315))+(((-1.0)*x3313*x3315))+((r12*x3306)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3306))+(((-1.0)*x3309*x3315))+(((-1.0)*x3308*x3315)));
evalcond[3]=((((-1.0)*r22*x3315))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3312))+(((-1.0)*x3310*x3316))+(((-1.0)*x3311*x3316)));
evalcond[4]=(((cj0*x3307))+(((-1.0)*x3309*x3316))+(((-1.0)*r02*x3315))+(((-1.0)*x3308*x3316))+(((-1.0)*cj0*sj2*x3312)));
evalcond[5]=((((-1.0)*x3314*x3316))+(((-1.0)*x3313*x3316))+(((-1.0)*sj0*sj2*x3312))+(((-1.0)*r12*x3315))+((sj0*x3307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3317=((1.0)*cj0);
CheckValue<IkReal> x3318 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3317))+(((-1.0)*r20*sj5*x3317)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3318.value)+(((1.5707963267949)*(x3319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3320=IKcos(j4);
IkReal x3321=IKsin(j4);
IkReal x3322=(cj1*cj2);
IkReal x3323=(r00*sj5);
IkReal x3324=(cj5*r01);
IkReal x3325=(r20*sj5);
IkReal x3326=(cj5*r21);
IkReal x3327=((1.0)*sj1);
IkReal x3328=(cj5*r11);
IkReal x3329=(r10*sj5);
IkReal x3330=((1.0)*x3320);
IkReal x3331=((1.0)*x3321);
evalcond[0]=(((r22*x3321))+(((-1.0)*x3326*x3330))+(((-1.0)*x3325*x3330)));
evalcond[1]=(((r12*x3321))+cj0+(((-1.0)*x3329*x3330))+(((-1.0)*x3328*x3330)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3323*x3330))+(((-1.0)*x3324*x3330))+((r02*x3321)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3327))+(((-1.0)*r22*x3330))+(((-1.0)*x3326*x3331))+(((-1.0)*x3325*x3331)));
evalcond[4]=((((-1.0)*r02*x3330))+(((-1.0)*x3323*x3331))+(((-1.0)*x3324*x3331))+(((-1.0)*cj0*sj2*x3327))+((cj0*x3322)));
evalcond[5]=(((sj0*x3322))+(((-1.0)*sj0*sj2*x3327))+(((-1.0)*x3329*x3331))+(((-1.0)*x3328*x3331))+(((-1.0)*r12*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3332=((1.0)*cj5);
IkReal x3333=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x3333;
j0eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x3332)))))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3332))))));
j0eval[2]=IKsign(x3333);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3334=cj5*cj5;
IkReal x3335=r20*r20;
IkReal x3336=(cj5*r21);
IkReal x3337=(cj2*sj1);
IkReal x3338=(cj1*sj2);
IkReal x3339=(r20*sj5);
IkReal x3340=((((2.0)*x3336*x3339))+(r22*r22)+x3335+((x3334*(r21*r21)))+(((-1.0)*x3334*x3335)));
j4eval[0]=x3340;
j4eval[1]=((IKabs((((r22*x3337))+((r22*x3338)))))+(IKabs((((x3337*x3339))+((x3336*x3338))+((x3336*x3337))+((x3338*x3339))))));
j4eval[2]=IKsign(x3340);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0474678447733665)*px))+(((5.20790068370649)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.20790068370649)*px))+(((0.0474678447733665)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0474678447733665)*px))+(((5.20790068370649)*py))))+IKsqr(((((5.20790068370649)*px))+(((0.0474678447733665)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0474678447733665)*px))+(((5.20790068370649)*py))), ((((5.20790068370649)*px))+(((0.0474678447733665)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3341=IKcos(j0);
IkReal x3342=IKsin(j0);
evalcond[0]=((((0.192)*x3341))+(((-1.0)*px))+(((-0.00175)*x3342)));
evalcond[1]=((((0.192)*x3342))+(((0.00175)*x3341))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3343=((1.0)*sj5);
IkReal x3344=(((cj5*r10))+(((-1.0)*r11*x3343)));
j4eval[0]=x3344;
j4eval[1]=IKsign(x3344);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3343))+(((-1.0)*cj0*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3345=((1.0)*cj5);
IkReal x3346=(((r01*sj5))+(((-1.0)*r00*x3345)));
j4eval[0]=x3346;
j4eval[1]=IKsign(x3346);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*sj5))+(((-1.0)*r21*sj0*x3345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3347=((1.0)*cj5);
IkReal x3348=(((r21*sj5))+(((-1.0)*r20*x3347)));
j4eval[0]=x3348;
j4eval[1]=((IKabs(((((-1.0)*r02*sj0))+((cj0*r12)))))+(IKabs((((r00*sj0*sj5))+(((-1.0)*cj0*r11*x3347))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))))));
j4eval[2]=IKsign(x3348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3349=((1.0)*cj5);
CheckValue<IkReal> x3350 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+(((-1.0)*cj0*r11*x3349))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3350.valid){
continue;
}
CheckValue<IkReal> x3351=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x3349)))),-1);
if(!x3351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3350.value)+(((1.5707963267949)*(x3351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3352=IKsin(j4);
IkReal x3353=IKcos(j4);
IkReal x3354=(sj5*x3352);
IkReal x3355=(cj5*x3352);
IkReal x3356=((1.0)*cj5*x3353);
IkReal x3357=((1.0)*sj5*x3353);
evalcond[0]=(((r20*x3354))+((r21*x3355))+((r22*x3353)));
evalcond[1]=(cj0+((r00*x3354))+((r01*x3355))+((r02*x3353)));
evalcond[2]=(((r12*x3353))+sj0+((r11*x3355))+((r10*x3354)));
evalcond[3]=((((-1.0)*r20*x3357))+(((-1.0)*r21*x3356))+((r22*x3352)));
evalcond[4]=(((r12*x3352))+cj0+(((-1.0)*r10*x3357))+(((-1.0)*r11*x3356)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x3357))+(((-1.0)*r01*x3356))+((r02*x3352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3358=((1.0)*sj0);
CheckValue<IkReal> x3359=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3359.valid){
continue;
}
CheckValue<IkReal> x3360 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x3358))+(((-1.0)*cj5*r21*x3358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3359.value)))+(x3360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3361=IKsin(j4);
IkReal x3362=IKcos(j4);
IkReal x3363=(sj5*x3361);
IkReal x3364=(cj5*x3361);
IkReal x3365=((1.0)*cj5*x3362);
IkReal x3366=((1.0)*sj5*x3362);
evalcond[0]=(((r22*x3362))+((r21*x3364))+((r20*x3363)));
evalcond[1]=(((r02*x3362))+cj0+((r01*x3364))+((r00*x3363)));
evalcond[2]=(sj0+((r10*x3363))+((r12*x3362))+((r11*x3364)));
evalcond[3]=(((r22*x3361))+(((-1.0)*r21*x3365))+(((-1.0)*r20*x3366)));
evalcond[4]=((((-1.0)*r10*x3366))+cj0+((r12*x3361))+(((-1.0)*r11*x3365)));
evalcond[5]=((((-1.0)*sj0))+((r02*x3361))+(((-1.0)*r01*x3365))+(((-1.0)*r00*x3366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3367=((1.0)*cj0);
CheckValue<IkReal> x3368=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3368.valid){
continue;
}
CheckValue<IkReal> x3369 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x3367))+(((-1.0)*r20*sj5*x3367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3368.value)))+(x3369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3370=IKsin(j4);
IkReal x3371=IKcos(j4);
IkReal x3372=(sj5*x3370);
IkReal x3373=(cj5*x3370);
IkReal x3374=((1.0)*cj5*x3371);
IkReal x3375=((1.0)*sj5*x3371);
evalcond[0]=(((r22*x3371))+((r21*x3373))+((r20*x3372)));
evalcond[1]=(((r01*x3373))+cj0+((r02*x3371))+((r00*x3372)));
evalcond[2]=(((r12*x3371))+((r10*x3372))+sj0+((r11*x3373)));
evalcond[3]=(((r22*x3370))+(((-1.0)*r20*x3375))+(((-1.0)*r21*x3374)));
evalcond[4]=(((r12*x3370))+(((-1.0)*r10*x3375))+cj0+(((-1.0)*r11*x3374)));
evalcond[5]=((((-1.0)*sj0))+((r02*x3370))+(((-1.0)*r00*x3375))+(((-1.0)*r01*x3374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.69363899664067)*py))+(((-0.132294506470619)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.69363899664067)*px))+(((0.132294506470619)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.69363899664067)*py))+(((-0.132294506470619)*px))))+IKsqr(((((-8.69363899664067)*px))+(((0.132294506470619)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.69363899664067)*py))+(((-0.132294506470619)*px))), ((((-8.69363899664067)*px))+(((0.132294506470619)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3376=IKcos(j0);
IkReal x3377=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x3377))+(((-0.115)*x3376)));
evalcond[1]=((((0.00175)*x3376))+(((-1.0)*py))+(((-0.115)*x3377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3378=((1.0)*cj5);
IkReal x3379=((((-1.0)*r10*x3378))+((r11*sj5)));
j4eval[0]=x3379;
j4eval[1]=IKsign(x3379);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3378)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3380=((1.0)*sj5);
IkReal x3381=((((-1.0)*r01*x3380))+((cj5*r00)));
j4eval[0]=x3381;
j4eval[1]=IKsign(x3381);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x3380))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3382=cj5*cj5;
IkReal x3383=(r00*r20);
IkReal x3384=((1.0)*sj0);
IkReal x3385=(cj5*r21);
IkReal x3386=(r20*sj5);
IkReal x3387=(((r01*r21*x3382))+x3383+((r00*sj5*x3385))+(((-1.0)*x3382*x3383))+((cj5*r01*x3386))+((r02*r22)));
j4eval[0]=x3387;
j4eval[1]=IKsign(x3387);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3384*x3386))+(((-1.0)*x3384*x3385))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3388=cj5*cj5;
IkReal x3389=(r00*r20);
IkReal x3390=((1.0)*sj0);
IkReal x3391=(cj5*r21);
IkReal x3392=(r20*sj5);
CheckValue<IkReal> x3393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x3390*x3392))+(((-1.0)*x3390*x3391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3393.valid){
continue;
}
CheckValue<IkReal> x3394=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3388*x3389))+((r01*r21*x3388))+x3389+((r00*sj5*x3391))+((cj5*r01*x3392))+((r02*r22)))),-1);
if(!x3394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3393.value)+(((1.5707963267949)*(x3394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3395=IKsin(j4);
IkReal x3396=IKcos(j4);
IkReal x3397=((1.0)*sj0);
IkReal x3398=(sj5*x3395);
IkReal x3399=(cj5*x3395);
IkReal x3400=((1.0)*cj5*x3396);
IkReal x3401=((1.0)*sj5*x3396);
evalcond[0]=(((r20*x3398))+((r21*x3399))+((r22*x3396)));
evalcond[1]=((((-1.0)*r20*x3401))+(((-1.0)*r21*x3400))+((r22*x3395)));
evalcond[2]=(cj0+(((-1.0)*r11*x3400))+((r12*x3395))+(((-1.0)*r10*x3401)));
evalcond[3]=(((r00*x3398))+((r01*x3399))+((r02*x3396))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x3398))+((r11*x3399))+(((-1.0)*x3397))+((r12*x3396)));
evalcond[5]=((((-1.0)*r00*x3401))+(((-1.0)*r01*x3400))+((r02*x3395))+(((-1.0)*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3402=((1.0)*sj0);
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3403.valid){
continue;
}
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x3402))+(((-1.0)*cj5*r21*x3402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3403.value)))+(x3404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3405=IKsin(j4);
IkReal x3406=IKcos(j4);
IkReal x3407=((1.0)*sj0);
IkReal x3408=(sj5*x3405);
IkReal x3409=(cj5*x3405);
IkReal x3410=((1.0)*cj5*x3406);
IkReal x3411=((1.0)*sj5*x3406);
evalcond[0]=(((r22*x3406))+((r21*x3409))+((r20*x3408)));
evalcond[1]=(((r22*x3405))+(((-1.0)*r21*x3410))+(((-1.0)*r20*x3411)));
evalcond[2]=(cj0+((r12*x3405))+(((-1.0)*r11*x3410))+(((-1.0)*r10*x3411)));
evalcond[3]=(((r02*x3406))+((r00*x3408))+((r01*x3409))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3409))+((r12*x3406))+((r10*x3408))+(((-1.0)*x3407)));
evalcond[5]=(((r02*x3405))+(((-1.0)*r01*x3410))+(((-1.0)*x3407))+(((-1.0)*r00*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3412=((1.0)*cj0);
CheckValue<IkReal> x3413 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x3412))+(((-1.0)*cj5*r21*x3412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3413.valid){
continue;
}
CheckValue<IkReal> x3414=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x3414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3413.value)+(((1.5707963267949)*(x3414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3415=IKsin(j4);
IkReal x3416=IKcos(j4);
IkReal x3417=((1.0)*sj0);
IkReal x3418=(sj5*x3415);
IkReal x3419=(cj5*x3415);
IkReal x3420=((1.0)*cj5*x3416);
IkReal x3421=((1.0)*sj5*x3416);
evalcond[0]=(((r22*x3416))+((r21*x3419))+((r20*x3418)));
evalcond[1]=(((r22*x3415))+(((-1.0)*r21*x3420))+(((-1.0)*r20*x3421)));
evalcond[2]=((((-1.0)*r10*x3421))+(((-1.0)*r11*x3420))+cj0+((r12*x3415)));
evalcond[3]=(((r02*x3416))+((r01*x3419))+((r00*x3418))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3416))+((r11*x3419))+((r10*x3418))+(((-1.0)*x3417)));
evalcond[5]=(((r02*x3415))+(((-1.0)*r01*x3420))+(((-1.0)*r00*x3421))+(((-1.0)*x3417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-107.063197026022)*py))+(((-20.817843866171)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-107.063197026022)*px))+(((20.817843866171)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-107.063197026022)*py))+(((-20.817843866171)*px))))+IKsqr(((((-107.063197026022)*px))+(((20.817843866171)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-107.063197026022)*py))+(((-20.817843866171)*px))), ((((-107.063197026022)*px))+(((20.817843866171)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3422=IKcos(j0);
IkReal x3423=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.009)*x3422))+(((-0.00175)*x3423)));
evalcond[1]=((((-1.0)*py))+(((-0.009)*x3423))+(((0.00175)*x3422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3424=((1.0)*cj5);
IkReal x3425=((((-1.0)*r10*x3424))+((r11*sj5)));
j4eval[0]=x3425;
j4eval[1]=IKsign(x3425);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3424)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3426=((1.0)*sj5);
IkReal x3427=((((-1.0)*r01*x3426))+((cj5*r00)));
j4eval[0]=x3427;
j4eval[1]=IKsign(x3427);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x3426))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3428=cj5*cj5;
IkReal x3429=(r00*r20);
IkReal x3430=((1.0)*sj0);
IkReal x3431=(cj5*r21);
IkReal x3432=(r20*sj5);
IkReal x3433=((((-1.0)*x3428*x3429))+((cj5*r01*x3432))+((r00*sj5*x3431))+x3429+((r02*r22))+((r01*r21*x3428)));
j4eval[0]=x3433;
j4eval[1]=IKsign(x3433);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3430*x3431))+(((-1.0)*x3430*x3432))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3434=cj5*cj5;
IkReal x3435=(r00*r20);
IkReal x3436=((1.0)*sj0);
IkReal x3437=(cj5*r21);
IkReal x3438=(r20*sj5);
CheckValue<IkReal> x3439=IKPowWithIntegerCheck(IKsign((((r01*r21*x3434))+((cj5*r01*x3438))+((r00*sj5*x3437))+x3435+(((-1.0)*x3434*x3435))+((r02*r22)))),-1);
if(!x3439.valid){
continue;
}
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x3436*x3437))+(((-1.0)*x3436*x3438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3439.value)))+(x3440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3441=IKsin(j4);
IkReal x3442=IKcos(j4);
IkReal x3443=((1.0)*sj0);
IkReal x3444=(sj5*x3441);
IkReal x3445=(cj5*x3441);
IkReal x3446=((1.0)*cj5*x3442);
IkReal x3447=((1.0)*sj5*x3442);
evalcond[0]=(((r21*x3445))+((r22*x3442))+((r20*x3444)));
evalcond[1]=(((r22*x3441))+(((-1.0)*r21*x3446))+(((-1.0)*r20*x3447)));
evalcond[2]=(((r12*x3441))+cj0+(((-1.0)*r10*x3447))+(((-1.0)*r11*x3446)));
evalcond[3]=(((r02*x3442))+((r01*x3445))+((r00*x3444))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x3444))+((r11*x3445))+((r12*x3442))+(((-1.0)*x3443)));
evalcond[5]=(((r02*x3441))+(((-1.0)*r01*x3446))+(((-1.0)*x3443))+(((-1.0)*r00*x3447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3448=((1.0)*sj0);
CheckValue<IkReal> x3449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3449.valid){
continue;
}
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x3448))+(((-1.0)*cj5*r21*x3448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3449.value)))+(x3450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3451=IKsin(j4);
IkReal x3452=IKcos(j4);
IkReal x3453=((1.0)*sj0);
IkReal x3454=(sj5*x3451);
IkReal x3455=(cj5*x3451);
IkReal x3456=((1.0)*cj5*x3452);
IkReal x3457=((1.0)*sj5*x3452);
evalcond[0]=(((r21*x3455))+((r22*x3452))+((r20*x3454)));
evalcond[1]=(((r22*x3451))+(((-1.0)*r20*x3457))+(((-1.0)*r21*x3456)));
evalcond[2]=(cj0+((r12*x3451))+(((-1.0)*r10*x3457))+(((-1.0)*r11*x3456)));
evalcond[3]=(((r02*x3452))+((r00*x3454))+((r01*x3455))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3453))+((r12*x3452))+((r10*x3454))+((r11*x3455)));
evalcond[5]=((((-1.0)*r01*x3456))+(((-1.0)*x3453))+((r02*x3451))+(((-1.0)*r00*x3457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3458=((1.0)*cj0);
CheckValue<IkReal> x3459 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x3458))+(((-1.0)*cj5*r21*x3458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
CheckValue<IkReal> x3460=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x3460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3459.value)+(((1.5707963267949)*(x3460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3461=IKsin(j4);
IkReal x3462=IKcos(j4);
IkReal x3463=((1.0)*sj0);
IkReal x3464=(sj5*x3461);
IkReal x3465=(cj5*x3461);
IkReal x3466=((1.0)*cj5*x3462);
IkReal x3467=((1.0)*sj5*x3462);
evalcond[0]=(((r20*x3464))+((r21*x3465))+((r22*x3462)));
evalcond[1]=((((-1.0)*r21*x3466))+(((-1.0)*r20*x3467))+((r22*x3461)));
evalcond[2]=((((-1.0)*r10*x3467))+cj0+(((-1.0)*r11*x3466))+((r12*x3461)));
evalcond[3]=(((r01*x3465))+((r00*x3464))+((r02*x3462))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3462))+((r10*x3464))+((r11*x3465))+(((-1.0)*x3463)));
evalcond[5]=((((-1.0)*r00*x3467))+((r02*x3461))+(((-1.0)*x3463))+(((-1.0)*r01*x3466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.35558897694651)*py))+(((-0.0197056399652899)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.35558897694651)*px))+(((0.0197056399652899)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.35558897694651)*py))+(((-0.0197056399652899)*px))))+IKsqr(((((3.35558897694651)*px))+(((0.0197056399652899)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.35558897694651)*py))+(((-0.0197056399652899)*px))), ((((3.35558897694651)*px))+(((0.0197056399652899)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3468=IKcos(j0);
IkReal x3469=IKsin(j0);
evalcond[0]=((((0.298)*x3468))+(((-1.0)*px))+(((-0.00175)*x3469)));
evalcond[1]=((((0.298)*x3469))+(((-1.0)*py))+(((0.00175)*x3468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3470=((1.0)*sj5);
IkReal x3471=(((cj5*r10))+(((-1.0)*r11*x3470)));
j4eval[0]=x3471;
j4eval[1]=IKsign(x3471);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x3470)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3472=((1.0)*cj5);
IkReal x3473=((((-1.0)*r00*x3472))+((r01*sj5)));
j4eval[0]=x3473;
j4eval[1]=IKsign(x3473);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x3472))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3474=((1.0)*cj5);
IkReal x3475=((((-1.0)*r20*x3474))+((r21*sj5)));
j4eval[0]=x3475;
j4eval[1]=((IKabs(((((-1.0)*r02*sj0))+((cj0*r12)))))+(IKabs((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x3474))))));
j4eval[2]=IKsign(x3475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3476=((1.0)*cj5);
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x3476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3476))+((r21*sj5)))),-1);
if(!x3478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3477.value)+(((1.5707963267949)*(x3478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3479=IKsin(j4);
IkReal x3480=IKcos(j4);
IkReal x3481=(sj5*x3479);
IkReal x3482=(cj5*x3479);
IkReal x3483=((1.0)*cj5*x3480);
IkReal x3484=((1.0)*sj5*x3480);
evalcond[0]=(((r20*x3481))+((r21*x3482))+((r22*x3480)));
evalcond[1]=(cj0+((r00*x3481))+((r01*x3482))+((r02*x3480)));
evalcond[2]=(sj0+((r10*x3481))+((r12*x3480))+((r11*x3482)));
evalcond[3]=((((-1.0)*r20*x3484))+(((-1.0)*r21*x3483))+((r22*x3479)));
evalcond[4]=(cj0+(((-1.0)*r10*x3484))+((r12*x3479))+(((-1.0)*r11*x3483)));
evalcond[5]=((((-1.0)*r00*x3484))+(((-1.0)*r01*x3483))+(((-1.0)*sj0))+((r02*x3479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3485=((1.0)*sj0);
CheckValue<IkReal> x3486=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3486.valid){
continue;
}
CheckValue<IkReal> x3487 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x3485))+(((-1.0)*cj5*r21*x3485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3486.value)))+(x3487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3488=IKsin(j4);
IkReal x3489=IKcos(j4);
IkReal x3490=(sj5*x3488);
IkReal x3491=(cj5*x3488);
IkReal x3492=((1.0)*cj5*x3489);
IkReal x3493=((1.0)*sj5*x3489);
evalcond[0]=(((r20*x3490))+((r21*x3491))+((r22*x3489)));
evalcond[1]=(((r01*x3491))+cj0+((r00*x3490))+((r02*x3489)));
evalcond[2]=(sj0+((r10*x3490))+((r12*x3489))+((r11*x3491)));
evalcond[3]=(((r22*x3488))+(((-1.0)*r21*x3492))+(((-1.0)*r20*x3493)));
evalcond[4]=(cj0+(((-1.0)*r10*x3493))+((r12*x3488))+(((-1.0)*r11*x3492)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x3492))+(((-1.0)*r00*x3493))+((r02*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3494=((1.0)*cj0);
CheckValue<IkReal> x3495 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x3494))+(((-1.0)*cj5*r21*x3494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3495.valid){
continue;
}
CheckValue<IkReal> x3496=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3495.value)+(((1.5707963267949)*(x3496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3497=IKsin(j4);
IkReal x3498=IKcos(j4);
IkReal x3499=(sj5*x3497);
IkReal x3500=(cj5*x3497);
IkReal x3501=((1.0)*cj5*x3498);
IkReal x3502=((1.0)*sj5*x3498);
evalcond[0]=(((r20*x3499))+((r22*x3498))+((r21*x3500)));
evalcond[1]=(((r01*x3500))+cj0+((r00*x3499))+((r02*x3498)));
evalcond[2]=(sj0+((r10*x3499))+((r11*x3500))+((r12*x3498)));
evalcond[3]=(((r22*x3497))+(((-1.0)*r21*x3501))+(((-1.0)*r20*x3502)));
evalcond[4]=((((-1.0)*r10*x3502))+cj0+((r12*x3497))+(((-1.0)*r11*x3501)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x3501))+(((-1.0)*r00*x3502))+((r02*x3497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0474678447733665)*px))+(((-5.20790068370649)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0474678447733665)*py))+(((-5.20790068370649)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0474678447733665)*px))+(((-5.20790068370649)*py))))+IKsqr(((((0.0474678447733665)*py))+(((-5.20790068370649)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0474678447733665)*px))+(((-5.20790068370649)*py))), ((((0.0474678447733665)*py))+(((-5.20790068370649)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3503=IKcos(j0);
IkReal x3504=IKsin(j0);
evalcond[0]=((((-0.00175)*x3504))+(((-1.0)*px))+(((-0.192)*x3503)));
evalcond[1]=((((-1.0)*py))+(((-0.192)*x3504))+(((0.00175)*x3503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3505=((1.0)*cj5);
IkReal x3506=((((-1.0)*r10*x3505))+((r11*sj5)));
j4eval[0]=x3506;
j4eval[1]=IKsign(x3506);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3505)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3507=((1.0)*sj5);
IkReal x3508=((((-1.0)*r01*x3507))+((cj5*r00)));
j4eval[0]=x3508;
j4eval[1]=IKsign(x3508);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x3507)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3509=cj5*cj5;
IkReal x3510=(r00*r20);
IkReal x3511=((1.0)*sj0);
IkReal x3512=(cj5*r21);
IkReal x3513=(r20*sj5);
IkReal x3514=(((r01*r21*x3509))+x3510+(((-1.0)*x3509*x3510))+((r00*sj5*x3512))+((r02*r22))+((cj5*r01*x3513)));
j4eval[0]=x3514;
j4eval[1]=IKsign(x3514);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3511*x3513))+(((-1.0)*x3511*x3512))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3515=cj5*cj5;
IkReal x3516=(r00*r20);
IkReal x3517=((1.0)*sj0);
IkReal x3518=(cj5*r21);
IkReal x3519=(r20*sj5);
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(IKsign((((r01*r21*x3515))+x3516+((r00*sj5*x3518))+((r02*r22))+((cj5*r01*x3519))+(((-1.0)*x3515*x3516)))),-1);
if(!x3520.valid){
continue;
}
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x3517*x3518))+(((-1.0)*x3517*x3519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3520.value)))+(x3521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3522=IKsin(j4);
IkReal x3523=IKcos(j4);
IkReal x3524=((1.0)*sj0);
IkReal x3525=(sj5*x3522);
IkReal x3526=(cj5*x3522);
IkReal x3527=((1.0)*cj5*x3523);
IkReal x3528=((1.0)*sj5*x3523);
evalcond[0]=(((r21*x3526))+((r20*x3525))+((r22*x3523)));
evalcond[1]=((((-1.0)*r20*x3528))+((r22*x3522))+(((-1.0)*r21*x3527)));
evalcond[2]=(cj0+(((-1.0)*r10*x3528))+((r12*x3522))+(((-1.0)*r11*x3527)));
evalcond[3]=(((r01*x3526))+((r00*x3525))+((r02*x3523))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3524))+((r10*x3525))+((r11*x3526))+((r12*x3523)));
evalcond[5]=((((-1.0)*x3524))+((r02*x3522))+(((-1.0)*r01*x3527))+(((-1.0)*r00*x3528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3529=((1.0)*sj0);
CheckValue<IkReal> x3530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3530.valid){
continue;
}
CheckValue<IkReal> x3531 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x3529))+(((-1.0)*cj5*r21*x3529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3530.value)))+(x3531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3532=IKsin(j4);
IkReal x3533=IKcos(j4);
IkReal x3534=((1.0)*sj0);
IkReal x3535=(sj5*x3532);
IkReal x3536=(cj5*x3532);
IkReal x3537=((1.0)*cj5*x3533);
IkReal x3538=((1.0)*sj5*x3533);
evalcond[0]=(((r22*x3533))+((r21*x3536))+((r20*x3535)));
evalcond[1]=(((r22*x3532))+(((-1.0)*r21*x3537))+(((-1.0)*r20*x3538)));
evalcond[2]=(((r12*x3532))+(((-1.0)*r11*x3537))+cj0+(((-1.0)*r10*x3538)));
evalcond[3]=(((r02*x3533))+((r01*x3536))+((r00*x3535))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3536))+((r12*x3533))+(((-1.0)*x3534))+((r10*x3535)));
evalcond[5]=(((r02*x3532))+(((-1.0)*r01*x3537))+(((-1.0)*r00*x3538))+(((-1.0)*x3534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3539=((1.0)*cj0);
CheckValue<IkReal> x3540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x3539))+(((-1.0)*cj5*r21*x3539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x3541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3540.value)+(((1.5707963267949)*(x3541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3542=IKsin(j4);
IkReal x3543=IKcos(j4);
IkReal x3544=((1.0)*sj0);
IkReal x3545=(sj5*x3542);
IkReal x3546=(cj5*x3542);
IkReal x3547=((1.0)*cj5*x3543);
IkReal x3548=((1.0)*sj5*x3543);
evalcond[0]=(((r20*x3545))+((r21*x3546))+((r22*x3543)));
evalcond[1]=((((-1.0)*r20*x3548))+(((-1.0)*r21*x3547))+((r22*x3542)));
evalcond[2]=(cj0+(((-1.0)*r10*x3548))+((r12*x3542))+(((-1.0)*r11*x3547)));
evalcond[3]=(((r02*x3543))+((r00*x3545))+((r01*x3546))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3543))+((r11*x3546))+(((-1.0)*x3544))+((r10*x3545)));
evalcond[5]=(((r02*x3542))+(((-1.0)*r00*x3548))+(((-1.0)*r01*x3547))+(((-1.0)*x3544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.69363899664067)*py))+(((-0.132294506470619)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.69363899664067)*px))+(((0.132294506470619)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.69363899664067)*py))+(((-0.132294506470619)*px))))+IKsqr(((((8.69363899664067)*px))+(((0.132294506470619)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.69363899664067)*py))+(((-0.132294506470619)*px))), ((((8.69363899664067)*px))+(((0.132294506470619)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3549=IKcos(j0);
IkReal x3550=IKsin(j0);
evalcond[0]=((((0.115)*x3549))+(((-1.0)*px))+(((-0.00175)*x3550)));
evalcond[1]=((((-1.0)*py))+(((0.115)*x3550))+(((0.00175)*x3549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3551=((1.0)*sj5);
IkReal x3552=(((cj5*r10))+(((-1.0)*r11*x3551)));
j4eval[0]=x3552;
j4eval[1]=IKsign(x3552);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*x3551))+(((-1.0)*cj0*cj5*r21)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3553=((1.0)*cj5);
IkReal x3554=(((r01*sj5))+(((-1.0)*r00*x3553)));
j4eval[0]=x3554;
j4eval[1]=IKsign(x3554);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3553))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3555=((1.0)*cj5);
IkReal x3556=((((-1.0)*r20*x3555))+((r21*sj5)));
j4eval[0]=x3556;
j4eval[1]=((IKabs((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x3555)))))+(IKabs(((((-1.0)*r02*sj0))+((cj0*r12))))));
j4eval[2]=IKsign(x3556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3557=((1.0)*cj5);
CheckValue<IkReal> x3558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3557))+((r21*sj5)))),-1);
if(!x3558.valid){
continue;
}
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x3557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3558.value)))+(x3559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3560=IKsin(j4);
IkReal x3561=IKcos(j4);
IkReal x3562=(sj5*x3560);
IkReal x3563=(cj5*x3560);
IkReal x3564=((1.0)*cj5*x3561);
IkReal x3565=((1.0)*sj5*x3561);
evalcond[0]=(((r21*x3563))+((r22*x3561))+((r20*x3562)));
evalcond[1]=(cj0+((r01*x3563))+((r00*x3562))+((r02*x3561)));
evalcond[2]=(((r10*x3562))+sj0+((r11*x3563))+((r12*x3561)));
evalcond[3]=((((-1.0)*r21*x3564))+(((-1.0)*r20*x3565))+((r22*x3560)));
evalcond[4]=(cj0+(((-1.0)*r11*x3564))+(((-1.0)*r10*x3565))+((r12*x3560)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x3564))+(((-1.0)*r00*x3565))+((r02*x3560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3566=((1.0)*sj0);
CheckValue<IkReal> x3567=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3567.valid){
continue;
}
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x3566))+(((-1.0)*cj5*r21*x3566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3567.value)))+(x3568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3569=IKsin(j4);
IkReal x3570=IKcos(j4);
IkReal x3571=(sj5*x3569);
IkReal x3572=(cj5*x3569);
IkReal x3573=((1.0)*cj5*x3570);
IkReal x3574=((1.0)*sj5*x3570);
evalcond[0]=(((r21*x3572))+((r20*x3571))+((r22*x3570)));
evalcond[1]=(((r00*x3571))+cj0+((r01*x3572))+((r02*x3570)));
evalcond[2]=(((r10*x3571))+sj0+((r12*x3570))+((r11*x3572)));
evalcond[3]=(((r22*x3569))+(((-1.0)*r20*x3574))+(((-1.0)*r21*x3573)));
evalcond[4]=((((-1.0)*r11*x3573))+(((-1.0)*r10*x3574))+cj0+((r12*x3569)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x3574))+(((-1.0)*r01*x3573))+((r02*x3569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3575=((1.0)*cj0);
CheckValue<IkReal> x3576=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3576.valid){
continue;
}
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x3575))+(((-1.0)*cj5*r21*x3575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3576.value)))+(x3577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3578=IKsin(j4);
IkReal x3579=IKcos(j4);
IkReal x3580=(sj5*x3578);
IkReal x3581=(cj5*x3578);
IkReal x3582=((1.0)*cj5*x3579);
IkReal x3583=((1.0)*sj5*x3579);
evalcond[0]=(((r20*x3580))+((r22*x3579))+((r21*x3581)));
evalcond[1]=(cj0+((r01*x3581))+((r00*x3580))+((r02*x3579)));
evalcond[2]=(sj0+((r10*x3580))+((r11*x3581))+((r12*x3579)));
evalcond[3]=((((-1.0)*r21*x3582))+(((-1.0)*r20*x3583))+((r22*x3578)));
evalcond[4]=(cj0+((r12*x3578))+(((-1.0)*r11*x3582))+(((-1.0)*r10*x3583)));
evalcond[5]=((((-1.0)*r00*x3583))+(((-1.0)*sj0))+((r02*x3578))+(((-1.0)*r01*x3582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((107.063197026022)*py))+(((-20.817843866171)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((107.063197026022)*px))+(((20.817843866171)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((107.063197026022)*py))+(((-20.817843866171)*px))))+IKsqr(((((107.063197026022)*px))+(((20.817843866171)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((107.063197026022)*py))+(((-20.817843866171)*px))), ((((107.063197026022)*px))+(((20.817843866171)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3584=IKsin(j0);
IkReal x3585=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x3584))+(((0.009)*x3585)));
evalcond[1]=((((0.00175)*x3585))+(((-1.0)*py))+(((0.009)*x3584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3586=((1.0)*sj5);
IkReal x3587=(((cj5*r10))+(((-1.0)*r11*x3586)));
j4eval[0]=x3587;
j4eval[1]=IKsign(x3587);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x3586)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3588=((1.0)*cj5);
IkReal x3589=((((-1.0)*r00*x3588))+((r01*sj5)));
j4eval[0]=x3589;
j4eval[1]=IKsign(x3589);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3588))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3590=((1.0)*cj5);
IkReal x3591=(((r21*sj5))+(((-1.0)*r20*x3590)));
j4eval[0]=x3591;
j4eval[1]=((IKabs(((((-1.0)*r02*sj0))+((cj0*r12)))))+(IKabs((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x3590))))));
j4eval[2]=IKsign(x3591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3592=((1.0)*cj5);
CheckValue<IkReal> x3593 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x3592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3593.valid){
continue;
}
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x3592)))),-1);
if(!x3594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3593.value)+(((1.5707963267949)*(x3594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3595=IKsin(j4);
IkReal x3596=IKcos(j4);
IkReal x3597=(sj5*x3595);
IkReal x3598=(cj5*x3595);
IkReal x3599=((1.0)*cj5*x3596);
IkReal x3600=((1.0)*sj5*x3596);
evalcond[0]=(((r21*x3598))+((r20*x3597))+((r22*x3596)));
evalcond[1]=(cj0+((r02*x3596))+((r00*x3597))+((r01*x3598)));
evalcond[2]=(sj0+((r11*x3598))+((r10*x3597))+((r12*x3596)));
evalcond[3]=((((-1.0)*r21*x3599))+((r22*x3595))+(((-1.0)*r20*x3600)));
evalcond[4]=(cj0+(((-1.0)*r10*x3600))+((r12*x3595))+(((-1.0)*r11*x3599)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x3600))+((r02*x3595))+(((-1.0)*r01*x3599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3601=((1.0)*sj0);
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3602.valid){
continue;
}
CheckValue<IkReal> x3603 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x3601))+(((-1.0)*r20*sj5*x3601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3602.value)))+(x3603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3604=IKsin(j4);
IkReal x3605=IKcos(j4);
IkReal x3606=(sj5*x3604);
IkReal x3607=(cj5*x3604);
IkReal x3608=((1.0)*cj5*x3605);
IkReal x3609=((1.0)*sj5*x3605);
evalcond[0]=(((r22*x3605))+((r21*x3607))+((r20*x3606)));
evalcond[1]=(((r02*x3605))+cj0+((r01*x3607))+((r00*x3606)));
evalcond[2]=(sj0+((r11*x3607))+((r10*x3606))+((r12*x3605)));
evalcond[3]=(((r22*x3604))+(((-1.0)*r21*x3608))+(((-1.0)*r20*x3609)));
evalcond[4]=(cj0+(((-1.0)*r10*x3609))+(((-1.0)*r11*x3608))+((r12*x3604)));
evalcond[5]=((((-1.0)*r01*x3608))+(((-1.0)*sj0))+(((-1.0)*r00*x3609))+((r02*x3604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3610=((1.0)*cj0);
CheckValue<IkReal> x3611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x3610))+(((-1.0)*r20*sj5*x3610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3611.valid){
continue;
}
CheckValue<IkReal> x3612=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3611.value)+(((1.5707963267949)*(x3612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3613=IKsin(j4);
IkReal x3614=IKcos(j4);
IkReal x3615=(sj5*x3613);
IkReal x3616=(cj5*x3613);
IkReal x3617=((1.0)*cj5*x3614);
IkReal x3618=((1.0)*sj5*x3614);
evalcond[0]=(((r22*x3614))+((r21*x3616))+((r20*x3615)));
evalcond[1]=(cj0+((r02*x3614))+((r00*x3615))+((r01*x3616)));
evalcond[2]=(((r11*x3616))+sj0+((r10*x3615))+((r12*x3614)));
evalcond[3]=(((r22*x3613))+(((-1.0)*r20*x3618))+(((-1.0)*r21*x3617)));
evalcond[4]=(cj0+(((-1.0)*r10*x3618))+(((-1.0)*r11*x3617))+((r12*x3613)));
evalcond[5]=((((-1.0)*r00*x3618))+(((-1.0)*sj0))+(((-1.0)*r01*x3617))+((r02*x3613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0197056399652899)*px))+(((-3.35558897694651)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.35558897694651)*px))+(((0.0197056399652899)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0197056399652899)*px))+(((-3.35558897694651)*py))))+IKsqr(((((-3.35558897694651)*px))+(((0.0197056399652899)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0197056399652899)*px))+(((-3.35558897694651)*py))), ((((-3.35558897694651)*px))+(((0.0197056399652899)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3619=IKcos(j0);
IkReal x3620=IKsin(j0);
evalcond[0]=((((-0.298)*x3619))+(((-1.0)*px))+(((-0.00175)*x3620)));
evalcond[1]=((((-1.0)*py))+(((-0.298)*x3620))+(((0.00175)*x3619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3621=((1.0)*cj5);
IkReal x3622=(((r11*sj5))+(((-1.0)*r10*x3621)));
j4eval[0]=x3622;
j4eval[1]=IKsign(x3622);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3621)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3623=((1.0)*sj5);
IkReal x3624=((((-1.0)*r01*x3623))+((cj5*r00)));
j4eval[0]=x3624;
j4eval[1]=IKsign(x3624);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3623))+(((-1.0)*cj5*r21*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3625=cj5*cj5;
IkReal x3626=(r00*r20);
IkReal x3627=((1.0)*sj0);
IkReal x3628=(cj5*r21);
IkReal x3629=(r20*sj5);
IkReal x3630=(((r01*r21*x3625))+((cj5*r01*x3629))+x3626+((r02*r22))+((r00*sj5*x3628))+(((-1.0)*x3625*x3626)));
j4eval[0]=x3630;
j4eval[1]=IKsign(x3630);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3627*x3629))+(((-1.0)*x3627*x3628))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3631=cj5*cj5;
IkReal x3632=(r00*r20);
IkReal x3633=((1.0)*sj0);
IkReal x3634=(cj5*r21);
IkReal x3635=(r20*sj5);
CheckValue<IkReal> x3636=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3631*x3632))+((r01*r21*x3631))+x3632+((cj5*r01*x3635))+((r00*sj5*x3634))+((r02*r22)))),-1);
if(!x3636.valid){
continue;
}
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x3633*x3635))+(((-1.0)*x3633*x3634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3636.value)))+(x3637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3638=IKsin(j4);
IkReal x3639=IKcos(j4);
IkReal x3640=((1.0)*sj0);
IkReal x3641=(sj5*x3638);
IkReal x3642=(cj5*x3638);
IkReal x3643=((1.0)*cj5*x3639);
IkReal x3644=((1.0)*sj5*x3639);
evalcond[0]=(((r20*x3641))+((r22*x3639))+((r21*x3642)));
evalcond[1]=(((r22*x3638))+(((-1.0)*r20*x3644))+(((-1.0)*r21*x3643)));
evalcond[2]=(((r12*x3638))+cj0+(((-1.0)*r11*x3643))+(((-1.0)*r10*x3644)));
evalcond[3]=(((r02*x3639))+((r00*x3641))+((r01*x3642))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3639))+((r11*x3642))+((r10*x3641))+(((-1.0)*x3640)));
evalcond[5]=(((r02*x3638))+(((-1.0)*r00*x3644))+(((-1.0)*r01*x3643))+(((-1.0)*x3640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3645=((1.0)*sj0);
CheckValue<IkReal> x3646 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x3645))+(((-1.0)*cj5*r21*x3645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3646.valid){
continue;
}
CheckValue<IkReal> x3647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3646.value)+(((1.5707963267949)*(x3647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3648=IKsin(j4);
IkReal x3649=IKcos(j4);
IkReal x3650=((1.0)*sj0);
IkReal x3651=(sj5*x3648);
IkReal x3652=(cj5*x3648);
IkReal x3653=((1.0)*cj5*x3649);
IkReal x3654=((1.0)*sj5*x3649);
evalcond[0]=(((r20*x3651))+((r21*x3652))+((r22*x3649)));
evalcond[1]=((((-1.0)*r21*x3653))+(((-1.0)*r20*x3654))+((r22*x3648)));
evalcond[2]=(cj0+((r12*x3648))+(((-1.0)*r10*x3654))+(((-1.0)*r11*x3653)));
evalcond[3]=(((r00*x3651))+((r02*x3649))+(((-1.0)*cj0))+((r01*x3652)));
evalcond[4]=(((r12*x3649))+((r11*x3652))+((r10*x3651))+(((-1.0)*x3650)));
evalcond[5]=((((-1.0)*r01*x3653))+((r02*x3648))+(((-1.0)*r00*x3654))+(((-1.0)*x3650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3655=((1.0)*cj0);
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x3655))+(((-1.0)*cj5*r21*x3655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x3657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3656.value)+(((1.5707963267949)*(x3657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3658=IKsin(j4);
IkReal x3659=IKcos(j4);
IkReal x3660=((1.0)*sj0);
IkReal x3661=(sj5*x3658);
IkReal x3662=(cj5*x3658);
IkReal x3663=((1.0)*cj5*x3659);
IkReal x3664=((1.0)*sj5*x3659);
evalcond[0]=(((r20*x3661))+((r21*x3662))+((r22*x3659)));
evalcond[1]=((((-1.0)*r21*x3663))+(((-1.0)*r20*x3664))+((r22*x3658)));
evalcond[2]=(((r12*x3658))+cj0+(((-1.0)*r10*x3664))+(((-1.0)*r11*x3663)));
evalcond[3]=(((r01*x3662))+((r00*x3661))+((r02*x3659))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3659))+(((-1.0)*x3660))+((r11*x3662))+((r10*x3661)));
evalcond[5]=((((-1.0)*x3660))+(((-1.0)*r01*x3663))+(((-1.0)*r00*x3664))+((r02*x3658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3665=(cj1*sj2);
IkReal x3666=(r01*sj5);
IkReal x3667=(cj2*sj1);
IkReal x3668=((4000.0)*px);
IkReal x3669=(cj5*r00);
IkReal x3670=((154.0)*cj1);
IkReal x3671=((578.0)*sj1);
IkReal x3672=((614.0)*sj1*sj2);
IkReal x3673=((614.0)*cj1*cj2);
CheckValue<IkReal> x3674=IKPowWithIntegerCheck(((((-7.0)*x3667))+(((-7.0)*x3665))),-1);
if(!x3674.valid){
continue;
}
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(((((-1.0)*x3665))+(((-1.0)*x3667))),-1);
if(!x3675.valid){
continue;
}
if( IKabs(((x3674.value)*(((((-484.0)*x3665*x3669))+(((-484.0)*x3667*x3669))+(((484.0)*x3666*x3667))+((x3667*x3668))+(((484.0)*x3665*x3666))+((x3666*x3670))+((x3666*x3671))+((x3666*x3673))+(((-1.0)*x3666*x3672))+(((-1.0)*x3669*x3671))+(((-1.0)*x3669*x3670))+(((-1.0)*x3669*x3673))+((x3669*x3672))+((x3665*x3668)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3675.value)*(((((-1.0)*x3669))+x3666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3674.value)*(((((-484.0)*x3665*x3669))+(((-484.0)*x3667*x3669))+(((484.0)*x3666*x3667))+((x3667*x3668))+(((484.0)*x3665*x3666))+((x3666*x3670))+((x3666*x3671))+((x3666*x3673))+(((-1.0)*x3666*x3672))+(((-1.0)*x3669*x3671))+(((-1.0)*x3669*x3670))+(((-1.0)*x3669*x3673))+((x3669*x3672))+((x3665*x3668))))))+IKsqr(((x3675.value)*(((((-1.0)*x3669))+x3666))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3674.value)*(((((-484.0)*x3665*x3669))+(((-484.0)*x3667*x3669))+(((484.0)*x3666*x3667))+((x3667*x3668))+(((484.0)*x3665*x3666))+((x3666*x3670))+((x3666*x3671))+((x3666*x3673))+(((-1.0)*x3666*x3672))+(((-1.0)*x3669*x3671))+(((-1.0)*x3669*x3670))+(((-1.0)*x3669*x3673))+((x3669*x3672))+((x3665*x3668))))), ((x3675.value)*(((((-1.0)*x3669))+x3666))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3676=IKcos(j0);
IkReal x3677=IKsin(j0);
IkReal x3678=((0.1535)*sj1);
IkReal x3679=((1.0)*cj2);
IkReal x3680=(cj5*r10);
IkReal x3681=(r11*sj5);
IkReal x3682=(cj5*r00);
IkReal x3683=((0.1535)*cj2);
IkReal x3684=(r01*sj5);
IkReal x3685=(sj2*x3677);
IkReal x3686=(cj1*x3676);
IkReal x3687=(cj1*x3677);
IkReal x3688=(sj1*x3676);
IkReal x3689=(sj1*x3677);
evalcond[0]=((((-1.0)*sj2*x3686))+x3682+(((-1.0)*x3679*x3688))+(((-1.0)*x3684)));
evalcond[1]=(x3680+(((-1.0)*x3679*x3689))+(((-1.0)*x3681))+(((-1.0)*cj1*x3685)));
evalcond[2]=((((-0.00175)*x3677))+(((0.121)*x3682))+(((0.1445)*x3688))+(((-0.121)*x3684))+(((-1.0)*px))+(((-1.0)*sj2*x3676*x3678))+(((0.0385)*x3686))+((x3683*x3686)));
evalcond[3]=((((0.121)*x3680))+(((0.1445)*x3689))+(((-0.121)*x3681))+(((-1.0)*py))+(((0.00175)*x3676))+(((-1.0)*x3678*x3685))+(((0.0385)*x3687))+((x3683*x3687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3690=((1.0)*cj5);
IkReal x3691=(((r01*sj5))+(((-1.0)*r00*x3690)));
j4eval[0]=x3691;
j4eval[1]=IKsign(x3691);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3690))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3692=((1.0)*cj5);
IkReal x3693=((((-1.0)*r10*x3692))+((r11*sj5)));
j4eval[0]=x3693;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3692))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x3693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3694=((1.0)*sj0);
IkReal x3695=((1.0)*sj5);
IkReal x3696=((1.0)*cj0);
IkReal x3697=(((cj5*r20))+(((-1.0)*r21*x3695)));
j4eval[0]=x3697;
j4eval[1]=((IKabs(((((-1.0)*cj5*r11*x3694))+(((-1.0)*cj0*r00*x3695))+(((-1.0)*cj5*r01*x3696))+(((-1.0)*r10*sj5*x3694)))))+(IKabs(((((-1.0)*r12*x3694))+(((-1.0)*r02*x3696))))));
j4eval[2]=IKsign(x3697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3698=((-1.0)*r21);
IkReal x3700 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3700)==0){
continue;
}
IkReal x3699=pow(x3700,-0.5);
CheckValue<IkReal> x3701 = IKatan2WithCheck(IkReal(r20),IkReal(x3698),IKFAST_ATAN2_MAGTHRESH);
if(!x3701.valid){
continue;
}
IkReal gconst130=((-1.0)*(x3701.value));
IkReal gconst131=((-1.0)*r20*x3699);
IkReal gconst132=(x3698*x3699);
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3702.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3703=((-1.0)*r21);
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal(r20),IkReal(x3703),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
IkReal x3704=((-1.0)*(x3706.value));
IkReal x3705=x3699;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst131;
cj5=gconst132;
j5=x3704;
IkReal gconst130=x3704;
IkReal gconst131=((-1.0)*r20*x3705);
IkReal gconst132=(x3703*x3705);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3707=((-1.0)*r21);
CheckValue<IkReal> x3710 = IKatan2WithCheck(IkReal(r20),IkReal(x3707),IKFAST_ATAN2_MAGTHRESH);
if(!x3710.valid){
continue;
}
IkReal x3708=((-1.0)*(x3710.value));
IkReal x3709=x3699;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst131;
cj5=gconst132;
j5=x3708;
IkReal gconst130=x3708;
IkReal gconst131=((-1.0)*r20*x3709);
IkReal gconst132=(x3707*x3709);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3711=((-1.0)*r21);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(r20),IkReal(x3711),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal x3712=((-1.0)*(x3714.value));
IkReal x3713=x3699;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst131;
cj5=gconst132;
j5=x3712;
IkReal gconst130=x3712;
IkReal gconst131=((-1.0)*r20*x3713);
IkReal gconst132=(x3711*x3713);
IkReal x3715=r22*r22;
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3715))),-1);
if(!x3718.valid){
continue;
}
IkReal x3716=x3718.value;
IkReal x3717=(((x3716*(r20*r20*r20*r20)))+(((2.0)*x3716*(r20*r20)*(r21*r21)))+((x3716*(r21*r21*r21*r21)))+x3715);
j4eval[0]=x3717;
j4eval[1]=IKsign(x3717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3719=(gconst132*r21);
IkReal x3720=(gconst131*r20);
IkReal x3721=(cj2*sj1);
IkReal x3722=(cj1*sj2);
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal((((x3719*x3722))+((x3719*x3721))+((x3720*x3721))+((x3720*x3722)))),IkReal((((r22*x3721))+((r22*x3722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
CheckValue<IkReal> x3724=IKPowWithIntegerCheck(IKsign(((x3719*x3719)+(r22*r22)+(((2.0)*x3719*x3720))+(x3720*x3720))),-1);
if(!x3724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3723.value)+(((1.5707963267949)*(x3724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3725=IKcos(j4);
IkReal x3726=IKsin(j4);
IkReal x3727=(cj1*cj2);
IkReal x3728=(gconst131*r10);
IkReal x3729=(gconst132*r21);
IkReal x3730=((1.0)*sj1);
IkReal x3731=(gconst131*r20);
IkReal x3732=(gconst132*r01);
IkReal x3733=(gconst131*r00);
IkReal x3734=(gconst132*r11);
IkReal x3735=((1.0)*x3725);
evalcond[0]=(((r22*x3726))+(((-1.0)*x3731*x3735))+(((-1.0)*x3729*x3735)));
evalcond[1]=(cj0+((r12*x3726))+(((-1.0)*x3734*x3735))+(((-1.0)*x3728*x3735)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3726))+(((-1.0)*x3732*x3735))+(((-1.0)*x3733*x3735)));
evalcond[3]=((((-1.0)*cj2*x3730))+((x3726*x3731))+((r22*x3725))+((x3726*x3729))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((x3726*x3733))+((x3726*x3732))+(((-1.0)*cj0*sj2*x3730))+((r02*x3725))+((cj0*x3727)));
evalcond[5]=((((-1.0)*sj0*sj2*x3730))+((x3726*x3734))+((x3726*x3728))+((sj0*x3727))+((r12*x3725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3736=((1.0)*sj0);
CheckValue<IkReal> x3737 = IKatan2WithCheck(IkReal(((((-1.0)*gconst131*r20*x3736))+(((-1.0)*gconst132*r21*x3736)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
CheckValue<IkReal> x3738=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst132*r10))+((gconst131*r11)))),-1);
if(!x3738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3737.value)+(((1.5707963267949)*(x3738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3739=IKcos(j4);
IkReal x3740=IKsin(j4);
IkReal x3741=(cj1*cj2);
IkReal x3742=(gconst131*r10);
IkReal x3743=(gconst132*r21);
IkReal x3744=((1.0)*sj1);
IkReal x3745=(gconst131*r20);
IkReal x3746=(gconst132*r01);
IkReal x3747=(gconst131*r00);
IkReal x3748=(gconst132*r11);
IkReal x3749=((1.0)*x3739);
evalcond[0]=((((-1.0)*x3743*x3749))+((r22*x3740))+(((-1.0)*x3745*x3749)));
evalcond[1]=((((-1.0)*x3748*x3749))+cj0+((r12*x3740))+(((-1.0)*x3742*x3749)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3746*x3749))+(((-1.0)*x3747*x3749))+((r02*x3740)));
evalcond[3]=((((-1.0)*cj2*x3744))+(((-1.0)*cj1*sj2))+((r22*x3739))+((x3740*x3745))+((x3740*x3743)));
evalcond[4]=(((cj0*x3741))+(((-1.0)*cj0*sj2*x3744))+((r02*x3739))+((x3740*x3747))+((x3740*x3746)));
evalcond[5]=((((-1.0)*sj0*sj2*x3744))+((sj0*x3741))+((r12*x3739))+((x3740*x3742))+((x3740*x3748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3750=((1.0)*cj0);
CheckValue<IkReal> x3751 = IKatan2WithCheck(IkReal(((((-1.0)*gconst131*r20*x3750))+(((-1.0)*gconst132*r21*x3750)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3751.valid){
continue;
}
CheckValue<IkReal> x3752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst132*r00))+((gconst131*r01)))),-1);
if(!x3752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3751.value)+(((1.5707963267949)*(x3752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3753=IKcos(j4);
IkReal x3754=IKsin(j4);
IkReal x3755=(cj1*cj2);
IkReal x3756=(gconst131*r10);
IkReal x3757=(gconst132*r21);
IkReal x3758=((1.0)*sj1);
IkReal x3759=(gconst131*r20);
IkReal x3760=(gconst132*r01);
IkReal x3761=(gconst131*r00);
IkReal x3762=(gconst132*r11);
IkReal x3763=((1.0)*x3753);
evalcond[0]=((((-1.0)*x3757*x3763))+((r22*x3754))+(((-1.0)*x3759*x3763)));
evalcond[1]=((((-1.0)*x3762*x3763))+cj0+((r12*x3754))+(((-1.0)*x3756*x3763)));
evalcond[2]=((((-1.0)*x3761*x3763))+(((-1.0)*sj0))+((r02*x3754))+(((-1.0)*x3760*x3763)));
evalcond[3]=(((x3754*x3757))+((x3754*x3759))+(((-1.0)*cj2*x3758))+(((-1.0)*cj1*sj2))+((r22*x3753)));
evalcond[4]=((((-1.0)*cj0*sj2*x3758))+((cj0*x3755))+((r02*x3753))+((x3754*x3760))+((x3754*x3761)));
evalcond[5]=((((-1.0)*sj0*sj2*x3758))+((x3754*x3756))+((sj0*x3755))+((r12*x3753))+((x3754*x3762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3766 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3766)==0){
continue;
}
IkReal x3764=pow(x3766,-0.5);
IkReal x3765=((1.0)*x3764);
CheckValue<IkReal> x3767 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3767.valid){
continue;
}
IkReal gconst133=((3.14159265358979)+(((-1.0)*(x3767.value))));
IkReal gconst134=(r20*x3765);
IkReal gconst135=(r21*x3765);
CheckValue<IkReal> x3768 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3768.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
IkReal x3769=((1.0)*(x3772.value));
IkReal x3770=x3764;
IkReal x3771=((1.0)*x3770);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x3769)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x3769)));
IkReal gconst134=(r20*x3771);
IkReal gconst135=(r21*x3771);
IkReal x3773=r22*r22;
IkReal x3774=((1.0)*x3773);
CheckValue<IkReal> x3778=IKPowWithIntegerCheck(((-1.0)+x3773),-1);
if(!x3778.valid){
continue;
}
IkReal x3775=x3778.value;
if((((1.0)+(((-1.0)*x3774)))) < -0.00001)
continue;
IkReal x3776=IKsqrt(((1.0)+(((-1.0)*x3774))));
IkReal x3777=(cj0*x3775*x3776);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3777+(((-1.0)*x3774*x3777))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3782 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3782.valid){
continue;
}
IkReal x3779=((1.0)*(x3782.value));
IkReal x3780=x3764;
IkReal x3781=((1.0)*x3780);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x3779)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x3779)));
IkReal gconst134=(r20*x3781);
IkReal gconst135=(r21*x3781);
IkReal x3783=r22*r22;
IkReal x3784=((1.0)*x3783);
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(((-1.0)+x3783),-1);
if(!x3788.valid){
continue;
}
IkReal x3785=x3788.value;
if((((1.0)+(((-1.0)*x3784)))) < -0.00001)
continue;
IkReal x3786=IKsqrt(((1.0)+(((-1.0)*x3784))));
IkReal x3787=(sj0*x3785*x3786);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3784*x3787))+x3787))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3792 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3792.valid){
continue;
}
IkReal x3789=((1.0)*(x3792.value));
IkReal x3790=x3764;
IkReal x3791=((1.0)*x3790);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x3789)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x3789)));
IkReal gconst134=(r20*x3791);
IkReal gconst135=(r21*x3791);
IkReal x3793=r22*r22;
IkReal x3794=((1.0)*r12*sj0);
IkReal x3795=((1.0)*cj0*r02);
CheckValue<IkReal> x3799=IKPowWithIntegerCheck(((-1.0)+x3793),-1);
if(!x3799.valid){
continue;
}
IkReal x3796=x3799.value;
if((((1.0)+(((-1.0)*x3793)))) < -0.00001)
continue;
IkReal x3797=IKsqrt(((1.0)+(((-1.0)*x3793))));
IkReal x3798=(r22*x3796*x3797);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3794))+(((-1.0)*x3795)))))+(IKabs(((((-1.0)*x3795*x3798))+(((-1.0)*x3794*x3798))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3800=((1.0)*sj0);
IkReal x3801=((1.0)*cj0);
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r10*x3800))+(((-1.0)*gconst135*r01*x3801))+(((-1.0)*gconst134*r00*x3801))+(((-1.0)*gconst135*r11*x3800)))),IkReal(((((-1.0)*r02*x3801))+(((-1.0)*r12*x3800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(IKsign((((gconst135*r20))+(((-1.0)*gconst134*r21)))),-1);
if(!x3803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3802.value)+(((1.5707963267949)*(x3803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3804=IKcos(j4);
IkReal x3805=IKsin(j4);
IkReal x3806=(gconst134*r10);
IkReal x3807=(cj1*cj2);
IkReal x3808=((1.0)*sj1);
IkReal x3809=(gconst134*r00);
IkReal x3810=(gconst134*r20);
IkReal x3811=(gconst135*x3805);
IkReal x3812=((1.0)*x3804);
IkReal x3813=(gconst135*x3812);
evalcond[0]=(((r22*x3805))+(((-1.0)*x3810*x3812))+(((-1.0)*r21*x3813)));
evalcond[1]=(cj0+((r12*x3805))+(((-1.0)*r11*x3813))+(((-1.0)*x3806*x3812)));
evalcond[2]=((((-1.0)*r01*x3813))+(((-1.0)*sj0))+(((-1.0)*x3809*x3812))+((r02*x3805)));
evalcond[3]=(((r21*x3811))+(((-1.0)*cj2*x3808))+((x3805*x3810))+((r22*x3804))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj2*x3808))+((x3805*x3809))+((r02*x3804))+((cj0*x3807))+((r01*x3811)));
evalcond[5]=((((-1.0)*sj0*sj2*x3808))+((r11*x3811))+((r12*x3804))+((x3805*x3806))+((sj0*x3807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3814=((1.0)*sj0);
CheckValue<IkReal> x3815=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+(((-1.0)*gconst135*r10)))),-1);
if(!x3815.valid){
continue;
}
CheckValue<IkReal> x3816 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*x3814))+(((-1.0)*gconst135*r21*x3814)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3815.value)))+(x3816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3817=IKcos(j4);
IkReal x3818=IKsin(j4);
IkReal x3819=(gconst134*r10);
IkReal x3820=(cj1*cj2);
IkReal x3821=((1.0)*sj1);
IkReal x3822=(gconst134*r00);
IkReal x3823=(gconst134*r20);
IkReal x3824=(gconst135*x3818);
IkReal x3825=((1.0)*x3817);
IkReal x3826=(gconst135*x3825);
evalcond[0]=((((-1.0)*x3823*x3825))+((r22*x3818))+(((-1.0)*r21*x3826)));
evalcond[1]=(((r12*x3818))+cj0+(((-1.0)*x3819*x3825))+(((-1.0)*r11*x3826)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x3826))+(((-1.0)*x3822*x3825))+((r02*x3818)));
evalcond[3]=((((-1.0)*cj2*x3821))+(((-1.0)*cj1*sj2))+((r22*x3817))+((x3818*x3823))+((r21*x3824)));
evalcond[4]=(((r02*x3817))+((x3818*x3822))+((cj0*x3820))+((r01*x3824))+(((-1.0)*cj0*sj2*x3821)));
evalcond[5]=(((r12*x3817))+((r11*x3824))+((x3818*x3819))+((sj0*x3820))+(((-1.0)*sj0*sj2*x3821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3827=((1.0)*gconst135);
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3827))+((gconst134*r01)))),-1);
if(!x3828.valid){
continue;
}
CheckValue<IkReal> x3829 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3827))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3828.value)))+(x3829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3830=IKcos(j4);
IkReal x3831=IKsin(j4);
IkReal x3832=(gconst134*r10);
IkReal x3833=(cj1*cj2);
IkReal x3834=((1.0)*sj1);
IkReal x3835=(gconst134*r00);
IkReal x3836=(gconst134*r20);
IkReal x3837=(gconst135*x3831);
IkReal x3838=((1.0)*x3830);
IkReal x3839=(gconst135*x3838);
evalcond[0]=((((-1.0)*r21*x3839))+(((-1.0)*x3836*x3838))+((r22*x3831)));
evalcond[1]=((((-1.0)*x3832*x3838))+cj0+((r12*x3831))+(((-1.0)*r11*x3839)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3831))+(((-1.0)*r01*x3839))+(((-1.0)*x3835*x3838)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x3831*x3836))+((r21*x3837))+(((-1.0)*cj2*x3834))+((r22*x3830)));
evalcond[4]=(((cj0*x3833))+((r02*x3830))+((r01*x3837))+((x3831*x3835))+(((-1.0)*cj0*sj2*x3834)));
evalcond[5]=(((sj0*x3833))+((x3831*x3832))+((r12*x3830))+(((-1.0)*sj0*sj2*x3834))+((r11*x3837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3841 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3841)==0){
continue;
}
IkReal x3840=pow(x3841,-0.5);
CheckValue<IkReal> x3842 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3842.valid){
continue;
}
IkReal gconst136=((-1.0)*(x3842.value));
IkReal gconst137=(r10*x3840);
IkReal gconst138=(r11*x3840);
CheckValue<IkReal> x3843 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3843.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3843.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3846 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3846.valid){
continue;
}
IkReal x3844=((-1.0)*(x3846.value));
IkReal x3845=x3840;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst137;
cj5=gconst138;
j5=x3844;
IkReal gconst136=x3844;
IkReal gconst137=(r10*x3845);
IkReal gconst138=(r11*x3845);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3847=((1.0)*sj0);
IkReal x3848=((1.0)*cj0);
CheckValue<IkReal> x3849=IKPowWithIntegerCheck(IKsign((((gconst138*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x3849.valid){
continue;
}
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal(((((-1.0)*gconst138*r11*x3847))+(((-1.0)*gconst137*r10*x3847))+(((-1.0)*gconst137*r00*x3848))+(((-1.0)*gconst138*r01*x3848)))),IkReal(((((-1.0)*r02*x3848))+(((-1.0)*r12*x3847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3849.value)))+(x3850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3851=IKcos(j4);
IkReal x3852=IKsin(j4);
IkReal x3853=(cj1*cj2);
IkReal x3854=(gconst138*r21);
IkReal x3855=(gconst137*r10);
IkReal x3856=(gconst137*r20);
IkReal x3857=((1.0)*sj1);
IkReal x3858=(gconst137*r00);
IkReal x3859=(gconst138*r01);
IkReal x3860=(gconst138*r11);
IkReal x3861=((1.0)*x3851);
evalcond[0]=((((-1.0)*x3854*x3861))+(((-1.0)*x3856*x3861))+((r22*x3852)));
evalcond[1]=((((-1.0)*x3860*x3861))+cj0+(((-1.0)*x3855*x3861))+((r12*x3852)));
evalcond[2]=(((r02*x3852))+(((-1.0)*sj0))+(((-1.0)*x3858*x3861))+(((-1.0)*x3859*x3861)));
evalcond[3]=((((-1.0)*cj2*x3857))+((x3852*x3854))+((x3852*x3856))+(((-1.0)*cj1*sj2))+((r22*x3851)));
evalcond[4]=(((r02*x3851))+((x3852*x3859))+((x3852*x3858))+((cj0*x3853))+(((-1.0)*cj0*sj2*x3857)));
evalcond[5]=(((x3852*x3855))+((x3852*x3860))+(((-1.0)*sj0*sj2*x3857))+((sj0*x3853))+((r12*x3851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3862=((1.0)*gconst138);
CheckValue<IkReal> x3863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3862))+((gconst137*r01)))),-1);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+(((-1.0)*cj0*r21*x3862)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3863.value)))+(x3864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3865=IKcos(j4);
IkReal x3866=IKsin(j4);
IkReal x3867=(cj1*cj2);
IkReal x3868=(gconst138*r21);
IkReal x3869=(gconst137*r10);
IkReal x3870=(gconst137*r20);
IkReal x3871=((1.0)*sj1);
IkReal x3872=(gconst137*r00);
IkReal x3873=(gconst138*r01);
IkReal x3874=(gconst138*r11);
IkReal x3875=((1.0)*x3865);
evalcond[0]=((((-1.0)*x3870*x3875))+(((-1.0)*x3868*x3875))+((r22*x3866)));
evalcond[1]=(cj0+(((-1.0)*x3874*x3875))+(((-1.0)*x3869*x3875))+((r12*x3866)));
evalcond[2]=((((-1.0)*x3873*x3875))+(((-1.0)*sj0))+((r02*x3866))+(((-1.0)*x3872*x3875)));
evalcond[3]=(((x3866*x3868))+((x3866*x3870))+(((-1.0)*cj1*sj2))+((r22*x3865))+(((-1.0)*cj2*x3871)));
evalcond[4]=(((r02*x3865))+((x3866*x3873))+((x3866*x3872))+(((-1.0)*cj0*sj2*x3871))+((cj0*x3867)));
evalcond[5]=(((x3866*x3869))+(((-1.0)*sj0*sj2*x3871))+((x3866*x3874))+((sj0*x3867))+((r12*x3865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3878 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3878)==0){
continue;
}
IkReal x3876=pow(x3878,-0.5);
IkReal x3877=((-1.0)*x3876);
CheckValue<IkReal> x3879 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3879.valid){
continue;
}
IkReal gconst139=((3.14159265358979)+(((-1.0)*(x3879.value))));
IkReal gconst140=(r10*x3877);
IkReal gconst141=(r11*x3877);
CheckValue<IkReal> x3880 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3880.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3880.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3884 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3884.valid){
continue;
}
IkReal x3881=((1.0)*(x3884.value));
IkReal x3882=x3876;
IkReal x3883=((-1.0)*x3882);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x3881)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x3881)));
IkReal gconst140=(r10*x3883);
IkReal gconst141=(r11*x3883);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3888 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3888.valid){
continue;
}
IkReal x3885=((1.0)*(x3888.value));
IkReal x3886=x3876;
IkReal x3887=((-1.0)*x3886);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x3885)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x3885)));
IkReal gconst140=(r10*x3887);
IkReal gconst141=(r11*x3887);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3892 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3892.valid){
continue;
}
IkReal x3889=((1.0)*(x3892.value));
IkReal x3890=x3876;
IkReal x3891=((-1.0)*x3890);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x3889)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x3889)));
IkReal gconst140=(r10*x3891);
IkReal gconst141=(r11*x3891);
IkReal x3893=r12*r12;
IkReal x3894=((1.0)*sj0);
IkReal x3895=(cj0*r02);
IkReal x3896=x3876;
j4eval[0]=((IKabs((((sj0*x3893*x3896))+(((-1.0)*x3894*x3896))+((r12*x3895*x3896)))))+(IKabs(((((-1.0)*x3895))+(((-1.0)*r12*x3894))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3897=((1.0)*gconst140);
IkReal x3898=((1.0)*sj0);
IkReal x3899=((1.0)*cj0);
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x3897))+(((-1.0)*gconst141*r01*x3899))+(((-1.0)*gconst141*r11*x3898))+(((-1.0)*cj0*r00*x3897)))),IkReal(((((-1.0)*r12*x3898))+(((-1.0)*r02*x3899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3897))+((gconst141*r20)))),-1);
if(!x3901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3900.value)+(((1.5707963267949)*(x3901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3902=IKcos(j4);
IkReal x3903=IKsin(j4);
IkReal x3904=(cj1*cj2);
IkReal x3905=(gconst140*r10);
IkReal x3906=(gconst141*r01);
IkReal x3907=((1.0)*sj1);
IkReal x3908=(gconst140*r00);
IkReal x3909=(gconst141*r21);
IkReal x3910=(gconst140*r20);
IkReal x3911=(gconst141*r11);
IkReal x3912=((1.0)*x3902);
evalcond[0]=(((r22*x3903))+(((-1.0)*x3909*x3912))+(((-1.0)*x3910*x3912)));
evalcond[1]=((((-1.0)*x3905*x3912))+(((-1.0)*x3911*x3912))+cj0+((r12*x3903)));
evalcond[2]=((((-1.0)*x3906*x3912))+(((-1.0)*sj0))+(((-1.0)*x3908*x3912))+((r02*x3903)));
evalcond[3]=(((x3903*x3909))+((r22*x3902))+((x3903*x3910))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3907)));
evalcond[4]=(((x3903*x3908))+((x3903*x3906))+((cj0*x3904))+(((-1.0)*cj0*sj2*x3907))+((r02*x3902)));
evalcond[5]=(((sj0*x3904))+((x3903*x3905))+((x3903*x3911))+((r12*x3902))+(((-1.0)*sj0*sj2*x3907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3913=((1.0)*gconst141);
CheckValue<IkReal> x3914=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+(((-1.0)*r10*x3913)))),-1);
if(!x3914.valid){
continue;
}
CheckValue<IkReal> x3915 = IKatan2WithCheck(IkReal(((((-1.0)*gconst140*r20*sj0))+(((-1.0)*r21*sj0*x3913)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3914.value)))+(x3915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3916=IKcos(j4);
IkReal x3917=IKsin(j4);
IkReal x3918=(cj1*cj2);
IkReal x3919=(gconst140*r10);
IkReal x3920=(gconst141*r01);
IkReal x3921=((1.0)*sj1);
IkReal x3922=(gconst140*r00);
IkReal x3923=(gconst141*r21);
IkReal x3924=(gconst140*r20);
IkReal x3925=(gconst141*r11);
IkReal x3926=((1.0)*x3916);
evalcond[0]=((((-1.0)*x3924*x3926))+(((-1.0)*x3923*x3926))+((r22*x3917)));
evalcond[1]=((((-1.0)*x3925*x3926))+cj0+(((-1.0)*x3919*x3926))+((r12*x3917)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3922*x3926))+(((-1.0)*x3920*x3926))+((r02*x3917)));
evalcond[3]=(((x3917*x3924))+((x3917*x3923))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3921))+((r22*x3916)));
evalcond[4]=(((x3917*x3922))+((x3917*x3920))+(((-1.0)*cj0*sj2*x3921))+((cj0*x3918))+((r02*x3916)));
evalcond[5]=(((x3917*x3925))+((sj0*x3918))+(((-1.0)*sj0*sj2*x3921))+((r12*x3916))+((x3917*x3919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3927=((1.0)*cj0);
CheckValue<IkReal> x3928=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+(((-1.0)*gconst141*r00)))),-1);
if(!x3928.valid){
continue;
}
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal(((((-1.0)*gconst140*r20*x3927))+(((-1.0)*gconst141*r21*x3927)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3928.value)))+(x3929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3930=IKcos(j4);
IkReal x3931=IKsin(j4);
IkReal x3932=(cj1*cj2);
IkReal x3933=(gconst140*r10);
IkReal x3934=(gconst141*r01);
IkReal x3935=((1.0)*sj1);
IkReal x3936=(gconst140*r00);
IkReal x3937=(gconst141*r21);
IkReal x3938=(gconst140*r20);
IkReal x3939=(gconst141*r11);
IkReal x3940=((1.0)*x3930);
evalcond[0]=(((r22*x3931))+(((-1.0)*x3937*x3940))+(((-1.0)*x3938*x3940)));
evalcond[1]=(cj0+(((-1.0)*x3933*x3940))+(((-1.0)*x3939*x3940))+((r12*x3931)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3934*x3940))+((r02*x3931))+(((-1.0)*x3936*x3940)));
evalcond[3]=(((r22*x3930))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3935))+((x3931*x3937))+((x3931*x3938)));
evalcond[4]=(((cj0*x3932))+(((-1.0)*cj0*sj2*x3935))+((x3931*x3936))+((x3931*x3934))+((r02*x3930)));
evalcond[5]=(((sj0*x3932))+(((-1.0)*sj0*sj2*x3935))+((r12*x3930))+((x3931*x3939))+((x3931*x3933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3941=((1.0)*cj5);
IkReal x3942=(((r01*sj5))+(((-1.0)*r00*x3941)));
j4eval[0]=x3942;
j4eval[1]=IKsign(x3942);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x3941))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3943=((1.0)*sj5);
IkReal x3944=(((cj5*r20))+(((-1.0)*r21*x3943)));
j4eval[0]=x3944;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x3943))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x3944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3945=(cj5*r11);
IkReal x3946=(r10*sj5);
IkReal x3947=(sj1*sj2);
IkReal x3948=((1.0)*cj1*cj2);
IkReal x3949=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x3949;
j4eval[1]=((IKabs(((((-1.0)*r12*x3947))+((cj1*cj2*r12)))))+(IKabs(((((-1.0)*x3946*x3948))+(((-1.0)*x3945*x3948))+((x3946*x3947))+((x3945*x3947))))));
j4eval[2]=IKsign(x3949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3950=(sj1*sj2);
IkReal x3951=(cj5*r11);
IkReal x3952=(r10*sj5);
IkReal x3953=((1.0)*cj1*cj2);
CheckValue<IkReal> x3954 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3950))+((cj1*cj2*r12)))),IkReal((((x3950*x3951))+((x3950*x3952))+(((-1.0)*x3952*x3953))+(((-1.0)*x3951*x3953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3954.valid){
continue;
}
CheckValue<IkReal> x3955=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x3955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3954.value)+(((1.5707963267949)*(x3955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3956=IKsin(j4);
IkReal x3957=IKcos(j4);
IkReal x3958=(r20*sj5);
IkReal x3959=((1.0)*sj2);
IkReal x3960=(r00*sj5);
IkReal x3961=(cj5*r21);
IkReal x3962=(cj5*r11);
IkReal x3963=(cj5*r01);
IkReal x3964=(r10*sj5);
IkReal x3965=((1.0)*x3957);
evalcond[0]=(((x3956*x3962))+((x3956*x3964))+((r12*x3957)));
evalcond[1]=((((-1.0)*x3958*x3965))+(((-1.0)*x3961*x3965))+((r22*x3956)));
evalcond[2]=((((-1.0)*x3963*x3965))+(((-1.0)*x3960*x3965))+((r02*x3956)));
evalcond[3]=((1.0)+(((-1.0)*x3962*x3965))+(((-1.0)*x3964*x3965))+((r12*x3956)));
evalcond[4]=((((-1.0)*sj1*x3959))+((x3956*x3963))+((x3956*x3960))+((cj1*cj2))+((r02*x3957)));
evalcond[5]=(((x3956*x3958))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3959))+((x3956*x3961))+((r22*x3957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3966=((1.0)*sj5);
CheckValue<IkReal> x3967 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3966))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3967.valid){
continue;
}
CheckValue<IkReal> x3968=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x3966)))),-1);
if(!x3968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3967.value)+(((1.5707963267949)*(x3968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3969=IKsin(j4);
IkReal x3970=IKcos(j4);
IkReal x3971=(r20*sj5);
IkReal x3972=((1.0)*sj2);
IkReal x3973=(r00*sj5);
IkReal x3974=(cj5*r21);
IkReal x3975=(cj5*r11);
IkReal x3976=(cj5*r01);
IkReal x3977=(r10*sj5);
IkReal x3978=((1.0)*x3970);
evalcond[0]=(((r12*x3970))+((x3969*x3975))+((x3969*x3977)));
evalcond[1]=(((r22*x3969))+(((-1.0)*x3971*x3978))+(((-1.0)*x3974*x3978)));
evalcond[2]=((((-1.0)*x3976*x3978))+((r02*x3969))+(((-1.0)*x3973*x3978)));
evalcond[3]=((1.0)+(((-1.0)*x3977*x3978))+((r12*x3969))+(((-1.0)*x3975*x3978)));
evalcond[4]=(((r02*x3970))+(((-1.0)*sj1*x3972))+((x3969*x3973))+((x3969*x3976))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x3972))+(((-1.0)*cj2*sj1))+((r22*x3970))+((x3969*x3974))+((x3969*x3971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3979=((1.0)*cj5);
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x3979)))),-1);
if(!x3980.valid){
continue;
}
CheckValue<IkReal> x3981 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3979))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3980.value)))+(x3981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3982=IKsin(j4);
IkReal x3983=IKcos(j4);
IkReal x3984=(r20*sj5);
IkReal x3985=((1.0)*sj2);
IkReal x3986=(r00*sj5);
IkReal x3987=(cj5*r21);
IkReal x3988=(cj5*r11);
IkReal x3989=(cj5*r01);
IkReal x3990=(r10*sj5);
IkReal x3991=((1.0)*x3983);
evalcond[0]=(((x3982*x3988))+((r12*x3983))+((x3982*x3990)));
evalcond[1]=((((-1.0)*x3984*x3991))+(((-1.0)*x3987*x3991))+((r22*x3982)));
evalcond[2]=((((-1.0)*x3989*x3991))+(((-1.0)*x3986*x3991))+((r02*x3982)));
evalcond[3]=((1.0)+(((-1.0)*x3988*x3991))+(((-1.0)*x3990*x3991))+((r12*x3982)));
evalcond[4]=((((-1.0)*sj1*x3985))+((x3982*x3986))+((x3982*x3989))+((cj1*cj2))+((r02*x3983)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x3982*x3987))+((x3982*x3984))+(((-1.0)*cj1*x3985))+((r22*x3983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3992=((1.0)*sj5);
IkReal x3993=((((-1.0)*r01*x3992))+((cj5*r00)));
j4eval[0]=x3993;
j4eval[1]=IKsign(x3993);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x3992))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3994=((1.0)*cj5);
IkReal x3995=(((r21*sj5))+(((-1.0)*r20*x3994)));
j4eval[0]=x3995;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3994))))));
j4eval[2]=IKsign(x3995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3996=cj5*cj5;
IkReal x3997=r10*r10;
IkReal x3998=(cj5*r11);
IkReal x3999=(r10*sj5);
IkReal x4000=((((2.0)*x3998*x3999))+(r12*r12)+((x3996*(r11*r11)))+(((-1.0)*x3996*x3997))+x3997);
j4eval[0]=x4000;
j4eval[1]=IKsign(x4000);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3999))+(((-1.0)*x3998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4001=cj5*cj5;
IkReal x4002=r10*r10;
IkReal x4003=(cj5*r11);
IkReal x4004=(r10*sj5);
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4001*(r11*r11)))+x4002+(((2.0)*x4003*x4004))+(((-1.0)*x4001*x4002)))),-1);
if(!x4005.valid){
continue;
}
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4003))+(((-1.0)*x4004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4005.value)))+(x4006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4007=IKsin(j4);
IkReal x4008=IKcos(j4);
IkReal x4009=(r20*sj5);
IkReal x4010=((1.0)*cj2);
IkReal x4011=(r00*sj5);
IkReal x4012=(cj5*r21);
IkReal x4013=(cj5*r01);
IkReal x4014=(r10*sj5);
IkReal x4015=(cj5*r11);
IkReal x4016=((1.0)*x4008);
evalcond[0]=(((r12*x4008))+((x4007*x4015))+((x4007*x4014)));
evalcond[1]=((((-1.0)*x4012*x4016))+((r22*x4007))+(((-1.0)*x4009*x4016)));
evalcond[2]=((((-1.0)*x4013*x4016))+(((-1.0)*x4011*x4016))+((r02*x4007)));
evalcond[3]=((-1.0)+((r12*x4007))+(((-1.0)*x4014*x4016))+(((-1.0)*x4015*x4016)));
evalcond[4]=((((-1.0)*cj1*x4010))+((sj1*sj2))+((r02*x4008))+((x4007*x4013))+((x4007*x4011)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x4008))+(((-1.0)*sj1*x4010))+((x4007*x4012))+((x4007*x4009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4017=((1.0)*cj5);
CheckValue<IkReal> x4018 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4017)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4018.valid){
continue;
}
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x4017)))),-1);
if(!x4019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4018.value)+(((1.5707963267949)*(x4019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4020=IKsin(j4);
IkReal x4021=IKcos(j4);
IkReal x4022=(r20*sj5);
IkReal x4023=((1.0)*cj2);
IkReal x4024=(r00*sj5);
IkReal x4025=(cj5*r21);
IkReal x4026=(cj5*r01);
IkReal x4027=(r10*sj5);
IkReal x4028=(cj5*r11);
IkReal x4029=((1.0)*x4021);
evalcond[0]=(((x4020*x4028))+((x4020*x4027))+((r12*x4021)));
evalcond[1]=((((-1.0)*x4025*x4029))+(((-1.0)*x4022*x4029))+((r22*x4020)));
evalcond[2]=((((-1.0)*x4024*x4029))+(((-1.0)*x4026*x4029))+((r02*x4020)));
evalcond[3]=((-1.0)+(((-1.0)*x4028*x4029))+(((-1.0)*x4027*x4029))+((r12*x4020)));
evalcond[4]=(((x4020*x4026))+((x4020*x4024))+((sj1*sj2))+(((-1.0)*cj1*x4023))+((r02*x4021)));
evalcond[5]=(((x4020*x4025))+((x4020*x4022))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4023))+((r22*x4021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4030=((1.0)*sj5);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4030))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4030))+((cj5*r00)))),-1);
if(!x4032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4031.value)+(((1.5707963267949)*(x4032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4033=IKsin(j4);
IkReal x4034=IKcos(j4);
IkReal x4035=(r20*sj5);
IkReal x4036=((1.0)*cj2);
IkReal x4037=(r00*sj5);
IkReal x4038=(cj5*r21);
IkReal x4039=(cj5*r01);
IkReal x4040=(r10*sj5);
IkReal x4041=(cj5*r11);
IkReal x4042=((1.0)*x4034);
evalcond[0]=(((x4033*x4040))+((x4033*x4041))+((r12*x4034)));
evalcond[1]=((((-1.0)*x4035*x4042))+(((-1.0)*x4038*x4042))+((r22*x4033)));
evalcond[2]=((((-1.0)*x4039*x4042))+((r02*x4033))+(((-1.0)*x4037*x4042)));
evalcond[3]=((-1.0)+(((-1.0)*x4041*x4042))+(((-1.0)*x4040*x4042))+((r12*x4033)));
evalcond[4]=(((r02*x4034))+(((-1.0)*cj1*x4036))+((sj1*sj2))+((x4033*x4037))+((x4033*x4039)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x4033*x4038))+((x4033*x4035))+((r22*x4034))+(((-1.0)*sj1*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4044 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4044)==0){
continue;
}
IkReal x4043=pow(x4044,-0.5);
CheckValue<IkReal> x4045 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4045.valid){
continue;
}
IkReal gconst142=((-1.0)*(x4045.value));
IkReal gconst143=(r00*x4043);
IkReal gconst144=(r01*x4043);
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4046.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4049 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4049.valid){
continue;
}
IkReal x4047=((-1.0)*(x4049.value));
IkReal x4048=x4043;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst143;
cj5=gconst144;
j5=x4047;
IkReal gconst142=x4047;
IkReal gconst143=(r00*x4048);
IkReal gconst144=(r01*x4048);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4050=((1.0)*sj0);
IkReal x4051=((1.0)*cj0);
CheckValue<IkReal> x4052 = IKatan2WithCheck(IkReal(((((-1.0)*gconst143*r00*x4051))+(((-1.0)*gconst144*r11*x4050))+(((-1.0)*gconst143*r10*x4050))+(((-1.0)*gconst144*r01*x4051)))),IkReal(((((-1.0)*r12*x4050))+(((-1.0)*r02*x4051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(IKsign((((gconst144*r20))+(((-1.0)*gconst143*r21)))),-1);
if(!x4053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4052.value)+(((1.5707963267949)*(x4053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4054=IKcos(j4);
IkReal x4055=IKsin(j4);
IkReal x4056=(cj1*cj2);
IkReal x4057=((1.0)*sj1);
IkReal x4058=(gconst143*x4055);
IkReal x4059=(gconst144*x4055);
IkReal x4060=((1.0)*gconst144*x4054);
IkReal x4061=((1.0)*gconst143*x4054);
evalcond[0]=((((-1.0)*r20*x4061))+(((-1.0)*r21*x4060))+((r22*x4055)));
evalcond[1]=(cj0+(((-1.0)*r11*x4060))+(((-1.0)*r10*x4061))+((r12*x4055)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4055))+(((-1.0)*r00*x4061))+(((-1.0)*r01*x4060)));
evalcond[3]=((((-1.0)*cj2*x4057))+((r21*x4059))+(((-1.0)*cj1*sj2))+((r20*x4058))+((r22*x4054)));
evalcond[4]=(((r02*x4054))+(((-1.0)*cj0*sj2*x4057))+((cj0*x4056))+((r00*x4058))+((r01*x4059)));
evalcond[5]=(((sj0*x4056))+(((-1.0)*sj0*sj2*x4057))+((r11*x4059))+((r12*x4054))+((r10*x4058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4062=((1.0)*sj0);
CheckValue<IkReal> x4063=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+(((-1.0)*gconst144*r10)))),-1);
if(!x4063.valid){
continue;
}
CheckValue<IkReal> x4064 = IKatan2WithCheck(IkReal(((((-1.0)*gconst143*r20*x4062))+(((-1.0)*gconst144*r21*x4062)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4063.value)))+(x4064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4065=IKcos(j4);
IkReal x4066=IKsin(j4);
IkReal x4067=(cj1*cj2);
IkReal x4068=((1.0)*sj1);
IkReal x4069=(gconst143*x4066);
IkReal x4070=(gconst144*x4066);
IkReal x4071=((1.0)*gconst144*x4065);
IkReal x4072=((1.0)*gconst143*x4065);
evalcond[0]=((((-1.0)*r20*x4072))+(((-1.0)*r21*x4071))+((r22*x4066)));
evalcond[1]=((((-1.0)*r10*x4072))+cj0+((r12*x4066))+(((-1.0)*r11*x4071)));
evalcond[2]=((((-1.0)*r00*x4072))+(((-1.0)*sj0))+(((-1.0)*r01*x4071))+((r02*x4066)));
evalcond[3]=((((-1.0)*cj2*x4068))+(((-1.0)*cj1*sj2))+((r20*x4069))+((r22*x4065))+((r21*x4070)));
evalcond[4]=(((r02*x4065))+(((-1.0)*cj0*sj2*x4068))+((r01*x4070))+((cj0*x4067))+((r00*x4069)));
evalcond[5]=(((sj0*x4067))+(((-1.0)*sj0*sj2*x4068))+((r12*x4065))+((r10*x4069))+((r11*x4070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4073=((-1.0)*r00);
IkReal x4075 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4075)==0){
continue;
}
IkReal x4074=pow(x4075,-0.5);
CheckValue<IkReal> x4076 = IKatan2WithCheck(IkReal(x4073),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4076.valid){
continue;
}
IkReal gconst145=((3.14159265358979)+(((-1.0)*(x4076.value))));
IkReal gconst146=(x4073*x4074);
IkReal gconst147=((-1.0)*r01*x4074);
CheckValue<IkReal> x4077 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4077.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4078=((-1.0)*r00);
CheckValue<IkReal> x4081 = IKatan2WithCheck(IkReal(x4078),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4081.valid){
continue;
}
IkReal x4079=((1.0)*(x4081.value));
IkReal x4080=x4074;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4079)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4079)));
IkReal gconst146=(x4078*x4080);
IkReal gconst147=((-1.0)*r01*x4080);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4082=((-1.0)*r00);
CheckValue<IkReal> x4085 = IKatan2WithCheck(IkReal(x4082),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4085.valid){
continue;
}
IkReal x4083=((1.0)*(x4085.value));
IkReal x4084=x4074;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4083)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4083)));
IkReal gconst146=(x4082*x4084);
IkReal gconst147=((-1.0)*r01*x4084);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4086=((-1.0)*r00);
CheckValue<IkReal> x4089 = IKatan2WithCheck(IkReal(x4086),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4089.valid){
continue;
}
IkReal x4087=((1.0)*(x4089.value));
IkReal x4088=x4074;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4087)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4087)));
IkReal gconst146=(x4086*x4088);
IkReal gconst147=((-1.0)*r01*x4088);
IkReal x4090=r02*r02;
IkReal x4091=(r12*sj0);
IkReal x4092=((1.0)*cj0);
IkReal x4093=x4074;
j4eval[0]=((IKabs(((((-1.0)*r02*x4092))+(((-1.0)*x4091)))))+(IKabs(((((-1.0)*x4092*x4093))+((cj0*x4090*x4093))+((r02*x4091*x4093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4094=((1.0)*sj0);
IkReal x4095=((1.0)*cj0);
CheckValue<IkReal> x4096=IKPowWithIntegerCheck(IKsign((((gconst147*r20))+(((-1.0)*gconst146*r21)))),-1);
if(!x4096.valid){
continue;
}
CheckValue<IkReal> x4097 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r10*x4094))+(((-1.0)*gconst146*r00*x4095))+(((-1.0)*gconst147*r11*x4094))+(((-1.0)*gconst147*r01*x4095)))),IkReal(((((-1.0)*r12*x4094))+(((-1.0)*r02*x4095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4096.value)))+(x4097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4098=IKcos(j4);
IkReal x4099=IKsin(j4);
IkReal x4100=(gconst147*r01);
IkReal x4101=(cj1*cj2);
IkReal x4102=(gconst146*r00);
IkReal x4103=(gconst146*r20);
IkReal x4104=((1.0)*sj1);
IkReal x4105=(gconst146*r10);
IkReal x4106=((1.0)*x4098);
IkReal x4107=(gconst147*x4099);
evalcond[0]=((((-1.0)*gconst147*r21*x4106))+((r22*x4099))+(((-1.0)*x4103*x4106)));
evalcond[1]=(cj0+(((-1.0)*x4105*x4106))+(((-1.0)*gconst147*r11*x4106))+((r12*x4099)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4099))+(((-1.0)*x4102*x4106))+(((-1.0)*x4100*x4106)));
evalcond[3]=(((x4099*x4103))+(((-1.0)*cj2*x4104))+(((-1.0)*cj1*sj2))+((r22*x4098))+((r21*x4107)));
evalcond[4]=(((x4099*x4102))+((x4099*x4100))+((cj0*x4101))+((r02*x4098))+(((-1.0)*cj0*sj2*x4104)));
evalcond[5]=(((x4099*x4105))+((r12*x4098))+((sj0*x4101))+((r11*x4107))+(((-1.0)*sj0*sj2*x4104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4108=((1.0)*sj0);
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(IKsign((((gconst146*r11))+(((-1.0)*gconst147*r10)))),-1);
if(!x4109.valid){
continue;
}
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(((((-1.0)*gconst147*r21*x4108))+(((-1.0)*gconst146*r20*x4108)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4109.value)))+(x4110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4111=IKcos(j4);
IkReal x4112=IKsin(j4);
IkReal x4113=(gconst147*r01);
IkReal x4114=(cj1*cj2);
IkReal x4115=(gconst146*r00);
IkReal x4116=(gconst146*r20);
IkReal x4117=((1.0)*sj1);
IkReal x4118=(gconst146*r10);
IkReal x4119=((1.0)*x4111);
IkReal x4120=(gconst147*x4112);
evalcond[0]=((((-1.0)*x4116*x4119))+((r22*x4112))+(((-1.0)*gconst147*r21*x4119)));
evalcond[1]=(((r12*x4112))+cj0+(((-1.0)*gconst147*r11*x4119))+(((-1.0)*x4118*x4119)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4112))+(((-1.0)*x4113*x4119))+(((-1.0)*x4115*x4119)));
evalcond[3]=(((x4112*x4116))+((r21*x4120))+(((-1.0)*cj2*x4117))+(((-1.0)*cj1*sj2))+((r22*x4111)));
evalcond[4]=(((x4112*x4113))+((x4112*x4115))+((cj0*x4114))+((r02*x4111))+(((-1.0)*cj0*sj2*x4117)));
evalcond[5]=(((x4112*x4118))+((sj0*x4114))+((r12*x4111))+(((-1.0)*sj0*sj2*x4117))+((r11*x4120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4121=((1.0)*cj0);
CheckValue<IkReal> x4122=IKPowWithIntegerCheck(IKsign((((gconst146*r01))+(((-1.0)*gconst147*r00)))),-1);
if(!x4122.valid){
continue;
}
CheckValue<IkReal> x4123 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*x4121))+(((-1.0)*gconst147*r21*x4121)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4122.value)))+(x4123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4124=IKcos(j4);
IkReal x4125=IKsin(j4);
IkReal x4126=(gconst147*r01);
IkReal x4127=(cj1*cj2);
IkReal x4128=(gconst146*r00);
IkReal x4129=(gconst146*r20);
IkReal x4130=((1.0)*sj1);
IkReal x4131=(gconst146*r10);
IkReal x4132=((1.0)*x4124);
IkReal x4133=(gconst147*x4125);
evalcond[0]=((((-1.0)*x4129*x4132))+(((-1.0)*gconst147*r21*x4132))+((r22*x4125)));
evalcond[1]=(((r12*x4125))+(((-1.0)*x4131*x4132))+cj0+(((-1.0)*gconst147*r11*x4132)));
evalcond[2]=((((-1.0)*x4126*x4132))+(((-1.0)*sj0))+((r02*x4125))+(((-1.0)*x4128*x4132)));
evalcond[3]=(((x4125*x4129))+(((-1.0)*cj1*sj2))+((r21*x4133))+((r22*x4124))+(((-1.0)*cj2*x4130)));
evalcond[4]=(((x4125*x4128))+((x4125*x4126))+((cj0*x4127))+((r02*x4124))+(((-1.0)*cj0*sj2*x4130)));
evalcond[5]=(((r12*x4124))+((sj0*x4127))+((r11*x4133))+(((-1.0)*sj0*sj2*x4130))+((x4125*x4131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4134=((1.0)*cj5);
IkReal x4135=(((r11*sj5))+(((-1.0)*r10*x4134)));
j4eval[0]=x4135;
j4eval[1]=((IKabs(((((-1.0)*r21*x4134))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4136=((1.0)*sj5);
IkReal x4137=(((cj5*r20))+(((-1.0)*r21*x4136)));
j4eval[0]=x4137;
j4eval[1]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4136)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4138=cj5*cj5;
IkReal x4139=r00*r00;
IkReal x4140=(r00*sj5);
IkReal x4141=(cj5*r01);
IkReal x4142=(((x4138*(r01*r01)))+(((2.0)*x4140*x4141))+(((-1.0)*x4138*x4139))+x4139+(r02*r02));
j4eval[0]=x4142;
j4eval[1]=IKsign(x4142);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4140))+(((-1.0)*x4141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4143=cj5*cj5;
IkReal x4144=r00*r00;
IkReal x4145=(cj5*r01);
IkReal x4146=(r00*sj5);
CheckValue<IkReal> x4147=IKPowWithIntegerCheck(IKsign((((x4143*(r01*r01)))+(((2.0)*x4145*x4146))+x4144+(((-1.0)*x4143*x4144))+(r02*r02))),-1);
if(!x4147.valid){
continue;
}
CheckValue<IkReal> x4148 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4146))+(((-1.0)*x4145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4147.value)))+(x4148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4149=IKsin(j4);
IkReal x4150=IKcos(j4);
IkReal x4151=(r20*sj5);
IkReal x4152=((1.0)*sj2);
IkReal x4153=(r00*sj5);
IkReal x4154=(cj5*r21);
IkReal x4155=(cj5*r11);
IkReal x4156=(cj5*r01);
IkReal x4157=(r10*sj5);
IkReal x4158=((1.0)*x4150);
evalcond[0]=(((r02*x4150))+((x4149*x4153))+((x4149*x4156)));
evalcond[1]=(((r22*x4149))+(((-1.0)*x4151*x4158))+(((-1.0)*x4154*x4158)));
evalcond[2]=((((-1.0)*x4155*x4158))+((r12*x4149))+(((-1.0)*x4157*x4158)));
evalcond[3]=((-1.0)+((r02*x4149))+(((-1.0)*x4153*x4158))+(((-1.0)*x4156*x4158)));
evalcond[4]=(((r12*x4150))+((x4149*x4157))+((x4149*x4155))+((cj1*cj2))+(((-1.0)*sj1*x4152)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4150))+(((-1.0)*cj1*x4152))+((x4149*x4151))+((x4149*x4154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4159=((1.0)*sj5);
CheckValue<IkReal> x4160 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4159)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4160.valid){
continue;
}
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4159))+((cj5*r20)))),-1);
if(!x4161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4160.value)+(((1.5707963267949)*(x4161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4162=IKsin(j4);
IkReal x4163=IKcos(j4);
IkReal x4164=(r20*sj5);
IkReal x4165=((1.0)*sj2);
IkReal x4166=(r00*sj5);
IkReal x4167=(cj5*r21);
IkReal x4168=(cj5*r11);
IkReal x4169=(cj5*r01);
IkReal x4170=(r10*sj5);
IkReal x4171=((1.0)*x4163);
evalcond[0]=(((r02*x4163))+((x4162*x4166))+((x4162*x4169)));
evalcond[1]=(((r22*x4162))+(((-1.0)*x4164*x4171))+(((-1.0)*x4167*x4171)));
evalcond[2]=((((-1.0)*x4170*x4171))+(((-1.0)*x4168*x4171))+((r12*x4162)));
evalcond[3]=((-1.0)+(((-1.0)*x4169*x4171))+(((-1.0)*x4166*x4171))+((r02*x4162)));
evalcond[4]=((((-1.0)*sj1*x4165))+((x4162*x4170))+((r12*x4163))+((cj1*cj2))+((x4162*x4168)));
evalcond[5]=(((r22*x4163))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4165))+((x4162*x4167))+((x4162*x4164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4172=((1.0)*cj5);
CheckValue<IkReal> x4173=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x4172)))),-1);
if(!x4173.valid){
continue;
}
CheckValue<IkReal> x4174 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4172))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4173.value)))+(x4174.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4175=IKsin(j4);
IkReal x4176=IKcos(j4);
IkReal x4177=(r20*sj5);
IkReal x4178=((1.0)*sj2);
IkReal x4179=(r00*sj5);
IkReal x4180=(cj5*r21);
IkReal x4181=(cj5*r11);
IkReal x4182=(cj5*r01);
IkReal x4183=(r10*sj5);
IkReal x4184=((1.0)*x4176);
evalcond[0]=(((x4175*x4179))+((x4175*x4182))+((r02*x4176)));
evalcond[1]=((((-1.0)*x4180*x4184))+((r22*x4175))+(((-1.0)*x4177*x4184)));
evalcond[2]=((((-1.0)*x4183*x4184))+(((-1.0)*x4181*x4184))+((r12*x4175)));
evalcond[3]=((-1.0)+(((-1.0)*x4179*x4184))+(((-1.0)*x4182*x4184))+((r02*x4175)));
evalcond[4]=(((r12*x4176))+((cj1*cj2))+((x4175*x4183))+((x4175*x4181))+(((-1.0)*sj1*x4178)));
evalcond[5]=(((x4175*x4177))+(((-1.0)*cj1*x4178))+((r22*x4176))+(((-1.0)*cj2*sj1))+((x4175*x4180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4185=((1.0)*sj5);
IkReal x4186=(((cj5*r10))+(((-1.0)*r11*x4185)));
j4eval[0]=x4186;
j4eval[1]=IKsign(x4186);
j4eval[2]=((IKabs(((((-1.0)*r20*x4185))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4187=((1.0)*cj5);
IkReal x4188=(((r21*sj5))+(((-1.0)*r20*x4187)));
j4eval[0]=x4188;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x4187))+(((-1.0)*r10*sj5))))));
j4eval[2]=IKsign(x4188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4189=(cj1*cj2);
IkReal x4190=(r00*sj5);
IkReal x4191=(cj5*r01);
IkReal x4192=(sj1*sj2);
IkReal x4193=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4193;
j4eval[1]=IKsign(x4193);
j4eval[2]=((IKabs((((r02*x4192))+(((-1.0)*r02*x4189)))))+(IKabs(((((-1.0)*x4190*x4192))+(((-1.0)*x4191*x4192))+((x4189*x4190))+((x4189*x4191))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4194=(cj5*r01);
IkReal x4195=(cj1*cj2);
IkReal x4196=(sj1*sj2);
IkReal x4197=(r00*sj5);
CheckValue<IkReal> x4198 = IKatan2WithCheck(IkReal((((r02*x4196))+(((-1.0)*r02*x4195)))),IkReal(((((-1.0)*x4196*x4197))+((x4194*x4195))+((x4195*x4197))+(((-1.0)*x4194*x4196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4198.valid){
continue;
}
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4198.value)+(((1.5707963267949)*(x4199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4200=IKsin(j4);
IkReal x4201=IKcos(j4);
IkReal x4202=(r20*sj5);
IkReal x4203=((1.0)*cj2);
IkReal x4204=(r00*sj5);
IkReal x4205=(cj5*r21);
IkReal x4206=(cj5*r01);
IkReal x4207=(r10*sj5);
IkReal x4208=(cj5*r11);
IkReal x4209=((1.0)*x4201);
evalcond[0]=(((r02*x4201))+((x4200*x4204))+((x4200*x4206)));
evalcond[1]=(((r22*x4200))+(((-1.0)*x4202*x4209))+(((-1.0)*x4205*x4209)));
evalcond[2]=((((-1.0)*x4208*x4209))+(((-1.0)*x4207*x4209))+((r12*x4200)));
evalcond[3]=((1.0)+((r02*x4200))+(((-1.0)*x4206*x4209))+(((-1.0)*x4204*x4209)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4203))+((x4200*x4207))+((x4200*x4208))+((r12*x4201)));
evalcond[5]=(((r22*x4201))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4203))+((x4200*x4205))+((x4200*x4202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4210=((1.0)*cj5);
CheckValue<IkReal> x4211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4210))+((r21*sj5)))),-1);
if(!x4211.valid){
continue;
}
CheckValue<IkReal> x4212 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4210))+(((-1.0)*r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4211.value)))+(x4212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4213=IKsin(j4);
IkReal x4214=IKcos(j4);
IkReal x4215=(r20*sj5);
IkReal x4216=((1.0)*cj2);
IkReal x4217=(r00*sj5);
IkReal x4218=(cj5*r21);
IkReal x4219=(cj5*r01);
IkReal x4220=(r10*sj5);
IkReal x4221=(cj5*r11);
IkReal x4222=((1.0)*x4214);
evalcond[0]=(((r02*x4214))+((x4213*x4217))+((x4213*x4219)));
evalcond[1]=(((r22*x4213))+(((-1.0)*x4218*x4222))+(((-1.0)*x4215*x4222)));
evalcond[2]=(((r12*x4213))+(((-1.0)*x4221*x4222))+(((-1.0)*x4220*x4222)));
evalcond[3]=((1.0)+((r02*x4213))+(((-1.0)*x4217*x4222))+(((-1.0)*x4219*x4222)));
evalcond[4]=(((r12*x4214))+((x4213*x4221))+((x4213*x4220))+((sj1*sj2))+(((-1.0)*cj1*x4216)));
evalcond[5]=((((-1.0)*sj1*x4216))+((r22*x4214))+(((-1.0)*cj1*sj2))+((x4213*x4215))+((x4213*x4218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4223=((1.0)*sj5);
CheckValue<IkReal> x4224=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x4223)))),-1);
if(!x4224.valid){
continue;
}
CheckValue<IkReal> x4225 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4223)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4224.value)))+(x4225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4226=IKsin(j4);
IkReal x4227=IKcos(j4);
IkReal x4228=(r20*sj5);
IkReal x4229=((1.0)*cj2);
IkReal x4230=(r00*sj5);
IkReal x4231=(cj5*r21);
IkReal x4232=(cj5*r01);
IkReal x4233=(r10*sj5);
IkReal x4234=(cj5*r11);
IkReal x4235=((1.0)*x4227);
evalcond[0]=(((r02*x4227))+((x4226*x4232))+((x4226*x4230)));
evalcond[1]=((((-1.0)*x4231*x4235))+((r22*x4226))+(((-1.0)*x4228*x4235)));
evalcond[2]=((((-1.0)*x4233*x4235))+(((-1.0)*x4234*x4235))+((r12*x4226)));
evalcond[3]=((1.0)+(((-1.0)*x4232*x4235))+((r02*x4226))+(((-1.0)*x4230*x4235)));
evalcond[4]=(((sj1*sj2))+((x4226*x4234))+((x4226*x4233))+(((-1.0)*cj1*x4229))+((r12*x4227)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x4227))+((x4226*x4231))+((x4226*x4228))+(((-1.0)*sj1*x4229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4236=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4236);
rxp1_1=(px*r21);
rxp1_2=(r11*x4236);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4237=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4237);
rxp1_1=(px*r21);
rxp1_2=(r11*x4237);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4238=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4238);
rxp1_1=(px*r21);
rxp1_2=(r11*x4238);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4241=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x4241.valid){
continue;
}
IkReal x4239=x4241.value;
IkReal x4240=(sj0*x4239);
sj4array[0]=(((sj1*sj2*x4240))+(((-1.0)*cj1*cj2*x4240)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4242=IKcos(j4);
IkReal x4243=IKsin(j4);
IkReal x4244=(r20*sj5);
IkReal x4245=((1.0)*x4242);
IkReal x4246=(cj5*x4245);
evalcond[0]=(r02*x4242);
evalcond[1]=((((-1.0)*sj0))+((r02*x4243)));
evalcond[2]=((((-1.0)*x4244*x4245))+(((-1.0)*r21*x4246)));
evalcond[3]=((((-1.0)*r10*sj5*x4245))+(((-1.0)*r11*x4246)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x4243*x4244))+((cj5*r21*x4243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4248=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x4248.valid){
continue;
}
IkReal x4247=x4248.value;
sj4array[0]=(((cj2*sj1*x4247))+((cj1*sj2*x4247)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4249=IKcos(j4);
IkReal x4250=IKsin(j4);
IkReal x4251=(r10*sj5);
IkReal x4252=((1.0)*sj0);
IkReal x4253=((1.0)*x4249);
IkReal x4254=(cj5*x4253);
evalcond[0]=(r02*x4249);
evalcond[1]=(((r02*x4250))+(((-1.0)*x4252)));
evalcond[2]=((((-1.0)*r20*sj5*x4253))+(((-1.0)*r21*x4254)));
evalcond[3]=((((-1.0)*x4251*x4253))+(((-1.0)*r11*x4254)));
evalcond[4]=((((-1.0)*sj1*sj2*x4252))+((cj1*cj2*sj0))+((x4250*x4251))+((cj5*r11*x4250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(r02,-1);
if(!x4255.valid){
continue;
}
sj4array[0]=(sj0*(x4255.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4256=IKcos(j4);
IkReal x4257=IKsin(j4);
IkReal x4258=((1.0)*sj1);
IkReal x4259=(sj5*x4257);
IkReal x4260=(cj5*x4257);
IkReal x4261=((1.0)*cj5*x4256);
IkReal x4262=((1.0)*sj5*x4256);
evalcond[0]=(r02*x4256);
evalcond[1]=((((-1.0)*r20*x4262))+(((-1.0)*r21*x4261)));
evalcond[2]=((((-1.0)*r11*x4261))+(((-1.0)*r10*x4262)));
evalcond[3]=(((r21*x4260))+((r20*x4259))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4258)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*x4260))+(((-1.0)*sj0*sj2*x4258))+((r10*x4259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4263=((1.0)*sj0);
IkReal x4264=((1.0)*cj0);
CheckValue<IkReal> x4265 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x4263))+(((-1.0)*cj5*r01*x4264))+(((-1.0)*r00*sj5*x4264))+(((-1.0)*r10*sj5*x4263)))),IkReal(((((-1.0)*r12*x4263))+(((-1.0)*r02*x4264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4265.valid){
continue;
}
CheckValue<IkReal> x4266=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4265.value)+(((1.5707963267949)*(x4266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4267=IKcos(j4);
IkReal x4268=IKsin(j4);
IkReal x4269=(r20*sj5);
IkReal x4270=(cj1*cj2);
IkReal x4271=(r00*sj5);
IkReal x4272=(cj5*r21);
IkReal x4273=((1.0)*sj1);
IkReal x4274=(cj5*r01);
IkReal x4275=(r10*sj5);
IkReal x4276=(cj5*r11);
IkReal x4277=((1.0)*x4267);
evalcond[0]=((((-1.0)*x4272*x4277))+(((-1.0)*x4269*x4277))+((r22*x4268)));
evalcond[1]=(cj0+(((-1.0)*x4275*x4277))+((r12*x4268))+(((-1.0)*x4276*x4277)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4268))+(((-1.0)*x4271*x4277))+(((-1.0)*x4274*x4277)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4273))+((x4268*x4272))+((x4268*x4269))+((r22*x4267)));
evalcond[4]=((((-1.0)*cj0*sj2*x4273))+((r02*x4267))+((x4268*x4274))+((x4268*x4271))+((cj0*x4270)));
evalcond[5]=(((r12*x4267))+((x4268*x4275))+((x4268*x4276))+(((-1.0)*sj0*sj2*x4273))+((sj0*x4270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4278=((1.0)*cj5);
CheckValue<IkReal> x4279 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4278))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4279.valid){
continue;
}
CheckValue<IkReal> x4280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4278))+((r11*sj5)))),-1);
if(!x4280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4279.value)+(((1.5707963267949)*(x4280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4281=IKcos(j4);
IkReal x4282=IKsin(j4);
IkReal x4283=(r20*sj5);
IkReal x4284=(cj1*cj2);
IkReal x4285=(r00*sj5);
IkReal x4286=(cj5*r21);
IkReal x4287=((1.0)*sj1);
IkReal x4288=(cj5*r01);
IkReal x4289=(r10*sj5);
IkReal x4290=(cj5*r11);
IkReal x4291=((1.0)*x4281);
evalcond[0]=(((r22*x4282))+(((-1.0)*x4286*x4291))+(((-1.0)*x4283*x4291)));
evalcond[1]=(((r12*x4282))+cj0+(((-1.0)*x4290*x4291))+(((-1.0)*x4289*x4291)));
evalcond[2]=((((-1.0)*x4288*x4291))+(((-1.0)*sj0))+((r02*x4282))+(((-1.0)*x4285*x4291)));
evalcond[3]=(((x4282*x4283))+((x4282*x4286))+((r22*x4281))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4287)));
evalcond[4]=(((x4282*x4288))+((x4282*x4285))+(((-1.0)*cj0*sj2*x4287))+((r02*x4281))+((cj0*x4284)));
evalcond[5]=(((x4282*x4289))+((r12*x4281))+(((-1.0)*sj0*sj2*x4287))+((x4282*x4290))+((sj0*x4284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4292=((1.0)*cj0);
CheckValue<IkReal> x4293=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x4293.valid){
continue;
}
CheckValue<IkReal> x4294 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x4292))+(((-1.0)*cj5*r21*x4292)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4293.value)))+(x4294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4295=IKcos(j4);
IkReal x4296=IKsin(j4);
IkReal x4297=(r20*sj5);
IkReal x4298=(cj1*cj2);
IkReal x4299=(r00*sj5);
IkReal x4300=(cj5*r21);
IkReal x4301=((1.0)*sj1);
IkReal x4302=(cj5*r01);
IkReal x4303=(r10*sj5);
IkReal x4304=(cj5*r11);
IkReal x4305=((1.0)*x4295);
evalcond[0]=((((-1.0)*x4297*x4305))+((r22*x4296))+(((-1.0)*x4300*x4305)));
evalcond[1]=(cj0+(((-1.0)*x4303*x4305))+((r12*x4296))+(((-1.0)*x4304*x4305)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4299*x4305))+(((-1.0)*x4302*x4305))+((r02*x4296)));
evalcond[3]=((((-1.0)*cj2*x4301))+(((-1.0)*cj1*sj2))+((x4296*x4297))+((r22*x4295))+((x4296*x4300)));
evalcond[4]=((((-1.0)*cj0*sj2*x4301))+((x4296*x4299))+((x4296*x4302))+((cj0*x4298))+((r02*x4295)));
evalcond[5]=(((sj0*x4298))+((r12*x4295))+(((-1.0)*sj0*sj2*x4301))+((x4296*x4304))+((x4296*x4303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4306=cj5*cj5;
IkReal x4307=r20*r20;
IkReal x4308=(cj5*r21);
IkReal x4309=(cj2*sj1);
IkReal x4310=(cj1*sj2);
IkReal x4311=(r20*sj5);
CheckValue<IkReal> x4312 = IKatan2WithCheck(IkReal((((x4310*x4311))+((x4308*x4309))+((x4308*x4310))+((x4309*x4311)))),IkReal((((r22*x4309))+((r22*x4310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4312.valid){
continue;
}
CheckValue<IkReal> x4313=IKPowWithIntegerCheck(IKsign(((((2.0)*x4308*x4311))+(r22*r22)+(((-1.0)*x4306*x4307))+((x4306*(r21*r21)))+x4307)),-1);
if(!x4313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4312.value)+(((1.5707963267949)*(x4313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4314=IKcos(j4);
IkReal x4315=IKsin(j4);
IkReal x4316=(cj5*r21);
IkReal x4317=(r20*sj5);
IkReal x4318=((1.0)*x4314);
evalcond[0]=((((-1.0)*x4317*x4318))+(((-1.0)*x4316*x4318))+((r22*x4315)));
evalcond[1]=((((-1.0)*cj2*sj1))+((x4315*x4316))+((x4315*x4317))+(((-1.0)*cj1*sj2))+((r22*x4314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4319=(cj4*cj5);
IkReal x4320=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x4320))+((r02*sj4))+(((-1.0)*r01*x4319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x4319))+(((-1.0)*r12*sj4))+((r10*x4320)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4320))+((r02*sj4))+(((-1.0)*r01*x4319))))+IKsqr((((r11*x4319))+(((-1.0)*r12*sj4))+((r10*x4320))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x4320))+((r02*sj4))+(((-1.0)*r01*x4319))), (((r11*x4319))+(((-1.0)*r12*sj4))+((r10*x4320))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4321=IKcos(j0);
IkReal x4322=IKsin(j0);
IkReal x4323=((1.0)*sj2);
IkReal x4324=((1.0)*cj2);
IkReal x4325=(cj5*r10);
IkReal x4326=(r11*sj5);
IkReal x4327=(sj4*sj5);
IkReal x4328=(cj5*sj4);
IkReal x4329=(cj5*r00);
IkReal x4330=((0.1535)*cj2);
IkReal x4331=((1.0)*cj4);
IkReal x4332=(r01*sj5);
IkReal x4333=(cj1*x4321);
IkReal x4334=(cj1*x4322);
IkReal x4335=(sj1*x4321);
IkReal x4336=(sj1*x4322);
IkReal x4337=(sj2*x4336);
evalcond[0]=((((-1.0)*r10*sj5*x4331))+((r12*sj4))+x4321+(((-1.0)*cj5*r11*x4331)));
evalcond[1]=((((-1.0)*r00*sj5*x4331))+(((-1.0)*x4322))+((r02*sj4))+(((-1.0)*cj5*r01*x4331)));
evalcond[2]=((((-1.0)*x4324*x4335))+(((-1.0)*x4332))+(((-1.0)*x4323*x4333))+x4329);
evalcond[3]=((((-1.0)*x4324*x4336))+(((-1.0)*x4326))+(((-1.0)*x4323*x4334))+x4325);
evalcond[4]=(((r00*x4327))+((cj2*x4333))+(((-1.0)*x4323*x4335))+((r01*x4328))+((cj4*r02)));
evalcond[5]=(((cj2*x4334))+(((-1.0)*x4323*x4336))+((r11*x4328))+((cj4*r12))+((r10*x4327)));
evalcond[6]=((((-0.1535)*sj2*x4335))+(((0.1445)*x4335))+(((-0.121)*x4332))+(((-1.0)*px))+(((-0.00175)*x4322))+(((0.121)*x4329))+(((0.0385)*x4333))+((x4330*x4333)));
evalcond[7]=((((-0.121)*x4326))+(((0.1445)*x4336))+(((-1.0)*py))+(((0.121)*x4325))+(((0.00175)*x4321))+(((0.0385)*x4334))+(((-0.1535)*x4337))+((x4330*x4334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4338=((1.0)*cj5);
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4338))+((r11*sj5)))),IkReal(((((-1.0)*r00*x4338))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x4340.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4339.value)+(((1.5707963267949)*(x4340.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4341=IKcos(j0);
IkReal x4342=IKsin(j0);
IkReal x4343=((0.1535)*sj1);
IkReal x4344=((1.0)*cj2);
IkReal x4345=(cj5*r10);
IkReal x4346=(r11*sj5);
IkReal x4347=(cj5*r00);
IkReal x4348=((0.1535)*cj2);
IkReal x4349=(r01*sj5);
IkReal x4350=(sj2*x4342);
IkReal x4351=(cj1*x4341);
IkReal x4352=(cj1*x4342);
IkReal x4353=(sj1*x4341);
IkReal x4354=(sj1*x4342);
evalcond[0]=((((-1.0)*x4344*x4353))+x4347+(((-1.0)*sj2*x4351))+(((-1.0)*x4349)));
evalcond[1]=((((-1.0)*x4344*x4354))+(((-1.0)*cj1*x4350))+x4345+(((-1.0)*x4346)));
evalcond[2]=(((x4348*x4351))+(((0.1445)*x4353))+(((-0.121)*x4349))+(((-1.0)*px))+(((0.0385)*x4351))+(((0.121)*x4347))+(((-0.00175)*x4342))+(((-1.0)*sj2*x4341*x4343)));
evalcond[3]=((((0.00175)*x4341))+((x4348*x4352))+(((-1.0)*x4343*x4350))+(((0.1445)*x4354))+(((-0.121)*x4346))+(((-1.0)*py))+(((0.0385)*x4352))+(((0.121)*x4345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4355=((1.0)*cj5);
IkReal x4356=(((r01*sj5))+(((-1.0)*r00*x4355)));
j4eval[0]=x4356;
j4eval[1]=IKsign(x4356);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x4355)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4357=((1.0)*cj5);
IkReal x4358=(((r11*sj5))+(((-1.0)*r10*x4357)));
j4eval[0]=x4358;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4357))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x4358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4359=((1.0)*sj0);
IkReal x4360=((1.0)*sj5);
IkReal x4361=((1.0)*cj0);
IkReal x4362=(((cj5*r20))+(((-1.0)*r21*x4360)));
j4eval[0]=x4362;
j4eval[1]=((IKabs(((((-1.0)*r12*x4359))+(((-1.0)*r02*x4361)))))+(IKabs(((((-1.0)*cj5*r01*x4361))+(((-1.0)*cj0*r00*x4360))+(((-1.0)*r10*sj5*x4359))+(((-1.0)*cj5*r11*x4359))))));
j4eval[2]=IKsign(x4362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4363=((-1.0)*r21);
IkReal x4365 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4365)==0){
continue;
}
IkReal x4364=pow(x4365,-0.5);
CheckValue<IkReal> x4366 = IKatan2WithCheck(IkReal(r20),IkReal(x4363),IKFAST_ATAN2_MAGTHRESH);
if(!x4366.valid){
continue;
}
IkReal gconst130=((-1.0)*(x4366.value));
IkReal gconst131=((-1.0)*r20*x4364);
IkReal gconst132=(x4363*x4364);
CheckValue<IkReal> x4367 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4367.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4367.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4368=((-1.0)*r21);
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal(r20),IkReal(x4368),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
IkReal x4369=((-1.0)*(x4371.value));
IkReal x4370=x4364;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst131;
cj5=gconst132;
j5=x4369;
IkReal gconst130=x4369;
IkReal gconst131=((-1.0)*r20*x4370);
IkReal gconst132=(x4368*x4370);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4372=((-1.0)*r21);
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal(r20),IkReal(x4372),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
IkReal x4373=((-1.0)*(x4375.value));
IkReal x4374=x4364;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst131;
cj5=gconst132;
j5=x4373;
IkReal gconst130=x4373;
IkReal gconst131=((-1.0)*r20*x4374);
IkReal gconst132=(x4372*x4374);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4376=((-1.0)*r21);
CheckValue<IkReal> x4379 = IKatan2WithCheck(IkReal(r20),IkReal(x4376),IKFAST_ATAN2_MAGTHRESH);
if(!x4379.valid){
continue;
}
IkReal x4377=((-1.0)*(x4379.value));
IkReal x4378=x4364;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst131;
cj5=gconst132;
j5=x4377;
IkReal gconst130=x4377;
IkReal gconst131=((-1.0)*r20*x4378);
IkReal gconst132=(x4376*x4378);
IkReal x4380=r22*r22;
CheckValue<IkReal> x4383=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4380))),-1);
if(!x4383.valid){
continue;
}
IkReal x4381=x4383.value;
IkReal x4382=(((x4381*(r20*r20*r20*r20)))+x4380+(((2.0)*x4381*(r20*r20)*(r21*r21)))+((x4381*(r21*r21*r21*r21))));
j4eval[0]=x4382;
j4eval[1]=IKsign(x4382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4384=(gconst132*r21);
IkReal x4385=(gconst131*r20);
IkReal x4386=(cj2*sj1);
IkReal x4387=(cj1*sj2);
CheckValue<IkReal> x4388=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((2.0)*x4384*x4385))+(x4384*x4384)+(x4385*x4385))),-1);
if(!x4388.valid){
continue;
}
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal((((x4384*x4386))+((x4384*x4387))+((x4385*x4387))+((x4385*x4386)))),IkReal((((r22*x4387))+((r22*x4386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4388.value)))+(x4389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4390=IKcos(j4);
IkReal x4391=IKsin(j4);
IkReal x4392=(cj1*cj2);
IkReal x4393=(gconst131*r10);
IkReal x4394=(gconst132*r21);
IkReal x4395=((1.0)*sj1);
IkReal x4396=(gconst131*r20);
IkReal x4397=(gconst132*r01);
IkReal x4398=(gconst131*r00);
IkReal x4399=(gconst132*r11);
IkReal x4400=((1.0)*x4390);
evalcond[0]=(((r22*x4391))+(((-1.0)*x4396*x4400))+(((-1.0)*x4394*x4400)));
evalcond[1]=(cj0+(((-1.0)*x4399*x4400))+(((-1.0)*x4393*x4400))+((r12*x4391)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4391))+(((-1.0)*x4398*x4400))+(((-1.0)*x4397*x4400)));
evalcond[3]=(((x4391*x4394))+((x4391*x4396))+((r22*x4390))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4395)));
evalcond[4]=((((-1.0)*cj0*sj2*x4395))+((cj0*x4392))+((x4391*x4398))+((x4391*x4397))+((r02*x4390)));
evalcond[5]=(((x4391*x4399))+((x4391*x4393))+(((-1.0)*sj0*sj2*x4395))+((sj0*x4392))+((r12*x4390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4401=((1.0)*sj0);
CheckValue<IkReal> x4402 = IKatan2WithCheck(IkReal(((((-1.0)*gconst132*r21*x4401))+(((-1.0)*gconst131*r20*x4401)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4402.valid){
continue;
}
CheckValue<IkReal> x4403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst132*r10))+((gconst131*r11)))),-1);
if(!x4403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4402.value)+(((1.5707963267949)*(x4403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4404=IKcos(j4);
IkReal x4405=IKsin(j4);
IkReal x4406=(cj1*cj2);
IkReal x4407=(gconst131*r10);
IkReal x4408=(gconst132*r21);
IkReal x4409=((1.0)*sj1);
IkReal x4410=(gconst131*r20);
IkReal x4411=(gconst132*r01);
IkReal x4412=(gconst131*r00);
IkReal x4413=(gconst132*r11);
IkReal x4414=((1.0)*x4404);
evalcond[0]=(((r22*x4405))+(((-1.0)*x4410*x4414))+(((-1.0)*x4408*x4414)));
evalcond[1]=(cj0+((r12*x4405))+(((-1.0)*x4407*x4414))+(((-1.0)*x4413*x4414)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4411*x4414))+(((-1.0)*x4412*x4414))+((r02*x4405)));
evalcond[3]=(((r22*x4404))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4409))+((x4405*x4410))+((x4405*x4408)));
evalcond[4]=((((-1.0)*cj0*sj2*x4409))+((x4405*x4412))+((x4405*x4411))+((cj0*x4406))+((r02*x4404)));
evalcond[5]=(((r12*x4404))+((x4405*x4413))+((x4405*x4407))+(((-1.0)*sj0*sj2*x4409))+((sj0*x4406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4415=((1.0)*cj0);
CheckValue<IkReal> x4416 = IKatan2WithCheck(IkReal(((((-1.0)*gconst132*r21*x4415))+(((-1.0)*gconst131*r20*x4415)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4416.valid){
continue;
}
CheckValue<IkReal> x4417=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst132*r00))+((gconst131*r01)))),-1);
if(!x4417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4416.value)+(((1.5707963267949)*(x4417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4418=IKcos(j4);
IkReal x4419=IKsin(j4);
IkReal x4420=(cj1*cj2);
IkReal x4421=(gconst131*r10);
IkReal x4422=(gconst132*r21);
IkReal x4423=((1.0)*sj1);
IkReal x4424=(gconst131*r20);
IkReal x4425=(gconst132*r01);
IkReal x4426=(gconst131*r00);
IkReal x4427=(gconst132*r11);
IkReal x4428=((1.0)*x4418);
evalcond[0]=((((-1.0)*x4422*x4428))+((r22*x4419))+(((-1.0)*x4424*x4428)));
evalcond[1]=(cj0+((r12*x4419))+(((-1.0)*x4427*x4428))+(((-1.0)*x4421*x4428)));
evalcond[2]=((((-1.0)*x4425*x4428))+(((-1.0)*sj0))+(((-1.0)*x4426*x4428))+((r02*x4419)));
evalcond[3]=(((r22*x4418))+((x4419*x4422))+((x4419*x4424))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4423)));
evalcond[4]=(((x4419*x4425))+((x4419*x4426))+((r02*x4418))+((cj0*x4420))+(((-1.0)*cj0*sj2*x4423)));
evalcond[5]=((((-1.0)*sj0*sj2*x4423))+((r12*x4418))+((x4419*x4421))+((x4419*x4427))+((sj0*x4420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4431 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4431)==0){
continue;
}
IkReal x4429=pow(x4431,-0.5);
IkReal x4430=((1.0)*x4429);
CheckValue<IkReal> x4432 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4432.valid){
continue;
}
IkReal gconst133=((3.14159265358979)+(((-1.0)*(x4432.value))));
IkReal gconst134=(r20*x4430);
IkReal gconst135=(r21*x4430);
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4433.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4437 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4437.valid){
continue;
}
IkReal x4434=((1.0)*(x4437.value));
IkReal x4435=x4429;
IkReal x4436=((1.0)*x4435);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x4434)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x4434)));
IkReal gconst134=(r20*x4436);
IkReal gconst135=(r21*x4436);
IkReal x4438=r22*r22;
IkReal x4439=((1.0)*x4438);
CheckValue<IkReal> x4443=IKPowWithIntegerCheck(((-1.0)+x4438),-1);
if(!x4443.valid){
continue;
}
IkReal x4440=x4443.value;
if((((1.0)+(((-1.0)*x4439)))) < -0.00001)
continue;
IkReal x4441=IKsqrt(((1.0)+(((-1.0)*x4439))));
IkReal x4442=(cj0*x4440*x4441);
j4eval[0]=((IKabs((x4442+(((-1.0)*x4439*x4442)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4447 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4447.valid){
continue;
}
IkReal x4444=((1.0)*(x4447.value));
IkReal x4445=x4429;
IkReal x4446=((1.0)*x4445);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x4444)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x4444)));
IkReal gconst134=(r20*x4446);
IkReal gconst135=(r21*x4446);
IkReal x4448=r22*r22;
IkReal x4449=((1.0)*x4448);
CheckValue<IkReal> x4453=IKPowWithIntegerCheck(((-1.0)+x4448),-1);
if(!x4453.valid){
continue;
}
IkReal x4450=x4453.value;
if((((1.0)+(((-1.0)*x4449)))) < -0.00001)
continue;
IkReal x4451=IKsqrt(((1.0)+(((-1.0)*x4449))));
IkReal x4452=(sj0*x4450*x4451);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4452+(((-1.0)*x4449*x4452))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4457 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4457.valid){
continue;
}
IkReal x4454=((1.0)*(x4457.value));
IkReal x4455=x4429;
IkReal x4456=((1.0)*x4455);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x4454)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x4454)));
IkReal gconst134=(r20*x4456);
IkReal gconst135=(r21*x4456);
IkReal x4458=r22*r22;
IkReal x4459=((1.0)*r12*sj0);
IkReal x4460=((1.0)*cj0*r02);
CheckValue<IkReal> x4464=IKPowWithIntegerCheck(((-1.0)+x4458),-1);
if(!x4464.valid){
continue;
}
IkReal x4461=x4464.value;
if((((1.0)+(((-1.0)*x4458)))) < -0.00001)
continue;
IkReal x4462=IKsqrt(((1.0)+(((-1.0)*x4458))));
IkReal x4463=(r22*x4461*x4462);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4459))+(((-1.0)*x4460)))))+(IKabs(((((-1.0)*x4459*x4463))+(((-1.0)*x4460*x4463))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4465=((1.0)*sj0);
IkReal x4466=((1.0)*cj0);
CheckValue<IkReal> x4467=IKPowWithIntegerCheck(IKsign((((gconst135*r20))+(((-1.0)*gconst134*r21)))),-1);
if(!x4467.valid){
continue;
}
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal(((((-1.0)*gconst135*r01*x4466))+(((-1.0)*gconst135*r11*x4465))+(((-1.0)*gconst134*r00*x4466))+(((-1.0)*gconst134*r10*x4465)))),IkReal(((((-1.0)*r02*x4466))+(((-1.0)*r12*x4465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4467.value)))+(x4468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4469=IKcos(j4);
IkReal x4470=IKsin(j4);
IkReal x4471=(gconst134*r10);
IkReal x4472=(cj1*cj2);
IkReal x4473=((1.0)*sj1);
IkReal x4474=(gconst134*r00);
IkReal x4475=(gconst134*r20);
IkReal x4476=(gconst135*x4470);
IkReal x4477=((1.0)*x4469);
IkReal x4478=(gconst135*x4477);
evalcond[0]=((((-1.0)*x4475*x4477))+(((-1.0)*r21*x4478))+((r22*x4470)));
evalcond[1]=((((-1.0)*r11*x4478))+cj0+(((-1.0)*x4471*x4477))+((r12*x4470)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4474*x4477))+((r02*x4470))+(((-1.0)*r01*x4478)));
evalcond[3]=(((r22*x4469))+((x4470*x4475))+(((-1.0)*cj2*x4473))+((r21*x4476))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj0*x4472))+((x4470*x4474))+(((-1.0)*cj0*sj2*x4473))+((r01*x4476))+((r02*x4469)));
evalcond[5]=(((sj0*x4472))+((x4470*x4471))+((r12*x4469))+(((-1.0)*sj0*sj2*x4473))+((r11*x4476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4479=((1.0)*sj0);
CheckValue<IkReal> x4480=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+(((-1.0)*gconst135*r10)))),-1);
if(!x4480.valid){
continue;
}
CheckValue<IkReal> x4481 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*x4479))+(((-1.0)*gconst135*r21*x4479)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4480.value)))+(x4481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4482=IKcos(j4);
IkReal x4483=IKsin(j4);
IkReal x4484=(gconst134*r10);
IkReal x4485=(cj1*cj2);
IkReal x4486=((1.0)*sj1);
IkReal x4487=(gconst134*r00);
IkReal x4488=(gconst134*r20);
IkReal x4489=(gconst135*x4483);
IkReal x4490=((1.0)*x4482);
IkReal x4491=(gconst135*x4490);
evalcond[0]=((((-1.0)*x4488*x4490))+(((-1.0)*r21*x4491))+((r22*x4483)));
evalcond[1]=((((-1.0)*r11*x4491))+(((-1.0)*x4484*x4490))+cj0+((r12*x4483)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4483))+(((-1.0)*r01*x4491))+(((-1.0)*x4487*x4490)));
evalcond[3]=((((-1.0)*cj2*x4486))+((r21*x4489))+(((-1.0)*cj1*sj2))+((x4483*x4488))+((r22*x4482)));
evalcond[4]=(((cj0*x4485))+(((-1.0)*cj0*sj2*x4486))+((r02*x4482))+((x4483*x4487))+((r01*x4489)));
evalcond[5]=(((r11*x4489))+((sj0*x4485))+(((-1.0)*sj0*sj2*x4486))+((x4483*x4484))+((r12*x4482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4492=((1.0)*gconst135);
CheckValue<IkReal> x4493 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x4492))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4493.valid){
continue;
}
CheckValue<IkReal> x4494=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+(((-1.0)*r00*x4492)))),-1);
if(!x4494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4493.value)+(((1.5707963267949)*(x4494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4495=IKcos(j4);
IkReal x4496=IKsin(j4);
IkReal x4497=(gconst134*r10);
IkReal x4498=(cj1*cj2);
IkReal x4499=((1.0)*sj1);
IkReal x4500=(gconst134*r00);
IkReal x4501=(gconst134*r20);
IkReal x4502=(gconst135*x4496);
IkReal x4503=((1.0)*x4495);
IkReal x4504=(gconst135*x4503);
evalcond[0]=(((r22*x4496))+(((-1.0)*x4501*x4503))+(((-1.0)*r21*x4504)));
evalcond[1]=(((r12*x4496))+cj0+(((-1.0)*x4497*x4503))+(((-1.0)*r11*x4504)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x4504))+((r02*x4496))+(((-1.0)*x4500*x4503)));
evalcond[3]=((((-1.0)*cj2*x4499))+((x4496*x4501))+((r21*x4502))+(((-1.0)*cj1*sj2))+((r22*x4495)));
evalcond[4]=(((x4496*x4500))+((cj0*x4498))+(((-1.0)*cj0*sj2*x4499))+((r02*x4495))+((r01*x4502)));
evalcond[5]=(((r12*x4495))+((sj0*x4498))+((r11*x4502))+(((-1.0)*sj0*sj2*x4499))+((x4496*x4497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4506 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4506)==0){
continue;
}
IkReal x4505=pow(x4506,-0.5);
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
IkReal gconst136=((-1.0)*(x4507.value));
IkReal gconst137=(r10*x4505);
IkReal gconst138=(r11*x4505);
CheckValue<IkReal> x4508 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4508.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4508.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4511 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4511.valid){
continue;
}
IkReal x4509=((-1.0)*(x4511.value));
IkReal x4510=x4505;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst137;
cj5=gconst138;
j5=x4509;
IkReal gconst136=x4509;
IkReal gconst137=(r10*x4510);
IkReal gconst138=(r11*x4510);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4512=((1.0)*sj0);
IkReal x4513=((1.0)*cj0);
CheckValue<IkReal> x4514=IKPowWithIntegerCheck(IKsign((((gconst138*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x4514.valid){
continue;
}
CheckValue<IkReal> x4515 = IKatan2WithCheck(IkReal(((((-1.0)*gconst137*r00*x4513))+(((-1.0)*gconst137*r10*x4512))+(((-1.0)*gconst138*r01*x4513))+(((-1.0)*gconst138*r11*x4512)))),IkReal(((((-1.0)*r02*x4513))+(((-1.0)*r12*x4512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4514.value)))+(x4515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4516=IKcos(j4);
IkReal x4517=IKsin(j4);
IkReal x4518=(cj1*cj2);
IkReal x4519=(gconst138*r21);
IkReal x4520=(gconst137*r10);
IkReal x4521=(gconst137*r20);
IkReal x4522=((1.0)*sj1);
IkReal x4523=(gconst137*r00);
IkReal x4524=(gconst138*r01);
IkReal x4525=(gconst138*r11);
IkReal x4526=((1.0)*x4516);
evalcond[0]=((((-1.0)*x4521*x4526))+(((-1.0)*x4519*x4526))+((r22*x4517)));
evalcond[1]=(cj0+(((-1.0)*x4520*x4526))+(((-1.0)*x4525*x4526))+((r12*x4517)));
evalcond[2]=(((r02*x4517))+(((-1.0)*sj0))+(((-1.0)*x4523*x4526))+(((-1.0)*x4524*x4526)));
evalcond[3]=((((-1.0)*cj2*x4522))+((x4517*x4519))+(((-1.0)*cj1*sj2))+((x4517*x4521))+((r22*x4516)));
evalcond[4]=(((r02*x4516))+((x4517*x4524))+((x4517*x4523))+(((-1.0)*cj0*sj2*x4522))+((cj0*x4518)));
evalcond[5]=((((-1.0)*sj0*sj2*x4522))+((x4517*x4525))+((x4517*x4520))+((sj0*x4518))+((r12*x4516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4527=((1.0)*gconst138);
CheckValue<IkReal> x4528 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+(((-1.0)*cj0*r21*x4527)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4528.valid){
continue;
}
CheckValue<IkReal> x4529=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4527))+((gconst137*r01)))),-1);
if(!x4529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4528.value)+(((1.5707963267949)*(x4529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4530=IKcos(j4);
IkReal x4531=IKsin(j4);
IkReal x4532=(cj1*cj2);
IkReal x4533=(gconst138*r21);
IkReal x4534=(gconst137*r10);
IkReal x4535=(gconst137*r20);
IkReal x4536=((1.0)*sj1);
IkReal x4537=(gconst137*r00);
IkReal x4538=(gconst138*r01);
IkReal x4539=(gconst138*r11);
IkReal x4540=((1.0)*x4530);
evalcond[0]=((((-1.0)*x4533*x4540))+(((-1.0)*x4535*x4540))+((r22*x4531)));
evalcond[1]=(cj0+((r12*x4531))+(((-1.0)*x4534*x4540))+(((-1.0)*x4539*x4540)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4537*x4540))+(((-1.0)*x4538*x4540))+((r02*x4531)));
evalcond[3]=((((-1.0)*cj2*x4536))+((x4531*x4533))+((x4531*x4535))+(((-1.0)*cj1*sj2))+((r22*x4530)));
evalcond[4]=(((x4531*x4537))+((x4531*x4538))+((cj0*x4532))+(((-1.0)*cj0*sj2*x4536))+((r02*x4530)));
evalcond[5]=((((-1.0)*sj0*sj2*x4536))+((r12*x4530))+((x4531*x4539))+((x4531*x4534))+((sj0*x4532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4543 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4543)==0){
continue;
}
IkReal x4541=pow(x4543,-0.5);
IkReal x4542=((-1.0)*x4541);
CheckValue<IkReal> x4544 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4544.valid){
continue;
}
IkReal gconst139=((3.14159265358979)+(((-1.0)*(x4544.value))));
IkReal gconst140=(r10*x4542);
IkReal gconst141=(r11*x4542);
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4545.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4549 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4549.valid){
continue;
}
IkReal x4546=((1.0)*(x4549.value));
IkReal x4547=x4541;
IkReal x4548=((-1.0)*x4547);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x4546)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x4546)));
IkReal gconst140=(r10*x4548);
IkReal gconst141=(r11*x4548);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4553 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4553.valid){
continue;
}
IkReal x4550=((1.0)*(x4553.value));
IkReal x4551=x4541;
IkReal x4552=((-1.0)*x4551);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x4550)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x4550)));
IkReal gconst140=(r10*x4552);
IkReal gconst141=(r11*x4552);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4557 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4557.valid){
continue;
}
IkReal x4554=((1.0)*(x4557.value));
IkReal x4555=x4541;
IkReal x4556=((-1.0)*x4555);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x4554)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x4554)));
IkReal gconst140=(r10*x4556);
IkReal gconst141=(r11*x4556);
IkReal x4558=r12*r12;
IkReal x4559=((1.0)*sj0);
IkReal x4560=(cj0*r02);
IkReal x4561=x4541;
j4eval[0]=((IKabs((((r12*x4560*x4561))+(((-1.0)*x4559*x4561))+((sj0*x4558*x4561)))))+(IKabs(((((-1.0)*r12*x4559))+(((-1.0)*x4560))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4562=((1.0)*gconst140);
IkReal x4563=((1.0)*sj0);
IkReal x4564=((1.0)*cj0);
CheckValue<IkReal> x4565 = IKatan2WithCheck(IkReal(((((-1.0)*gconst141*r11*x4563))+(((-1.0)*r10*sj0*x4562))+(((-1.0)*gconst141*r01*x4564))+(((-1.0)*cj0*r00*x4562)))),IkReal(((((-1.0)*r02*x4564))+(((-1.0)*r12*x4563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4565.valid){
continue;
}
CheckValue<IkReal> x4566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4562))+((gconst141*r20)))),-1);
if(!x4566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4565.value)+(((1.5707963267949)*(x4566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4567=IKcos(j4);
IkReal x4568=IKsin(j4);
IkReal x4569=(cj1*cj2);
IkReal x4570=(gconst140*r10);
IkReal x4571=(gconst141*r01);
IkReal x4572=((1.0)*sj1);
IkReal x4573=(gconst140*r00);
IkReal x4574=(gconst141*r21);
IkReal x4575=(gconst140*r20);
IkReal x4576=(gconst141*r11);
IkReal x4577=((1.0)*x4567);
evalcond[0]=(((r22*x4568))+(((-1.0)*x4575*x4577))+(((-1.0)*x4574*x4577)));
evalcond[1]=(cj0+(((-1.0)*x4576*x4577))+(((-1.0)*x4570*x4577))+((r12*x4568)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4571*x4577))+((r02*x4568))+(((-1.0)*x4573*x4577)));
evalcond[3]=(((r22*x4567))+(((-1.0)*cj2*x4572))+(((-1.0)*cj1*sj2))+((x4568*x4574))+((x4568*x4575)));
evalcond[4]=(((cj0*x4569))+((r02*x4567))+(((-1.0)*cj0*sj2*x4572))+((x4568*x4573))+((x4568*x4571)));
evalcond[5]=(((r12*x4567))+((sj0*x4569))+((x4568*x4576))+((x4568*x4570))+(((-1.0)*sj0*sj2*x4572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4578=((1.0)*gconst141);
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+(((-1.0)*r10*x4578)))),-1);
if(!x4579.valid){
continue;
}
CheckValue<IkReal> x4580 = IKatan2WithCheck(IkReal(((((-1.0)*gconst140*r20*sj0))+(((-1.0)*r21*sj0*x4578)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4579.value)))+(x4580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4581=IKcos(j4);
IkReal x4582=IKsin(j4);
IkReal x4583=(cj1*cj2);
IkReal x4584=(gconst140*r10);
IkReal x4585=(gconst141*r01);
IkReal x4586=((1.0)*sj1);
IkReal x4587=(gconst140*r00);
IkReal x4588=(gconst141*r21);
IkReal x4589=(gconst140*r20);
IkReal x4590=(gconst141*r11);
IkReal x4591=((1.0)*x4581);
evalcond[0]=(((r22*x4582))+(((-1.0)*x4589*x4591))+(((-1.0)*x4588*x4591)));
evalcond[1]=(cj0+((r12*x4582))+(((-1.0)*x4584*x4591))+(((-1.0)*x4590*x4591)));
evalcond[2]=((((-1.0)*x4585*x4591))+(((-1.0)*sj0))+((r02*x4582))+(((-1.0)*x4587*x4591)));
evalcond[3]=(((r22*x4581))+((x4582*x4588))+((x4582*x4589))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4586)));
evalcond[4]=((((-1.0)*cj0*sj2*x4586))+((r02*x4581))+((x4582*x4587))+((x4582*x4585))+((cj0*x4583)));
evalcond[5]=(((sj0*x4583))+((x4582*x4584))+((x4582*x4590))+((r12*x4581))+(((-1.0)*sj0*sj2*x4586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4592=((1.0)*cj0);
CheckValue<IkReal> x4593=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+(((-1.0)*gconst141*r00)))),-1);
if(!x4593.valid){
continue;
}
CheckValue<IkReal> x4594 = IKatan2WithCheck(IkReal(((((-1.0)*gconst141*r21*x4592))+(((-1.0)*gconst140*r20*x4592)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4593.value)))+(x4594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4595=IKcos(j4);
IkReal x4596=IKsin(j4);
IkReal x4597=(cj1*cj2);
IkReal x4598=(gconst140*r10);
IkReal x4599=(gconst141*r01);
IkReal x4600=((1.0)*sj1);
IkReal x4601=(gconst140*r00);
IkReal x4602=(gconst141*r21);
IkReal x4603=(gconst140*r20);
IkReal x4604=(gconst141*r11);
IkReal x4605=((1.0)*x4595);
evalcond[0]=(((r22*x4596))+(((-1.0)*x4603*x4605))+(((-1.0)*x4602*x4605)));
evalcond[1]=(cj0+(((-1.0)*x4598*x4605))+((r12*x4596))+(((-1.0)*x4604*x4605)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4596))+(((-1.0)*x4599*x4605))+(((-1.0)*x4601*x4605)));
evalcond[3]=(((r22*x4595))+(((-1.0)*cj1*sj2))+((x4596*x4603))+((x4596*x4602))+(((-1.0)*cj2*x4600)));
evalcond[4]=(((r02*x4595))+((x4596*x4601))+((cj0*x4597))+((x4596*x4599))+(((-1.0)*cj0*sj2*x4600)));
evalcond[5]=(((sj0*x4597))+(((-1.0)*sj0*sj2*x4600))+((x4596*x4604))+((x4596*x4598))+((r12*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4606=((1.0)*cj5);
IkReal x4607=(((r01*sj5))+(((-1.0)*r00*x4606)));
j4eval[0]=x4607;
j4eval[1]=IKsign(x4607);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x4606))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4608=((1.0)*sj5);
IkReal x4609=(((cj5*r20))+(((-1.0)*r21*x4608)));
j4eval[0]=x4609;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4608))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x4609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4610=(cj5*r11);
IkReal x4611=(r10*sj5);
IkReal x4612=(sj1*sj2);
IkReal x4613=((1.0)*cj1*cj2);
IkReal x4614=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x4614;
j4eval[1]=((IKabs((((cj1*cj2*r12))+(((-1.0)*r12*x4612)))))+(IKabs((((x4611*x4612))+(((-1.0)*x4611*x4613))+((x4610*x4612))+(((-1.0)*x4610*x4613))))));
j4eval[2]=IKsign(x4614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4615=(sj1*sj2);
IkReal x4616=(cj5*r11);
IkReal x4617=(r10*sj5);
IkReal x4618=((1.0)*cj1*cj2);
CheckValue<IkReal> x4619 = IKatan2WithCheck(IkReal((((cj1*cj2*r12))+(((-1.0)*r12*x4615)))),IkReal((((x4615*x4616))+((x4615*x4617))+(((-1.0)*x4617*x4618))+(((-1.0)*x4616*x4618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4619.value)+(((1.5707963267949)*(x4620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKsin(j4);
IkReal x4622=IKcos(j4);
IkReal x4623=(r20*sj5);
IkReal x4624=((1.0)*sj2);
IkReal x4625=(r00*sj5);
IkReal x4626=(cj5*r21);
IkReal x4627=(cj5*r11);
IkReal x4628=(cj5*r01);
IkReal x4629=(r10*sj5);
IkReal x4630=((1.0)*x4622);
evalcond[0]=(((r12*x4622))+((x4621*x4627))+((x4621*x4629)));
evalcond[1]=((((-1.0)*x4623*x4630))+((r22*x4621))+(((-1.0)*x4626*x4630)));
evalcond[2]=((((-1.0)*x4628*x4630))+((r02*x4621))+(((-1.0)*x4625*x4630)));
evalcond[3]=((1.0)+((r12*x4621))+(((-1.0)*x4627*x4630))+(((-1.0)*x4629*x4630)));
evalcond[4]=(((x4621*x4625))+((x4621*x4628))+(((-1.0)*sj1*x4624))+((r02*x4622))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x4624))+(((-1.0)*cj2*sj1))+((x4621*x4623))+((x4621*x4626))+((r22*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4631=((1.0)*sj5);
CheckValue<IkReal> x4632 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4631))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4632.valid){
continue;
}
CheckValue<IkReal> x4633=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x4631)))),-1);
if(!x4633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4632.value)+(((1.5707963267949)*(x4633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4634=IKsin(j4);
IkReal x4635=IKcos(j4);
IkReal x4636=(r20*sj5);
IkReal x4637=((1.0)*sj2);
IkReal x4638=(r00*sj5);
IkReal x4639=(cj5*r21);
IkReal x4640=(cj5*r11);
IkReal x4641=(cj5*r01);
IkReal x4642=(r10*sj5);
IkReal x4643=((1.0)*x4635);
evalcond[0]=(((r12*x4635))+((x4634*x4642))+((x4634*x4640)));
evalcond[1]=((((-1.0)*x4636*x4643))+((r22*x4634))+(((-1.0)*x4639*x4643)));
evalcond[2]=(((r02*x4634))+(((-1.0)*x4641*x4643))+(((-1.0)*x4638*x4643)));
evalcond[3]=((1.0)+((r12*x4634))+(((-1.0)*x4640*x4643))+(((-1.0)*x4642*x4643)));
evalcond[4]=(((x4634*x4641))+((x4634*x4638))+((r02*x4635))+(((-1.0)*sj1*x4637))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x4637))+(((-1.0)*cj2*sj1))+((x4634*x4639))+((x4634*x4636))+((r22*x4635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4644=((1.0)*cj5);
CheckValue<IkReal> x4645=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x4644)))),-1);
if(!x4645.valid){
continue;
}
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4644))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4645.value)))+(x4646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4647=IKsin(j4);
IkReal x4648=IKcos(j4);
IkReal x4649=(r20*sj5);
IkReal x4650=((1.0)*sj2);
IkReal x4651=(r00*sj5);
IkReal x4652=(cj5*r21);
IkReal x4653=(cj5*r11);
IkReal x4654=(cj5*r01);
IkReal x4655=(r10*sj5);
IkReal x4656=((1.0)*x4648);
evalcond[0]=(((x4647*x4653))+((x4647*x4655))+((r12*x4648)));
evalcond[1]=((((-1.0)*x4649*x4656))+((r22*x4647))+(((-1.0)*x4652*x4656)));
evalcond[2]=(((r02*x4647))+(((-1.0)*x4654*x4656))+(((-1.0)*x4651*x4656)));
evalcond[3]=((1.0)+(((-1.0)*x4655*x4656))+((r12*x4647))+(((-1.0)*x4653*x4656)));
evalcond[4]=(((r02*x4648))+((x4647*x4651))+((x4647*x4654))+(((-1.0)*sj1*x4650))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x4650))+((x4647*x4652))+(((-1.0)*cj2*sj1))+((r22*x4648))+((x4647*x4649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4657=((1.0)*sj5);
IkReal x4658=((((-1.0)*r01*x4657))+((cj5*r00)));
j4eval[0]=x4658;
j4eval[1]=IKsign(x4658);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4657))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4659=((1.0)*cj5);
IkReal x4660=(((r21*sj5))+(((-1.0)*r20*x4659)));
j4eval[0]=x4660;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4659))+(((-1.0)*r00*sj5))))));
j4eval[2]=IKsign(x4660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4661=cj5*cj5;
IkReal x4662=r10*r10;
IkReal x4663=(cj5*r11);
IkReal x4664=(r10*sj5);
IkReal x4665=((((2.0)*x4663*x4664))+(r12*r12)+((x4661*(r11*r11)))+x4662+(((-1.0)*x4661*x4662)));
j4eval[0]=x4665;
j4eval[1]=IKsign(x4665);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4663))+(((-1.0)*x4664))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4666=cj5*cj5;
IkReal x4667=r10*r10;
IkReal x4668=(cj5*r11);
IkReal x4669=(r10*sj5);
CheckValue<IkReal> x4670 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4668))+(((-1.0)*x4669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4670.valid){
continue;
}
CheckValue<IkReal> x4671=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x4668*x4669))+x4667+(((-1.0)*x4666*x4667))+((x4666*(r11*r11))))),-1);
if(!x4671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4670.value)+(((1.5707963267949)*(x4671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4672=IKsin(j4);
IkReal x4673=IKcos(j4);
IkReal x4674=(r20*sj5);
IkReal x4675=((1.0)*cj2);
IkReal x4676=(r00*sj5);
IkReal x4677=(cj5*r21);
IkReal x4678=(cj5*r01);
IkReal x4679=(r10*sj5);
IkReal x4680=(cj5*r11);
IkReal x4681=((1.0)*x4673);
evalcond[0]=(((x4672*x4680))+((x4672*x4679))+((r12*x4673)));
evalcond[1]=(((r22*x4672))+(((-1.0)*x4674*x4681))+(((-1.0)*x4677*x4681)));
evalcond[2]=(((r02*x4672))+(((-1.0)*x4676*x4681))+(((-1.0)*x4678*x4681)));
evalcond[3]=((-1.0)+(((-1.0)*x4679*x4681))+(((-1.0)*x4680*x4681))+((r12*x4672)));
evalcond[4]=((((-1.0)*cj1*x4675))+((r02*x4673))+((x4672*x4678))+((x4672*x4676))+((sj1*sj2)));
evalcond[5]=(((x4672*x4674))+((x4672*x4677))+(((-1.0)*cj1*sj2))+((r22*x4673))+(((-1.0)*sj1*x4675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4682=((1.0)*cj5);
CheckValue<IkReal> x4683=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x4682)))),-1);
if(!x4683.valid){
continue;
}
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4682)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4683.value)))+(x4684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4685=IKsin(j4);
IkReal x4686=IKcos(j4);
IkReal x4687=(r20*sj5);
IkReal x4688=((1.0)*cj2);
IkReal x4689=(r00*sj5);
IkReal x4690=(cj5*r21);
IkReal x4691=(cj5*r01);
IkReal x4692=(r10*sj5);
IkReal x4693=(cj5*r11);
IkReal x4694=((1.0)*x4686);
evalcond[0]=(((r12*x4686))+((x4685*x4693))+((x4685*x4692)));
evalcond[1]=((((-1.0)*x4687*x4694))+(((-1.0)*x4690*x4694))+((r22*x4685)));
evalcond[2]=(((r02*x4685))+(((-1.0)*x4689*x4694))+(((-1.0)*x4691*x4694)));
evalcond[3]=((-1.0)+(((-1.0)*x4692*x4694))+(((-1.0)*x4693*x4694))+((r12*x4685)));
evalcond[4]=(((r02*x4686))+(((-1.0)*cj1*x4688))+((sj1*sj2))+((x4685*x4691))+((x4685*x4689)));
evalcond[5]=((((-1.0)*sj1*x4688))+(((-1.0)*cj1*sj2))+((r22*x4686))+((x4685*x4690))+((x4685*x4687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4695=((1.0)*sj5);
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4695))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
CheckValue<IkReal> x4697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4695))+((cj5*r00)))),-1);
if(!x4697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4696.value)+(((1.5707963267949)*(x4697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4698=IKsin(j4);
IkReal x4699=IKcos(j4);
IkReal x4700=(r20*sj5);
IkReal x4701=((1.0)*cj2);
IkReal x4702=(r00*sj5);
IkReal x4703=(cj5*r21);
IkReal x4704=(cj5*r01);
IkReal x4705=(r10*sj5);
IkReal x4706=(cj5*r11);
IkReal x4707=((1.0)*x4699);
evalcond[0]=(((x4698*x4706))+((x4698*x4705))+((r12*x4699)));
evalcond[1]=((((-1.0)*x4700*x4707))+(((-1.0)*x4703*x4707))+((r22*x4698)));
evalcond[2]=(((r02*x4698))+(((-1.0)*x4702*x4707))+(((-1.0)*x4704*x4707)));
evalcond[3]=((-1.0)+((r12*x4698))+(((-1.0)*x4706*x4707))+(((-1.0)*x4705*x4707)));
evalcond[4]=(((r02*x4699))+((x4698*x4704))+((x4698*x4702))+((sj1*sj2))+(((-1.0)*cj1*x4701)));
evalcond[5]=(((x4698*x4703))+((x4698*x4700))+(((-1.0)*cj1*sj2))+((r22*x4699))+(((-1.0)*sj1*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4709 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4709)==0){
continue;
}
IkReal x4708=pow(x4709,-0.5);
CheckValue<IkReal> x4710 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4710.valid){
continue;
}
IkReal gconst142=((-1.0)*(x4710.value));
IkReal gconst143=(r00*x4708);
IkReal gconst144=(r01*x4708);
CheckValue<IkReal> x4711 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4711.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4711.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4714 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4714.valid){
continue;
}
IkReal x4712=((-1.0)*(x4714.value));
IkReal x4713=x4708;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst143;
cj5=gconst144;
j5=x4712;
IkReal gconst142=x4712;
IkReal gconst143=(r00*x4713);
IkReal gconst144=(r01*x4713);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4715=((1.0)*sj0);
IkReal x4716=((1.0)*cj0);
CheckValue<IkReal> x4717 = IKatan2WithCheck(IkReal(((((-1.0)*gconst144*r01*x4716))+(((-1.0)*gconst144*r11*x4715))+(((-1.0)*gconst143*r10*x4715))+(((-1.0)*gconst143*r00*x4716)))),IkReal(((((-1.0)*r02*x4716))+(((-1.0)*r12*x4715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4717.valid){
continue;
}
CheckValue<IkReal> x4718=IKPowWithIntegerCheck(IKsign((((gconst144*r20))+(((-1.0)*gconst143*r21)))),-1);
if(!x4718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4717.value)+(((1.5707963267949)*(x4718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4719=IKcos(j4);
IkReal x4720=IKsin(j4);
IkReal x4721=(cj1*cj2);
IkReal x4722=((1.0)*sj1);
IkReal x4723=(gconst143*x4720);
IkReal x4724=(gconst144*x4720);
IkReal x4725=((1.0)*gconst144*x4719);
IkReal x4726=((1.0)*gconst143*x4719);
evalcond[0]=((((-1.0)*r21*x4725))+(((-1.0)*r20*x4726))+((r22*x4720)));
evalcond[1]=((((-1.0)*r10*x4726))+cj0+(((-1.0)*r11*x4725))+((r12*x4720)));
evalcond[2]=((((-1.0)*r00*x4726))+(((-1.0)*sj0))+((r02*x4720))+(((-1.0)*r01*x4725)));
evalcond[3]=((((-1.0)*cj2*x4722))+((r22*x4719))+((r20*x4723))+((r21*x4724))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj0*x4721))+(((-1.0)*cj0*sj2*x4722))+((r01*x4724))+((r00*x4723))+((r02*x4719)));
evalcond[5]=(((r11*x4724))+(((-1.0)*sj0*sj2*x4722))+((sj0*x4721))+((r10*x4723))+((r12*x4719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4727=((1.0)*sj0);
CheckValue<IkReal> x4728=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+(((-1.0)*gconst144*r10)))),-1);
if(!x4728.valid){
continue;
}
CheckValue<IkReal> x4729 = IKatan2WithCheck(IkReal(((((-1.0)*gconst143*r20*x4727))+(((-1.0)*gconst144*r21*x4727)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4728.value)))+(x4729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4730=IKcos(j4);
IkReal x4731=IKsin(j4);
IkReal x4732=(cj1*cj2);
IkReal x4733=((1.0)*sj1);
IkReal x4734=(gconst143*x4731);
IkReal x4735=(gconst144*x4731);
IkReal x4736=((1.0)*gconst144*x4730);
IkReal x4737=((1.0)*gconst143*x4730);
evalcond[0]=((((-1.0)*r20*x4737))+(((-1.0)*r21*x4736))+((r22*x4731)));
evalcond[1]=(cj0+(((-1.0)*r10*x4737))+(((-1.0)*r11*x4736))+((r12*x4731)));
evalcond[2]=((((-1.0)*r01*x4736))+(((-1.0)*sj0))+((r02*x4731))+(((-1.0)*r00*x4737)));
evalcond[3]=((((-1.0)*cj2*x4733))+((r20*x4734))+((r21*x4735))+(((-1.0)*cj1*sj2))+((r22*x4730)));
evalcond[4]=(((cj0*x4732))+((r02*x4730))+((r00*x4734))+(((-1.0)*cj0*sj2*x4733))+((r01*x4735)));
evalcond[5]=(((r11*x4735))+(((-1.0)*sj0*sj2*x4733))+((sj0*x4732))+((r10*x4734))+((r12*x4730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4738=((-1.0)*r00);
IkReal x4740 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4740)==0){
continue;
}
IkReal x4739=pow(x4740,-0.5);
CheckValue<IkReal> x4741 = IKatan2WithCheck(IkReal(x4738),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4741.valid){
continue;
}
IkReal gconst145=((3.14159265358979)+(((-1.0)*(x4741.value))));
IkReal gconst146=(x4738*x4739);
IkReal gconst147=((-1.0)*r01*x4739);
CheckValue<IkReal> x4742 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4742.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4742.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4743=((-1.0)*r00);
CheckValue<IkReal> x4746 = IKatan2WithCheck(IkReal(x4743),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4746.valid){
continue;
}
IkReal x4744=((1.0)*(x4746.value));
IkReal x4745=x4739;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4744)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4744)));
IkReal gconst146=(x4743*x4745);
IkReal gconst147=((-1.0)*r01*x4745);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4747=((-1.0)*r00);
CheckValue<IkReal> x4750 = IKatan2WithCheck(IkReal(x4747),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4750.valid){
continue;
}
IkReal x4748=((1.0)*(x4750.value));
IkReal x4749=x4739;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4748)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4748)));
IkReal gconst146=(x4747*x4749);
IkReal gconst147=((-1.0)*r01*x4749);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4751=((-1.0)*r00);
CheckValue<IkReal> x4754 = IKatan2WithCheck(IkReal(x4751),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4754.valid){
continue;
}
IkReal x4752=((1.0)*(x4754.value));
IkReal x4753=x4739;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4752)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4752)));
IkReal gconst146=(x4751*x4753);
IkReal gconst147=((-1.0)*r01*x4753);
IkReal x4755=r02*r02;
IkReal x4756=(r12*sj0);
IkReal x4757=((1.0)*cj0);
IkReal x4758=x4739;
j4eval[0]=((IKabs((((cj0*x4755*x4758))+(((-1.0)*x4757*x4758))+((r02*x4756*x4758)))))+(IKabs(((((-1.0)*r02*x4757))+(((-1.0)*x4756))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4759=((1.0)*sj0);
IkReal x4760=((1.0)*cj0);
CheckValue<IkReal> x4761=IKPowWithIntegerCheck(IKsign((((gconst147*r20))+(((-1.0)*gconst146*r21)))),-1);
if(!x4761.valid){
continue;
}
CheckValue<IkReal> x4762 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r00*x4760))+(((-1.0)*gconst147*r11*x4759))+(((-1.0)*gconst146*r10*x4759))+(((-1.0)*gconst147*r01*x4760)))),IkReal(((((-1.0)*r02*x4760))+(((-1.0)*r12*x4759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4761.value)))+(x4762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4763=IKcos(j4);
IkReal x4764=IKsin(j4);
IkReal x4765=(gconst147*r01);
IkReal x4766=(cj1*cj2);
IkReal x4767=(gconst146*r00);
IkReal x4768=(gconst146*r20);
IkReal x4769=((1.0)*sj1);
IkReal x4770=(gconst146*r10);
IkReal x4771=((1.0)*x4763);
IkReal x4772=(gconst147*x4764);
evalcond[0]=(((r22*x4764))+(((-1.0)*gconst147*r21*x4771))+(((-1.0)*x4768*x4771)));
evalcond[1]=(cj0+(((-1.0)*x4770*x4771))+((r12*x4764))+(((-1.0)*gconst147*r11*x4771)));
evalcond[2]=(((r02*x4764))+(((-1.0)*sj0))+(((-1.0)*x4767*x4771))+(((-1.0)*x4765*x4771)));
evalcond[3]=(((r22*x4763))+(((-1.0)*cj1*sj2))+((x4764*x4768))+((r21*x4772))+(((-1.0)*cj2*x4769)));
evalcond[4]=(((r02*x4763))+(((-1.0)*cj0*sj2*x4769))+((cj0*x4766))+((x4764*x4765))+((x4764*x4767)));
evalcond[5]=((((-1.0)*sj0*sj2*x4769))+((r11*x4772))+((sj0*x4766))+((r12*x4763))+((x4764*x4770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4773=((1.0)*sj0);
CheckValue<IkReal> x4774=IKPowWithIntegerCheck(IKsign((((gconst146*r11))+(((-1.0)*gconst147*r10)))),-1);
if(!x4774.valid){
continue;
}
CheckValue<IkReal> x4775 = IKatan2WithCheck(IkReal(((((-1.0)*gconst147*r21*x4773))+(((-1.0)*gconst146*r20*x4773)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4774.value)))+(x4775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4776=IKcos(j4);
IkReal x4777=IKsin(j4);
IkReal x4778=(gconst147*r01);
IkReal x4779=(cj1*cj2);
IkReal x4780=(gconst146*r00);
IkReal x4781=(gconst146*r20);
IkReal x4782=((1.0)*sj1);
IkReal x4783=(gconst146*r10);
IkReal x4784=((1.0)*x4776);
IkReal x4785=(gconst147*x4777);
evalcond[0]=((((-1.0)*x4781*x4784))+(((-1.0)*gconst147*r21*x4784))+((r22*x4777)));
evalcond[1]=(cj0+((r12*x4777))+(((-1.0)*x4783*x4784))+(((-1.0)*gconst147*r11*x4784)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4777))+(((-1.0)*x4780*x4784))+(((-1.0)*x4778*x4784)));
evalcond[3]=(((x4777*x4781))+(((-1.0)*cj1*sj2))+((r22*x4776))+(((-1.0)*cj2*x4782))+((r21*x4785)));
evalcond[4]=(((cj0*x4779))+((x4777*x4780))+(((-1.0)*cj0*sj2*x4782))+((x4777*x4778))+((r02*x4776)));
evalcond[5]=(((r12*x4776))+((x4777*x4783))+((r11*x4785))+((sj0*x4779))+(((-1.0)*sj0*sj2*x4782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4786=((1.0)*cj0);
CheckValue<IkReal> x4787=IKPowWithIntegerCheck(IKsign((((gconst146*r01))+(((-1.0)*gconst147*r00)))),-1);
if(!x4787.valid){
continue;
}
CheckValue<IkReal> x4788 = IKatan2WithCheck(IkReal(((((-1.0)*gconst147*r21*x4786))+(((-1.0)*gconst146*r20*x4786)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4787.value)))+(x4788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4789=IKcos(j4);
IkReal x4790=IKsin(j4);
IkReal x4791=(gconst147*r01);
IkReal x4792=(cj1*cj2);
IkReal x4793=(gconst146*r00);
IkReal x4794=(gconst146*r20);
IkReal x4795=((1.0)*sj1);
IkReal x4796=(gconst146*r10);
IkReal x4797=((1.0)*x4789);
IkReal x4798=(gconst147*x4790);
evalcond[0]=((((-1.0)*gconst147*r21*x4797))+(((-1.0)*x4794*x4797))+((r22*x4790)));
evalcond[1]=(cj0+(((-1.0)*gconst147*r11*x4797))+(((-1.0)*x4796*x4797))+((r12*x4790)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4790))+(((-1.0)*x4793*x4797))+(((-1.0)*x4791*x4797)));
evalcond[3]=(((x4790*x4794))+((r21*x4798))+((r22*x4789))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4795)));
evalcond[4]=(((r02*x4789))+((x4790*x4791))+((x4790*x4793))+((cj0*x4792))+(((-1.0)*cj0*sj2*x4795)));
evalcond[5]=(((x4790*x4796))+((sj0*x4792))+((r12*x4789))+((r11*x4798))+(((-1.0)*sj0*sj2*x4795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4799=((1.0)*cj5);
IkReal x4800=(((r11*sj5))+(((-1.0)*r10*x4799)));
j4eval[0]=x4800;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x4799))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x4800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4801=((1.0)*sj5);
IkReal x4802=(((cj5*r20))+(((-1.0)*r21*x4801)));
j4eval[0]=x4802;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4801))))));
j4eval[2]=IKsign(x4802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4803=cj5*cj5;
IkReal x4804=r00*r00;
IkReal x4805=(r00*sj5);
IkReal x4806=(cj5*r01);
IkReal x4807=((r02*r02)+(((-1.0)*x4803*x4804))+((x4803*(r01*r01)))+(((2.0)*x4805*x4806))+x4804);
j4eval[0]=x4807;
j4eval[1]=IKsign(x4807);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4806))+(((-1.0)*x4805))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4808=cj5*cj5;
IkReal x4809=r00*r00;
IkReal x4810=(cj5*r01);
IkReal x4811=(r00*sj5);
CheckValue<IkReal> x4812=IKPowWithIntegerCheck(IKsign(((((2.0)*x4810*x4811))+((x4808*(r01*r01)))+(((-1.0)*x4808*x4809))+(r02*r02)+x4809)),-1);
if(!x4812.valid){
continue;
}
CheckValue<IkReal> x4813 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4811))+(((-1.0)*x4810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4812.value)))+(x4813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4814=IKsin(j4);
IkReal x4815=IKcos(j4);
IkReal x4816=(r20*sj5);
IkReal x4817=((1.0)*sj2);
IkReal x4818=(r00*sj5);
IkReal x4819=(cj5*r21);
IkReal x4820=(cj5*r11);
IkReal x4821=(cj5*r01);
IkReal x4822=(r10*sj5);
IkReal x4823=((1.0)*x4815);
evalcond[0]=(((r02*x4815))+((x4814*x4818))+((x4814*x4821)));
evalcond[1]=((((-1.0)*x4816*x4823))+(((-1.0)*x4819*x4823))+((r22*x4814)));
evalcond[2]=((((-1.0)*x4822*x4823))+((r12*x4814))+(((-1.0)*x4820*x4823)));
evalcond[3]=((-1.0)+((r02*x4814))+(((-1.0)*x4821*x4823))+(((-1.0)*x4818*x4823)));
evalcond[4]=(((r12*x4815))+(((-1.0)*sj1*x4817))+((cj1*cj2))+((x4814*x4820))+((x4814*x4822)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4817))+((x4814*x4819))+((x4814*x4816))+((r22*x4815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4824=((1.0)*sj5);
CheckValue<IkReal> x4825 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4824)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4825.valid){
continue;
}
CheckValue<IkReal> x4826=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x4824)))),-1);
if(!x4826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4825.value)+(((1.5707963267949)*(x4826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4827=IKsin(j4);
IkReal x4828=IKcos(j4);
IkReal x4829=(r20*sj5);
IkReal x4830=((1.0)*sj2);
IkReal x4831=(r00*sj5);
IkReal x4832=(cj5*r21);
IkReal x4833=(cj5*r11);
IkReal x4834=(cj5*r01);
IkReal x4835=(r10*sj5);
IkReal x4836=((1.0)*x4828);
evalcond[0]=(((r02*x4828))+((x4827*x4834))+((x4827*x4831)));
evalcond[1]=(((r22*x4827))+(((-1.0)*x4832*x4836))+(((-1.0)*x4829*x4836)));
evalcond[2]=((((-1.0)*x4835*x4836))+(((-1.0)*x4833*x4836))+((r12*x4827)));
evalcond[3]=((-1.0)+(((-1.0)*x4831*x4836))+(((-1.0)*x4834*x4836))+((r02*x4827)));
evalcond[4]=(((r12*x4828))+((x4827*x4835))+((x4827*x4833))+((cj1*cj2))+(((-1.0)*sj1*x4830)));
evalcond[5]=(((r22*x4828))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4830))+((x4827*x4832))+((x4827*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4837=((1.0)*cj5);
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4837))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
CheckValue<IkReal> x4839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4837))+((r11*sj5)))),-1);
if(!x4839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4838.value)+(((1.5707963267949)*(x4839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4840=IKsin(j4);
IkReal x4841=IKcos(j4);
IkReal x4842=(r20*sj5);
IkReal x4843=((1.0)*sj2);
IkReal x4844=(r00*sj5);
IkReal x4845=(cj5*r21);
IkReal x4846=(cj5*r11);
IkReal x4847=(cj5*r01);
IkReal x4848=(r10*sj5);
IkReal x4849=((1.0)*x4841);
evalcond[0]=(((r02*x4841))+((x4840*x4847))+((x4840*x4844)));
evalcond[1]=((((-1.0)*x4842*x4849))+((r22*x4840))+(((-1.0)*x4845*x4849)));
evalcond[2]=((((-1.0)*x4846*x4849))+((r12*x4840))+(((-1.0)*x4848*x4849)));
evalcond[3]=((-1.0)+((r02*x4840))+(((-1.0)*x4847*x4849))+(((-1.0)*x4844*x4849)));
evalcond[4]=((((-1.0)*sj1*x4843))+((x4840*x4848))+((x4840*x4846))+((r12*x4841))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x4840*x4842))+((x4840*x4845))+(((-1.0)*cj1*x4843))+((r22*x4841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4850=((1.0)*sj5);
IkReal x4851=(((cj5*r10))+(((-1.0)*r11*x4850)));
j4eval[0]=x4851;
j4eval[1]=IKsign(x4851);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4850))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4852=((1.0)*cj5);
IkReal x4853=((((-1.0)*r20*x4852))+((r21*sj5)));
j4eval[0]=x4853;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4852))))));
j4eval[2]=IKsign(x4853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4854=(cj1*cj2);
IkReal x4855=(r00*sj5);
IkReal x4856=(cj5*r01);
IkReal x4857=(sj1*sj2);
IkReal x4858=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4858;
j4eval[1]=IKsign(x4858);
j4eval[2]=((IKabs((((r02*x4857))+(((-1.0)*r02*x4854)))))+(IKabs(((((-1.0)*x4856*x4857))+(((-1.0)*x4855*x4857))+((x4854*x4856))+((x4854*x4855))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4859=(cj5*r01);
IkReal x4860=(cj1*cj2);
IkReal x4861=(sj1*sj2);
IkReal x4862=(r00*sj5);
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4860))+((r02*x4861)))),IkReal((((x4859*x4860))+(((-1.0)*x4859*x4861))+((x4860*x4862))+(((-1.0)*x4861*x4862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
CheckValue<IkReal> x4864=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4863.value)+(((1.5707963267949)*(x4864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4865=IKsin(j4);
IkReal x4866=IKcos(j4);
IkReal x4867=(r20*sj5);
IkReal x4868=((1.0)*cj2);
IkReal x4869=(r00*sj5);
IkReal x4870=(cj5*r21);
IkReal x4871=(cj5*r01);
IkReal x4872=(r10*sj5);
IkReal x4873=(cj5*r11);
IkReal x4874=((1.0)*x4866);
evalcond[0]=(((x4865*x4871))+((r02*x4866))+((x4865*x4869)));
evalcond[1]=(((r22*x4865))+(((-1.0)*x4870*x4874))+(((-1.0)*x4867*x4874)));
evalcond[2]=(((r12*x4865))+(((-1.0)*x4872*x4874))+(((-1.0)*x4873*x4874)));
evalcond[3]=((1.0)+(((-1.0)*x4869*x4874))+(((-1.0)*x4871*x4874))+((r02*x4865)));
evalcond[4]=(((r12*x4866))+((sj1*sj2))+((x4865*x4873))+((x4865*x4872))+(((-1.0)*cj1*x4868)));
evalcond[5]=(((r22*x4866))+(((-1.0)*cj1*sj2))+((x4865*x4870))+(((-1.0)*sj1*x4868))+((x4865*x4867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4875=((1.0)*cj5);
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4875)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
CheckValue<IkReal> x4877=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x4875)))),-1);
if(!x4877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4876.value)+(((1.5707963267949)*(x4877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4878=IKsin(j4);
IkReal x4879=IKcos(j4);
IkReal x4880=(r20*sj5);
IkReal x4881=((1.0)*cj2);
IkReal x4882=(r00*sj5);
IkReal x4883=(cj5*r21);
IkReal x4884=(cj5*r01);
IkReal x4885=(r10*sj5);
IkReal x4886=(cj5*r11);
IkReal x4887=((1.0)*x4879);
evalcond[0]=(((r02*x4879))+((x4878*x4884))+((x4878*x4882)));
evalcond[1]=((((-1.0)*x4880*x4887))+(((-1.0)*x4883*x4887))+((r22*x4878)));
evalcond[2]=((((-1.0)*x4885*x4887))+(((-1.0)*x4886*x4887))+((r12*x4878)));
evalcond[3]=((1.0)+((r02*x4878))+(((-1.0)*x4882*x4887))+(((-1.0)*x4884*x4887)));
evalcond[4]=((((-1.0)*cj1*x4881))+((sj1*sj2))+((x4878*x4885))+((x4878*x4886))+((r12*x4879)));
evalcond[5]=((((-1.0)*sj1*x4881))+(((-1.0)*cj1*sj2))+((x4878*x4880))+((x4878*x4883))+((r22*x4879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4888=((1.0)*sj5);
CheckValue<IkReal> x4889 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4888))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4889.valid){
continue;
}
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x4888)))),-1);
if(!x4890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4889.value)+(((1.5707963267949)*(x4890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4891=IKsin(j4);
IkReal x4892=IKcos(j4);
IkReal x4893=(r20*sj5);
IkReal x4894=((1.0)*cj2);
IkReal x4895=(r00*sj5);
IkReal x4896=(cj5*r21);
IkReal x4897=(cj5*r01);
IkReal x4898=(r10*sj5);
IkReal x4899=(cj5*r11);
IkReal x4900=((1.0)*x4892);
evalcond[0]=(((r02*x4892))+((x4891*x4897))+((x4891*x4895)));
evalcond[1]=((((-1.0)*x4893*x4900))+(((-1.0)*x4896*x4900))+((r22*x4891)));
evalcond[2]=((((-1.0)*x4899*x4900))+(((-1.0)*x4898*x4900))+((r12*x4891)));
evalcond[3]=((1.0)+((r02*x4891))+(((-1.0)*x4897*x4900))+(((-1.0)*x4895*x4900)));
evalcond[4]=(((r12*x4892))+(((-1.0)*cj1*x4894))+((x4891*x4898))+((x4891*x4899))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x4894))+((x4891*x4893))+((x4891*x4896))+(((-1.0)*cj1*sj2))+((r22*x4892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4901=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4901);
rxp1_1=(px*r21);
rxp1_2=(r11*x4901);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4902=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4902);
rxp1_1=(px*r21);
rxp1_2=(r11*x4902);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4903=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4903);
rxp1_1=(px*r21);
rxp1_2=(r11*x4903);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4906=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x4906.valid){
continue;
}
IkReal x4904=x4906.value;
IkReal x4905=(sj0*x4904);
sj4array[0]=(((sj1*sj2*x4905))+(((-1.0)*cj1*cj2*x4905)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4907=IKcos(j4);
IkReal x4908=IKsin(j4);
IkReal x4909=(r20*sj5);
IkReal x4910=((1.0)*x4907);
IkReal x4911=(cj5*x4910);
evalcond[0]=(r02*x4907);
evalcond[1]=((((-1.0)*sj0))+((r02*x4908)));
evalcond[2]=((((-1.0)*x4909*x4910))+(((-1.0)*r21*x4911)));
evalcond[3]=((((-1.0)*r11*x4911))+(((-1.0)*r10*sj5*x4910)));
evalcond[4]=(((cj5*r21*x4908))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x4908*x4909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4913=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x4913.valid){
continue;
}
IkReal x4912=x4913.value;
sj4array[0]=(((cj2*sj1*x4912))+((cj1*sj2*x4912)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4914=IKcos(j4);
IkReal x4915=IKsin(j4);
IkReal x4916=(r10*sj5);
IkReal x4917=((1.0)*sj0);
IkReal x4918=((1.0)*x4914);
IkReal x4919=(cj5*x4918);
evalcond[0]=(r02*x4914);
evalcond[1]=(((r02*x4915))+(((-1.0)*x4917)));
evalcond[2]=((((-1.0)*r20*sj5*x4918))+(((-1.0)*r21*x4919)));
evalcond[3]=((((-1.0)*r11*x4919))+(((-1.0)*x4916*x4918)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x4917))+((x4915*x4916))+((cj5*r11*x4915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4920=IKPowWithIntegerCheck(r02,-1);
if(!x4920.valid){
continue;
}
sj4array[0]=(sj0*(x4920.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4921=IKcos(j4);
IkReal x4922=IKsin(j4);
IkReal x4923=((1.0)*sj1);
IkReal x4924=(sj5*x4922);
IkReal x4925=(cj5*x4922);
IkReal x4926=((1.0)*cj5*x4921);
IkReal x4927=((1.0)*sj5*x4921);
evalcond[0]=(r02*x4921);
evalcond[1]=((((-1.0)*r21*x4926))+(((-1.0)*r20*x4927)));
evalcond[2]=((((-1.0)*r11*x4926))+(((-1.0)*r10*x4927)));
evalcond[3]=(((r20*x4924))+(((-1.0)*cj2*x4923))+(((-1.0)*cj1*sj2))+((r21*x4925)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x4924))+(((-1.0)*sj0*sj2*x4923))+((r11*x4925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4928=((1.0)*sj0);
IkReal x4929=((1.0)*cj0);
CheckValue<IkReal> x4930 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x4929))+(((-1.0)*r10*sj5*x4928))+(((-1.0)*cj5*r11*x4928))+(((-1.0)*cj5*r01*x4929)))),IkReal(((((-1.0)*r02*x4929))+(((-1.0)*r12*x4928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4930.valid){
continue;
}
CheckValue<IkReal> x4931=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4930.value)+(((1.5707963267949)*(x4931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4932=IKcos(j4);
IkReal x4933=IKsin(j4);
IkReal x4934=(r20*sj5);
IkReal x4935=(cj1*cj2);
IkReal x4936=(r00*sj5);
IkReal x4937=(cj5*r21);
IkReal x4938=((1.0)*sj1);
IkReal x4939=(cj5*r01);
IkReal x4940=(r10*sj5);
IkReal x4941=(cj5*r11);
IkReal x4942=((1.0)*x4932);
evalcond[0]=((((-1.0)*x4937*x4942))+((r22*x4933))+(((-1.0)*x4934*x4942)));
evalcond[1]=(((r12*x4933))+(((-1.0)*x4941*x4942))+cj0+(((-1.0)*x4940*x4942)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4939*x4942))+(((-1.0)*x4936*x4942))+((r02*x4933)));
evalcond[3]=((((-1.0)*cj2*x4938))+((x4933*x4934))+((x4933*x4937))+(((-1.0)*cj1*sj2))+((r22*x4932)));
evalcond[4]=((((-1.0)*cj0*sj2*x4938))+((x4933*x4936))+((x4933*x4939))+((cj0*x4935))+((r02*x4932)));
evalcond[5]=(((r12*x4932))+(((-1.0)*sj0*sj2*x4938))+((x4933*x4941))+((x4933*x4940))+((sj0*x4935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4943=((1.0)*cj5);
CheckValue<IkReal> x4944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4943))+((r11*sj5)))),-1);
if(!x4944.valid){
continue;
}
CheckValue<IkReal> x4945 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4943))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4944.value)))+(x4945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4946=IKcos(j4);
IkReal x4947=IKsin(j4);
IkReal x4948=(r20*sj5);
IkReal x4949=(cj1*cj2);
IkReal x4950=(r00*sj5);
IkReal x4951=(cj5*r21);
IkReal x4952=((1.0)*sj1);
IkReal x4953=(cj5*r01);
IkReal x4954=(r10*sj5);
IkReal x4955=(cj5*r11);
IkReal x4956=((1.0)*x4946);
evalcond[0]=((((-1.0)*x4948*x4956))+(((-1.0)*x4951*x4956))+((r22*x4947)));
evalcond[1]=(cj0+(((-1.0)*x4955*x4956))+((r12*x4947))+(((-1.0)*x4954*x4956)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4947))+(((-1.0)*x4950*x4956))+(((-1.0)*x4953*x4956)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x4947*x4951))+((x4947*x4948))+(((-1.0)*cj2*x4952))+((r22*x4946)));
evalcond[4]=(((cj0*x4949))+((r02*x4946))+(((-1.0)*cj0*sj2*x4952))+((x4947*x4953))+((x4947*x4950)));
evalcond[5]=(((r12*x4946))+((sj0*x4949))+((x4947*x4955))+((x4947*x4954))+(((-1.0)*sj0*sj2*x4952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4957=((1.0)*cj0);
CheckValue<IkReal> x4958=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x4958.valid){
continue;
}
CheckValue<IkReal> x4959 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x4957))+(((-1.0)*cj5*r21*x4957)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4958.value)))+(x4959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4960=IKcos(j4);
IkReal x4961=IKsin(j4);
IkReal x4962=(r20*sj5);
IkReal x4963=(cj1*cj2);
IkReal x4964=(r00*sj5);
IkReal x4965=(cj5*r21);
IkReal x4966=((1.0)*sj1);
IkReal x4967=(cj5*r01);
IkReal x4968=(r10*sj5);
IkReal x4969=(cj5*r11);
IkReal x4970=((1.0)*x4960);
evalcond[0]=(((r22*x4961))+(((-1.0)*x4962*x4970))+(((-1.0)*x4965*x4970)));
evalcond[1]=((((-1.0)*x4968*x4970))+cj0+((r12*x4961))+(((-1.0)*x4969*x4970)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4961))+(((-1.0)*x4967*x4970))+(((-1.0)*x4964*x4970)));
evalcond[3]=(((x4961*x4962))+((x4961*x4965))+((r22*x4960))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4966)));
evalcond[4]=(((x4961*x4967))+((x4961*x4964))+(((-1.0)*cj0*sj2*x4966))+((r02*x4960))+((cj0*x4963)));
evalcond[5]=(((x4961*x4969))+((x4961*x4968))+((sj0*x4963))+((r12*x4960))+(((-1.0)*sj0*sj2*x4966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4971=((1.0)*sj5);
IkReal x4972=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4972;
j0eval[1]=IKsign(x4972);
j0eval[2]=((IKabs(((((-1.0)*r01*x4971))+((cj5*r00)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4971))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4973=cj5*cj5;
IkReal x4974=r20*r20;
IkReal x4975=(r20*sj5);
IkReal x4976=(cj5*r21);
IkReal x4977=(cj1*cj2);
IkReal x4978=((1.0)*sj1*sj2);
IkReal x4979=(x4974+(r22*r22)+((x4973*(r21*r21)))+(((2.0)*x4975*x4976))+(((-1.0)*x4973*x4974)));
j4eval[0]=x4979;
j4eval[1]=IKsign(x4979);
j4eval[2]=((IKabs(((((-1.0)*x4975*x4978))+((x4976*x4977))+(((-1.0)*x4976*x4978))+((x4975*x4977)))))+(IKabs((((r22*x4977))+(((-1.0)*r22*x4978))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.17820324005891)*py))+(((25.920471281296)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((1.17820324005891)*py))+(((25.920471281296)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((25.920471281296)*py))+(((-1.17820324005891)*px))), ((((1.17820324005891)*py))+(((25.920471281296)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4980=IKcos(j0);
IkReal x4981=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x4981))+(((0.0385)*x4980)));
evalcond[1]=((((0.00175)*x4980))+(((-1.0)*py))+(((0.0385)*x4981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4982=((1.0)*cj5);
IkReal x4983=(((r11*sj5))+(((-1.0)*r10*x4982)));
j4eval[0]=x4983;
j4eval[1]=IKsign(x4983);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x4982)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4984=((1.0)*sj5);
IkReal x4985=((((-1.0)*r01*x4984))+((cj5*r00)));
j4eval[0]=x4985;
j4eval[1]=IKsign(x4985);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x4984))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4986=cj5*cj5;
IkReal x4987=(r00*r20);
IkReal x4988=((1.0)*sj0);
IkReal x4989=(cj5*r21);
IkReal x4990=(r20*sj5);
IkReal x4991=(x4987+(((-1.0)*x4986*x4987))+((r01*r21*x4986))+((r02*r22))+((cj5*r01*x4990))+((r00*sj5*x4989)));
j4eval[0]=x4991;
j4eval[1]=IKsign(x4991);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4988*x4989))+(((-1.0)*x4988*x4990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4992=cj5*cj5;
IkReal x4993=(r00*r20);
IkReal x4994=((1.0)*sj0);
IkReal x4995=(cj5*r21);
IkReal x4996=(r20*sj5);
CheckValue<IkReal> x4997 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x4994*x4996))+(((-1.0)*x4994*x4995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4997.valid){
continue;
}
CheckValue<IkReal> x4998=IKPowWithIntegerCheck(IKsign((x4993+((r00*sj5*x4995))+(((-1.0)*x4992*x4993))+((r01*r21*x4992))+((r02*r22))+((cj5*r01*x4996)))),-1);
if(!x4998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4997.value)+(((1.5707963267949)*(x4998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4999=IKsin(j4);
IkReal x5000=IKcos(j4);
IkReal x5001=((1.0)*sj0);
IkReal x5002=(sj5*x4999);
IkReal x5003=(cj5*x4999);
IkReal x5004=((1.0)*cj5*x5000);
IkReal x5005=((1.0)*sj5*x5000);
evalcond[0]=(((r20*x5002))+((r22*x5000))+((r21*x5003)));
evalcond[1]=(((r22*x4999))+(((-1.0)*r20*x5005))+(((-1.0)*r21*x5004)));
evalcond[2]=(cj0+((r12*x4999))+(((-1.0)*r11*x5004))+(((-1.0)*r10*x5005)));
evalcond[3]=(((r02*x5000))+((r00*x5002))+((r01*x5003))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5000))+((r11*x5003))+((r10*x5002))+(((-1.0)*x5001)));
evalcond[5]=(((r02*x4999))+(((-1.0)*r00*x5005))+(((-1.0)*r01*x5004))+(((-1.0)*x5001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5006=((1.0)*sj0);
CheckValue<IkReal> x5007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5007.valid){
continue;
}
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x5006))+(((-1.0)*r20*sj5*x5006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5007.value)))+(x5008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5009=IKsin(j4);
IkReal x5010=IKcos(j4);
IkReal x5011=((1.0)*sj0);
IkReal x5012=(sj5*x5009);
IkReal x5013=(cj5*x5009);
IkReal x5014=((1.0)*cj5*x5010);
IkReal x5015=((1.0)*sj5*x5010);
evalcond[0]=(((r20*x5012))+((r21*x5013))+((r22*x5010)));
evalcond[1]=((((-1.0)*r21*x5014))+(((-1.0)*r20*x5015))+((r22*x5009)));
evalcond[2]=(((r12*x5009))+cj0+(((-1.0)*r10*x5015))+(((-1.0)*r11*x5014)));
evalcond[3]=(((r02*x5010))+((r01*x5013))+((r00*x5012))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5013))+((r10*x5012))+((r12*x5010))+(((-1.0)*x5011)));
evalcond[5]=(((r02*x5009))+(((-1.0)*r01*x5014))+(((-1.0)*r00*x5015))+(((-1.0)*x5011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5016=((1.0)*cj0);
CheckValue<IkReal> x5017 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x5016))+(((-1.0)*r20*sj5*x5016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5017.valid){
continue;
}
CheckValue<IkReal> x5018=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5017.value)+(((1.5707963267949)*(x5018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5019=IKsin(j4);
IkReal x5020=IKcos(j4);
IkReal x5021=((1.0)*sj0);
IkReal x5022=(sj5*x5019);
IkReal x5023=(cj5*x5019);
IkReal x5024=((1.0)*cj5*x5020);
IkReal x5025=((1.0)*sj5*x5020);
evalcond[0]=(((r20*x5022))+((r22*x5020))+((r21*x5023)));
evalcond[1]=((((-1.0)*r20*x5025))+(((-1.0)*r21*x5024))+((r22*x5019)));
evalcond[2]=(cj0+(((-1.0)*r11*x5024))+(((-1.0)*r10*x5025))+((r12*x5019)));
evalcond[3]=(((r02*x5020))+((r00*x5022))+((r01*x5023))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5023))+((r12*x5020))+((r10*x5022))+(((-1.0)*x5021)));
evalcond[5]=((((-1.0)*r00*x5025))+(((-1.0)*r01*x5024))+((r02*x5019))+(((-1.0)*x5021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.17820324005891)*py))+(((25.920471281296)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((1.17820324005891)*py))+(((25.920471281296)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((25.920471281296)*py))+(((-1.17820324005891)*px))), ((((1.17820324005891)*py))+(((25.920471281296)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5026=IKcos(j0);
IkReal x5027=IKsin(j0);
evalcond[0]=((((-0.00175)*x5027))+(((0.0385)*x5026))+(((-1.0)*px)));
evalcond[1]=((((0.0385)*x5027))+(((-1.0)*py))+(((0.00175)*x5026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5028=((1.0)*sj5);
IkReal x5029=(((cj5*r10))+(((-1.0)*r11*x5028)));
j4eval[0]=x5029;
j4eval[1]=IKsign(x5029);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*x5028))+(((-1.0)*cj0*cj5*r21)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5030=((1.0)*cj5);
IkReal x5031=(((r01*sj5))+(((-1.0)*r00*x5030)));
j4eval[0]=x5031;
j4eval[1]=IKsign(x5031);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x5030))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5032=((1.0)*cj5);
IkReal x5033=(((r21*sj5))+(((-1.0)*r20*x5032)));
j4eval[0]=x5033;
j4eval[1]=((IKabs(((((-1.0)*r02*sj0))+((cj0*r12)))))+(IKabs((((r00*sj0*sj5))+(((-1.0)*cj0*r11*x5032))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))))));
j4eval[2]=IKsign(x5033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5034=((1.0)*cj5);
CheckValue<IkReal> x5035=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x5034)))),-1);
if(!x5035.valid){
continue;
}
CheckValue<IkReal> x5036 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+(((-1.0)*cj0*r11*x5034))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5035.value)))+(x5036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5037=IKsin(j4);
IkReal x5038=IKcos(j4);
IkReal x5039=(sj5*x5037);
IkReal x5040=(cj5*x5037);
IkReal x5041=((1.0)*cj5*x5038);
IkReal x5042=((1.0)*sj5*x5038);
evalcond[0]=(((r20*x5039))+((r21*x5040))+((r22*x5038)));
evalcond[1]=(cj0+((r02*x5038))+((r00*x5039))+((r01*x5040)));
evalcond[2]=(((r12*x5038))+sj0+((r10*x5039))+((r11*x5040)));
evalcond[3]=((((-1.0)*r20*x5042))+(((-1.0)*r21*x5041))+((r22*x5037)));
evalcond[4]=(((r12*x5037))+cj0+(((-1.0)*r10*x5042))+(((-1.0)*r11*x5041)));
evalcond[5]=((((-1.0)*sj0))+((r02*x5037))+(((-1.0)*r00*x5042))+(((-1.0)*r01*x5041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5043=((1.0)*sj0);
CheckValue<IkReal> x5044=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5044.valid){
continue;
}
CheckValue<IkReal> x5045 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x5043))+(((-1.0)*r20*sj5*x5043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5044.value)))+(x5045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5046=IKsin(j4);
IkReal x5047=IKcos(j4);
IkReal x5048=(sj5*x5046);
IkReal x5049=(cj5*x5046);
IkReal x5050=((1.0)*cj5*x5047);
IkReal x5051=((1.0)*sj5*x5047);
evalcond[0]=(((r20*x5048))+((r21*x5049))+((r22*x5047)));
evalcond[1]=(cj0+((r02*x5047))+((r00*x5048))+((r01*x5049)));
evalcond[2]=(sj0+((r10*x5048))+((r12*x5047))+((r11*x5049)));
evalcond[3]=((((-1.0)*r20*x5051))+(((-1.0)*r21*x5050))+((r22*x5046)));
evalcond[4]=(cj0+(((-1.0)*r10*x5051))+(((-1.0)*r11*x5050))+((r12*x5046)));
evalcond[5]=((((-1.0)*r01*x5050))+(((-1.0)*sj0))+((r02*x5046))+(((-1.0)*r00*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5052=((1.0)*cj0);
CheckValue<IkReal> x5053 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x5052))+(((-1.0)*cj5*r21*x5052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5053.valid){
continue;
}
CheckValue<IkReal> x5054=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5053.value)+(((1.5707963267949)*(x5054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5055=IKsin(j4);
IkReal x5056=IKcos(j4);
IkReal x5057=(sj5*x5055);
IkReal x5058=(cj5*x5055);
IkReal x5059=((1.0)*cj5*x5056);
IkReal x5060=((1.0)*sj5*x5056);
evalcond[0]=(((r20*x5057))+((r21*x5058))+((r22*x5056)));
evalcond[1]=(cj0+((r00*x5057))+((r01*x5058))+((r02*x5056)));
evalcond[2]=(sj0+((r10*x5057))+((r12*x5056))+((r11*x5058)));
evalcond[3]=(((r22*x5055))+(((-1.0)*r20*x5060))+(((-1.0)*r21*x5059)));
evalcond[4]=(cj0+((r12*x5055))+(((-1.0)*r11*x5059))+(((-1.0)*r10*x5060)));
evalcond[5]=((((-1.0)*r01*x5059))+(((-1.0)*sj0))+(((-1.0)*r00*x5060))+((r02*x5055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))))+IKsqr(((((6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))), ((((6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5061=IKcos(j0);
IkReal x5062=IKsin(j0);
evalcond[0]=((((-0.00175)*x5062))+(((0.1445)*x5061))+(((-1.0)*px)));
evalcond[1]=((((0.1445)*x5062))+(((0.00175)*x5061))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5063=((1.0)*cj5);
IkReal x5064=(((r11*sj5))+(((-1.0)*r10*x5063)));
j4eval[0]=x5064;
j4eval[1]=IKsign(x5064);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x5063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5065=((1.0)*sj5);
IkReal x5066=((((-1.0)*r01*x5065))+((cj5*r00)));
j4eval[0]=x5066;
j4eval[1]=IKsign(x5066);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x5065))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5067=cj5*cj5;
IkReal x5068=(r00*r20);
IkReal x5069=((1.0)*sj0);
IkReal x5070=(cj5*r21);
IkReal x5071=(r20*sj5);
IkReal x5072=(((r00*sj5*x5070))+((cj5*r01*x5071))+x5068+(((-1.0)*x5067*x5068))+((r01*r21*x5067))+((r02*r22)));
j4eval[0]=x5072;
j4eval[1]=IKsign(x5072);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5069*x5071))+(((-1.0)*x5069*x5070))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5073=cj5*cj5;
IkReal x5074=(r00*r20);
IkReal x5075=((1.0)*sj0);
IkReal x5076=(cj5*r21);
IkReal x5077=(r20*sj5);
CheckValue<IkReal> x5078 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x5075*x5077))+(((-1.0)*x5075*x5076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5078.valid){
continue;
}
CheckValue<IkReal> x5079=IKPowWithIntegerCheck(IKsign((((r00*sj5*x5076))+((cj5*r01*x5077))+(((-1.0)*x5073*x5074))+x5074+((r01*r21*x5073))+((r02*r22)))),-1);
if(!x5079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5078.value)+(((1.5707963267949)*(x5079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5080=IKsin(j4);
IkReal x5081=IKcos(j4);
IkReal x5082=((1.0)*sj0);
IkReal x5083=(sj5*x5080);
IkReal x5084=(cj5*x5080);
IkReal x5085=((1.0)*cj5*x5081);
IkReal x5086=((1.0)*sj5*x5081);
evalcond[0]=(((r21*x5084))+((r22*x5081))+((r20*x5083)));
evalcond[1]=(((r22*x5080))+(((-1.0)*r21*x5085))+(((-1.0)*r20*x5086)));
evalcond[2]=((((-1.0)*r11*x5085))+(((-1.0)*r10*x5086))+cj0+((r12*x5080)));
evalcond[3]=(((r01*x5084))+((r00*x5083))+((r02*x5081))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x5083))+((r11*x5084))+((r12*x5081))+(((-1.0)*x5082)));
evalcond[5]=((((-1.0)*r01*x5085))+(((-1.0)*r00*x5086))+(((-1.0)*x5082))+((r02*x5080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5087=((1.0)*sj0);
CheckValue<IkReal> x5088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5088.valid){
continue;
}
CheckValue<IkReal> x5089 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x5087))+(((-1.0)*r20*sj5*x5087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5088.value)))+(x5089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5090=IKsin(j4);
IkReal x5091=IKcos(j4);
IkReal x5092=((1.0)*sj0);
IkReal x5093=(sj5*x5090);
IkReal x5094=(cj5*x5090);
IkReal x5095=((1.0)*cj5*x5091);
IkReal x5096=((1.0)*sj5*x5091);
evalcond[0]=(((r21*x5094))+((r22*x5091))+((r20*x5093)));
evalcond[1]=(((r22*x5090))+(((-1.0)*r20*x5096))+(((-1.0)*r21*x5095)));
evalcond[2]=((((-1.0)*r11*x5095))+(((-1.0)*r10*x5096))+cj0+((r12*x5090)));
evalcond[3]=(((r00*x5093))+((r01*x5094))+((r02*x5091))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x5093))+((r11*x5094))+((r12*x5091))+(((-1.0)*x5092)));
evalcond[5]=((((-1.0)*r00*x5096))+(((-1.0)*r01*x5095))+(((-1.0)*x5092))+((r02*x5090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5097=((1.0)*cj0);
CheckValue<IkReal> x5098=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5098.valid){
continue;
}
CheckValue<IkReal> x5099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x5097))+(((-1.0)*cj5*r21*x5097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5098.value)))+(x5099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5100=IKsin(j4);
IkReal x5101=IKcos(j4);
IkReal x5102=((1.0)*sj0);
IkReal x5103=(sj5*x5100);
IkReal x5104=(cj5*x5100);
IkReal x5105=((1.0)*cj5*x5101);
IkReal x5106=((1.0)*sj5*x5101);
evalcond[0]=(((r20*x5103))+((r22*x5101))+((r21*x5104)));
evalcond[1]=((((-1.0)*r21*x5105))+((r22*x5100))+(((-1.0)*r20*x5106)));
evalcond[2]=((((-1.0)*r10*x5106))+((r12*x5100))+cj0+(((-1.0)*r11*x5105)));
evalcond[3]=(((r00*x5103))+((r01*x5104))+((r02*x5101))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5101))+(((-1.0)*x5102))+((r11*x5104))+((r10*x5103)));
evalcond[5]=((((-1.0)*x5102))+((r02*x5100))+(((-1.0)*r00*x5106))+(((-1.0)*r01*x5105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))))+IKsqr(((((6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))), ((((6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5107=IKcos(j0);
IkReal x5108=IKsin(j0);
evalcond[0]=((((-0.00175)*x5108))+(((0.1445)*x5107))+(((-1.0)*px)));
evalcond[1]=((((0.00175)*x5107))+(((0.1445)*x5108))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5109=((1.0)*sj5);
IkReal x5110=(((cj5*r10))+(((-1.0)*r11*x5109)));
j4eval[0]=x5110;
j4eval[1]=IKsign(x5110);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*x5109))+(((-1.0)*cj0*cj5*r21)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5111=((1.0)*cj5);
IkReal x5112=(((r01*sj5))+(((-1.0)*r00*x5111)));
j4eval[0]=x5112;
j4eval[1]=IKsign(x5112);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5111))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5113=((1.0)*cj5);
IkReal x5114=((((-1.0)*r20*x5113))+((r21*sj5)));
j4eval[0]=x5114;
j4eval[1]=((IKabs(((((-1.0)*r02*sj0))+((cj0*r12)))))+(IKabs((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x5113))))));
j4eval[2]=IKsign(x5114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5115=((1.0)*cj5);
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5115))+((r21*sj5)))),-1);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x5115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5116.value)))+(x5117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKsin(j4);
IkReal x5119=IKcos(j4);
IkReal x5120=(sj5*x5118);
IkReal x5121=(cj5*x5118);
IkReal x5122=((1.0)*cj5*x5119);
IkReal x5123=((1.0)*sj5*x5119);
evalcond[0]=(((r22*x5119))+((r20*x5120))+((r21*x5121)));
evalcond[1]=(cj0+((r02*x5119))+((r00*x5120))+((r01*x5121)));
evalcond[2]=(sj0+((r10*x5120))+((r11*x5121))+((r12*x5119)));
evalcond[3]=((((-1.0)*r20*x5123))+((r22*x5118))+(((-1.0)*r21*x5122)));
evalcond[4]=(cj0+(((-1.0)*r10*x5123))+(((-1.0)*r11*x5122))+((r12*x5118)));
evalcond[5]=((((-1.0)*sj0))+((r02*x5118))+(((-1.0)*r00*x5123))+(((-1.0)*r01*x5122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5124=((1.0)*sj0);
CheckValue<IkReal> x5125 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x5124))+(((-1.0)*cj5*r21*x5124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5125.valid){
continue;
}
CheckValue<IkReal> x5126=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5125.value)+(((1.5707963267949)*(x5126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5127=IKsin(j4);
IkReal x5128=IKcos(j4);
IkReal x5129=(sj5*x5127);
IkReal x5130=(cj5*x5127);
IkReal x5131=((1.0)*cj5*x5128);
IkReal x5132=((1.0)*sj5*x5128);
evalcond[0]=(((r22*x5128))+((r20*x5129))+((r21*x5130)));
evalcond[1]=(cj0+((r00*x5129))+((r01*x5130))+((r02*x5128)));
evalcond[2]=(sj0+((r10*x5129))+((r12*x5128))+((r11*x5130)));
evalcond[3]=(((r22*x5127))+(((-1.0)*r21*x5131))+(((-1.0)*r20*x5132)));
evalcond[4]=((((-1.0)*r10*x5132))+cj0+((r12*x5127))+(((-1.0)*r11*x5131)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5131))+(((-1.0)*r00*x5132))+((r02*x5127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5133=((1.0)*cj0);
CheckValue<IkReal> x5134 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x5133))+(((-1.0)*cj5*r21*x5133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5134.valid){
continue;
}
CheckValue<IkReal> x5135=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5134.value)+(((1.5707963267949)*(x5135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5136=IKsin(j4);
IkReal x5137=IKcos(j4);
IkReal x5138=(sj5*x5136);
IkReal x5139=(cj5*x5136);
IkReal x5140=((1.0)*cj5*x5137);
IkReal x5141=((1.0)*sj5*x5137);
evalcond[0]=(((r22*x5137))+((r20*x5138))+((r21*x5139)));
evalcond[1]=(cj0+((r01*x5139))+((r00*x5138))+((r02*x5137)));
evalcond[2]=(sj0+((r12*x5137))+((r10*x5138))+((r11*x5139)));
evalcond[3]=(((r22*x5136))+(((-1.0)*r21*x5140))+(((-1.0)*r20*x5141)));
evalcond[4]=(cj0+((r12*x5136))+(((-1.0)*r11*x5140))+(((-1.0)*r10*x5141)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5140))+(((-1.0)*r00*x5141))+((r02*x5136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-25.920471281296)*px))+(((1.17820324005891)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((-25.920471281296)*px))+(((1.17820324005891)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-25.920471281296)*py))+(((-1.17820324005891)*px))), ((((-25.920471281296)*px))+(((1.17820324005891)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5142=IKcos(j0);
IkReal x5143=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x5143))+(((-0.0385)*x5142)));
evalcond[1]=((((0.00175)*x5142))+(((-1.0)*py))+(((-0.0385)*x5143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5144=((1.0)*sj5);
IkReal x5145=(((cj5*r10))+(((-1.0)*r11*x5144)));
j4eval[0]=x5145;
j4eval[1]=IKsign(x5145);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x5144))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5146=((1.0)*cj5);
IkReal x5147=(((r01*sj5))+(((-1.0)*r00*x5146)));
j4eval[0]=x5147;
j4eval[1]=IKsign(x5147);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5146))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5148=((1.0)*cj5);
IkReal x5149=((((-1.0)*r20*x5148))+((r21*sj5)));
j4eval[0]=x5149;
j4eval[1]=((IKabs(((((-1.0)*r02*sj0))+((cj0*r12)))))+(IKabs((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r11*x5148))+(((-1.0)*cj0*r10*sj5))))));
j4eval[2]=IKsign(x5149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5150=((1.0)*cj5);
CheckValue<IkReal> x5151 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+(((-1.0)*cj0*r11*x5150))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5151.valid){
continue;
}
CheckValue<IkReal> x5152=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x5150)))),-1);
if(!x5152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5151.value)+(((1.5707963267949)*(x5152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5153=IKsin(j4);
IkReal x5154=IKcos(j4);
IkReal x5155=(sj5*x5153);
IkReal x5156=(cj5*x5153);
IkReal x5157=((1.0)*cj5*x5154);
IkReal x5158=((1.0)*sj5*x5154);
evalcond[0]=(((r21*x5156))+((r20*x5155))+((r22*x5154)));
evalcond[1]=(((r00*x5155))+((r01*x5156))+cj0+((r02*x5154)));
evalcond[2]=(((r11*x5156))+sj0+((r12*x5154))+((r10*x5155)));
evalcond[3]=((((-1.0)*r20*x5158))+((r22*x5153))+(((-1.0)*r21*x5157)));
evalcond[4]=(cj0+((r12*x5153))+(((-1.0)*r11*x5157))+(((-1.0)*r10*x5158)));
evalcond[5]=((((-1.0)*sj0))+((r02*x5153))+(((-1.0)*r00*x5158))+(((-1.0)*r01*x5157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5159=((1.0)*sj0);
CheckValue<IkReal> x5160=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5160.valid){
continue;
}
CheckValue<IkReal> x5161 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x5159))+(((-1.0)*cj5*r21*x5159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5160.value)))+(x5161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5162=IKsin(j4);
IkReal x5163=IKcos(j4);
IkReal x5164=(sj5*x5162);
IkReal x5165=(cj5*x5162);
IkReal x5166=((1.0)*cj5*x5163);
IkReal x5167=((1.0)*sj5*x5163);
evalcond[0]=(((r21*x5165))+((r20*x5164))+((r22*x5163)));
evalcond[1]=(cj0+((r00*x5164))+((r01*x5165))+((r02*x5163)));
evalcond[2]=(((r10*x5164))+sj0+((r12*x5163))+((r11*x5165)));
evalcond[3]=((((-1.0)*r20*x5167))+(((-1.0)*r21*x5166))+((r22*x5162)));
evalcond[4]=(cj0+(((-1.0)*r11*x5166))+(((-1.0)*r10*x5167))+((r12*x5162)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x5167))+(((-1.0)*r01*x5166))+((r02*x5162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5168=((1.0)*cj0);
CheckValue<IkReal> x5169=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5169.valid){
continue;
}
CheckValue<IkReal> x5170 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x5168))+(((-1.0)*cj5*r21*x5168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5169.value)))+(x5170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5171=IKsin(j4);
IkReal x5172=IKcos(j4);
IkReal x5173=(sj5*x5171);
IkReal x5174=(cj5*x5171);
IkReal x5175=((1.0)*cj5*x5172);
IkReal x5176=((1.0)*sj5*x5172);
evalcond[0]=(((r20*x5173))+((r22*x5172))+((r21*x5174)));
evalcond[1]=(cj0+((r01*x5174))+((r00*x5173))+((r02*x5172)));
evalcond[2]=(sj0+((r10*x5173))+((r12*x5172))+((r11*x5174)));
evalcond[3]=((((-1.0)*r21*x5175))+(((-1.0)*r20*x5176))+((r22*x5171)));
evalcond[4]=(cj0+(((-1.0)*r11*x5175))+(((-1.0)*r10*x5176))+((r12*x5171)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5175))+(((-1.0)*r00*x5176))+((r02*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-25.920471281296)*px))+(((1.17820324005891)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((-25.920471281296)*px))+(((1.17820324005891)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-25.920471281296)*py))+(((-1.17820324005891)*px))), ((((-25.920471281296)*px))+(((1.17820324005891)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5177=IKcos(j0);
IkReal x5178=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x5178))+(((-0.0385)*x5177)));
evalcond[1]=((((0.00175)*x5177))+(((-1.0)*py))+(((-0.0385)*x5178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5179=((1.0)*cj5);
IkReal x5180=(((r11*sj5))+(((-1.0)*r10*x5179)));
j4eval[0]=x5180;
j4eval[1]=IKsign(x5180);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x5179)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5181=((1.0)*sj5);
IkReal x5182=((((-1.0)*r01*x5181))+((cj5*r00)));
j4eval[0]=x5182;
j4eval[1]=IKsign(x5182);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5181))+(((-1.0)*cj5*r21*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5183=cj5*cj5;
IkReal x5184=(r00*r20);
IkReal x5185=((1.0)*sj0);
IkReal x5186=(cj5*r21);
IkReal x5187=(r20*sj5);
IkReal x5188=((((-1.0)*x5183*x5184))+x5184+((cj5*r01*x5187))+((r00*sj5*x5186))+((r02*r22))+((r01*r21*x5183)));
j4eval[0]=x5188;
j4eval[1]=IKsign(x5188);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5185*x5187))+(((-1.0)*x5185*x5186))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5189=cj5*cj5;
IkReal x5190=(r00*r20);
IkReal x5191=((1.0)*sj0);
IkReal x5192=(cj5*r21);
IkReal x5193=(r20*sj5);
CheckValue<IkReal> x5194 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x5191*x5193))+(((-1.0)*x5191*x5192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5194.valid){
continue;
}
CheckValue<IkReal> x5195=IKPowWithIntegerCheck(IKsign((((cj5*r01*x5193))+(((-1.0)*x5189*x5190))+x5190+((r02*r22))+((r00*sj5*x5192))+((r01*r21*x5189)))),-1);
if(!x5195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5194.value)+(((1.5707963267949)*(x5195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5196=IKsin(j4);
IkReal x5197=IKcos(j4);
IkReal x5198=((1.0)*sj0);
IkReal x5199=(sj5*x5196);
IkReal x5200=(cj5*x5196);
IkReal x5201=((1.0)*cj5*x5197);
IkReal x5202=((1.0)*sj5*x5197);
evalcond[0]=(((r22*x5197))+((r21*x5200))+((r20*x5199)));
evalcond[1]=(((r22*x5196))+(((-1.0)*r20*x5202))+(((-1.0)*r21*x5201)));
evalcond[2]=(cj0+(((-1.0)*r10*x5202))+((r12*x5196))+(((-1.0)*r11*x5201)));
evalcond[3]=(((r01*x5200))+((r02*x5197))+((r00*x5199))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x5199))+(((-1.0)*x5198))+((r11*x5200))+((r12*x5197)));
evalcond[5]=(((r02*x5196))+(((-1.0)*x5198))+(((-1.0)*r00*x5202))+(((-1.0)*r01*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5203=((1.0)*sj0);
CheckValue<IkReal> x5204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5204.valid){
continue;
}
CheckValue<IkReal> x5205 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x5203))+(((-1.0)*r20*sj5*x5203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5204.value)))+(x5205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5206=IKsin(j4);
IkReal x5207=IKcos(j4);
IkReal x5208=((1.0)*sj0);
IkReal x5209=(sj5*x5206);
IkReal x5210=(cj5*x5206);
IkReal x5211=((1.0)*cj5*x5207);
IkReal x5212=((1.0)*sj5*x5207);
evalcond[0]=(((r20*x5209))+((r22*x5207))+((r21*x5210)));
evalcond[1]=(((r22*x5206))+(((-1.0)*r20*x5212))+(((-1.0)*r21*x5211)));
evalcond[2]=((((-1.0)*r11*x5211))+cj0+(((-1.0)*r10*x5212))+((r12*x5206)));
evalcond[3]=(((r01*x5210))+((r00*x5209))+((r02*x5207))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5208))+((r11*x5210))+((r12*x5207))+((r10*x5209)));
evalcond[5]=((((-1.0)*x5208))+(((-1.0)*r00*x5212))+(((-1.0)*r01*x5211))+((r02*x5206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5213=((1.0)*cj0);
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x5213))+(((-1.0)*r20*sj5*x5213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
CheckValue<IkReal> x5215=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5214.value)+(((1.5707963267949)*(x5215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5216=IKsin(j4);
IkReal x5217=IKcos(j4);
IkReal x5218=((1.0)*sj0);
IkReal x5219=(sj5*x5216);
IkReal x5220=(cj5*x5216);
IkReal x5221=((1.0)*cj5*x5217);
IkReal x5222=((1.0)*sj5*x5217);
evalcond[0]=(((r21*x5220))+((r20*x5219))+((r22*x5217)));
evalcond[1]=((((-1.0)*r21*x5221))+(((-1.0)*r20*x5222))+((r22*x5216)));
evalcond[2]=(cj0+((r12*x5216))+(((-1.0)*r11*x5221))+(((-1.0)*r10*x5222)));
evalcond[3]=(((r02*x5217))+((r01*x5220))+(((-1.0)*cj0))+((r00*x5219)));
evalcond[4]=((((-1.0)*x5218))+((r12*x5217))+((r11*x5220))+((r10*x5219)));
evalcond[5]=((((-1.0)*x5218))+((r02*x5216))+(((-1.0)*r01*x5221))+(((-1.0)*r00*x5222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))))+IKsqr(((((-6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))), ((((-6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5223=IKcos(j0);
IkReal x5224=IKsin(j0);
evalcond[0]=((((-0.1445)*x5223))+(((-1.0)*px))+(((-0.00175)*x5224)));
evalcond[1]=((((-0.1445)*x5224))+(((0.00175)*x5223))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5225=((1.0)*sj5);
IkReal x5226=(((cj5*r10))+(((-1.0)*r11*x5225)));
j4eval[0]=x5226;
j4eval[1]=IKsign(x5226);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*x5225))+(((-1.0)*cj0*cj5*r21)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5227=((1.0)*cj5);
IkReal x5228=(((r01*sj5))+(((-1.0)*r00*x5227)));
j4eval[0]=x5228;
j4eval[1]=IKsign(x5228);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5227))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5229=((1.0)*cj5);
IkReal x5230=(((r21*sj5))+(((-1.0)*r20*x5229)));
j4eval[0]=x5230;
j4eval[1]=((IKabs(((((-1.0)*r02*sj0))+((cj0*r12)))))+(IKabs((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r10*sj5))+(((-1.0)*cj0*r11*x5229))))));
j4eval[2]=IKsign(x5230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5231=((1.0)*cj5);
CheckValue<IkReal> x5232 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IkReal((((r00*sj0*sj5))+((cj5*r01*sj0))+(((-1.0)*cj0*r11*x5231))+(((-1.0)*cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5232.valid){
continue;
}
CheckValue<IkReal> x5233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5231))+((r21*sj5)))),-1);
if(!x5233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5232.value)+(((1.5707963267949)*(x5233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5234=IKsin(j4);
IkReal x5235=IKcos(j4);
IkReal x5236=(sj5*x5234);
IkReal x5237=(cj5*x5234);
IkReal x5238=((1.0)*cj5*x5235);
IkReal x5239=((1.0)*sj5*x5235);
evalcond[0]=(((r20*x5236))+((r21*x5237))+((r22*x5235)));
evalcond[1]=(cj0+((r01*x5237))+((r00*x5236))+((r02*x5235)));
evalcond[2]=(sj0+((r10*x5236))+((r11*x5237))+((r12*x5235)));
evalcond[3]=((((-1.0)*r21*x5238))+(((-1.0)*r20*x5239))+((r22*x5234)));
evalcond[4]=((((-1.0)*r10*x5239))+(((-1.0)*r11*x5238))+cj0+((r12*x5234)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5238))+(((-1.0)*r00*x5239))+((r02*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5240=((1.0)*sj0);
CheckValue<IkReal> x5241=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5241.valid){
continue;
}
CheckValue<IkReal> x5242 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x5240))+(((-1.0)*r20*sj5*x5240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5241.value)))+(x5242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5243=IKsin(j4);
IkReal x5244=IKcos(j4);
IkReal x5245=(sj5*x5243);
IkReal x5246=(cj5*x5243);
IkReal x5247=((1.0)*cj5*x5244);
IkReal x5248=((1.0)*sj5*x5244);
evalcond[0]=(((r20*x5245))+((r21*x5246))+((r22*x5244)));
evalcond[1]=(cj0+((r00*x5245))+((r01*x5246))+((r02*x5244)));
evalcond[2]=(((r10*x5245))+sj0+((r11*x5246))+((r12*x5244)));
evalcond[3]=((((-1.0)*r20*x5248))+(((-1.0)*r21*x5247))+((r22*x5243)));
evalcond[4]=((((-1.0)*r10*x5248))+cj0+(((-1.0)*r11*x5247))+((r12*x5243)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x5248))+(((-1.0)*r01*x5247))+((r02*x5243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5249=((1.0)*cj0);
CheckValue<IkReal> x5250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x5249))+(((-1.0)*r20*sj5*x5249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5250.valid){
continue;
}
CheckValue<IkReal> x5251=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5250.value)+(((1.5707963267949)*(x5251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5252=IKsin(j4);
IkReal x5253=IKcos(j4);
IkReal x5254=(sj5*x5252);
IkReal x5255=(cj5*x5252);
IkReal x5256=((1.0)*cj5*x5253);
IkReal x5257=((1.0)*sj5*x5253);
evalcond[0]=(((r22*x5253))+((r20*x5254))+((r21*x5255)));
evalcond[1]=(((r01*x5255))+cj0+((r00*x5254))+((r02*x5253)));
evalcond[2]=(((r10*x5254))+sj0+((r12*x5253))+((r11*x5255)));
evalcond[3]=((((-1.0)*r20*x5257))+((r22*x5252))+(((-1.0)*r21*x5256)));
evalcond[4]=(((r12*x5252))+cj0+(((-1.0)*r11*x5256))+(((-1.0)*r10*x5257)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5256))+(((-1.0)*r00*x5257))+((r02*x5252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))))+IKsqr(((((-6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))), ((((-6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5258=IKcos(j0);
IkReal x5259=IKsin(j0);
evalcond[0]=((((-0.00175)*x5259))+(((-1.0)*px))+(((-0.1445)*x5258)));
evalcond[1]=((((-1.0)*py))+(((-0.1445)*x5259))+(((0.00175)*x5258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5260=((1.0)*cj5);
IkReal x5261=(((r11*sj5))+(((-1.0)*r10*x5260)));
j4eval[0]=x5261;
j4eval[1]=IKsign(x5261);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x5260))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5262=((1.0)*sj5);
IkReal x5263=((((-1.0)*r01*x5262))+((cj5*r00)));
j4eval[0]=x5263;
j4eval[1]=IKsign(x5263);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x5262)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5264=cj5*cj5;
IkReal x5265=(r00*r20);
IkReal x5266=((1.0)*sj0);
IkReal x5267=(cj5*r21);
IkReal x5268=(r20*sj5);
IkReal x5269=(((cj5*r01*x5268))+x5265+(((-1.0)*x5264*x5265))+((r01*r21*x5264))+((r02*r22))+((r00*sj5*x5267)));
j4eval[0]=x5269;
j4eval[1]=IKsign(x5269);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5266*x5268))+(((-1.0)*x5266*x5267))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5270=cj5*cj5;
IkReal x5271=(r00*r20);
IkReal x5272=((1.0)*sj0);
IkReal x5273=(cj5*r21);
IkReal x5274=(r20*sj5);
CheckValue<IkReal> x5275=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5270*x5271))+((cj5*r01*x5274))+x5271+((r01*r21*x5270))+((r00*sj5*x5273))+((r02*r22)))),-1);
if(!x5275.valid){
continue;
}
CheckValue<IkReal> x5276 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*x5272*x5273))+(((-1.0)*x5272*x5274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5275.value)))+(x5276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5277=IKsin(j4);
IkReal x5278=IKcos(j4);
IkReal x5279=((1.0)*sj0);
IkReal x5280=(sj5*x5277);
IkReal x5281=(cj5*x5277);
IkReal x5282=((1.0)*cj5*x5278);
IkReal x5283=((1.0)*sj5*x5278);
evalcond[0]=(((r22*x5278))+((r21*x5281))+((r20*x5280)));
evalcond[1]=(((r22*x5277))+(((-1.0)*r21*x5282))+(((-1.0)*r20*x5283)));
evalcond[2]=(cj0+(((-1.0)*r11*x5282))+(((-1.0)*r10*x5283))+((r12*x5277)));
evalcond[3]=(((r02*x5278))+((r01*x5281))+((r00*x5280))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5279))+((r10*x5280))+((r11*x5281))+((r12*x5278)));
evalcond[5]=(((r02*x5277))+(((-1.0)*r01*x5282))+(((-1.0)*r00*x5283))+(((-1.0)*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5284=((1.0)*sj0);
CheckValue<IkReal> x5285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5285.valid){
continue;
}
CheckValue<IkReal> x5286 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x5284))+(((-1.0)*cj5*r21*x5284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5285.value)))+(x5286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5287=IKsin(j4);
IkReal x5288=IKcos(j4);
IkReal x5289=((1.0)*sj0);
IkReal x5290=(sj5*x5287);
IkReal x5291=(cj5*x5287);
IkReal x5292=((1.0)*cj5*x5288);
IkReal x5293=((1.0)*sj5*x5288);
evalcond[0]=(((r22*x5288))+((r21*x5291))+((r20*x5290)));
evalcond[1]=(((r22*x5287))+(((-1.0)*r20*x5293))+(((-1.0)*r21*x5292)));
evalcond[2]=(((r12*x5287))+cj0+(((-1.0)*r11*x5292))+(((-1.0)*r10*x5293)));
evalcond[3]=(((r02*x5288))+((r00*x5290))+((r01*x5291))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5288))+((r10*x5290))+(((-1.0)*x5289))+((r11*x5291)));
evalcond[5]=(((r02*x5287))+(((-1.0)*r00*x5293))+(((-1.0)*r01*x5292))+(((-1.0)*x5289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5294=((1.0)*cj0);
CheckValue<IkReal> x5295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x5294))+(((-1.0)*cj5*r21*x5294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5295.valid){
continue;
}
CheckValue<IkReal> x5296=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5295.value)+(((1.5707963267949)*(x5296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5297=IKsin(j4);
IkReal x5298=IKcos(j4);
IkReal x5299=((1.0)*sj0);
IkReal x5300=(sj5*x5297);
IkReal x5301=(cj5*x5297);
IkReal x5302=((1.0)*cj5*x5298);
IkReal x5303=((1.0)*sj5*x5298);
evalcond[0]=(((r21*x5301))+((r22*x5298))+((r20*x5300)));
evalcond[1]=(((r22*x5297))+(((-1.0)*r21*x5302))+(((-1.0)*r20*x5303)));
evalcond[2]=(((r12*x5297))+cj0+(((-1.0)*r11*x5302))+(((-1.0)*r10*x5303)));
evalcond[3]=(((r02*x5298))+((r01*x5301))+(((-1.0)*cj0))+((r00*x5300)));
evalcond[4]=(((r12*x5298))+(((-1.0)*x5299))+((r10*x5300))+((r11*x5301)));
evalcond[5]=(((r02*x5297))+(((-1.0)*r01*x5302))+(((-1.0)*r00*x5303))+(((-1.0)*x5299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5304=(r01*sj5);
IkReal x5305=(cj1*cj2);
IkReal x5306=(cj5*r00);
IkReal x5307=((4000.0)*px);
IkReal x5308=(sj1*sj2);
IkReal x5309=((578.0)*sj1);
IkReal x5310=((154.0)*cj1);
CheckValue<IkReal> x5311=IKPowWithIntegerCheck(((((7.0)*x5305))+(((-7.0)*x5308))),-1);
if(!x5311.valid){
continue;
}
CheckValue<IkReal> x5312=IKPowWithIntegerCheck((x5305+(((-1.0)*x5308))),-1);
if(!x5312.valid){
continue;
}
if( IKabs(((x5311.value)*(((((-1098.0)*x5306*x5308))+((x5306*x5309))+(((-1.0)*x5305*x5307))+(((-1.0)*x5304*x5310))+(((1098.0)*x5305*x5306))+(((1098.0)*x5304*x5308))+((x5307*x5308))+(((-1098.0)*x5304*x5305))+((x5306*x5310))+(((-1.0)*x5304*x5309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5312.value)*((x5306+(((-1.0)*x5304)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5311.value)*(((((-1098.0)*x5306*x5308))+((x5306*x5309))+(((-1.0)*x5305*x5307))+(((-1.0)*x5304*x5310))+(((1098.0)*x5305*x5306))+(((1098.0)*x5304*x5308))+((x5307*x5308))+(((-1098.0)*x5304*x5305))+((x5306*x5310))+(((-1.0)*x5304*x5309))))))+IKsqr(((x5312.value)*((x5306+(((-1.0)*x5304))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5311.value)*(((((-1098.0)*x5306*x5308))+((x5306*x5309))+(((-1.0)*x5305*x5307))+(((-1.0)*x5304*x5310))+(((1098.0)*x5305*x5306))+(((1098.0)*x5304*x5308))+((x5307*x5308))+(((-1098.0)*x5304*x5305))+((x5306*x5310))+(((-1.0)*x5304*x5309))))), ((x5312.value)*((x5306+(((-1.0)*x5304))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5313=IKcos(j0);
IkReal x5314=IKsin(j0);
IkReal x5315=(cj1*cj2);
IkReal x5316=((0.0385)*cj1);
IkReal x5317=((1.0)*cj5);
IkReal x5318=(r11*sj5);
IkReal x5319=((0.121)*cj5);
IkReal x5320=(r01*sj5);
IkReal x5321=(sj1*x5313);
IkReal x5322=(sj1*sj2*x5314);
evalcond[0]=(x5320+((x5313*x5315))+(((-1.0)*r00*x5317))+(((-1.0)*sj2*x5321)));
evalcond[1]=((((-1.0)*x5322))+x5318+((x5314*x5315))+(((-1.0)*r10*x5317)));
evalcond[2]=(((r00*x5319))+(((-0.00175)*x5314))+(((-0.121)*x5320))+(((-0.1535)*sj2*x5321))+((x5313*x5316))+(((0.1445)*x5321))+(((-1.0)*px))+(((0.1535)*x5313*x5315)));
evalcond[3]=((((-0.1535)*x5322))+(((0.1445)*sj1*x5314))+(((-0.121)*x5318))+(((-1.0)*py))+(((0.1535)*x5314*x5315))+((x5314*x5316))+((r10*x5319))+(((0.00175)*x5313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5323=((1.0)*cj5);
IkReal x5324=(((r01*sj5))+(((-1.0)*r00*x5323)));
j4eval[0]=x5324;
j4eval[1]=IKsign(x5324);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x5323)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5325=((1.0)*cj5);
IkReal x5326=(((r11*sj5))+(((-1.0)*r10*x5325)));
j4eval[0]=x5326;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*sj5))+(((-1.0)*r21*sj0*x5325))))));
j4eval[2]=IKsign(x5326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5327=((1.0)*sj0);
IkReal x5328=((1.0)*sj5);
IkReal x5329=((1.0)*cj0);
IkReal x5330=(((cj5*r20))+(((-1.0)*r21*x5328)));
j4eval[0]=x5330;
j4eval[1]=((IKabs(((((-1.0)*r02*x5329))+(((-1.0)*r12*x5327)))))+(IKabs(((((-1.0)*cj5*r11*x5327))+(((-1.0)*cj0*r00*x5328))+(((-1.0)*r10*sj5*x5327))+(((-1.0)*cj5*r01*x5329))))));
j4eval[2]=IKsign(x5330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5331=((-1.0)*r21);
IkReal x5333 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5333)==0){
continue;
}
IkReal x5332=pow(x5333,-0.5);
CheckValue<IkReal> x5334 = IKatan2WithCheck(IkReal(r20),IkReal(x5331),IKFAST_ATAN2_MAGTHRESH);
if(!x5334.valid){
continue;
}
IkReal gconst148=((-1.0)*(x5334.value));
IkReal gconst149=((-1.0)*r20*x5332);
IkReal gconst150=(x5331*x5332);
CheckValue<IkReal> x5335 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5335.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5335.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5336=((-1.0)*r21);
CheckValue<IkReal> x5339 = IKatan2WithCheck(IkReal(r20),IkReal(x5336),IKFAST_ATAN2_MAGTHRESH);
if(!x5339.valid){
continue;
}
IkReal x5337=((-1.0)*(x5339.value));
IkReal x5338=x5332;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst149;
cj5=gconst150;
j5=x5337;
IkReal gconst148=x5337;
IkReal gconst149=((-1.0)*r20*x5338);
IkReal gconst150=(x5336*x5338);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5340=((-1.0)*r21);
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal(r20),IkReal(x5340),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
IkReal x5341=((-1.0)*(x5343.value));
IkReal x5342=x5332;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst149;
cj5=gconst150;
j5=x5341;
IkReal gconst148=x5341;
IkReal gconst149=((-1.0)*r20*x5342);
IkReal gconst150=(x5340*x5342);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5344=((-1.0)*r21);
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(r20),IkReal(x5344),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
IkReal x5345=((-1.0)*(x5347.value));
IkReal x5346=x5332;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst149;
cj5=gconst150;
j5=x5345;
IkReal gconst148=x5345;
IkReal gconst149=((-1.0)*r20*x5346);
IkReal gconst150=(x5344*x5346);
IkReal x5348=r22*r22;
CheckValue<IkReal> x5351=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5348))),-1);
if(!x5351.valid){
continue;
}
IkReal x5349=x5351.value;
IkReal x5350=(x5348+((x5349*(r21*r21*r21*r21)))+(((2.0)*x5349*(r20*r20)*(r21*r21)))+((x5349*(r20*r20*r20*r20))));
j4eval[0]=x5350;
j4eval[1]=IKsign(x5350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5352=(cj1*cj2);
IkReal x5353=(gconst150*r21);
IkReal x5354=(gconst149*r20);
IkReal x5355=((1.0)*sj1*sj2);
CheckValue<IkReal> x5356=IKPowWithIntegerCheck(IKsign(((x5353*x5353)+(r22*r22)+(x5354*x5354)+(((2.0)*x5353*x5354)))),-1);
if(!x5356.valid){
continue;
}
CheckValue<IkReal> x5357 = IKatan2WithCheck(IkReal(((((-1.0)*x5353*x5355))+(((-1.0)*x5354*x5355))+((x5352*x5354))+((x5352*x5353)))),IkReal((((r22*x5352))+(((-1.0)*r22*x5355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5356.value)))+(x5357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5358=IKcos(j4);
IkReal x5359=IKsin(j4);
IkReal x5360=((1.0)*sj0);
IkReal x5361=((1.0)*cj2);
IkReal x5362=(cj1*sj2);
IkReal x5363=(gconst149*x5359);
IkReal x5364=(gconst150*x5359);
IkReal x5365=((1.0)*gconst150*x5358);
IkReal x5366=((1.0)*gconst149*x5358);
evalcond[0]=((((-1.0)*r21*x5365))+((r22*x5359))+(((-1.0)*r20*x5366)));
evalcond[1]=(cj0+(((-1.0)*r10*x5366))+((r12*x5359))+(((-1.0)*r11*x5365)));
evalcond[2]=(((r02*x5359))+(((-1.0)*r01*x5365))+(((-1.0)*r00*x5366))+(((-1.0)*x5360)));
evalcond[3]=(((sj1*sj2))+((r22*x5358))+((r21*x5364))+((r20*x5363))+(((-1.0)*cj1*x5361)));
evalcond[4]=((((-1.0)*cj0*x5362))+(((-1.0)*cj0*sj1*x5361))+((r02*x5358))+((r01*x5364))+((r00*x5363)));
evalcond[5]=((((-1.0)*x5360*x5362))+((r12*x5358))+((r10*x5363))+(((-1.0)*cj2*sj1*x5360))+((r11*x5364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5367=((1.0)*sj0);
CheckValue<IkReal> x5368 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*x5367))+(((-1.0)*gconst150*r21*x5367)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5368.valid){
continue;
}
CheckValue<IkReal> x5369=IKPowWithIntegerCheck(IKsign((((gconst149*r11))+(((-1.0)*gconst150*r10)))),-1);
if(!x5369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5368.value)+(((1.5707963267949)*(x5369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5370=IKcos(j4);
IkReal x5371=IKsin(j4);
IkReal x5372=((1.0)*sj0);
IkReal x5373=((1.0)*cj2);
IkReal x5374=(cj1*sj2);
IkReal x5375=(gconst149*x5371);
IkReal x5376=(gconst150*x5371);
IkReal x5377=((1.0)*gconst150*x5370);
IkReal x5378=((1.0)*gconst149*x5370);
evalcond[0]=(((r22*x5371))+(((-1.0)*r20*x5378))+(((-1.0)*r21*x5377)));
evalcond[1]=(cj0+(((-1.0)*r11*x5377))+((r12*x5371))+(((-1.0)*r10*x5378)));
evalcond[2]=((((-1.0)*x5372))+(((-1.0)*r00*x5378))+(((-1.0)*r01*x5377))+((r02*x5371)));
evalcond[3]=(((r21*x5376))+((r22*x5370))+((sj1*sj2))+(((-1.0)*cj1*x5373))+((r20*x5375)));
evalcond[4]=((((-1.0)*cj0*x5374))+((r02*x5370))+(((-1.0)*cj0*sj1*x5373))+((r00*x5375))+((r01*x5376)));
evalcond[5]=((((-1.0)*x5372*x5374))+((r12*x5370))+((r10*x5375))+(((-1.0)*cj2*sj1*x5372))+((r11*x5376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5379=((1.0)*cj0);
CheckValue<IkReal> x5380 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*x5379))+(((-1.0)*gconst150*r21*x5379)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5380.valid){
continue;
}
CheckValue<IkReal> x5381=IKPowWithIntegerCheck(IKsign((((gconst149*r01))+(((-1.0)*gconst150*r00)))),-1);
if(!x5381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5380.value)+(((1.5707963267949)*(x5381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5382=IKcos(j4);
IkReal x5383=IKsin(j4);
IkReal x5384=((1.0)*sj0);
IkReal x5385=((1.0)*cj2);
IkReal x5386=(cj1*sj2);
IkReal x5387=(gconst149*x5383);
IkReal x5388=(gconst150*x5383);
IkReal x5389=((1.0)*gconst150*x5382);
IkReal x5390=((1.0)*gconst149*x5382);
evalcond[0]=((((-1.0)*r21*x5389))+(((-1.0)*r20*x5390))+((r22*x5383)));
evalcond[1]=(cj0+((r12*x5383))+(((-1.0)*r10*x5390))+(((-1.0)*r11*x5389)));
evalcond[2]=(((r02*x5383))+(((-1.0)*x5384))+(((-1.0)*r01*x5389))+(((-1.0)*r00*x5390)));
evalcond[3]=(((sj1*sj2))+((r20*x5387))+(((-1.0)*cj1*x5385))+((r21*x5388))+((r22*x5382)));
evalcond[4]=((((-1.0)*cj0*x5386))+(((-1.0)*cj0*sj1*x5385))+((r02*x5382))+((r00*x5387))+((r01*x5388)));
evalcond[5]=(((r10*x5387))+(((-1.0)*x5384*x5386))+((r11*x5388))+((r12*x5382))+(((-1.0)*cj2*sj1*x5384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5393 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5393)==0){
continue;
}
IkReal x5391=pow(x5393,-0.5);
IkReal x5392=((1.0)*x5391);
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
IkReal gconst151=((3.14159265358979)+(((-1.0)*(x5394.value))));
IkReal gconst152=(r20*x5392);
IkReal gconst153=(r21*x5392);
CheckValue<IkReal> x5395 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5395.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5395.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5399 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5399.valid){
continue;
}
IkReal x5396=((1.0)*(x5399.value));
IkReal x5397=x5391;
IkReal x5398=((1.0)*x5397);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x5396)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x5396)));
IkReal gconst152=(r20*x5398);
IkReal gconst153=(r21*x5398);
IkReal x5400=r22*r22;
IkReal x5401=((1.0)*x5400);
CheckValue<IkReal> x5405=IKPowWithIntegerCheck(((-1.0)+x5400),-1);
if(!x5405.valid){
continue;
}
IkReal x5402=x5405.value;
if((((1.0)+(((-1.0)*x5401)))) < -0.00001)
continue;
IkReal x5403=IKsqrt(((1.0)+(((-1.0)*x5401))));
IkReal x5404=(cj0*x5402*x5403);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5404+(((-1.0)*x5401*x5404))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5409 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
IkReal x5406=((1.0)*(x5409.value));
IkReal x5407=x5391;
IkReal x5408=((1.0)*x5407);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x5406)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x5406)));
IkReal gconst152=(r20*x5408);
IkReal gconst153=(r21*x5408);
IkReal x5410=r22*r22;
IkReal x5411=((1.0)*x5410);
CheckValue<IkReal> x5415=IKPowWithIntegerCheck(((-1.0)+x5410),-1);
if(!x5415.valid){
continue;
}
IkReal x5412=x5415.value;
if((((1.0)+(((-1.0)*x5411)))) < -0.00001)
continue;
IkReal x5413=IKsqrt(((1.0)+(((-1.0)*x5411))));
IkReal x5414=(sj0*x5412*x5413);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5414+(((-1.0)*x5411*x5414))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5419 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5419.valid){
continue;
}
IkReal x5416=((1.0)*(x5419.value));
IkReal x5417=x5391;
IkReal x5418=((1.0)*x5417);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x5416)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x5416)));
IkReal gconst152=(r20*x5418);
IkReal gconst153=(r21*x5418);
IkReal x5420=r22*r22;
IkReal x5421=((1.0)*r12*sj0);
IkReal x5422=((1.0)*cj0*r02);
CheckValue<IkReal> x5426=IKPowWithIntegerCheck(((-1.0)+x5420),-1);
if(!x5426.valid){
continue;
}
IkReal x5423=x5426.value;
if((((1.0)+(((-1.0)*x5420)))) < -0.00001)
continue;
IkReal x5424=IKsqrt(((1.0)+(((-1.0)*x5420))));
IkReal x5425=(r22*x5423*x5424);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5422*x5425))+(((-1.0)*x5421*x5425)))))+(IKabs(((((-1.0)*x5422))+(((-1.0)*x5421))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5427=((1.0)*sj0);
IkReal x5428=((1.0)*cj0);
CheckValue<IkReal> x5429=IKPowWithIntegerCheck(IKsign((((gconst153*r20))+(((-1.0)*gconst152*r21)))),-1);
if(!x5429.valid){
continue;
}
CheckValue<IkReal> x5430 = IKatan2WithCheck(IkReal(((((-1.0)*gconst153*r11*x5427))+(((-1.0)*gconst152*r00*x5428))+(((-1.0)*gconst153*r01*x5428))+(((-1.0)*gconst152*r10*x5427)))),IkReal(((((-1.0)*r02*x5428))+(((-1.0)*r12*x5427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5429.value)))+(x5430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5431=IKcos(j4);
IkReal x5432=IKsin(j4);
IkReal x5433=(gconst152*r10);
IkReal x5434=((1.0)*cj2);
IkReal x5435=(gconst152*r20);
IkReal x5436=((1.0)*sj0);
IkReal x5437=(cj1*sj2);
IkReal x5438=(gconst152*r00);
IkReal x5439=((1.0)*x5431);
IkReal x5440=(gconst153*x5432);
evalcond[0]=(((r22*x5432))+(((-1.0)*gconst153*r21*x5439))+(((-1.0)*x5435*x5439)));
evalcond[1]=(cj0+(((-1.0)*x5433*x5439))+(((-1.0)*gconst153*r11*x5439))+((r12*x5432)));
evalcond[2]=((((-1.0)*gconst153*r01*x5439))+(((-1.0)*x5438*x5439))+((r02*x5432))+(((-1.0)*x5436)));
evalcond[3]=(((r22*x5431))+(((-1.0)*cj1*x5434))+((sj1*sj2))+((r21*x5440))+((x5432*x5435)));
evalcond[4]=((((-1.0)*cj0*sj1*x5434))+((r02*x5431))+((r01*x5440))+((x5432*x5438))+(((-1.0)*cj0*x5437)));
evalcond[5]=((((-1.0)*sj0*sj1*x5434))+(((-1.0)*x5436*x5437))+((r11*x5440))+((x5432*x5433))+((r12*x5431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5441=((1.0)*gconst153);
CheckValue<IkReal> x5442 = IKatan2WithCheck(IkReal(((((-1.0)*gconst152*r20*sj0))+(((-1.0)*r21*sj0*x5441)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5442.valid){
continue;
}
CheckValue<IkReal> x5443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5441))+((gconst152*r11)))),-1);
if(!x5443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5442.value)+(((1.5707963267949)*(x5443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5444=IKcos(j4);
IkReal x5445=IKsin(j4);
IkReal x5446=(gconst152*r10);
IkReal x5447=((1.0)*cj2);
IkReal x5448=(gconst152*r20);
IkReal x5449=((1.0)*sj0);
IkReal x5450=(cj1*sj2);
IkReal x5451=(gconst152*r00);
IkReal x5452=((1.0)*x5444);
IkReal x5453=(gconst153*x5445);
evalcond[0]=((((-1.0)*gconst153*r21*x5452))+(((-1.0)*x5448*x5452))+((r22*x5445)));
evalcond[1]=(cj0+(((-1.0)*gconst153*r11*x5452))+((r12*x5445))+(((-1.0)*x5446*x5452)));
evalcond[2]=((((-1.0)*x5451*x5452))+(((-1.0)*gconst153*r01*x5452))+(((-1.0)*x5449))+((r02*x5445)));
evalcond[3]=(((r21*x5453))+(((-1.0)*cj1*x5447))+((sj1*sj2))+((x5445*x5448))+((r22*x5444)));
evalcond[4]=((((-1.0)*cj0*sj1*x5447))+((r01*x5453))+(((-1.0)*cj0*x5450))+((r02*x5444))+((x5445*x5451)));
evalcond[5]=((((-1.0)*sj0*sj1*x5447))+((x5445*x5446))+((r12*x5444))+(((-1.0)*x5449*x5450))+((r11*x5453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5454=((1.0)*cj0);
CheckValue<IkReal> x5455=IKPowWithIntegerCheck(IKsign((((gconst152*r01))+(((-1.0)*gconst153*r00)))),-1);
if(!x5455.valid){
continue;
}
CheckValue<IkReal> x5456 = IKatan2WithCheck(IkReal(((((-1.0)*gconst152*r20*x5454))+(((-1.0)*gconst153*r21*x5454)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5455.value)))+(x5456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5457=IKcos(j4);
IkReal x5458=IKsin(j4);
IkReal x5459=(gconst152*r10);
IkReal x5460=((1.0)*cj2);
IkReal x5461=(gconst152*r20);
IkReal x5462=((1.0)*sj0);
IkReal x5463=(cj1*sj2);
IkReal x5464=(gconst152*r00);
IkReal x5465=((1.0)*x5457);
IkReal x5466=(gconst153*x5458);
evalcond[0]=(((r22*x5458))+(((-1.0)*x5461*x5465))+(((-1.0)*gconst153*r21*x5465)));
evalcond[1]=((((-1.0)*x5459*x5465))+((r12*x5458))+cj0+(((-1.0)*gconst153*r11*x5465)));
evalcond[2]=((((-1.0)*x5464*x5465))+(((-1.0)*gconst153*r01*x5465))+((r02*x5458))+(((-1.0)*x5462)));
evalcond[3]=((((-1.0)*cj1*x5460))+((x5458*x5461))+((r22*x5457))+((sj1*sj2))+((r21*x5466)));
evalcond[4]=(((r01*x5466))+(((-1.0)*cj0*x5463))+(((-1.0)*cj0*sj1*x5460))+((x5458*x5464))+((r02*x5457)));
evalcond[5]=(((r12*x5457))+((r11*x5466))+((x5458*x5459))+(((-1.0)*sj0*sj1*x5460))+(((-1.0)*x5462*x5463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5468 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5468)==0){
continue;
}
IkReal x5467=pow(x5468,-0.5);
CheckValue<IkReal> x5469 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5469.valid){
continue;
}
IkReal gconst154=((-1.0)*(x5469.value));
IkReal gconst155=(r10*x5467);
IkReal gconst156=(r11*x5467);
CheckValue<IkReal> x5470 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5470.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5470.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5473 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5473.valid){
continue;
}
IkReal x5471=((-1.0)*(x5473.value));
IkReal x5472=x5467;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst155;
cj5=gconst156;
j5=x5471;
IkReal gconst154=x5471;
IkReal gconst155=(r10*x5472);
IkReal gconst156=(r11*x5472);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5474=((1.0)*sj0);
IkReal x5475=((1.0)*cj0);
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal(((((-1.0)*gconst156*r11*x5474))+(((-1.0)*gconst156*r01*x5475))+(((-1.0)*gconst155*r10*x5474))+(((-1.0)*gconst155*r00*x5475)))),IkReal(((((-1.0)*r12*x5474))+(((-1.0)*r02*x5475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
CheckValue<IkReal> x5477=IKPowWithIntegerCheck(IKsign((((gconst156*r20))+(((-1.0)*gconst155*r21)))),-1);
if(!x5477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5476.value)+(((1.5707963267949)*(x5477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5478=IKcos(j4);
IkReal x5479=IKsin(j4);
IkReal x5480=(gconst156*r11);
IkReal x5481=((1.0)*cj2);
IkReal x5482=(gconst156*r21);
IkReal x5483=((1.0)*sj0);
IkReal x5484=(gconst156*r01);
IkReal x5485=(cj1*sj2);
IkReal x5486=((1.0)*x5478);
IkReal x5487=(gconst155*x5479);
IkReal x5488=(gconst155*x5486);
evalcond[0]=((((-1.0)*r20*x5488))+((r22*x5479))+(((-1.0)*x5482*x5486)));
evalcond[1]=((((-1.0)*r10*x5488))+cj0+((r12*x5479))+(((-1.0)*x5480*x5486)));
evalcond[2]=((((-1.0)*x5483))+(((-1.0)*x5484*x5486))+(((-1.0)*r00*x5488))+((r02*x5479)));
evalcond[3]=(((r20*x5487))+((sj1*sj2))+((x5479*x5482))+(((-1.0)*cj1*x5481))+((r22*x5478)));
evalcond[4]=(((r00*x5487))+(((-1.0)*cj0*x5485))+((x5479*x5484))+(((-1.0)*cj0*sj1*x5481))+((r02*x5478)));
evalcond[5]=((((-1.0)*sj0*sj1*x5481))+(((-1.0)*x5483*x5485))+((x5479*x5480))+((r12*x5478))+((r10*x5487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5489=((1.0)*gconst156);
CheckValue<IkReal> x5490 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x5489))+(((-1.0)*cj0*gconst155*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5490.valid){
continue;
}
CheckValue<IkReal> x5491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5489))+((gconst155*r01)))),-1);
if(!x5491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5490.value)+(((1.5707963267949)*(x5491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5492=IKcos(j4);
IkReal x5493=IKsin(j4);
IkReal x5494=(gconst156*r11);
IkReal x5495=((1.0)*cj2);
IkReal x5496=(gconst156*r21);
IkReal x5497=((1.0)*sj0);
IkReal x5498=(gconst156*r01);
IkReal x5499=(cj1*sj2);
IkReal x5500=((1.0)*x5492);
IkReal x5501=(gconst155*x5493);
IkReal x5502=(gconst155*x5500);
evalcond[0]=((((-1.0)*x5496*x5500))+(((-1.0)*r20*x5502))+((r22*x5493)));
evalcond[1]=((((-1.0)*r10*x5502))+cj0+((r12*x5493))+(((-1.0)*x5494*x5500)));
evalcond[2]=((((-1.0)*x5497))+(((-1.0)*r00*x5502))+(((-1.0)*x5498*x5500))+((r02*x5493)));
evalcond[3]=(((r20*x5501))+((x5493*x5496))+((sj1*sj2))+(((-1.0)*cj1*x5495))+((r22*x5492)));
evalcond[4]=((((-1.0)*cj0*sj1*x5495))+(((-1.0)*cj0*x5499))+((x5493*x5498))+((r00*x5501))+((r02*x5492)));
evalcond[5]=(((r10*x5501))+(((-1.0)*sj0*sj1*x5495))+((r12*x5492))+((x5493*x5494))+(((-1.0)*x5497*x5499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5505 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5505)==0){
continue;
}
IkReal x5503=pow(x5505,-0.5);
IkReal x5504=((-1.0)*x5503);
CheckValue<IkReal> x5506 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5506.valid){
continue;
}
IkReal gconst157=((3.14159265358979)+(((-1.0)*(x5506.value))));
IkReal gconst158=(r10*x5504);
IkReal gconst159=(r11*x5504);
CheckValue<IkReal> x5507 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5507.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5507.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5511 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5511.valid){
continue;
}
IkReal x5508=((1.0)*(x5511.value));
IkReal x5509=x5503;
IkReal x5510=((-1.0)*x5509);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x5508)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x5508)));
IkReal gconst158=(r10*x5510);
IkReal gconst159=(r11*x5510);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5515 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5515.valid){
continue;
}
IkReal x5512=((1.0)*(x5515.value));
IkReal x5513=x5503;
IkReal x5514=((-1.0)*x5513);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x5512)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x5512)));
IkReal gconst158=(r10*x5514);
IkReal gconst159=(r11*x5514);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5519 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5519.valid){
continue;
}
IkReal x5516=((1.0)*(x5519.value));
IkReal x5517=x5503;
IkReal x5518=((-1.0)*x5517);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x5516)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x5516)));
IkReal gconst158=(r10*x5518);
IkReal gconst159=(r11*x5518);
IkReal x5520=r12*r12;
IkReal x5521=((1.0)*sj0);
IkReal x5522=(cj0*r02);
IkReal x5523=x5503;
j4eval[0]=((IKabs((((sj0*x5520*x5523))+((r12*x5522*x5523))+(((-1.0)*x5521*x5523)))))+(IKabs(((((-1.0)*x5522))+(((-1.0)*r12*x5521))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5524=((1.0)*sj0);
IkReal x5525=((1.0)*gconst158);
IkReal x5526=((1.0)*cj0);
CheckValue<IkReal> x5527 = IKatan2WithCheck(IkReal(((((-1.0)*gconst159*r01*x5526))+(((-1.0)*cj0*r00*x5525))+(((-1.0)*gconst159*r11*x5524))+(((-1.0)*gconst158*r10*x5524)))),IkReal(((((-1.0)*r02*x5526))+(((-1.0)*r12*x5524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5527.valid){
continue;
}
CheckValue<IkReal> x5528=IKPowWithIntegerCheck(IKsign((((gconst159*r20))+(((-1.0)*r21*x5525)))),-1);
if(!x5528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5527.value)+(((1.5707963267949)*(x5528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5529=IKcos(j4);
IkReal x5530=IKsin(j4);
IkReal x5531=(gconst159*r11);
IkReal x5532=((1.0)*cj2);
IkReal x5533=((1.0)*sj0);
IkReal x5534=(cj1*sj2);
IkReal x5535=(gconst158*x5530);
IkReal x5536=((1.0)*x5529);
IkReal x5537=(gconst159*x5530);
evalcond[0]=((((-1.0)*gconst159*r21*x5536))+((r22*x5530))+(((-1.0)*gconst158*r20*x5536)));
evalcond[1]=(cj0+(((-1.0)*x5531*x5536))+((r12*x5530))+(((-1.0)*gconst158*r10*x5536)));
evalcond[2]=((((-1.0)*x5533))+(((-1.0)*gconst159*r01*x5536))+(((-1.0)*gconst158*r00*x5536))+((r02*x5530)));
evalcond[3]=(((r22*x5529))+((sj1*sj2))+((r21*x5537))+(((-1.0)*cj1*x5532))+((r20*x5535)));
evalcond[4]=(((r02*x5529))+(((-1.0)*cj0*x5534))+((r01*x5537))+((r00*x5535))+(((-1.0)*cj0*sj1*x5532)));
evalcond[5]=(((x5530*x5531))+(((-1.0)*sj0*sj1*x5532))+((r10*x5535))+((r12*x5529))+(((-1.0)*x5533*x5534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5538=((1.0)*gconst159);
CheckValue<IkReal> x5539 = IKatan2WithCheck(IkReal(((((-1.0)*gconst158*r20*sj0))+(((-1.0)*r21*sj0*x5538)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5539.valid){
continue;
}
CheckValue<IkReal> x5540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5538))+((gconst158*r11)))),-1);
if(!x5540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5539.value)+(((1.5707963267949)*(x5540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5541=IKcos(j4);
IkReal x5542=IKsin(j4);
IkReal x5543=(gconst159*r11);
IkReal x5544=((1.0)*cj2);
IkReal x5545=((1.0)*sj0);
IkReal x5546=(cj1*sj2);
IkReal x5547=(gconst158*x5542);
IkReal x5548=((1.0)*x5541);
IkReal x5549=(gconst159*x5542);
evalcond[0]=((((-1.0)*gconst158*r20*x5548))+(((-1.0)*gconst159*r21*x5548))+((r22*x5542)));
evalcond[1]=((((-1.0)*x5543*x5548))+((r12*x5542))+cj0+(((-1.0)*gconst158*r10*x5548)));
evalcond[2]=((((-1.0)*gconst159*r01*x5548))+(((-1.0)*gconst158*r00*x5548))+((r02*x5542))+(((-1.0)*x5545)));
evalcond[3]=((((-1.0)*cj1*x5544))+((sj1*sj2))+((r20*x5547))+((r22*x5541))+((r21*x5549)));
evalcond[4]=(((r00*x5547))+((r02*x5541))+(((-1.0)*cj0*sj1*x5544))+(((-1.0)*cj0*x5546))+((r01*x5549)));
evalcond[5]=(((x5542*x5543))+(((-1.0)*x5545*x5546))+((r12*x5541))+((r10*x5547))+(((-1.0)*sj0*sj1*x5544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5550=((1.0)*cj0);
CheckValue<IkReal> x5551=IKPowWithIntegerCheck(IKsign((((gconst158*r01))+(((-1.0)*gconst159*r00)))),-1);
if(!x5551.valid){
continue;
}
CheckValue<IkReal> x5552 = IKatan2WithCheck(IkReal(((((-1.0)*gconst158*r20*x5550))+(((-1.0)*gconst159*r21*x5550)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5551.value)))+(x5552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5553=IKcos(j4);
IkReal x5554=IKsin(j4);
IkReal x5555=(gconst159*r11);
IkReal x5556=((1.0)*cj2);
IkReal x5557=((1.0)*sj0);
IkReal x5558=(cj1*sj2);
IkReal x5559=(gconst158*x5554);
IkReal x5560=((1.0)*x5553);
IkReal x5561=(gconst159*x5554);
evalcond[0]=((((-1.0)*gconst159*r21*x5560))+((r22*x5554))+(((-1.0)*gconst158*r20*x5560)));
evalcond[1]=(cj0+(((-1.0)*x5555*x5560))+((r12*x5554))+(((-1.0)*gconst158*r10*x5560)));
evalcond[2]=((((-1.0)*gconst159*r01*x5560))+((r02*x5554))+(((-1.0)*gconst158*r00*x5560))+(((-1.0)*x5557)));
evalcond[3]=((((-1.0)*cj1*x5556))+((r20*x5559))+((sj1*sj2))+((r21*x5561))+((r22*x5553)));
evalcond[4]=(((r00*x5559))+(((-1.0)*cj0*x5558))+(((-1.0)*cj0*sj1*x5556))+((r02*x5553))+((r01*x5561)));
evalcond[5]=(((x5554*x5555))+((r12*x5553))+(((-1.0)*sj0*sj1*x5556))+((r10*x5559))+(((-1.0)*x5557*x5558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5562=((1.0)*cj5);
IkReal x5563=(((r01*sj5))+(((-1.0)*r00*x5562)));
j4eval[0]=x5563;
j4eval[1]=IKsign(x5563);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x5562))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5564=((1.0)*sj5);
IkReal x5565=(((cj5*r20))+(((-1.0)*r21*x5564)));
j4eval[0]=x5565;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5564))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x5565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5566=(cj1*cj2);
IkReal x5567=(r10*sj5);
IkReal x5568=(sj1*sj2);
IkReal x5569=(cj5*r11);
IkReal x5570=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5570;
j4eval[1]=IKsign(x5570);
j4eval[2]=((IKabs((((x5566*x5567))+((x5566*x5569))+(((-1.0)*x5567*x5568))+(((-1.0)*x5568*x5569)))))+(IKabs(((((-1.0)*r12*x5566))+((r12*x5568))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5571=(cj1*cj2);
IkReal x5572=(r10*sj5);
IkReal x5573=(cj5*r11);
IkReal x5574=(sj1*sj2);
CheckValue<IkReal> x5575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5575.valid){
continue;
}
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5571))+((r12*x5574)))),IkReal(((((-1.0)*x5573*x5574))+(((-1.0)*x5572*x5574))+((x5571*x5572))+((x5571*x5573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5575.value)))+(x5576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5577=IKsin(j4);
IkReal x5578=IKcos(j4);
IkReal x5579=(r20*sj5);
IkReal x5580=((1.0)*cj2);
IkReal x5581=(r00*sj5);
IkReal x5582=(cj5*r21);
IkReal x5583=(cj5*r01);
IkReal x5584=(r10*sj5);
IkReal x5585=(cj5*r11);
IkReal x5586=((1.0)*x5578);
evalcond[0]=(((r12*x5578))+((x5577*x5585))+((x5577*x5584)));
evalcond[1]=((((-1.0)*x5579*x5586))+((r22*x5577))+(((-1.0)*x5582*x5586)));
evalcond[2]=(((r02*x5577))+(((-1.0)*x5583*x5586))+(((-1.0)*x5581*x5586)));
evalcond[3]=((1.0)+(((-1.0)*x5585*x5586))+((r12*x5577))+(((-1.0)*x5584*x5586)));
evalcond[4]=(((x5577*x5579))+((sj1*sj2))+((r22*x5578))+(((-1.0)*cj1*x5580))+((x5577*x5582)));
evalcond[5]=((((-1.0)*sj1*x5580))+((r02*x5578))+(((-1.0)*cj1*sj2))+((x5577*x5583))+((x5577*x5581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5587=((1.0)*sj5);
CheckValue<IkReal> x5588=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x5587)))),-1);
if(!x5588.valid){
continue;
}
CheckValue<IkReal> x5589 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5587))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5588.value)))+(x5589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5590=IKsin(j4);
IkReal x5591=IKcos(j4);
IkReal x5592=(r20*sj5);
IkReal x5593=((1.0)*cj2);
IkReal x5594=(r00*sj5);
IkReal x5595=(cj5*r21);
IkReal x5596=(cj5*r01);
IkReal x5597=(r10*sj5);
IkReal x5598=(cj5*r11);
IkReal x5599=((1.0)*x5591);
evalcond[0]=(((x5590*x5598))+((x5590*x5597))+((r12*x5591)));
evalcond[1]=((((-1.0)*x5595*x5599))+(((-1.0)*x5592*x5599))+((r22*x5590)));
evalcond[2]=(((r02*x5590))+(((-1.0)*x5594*x5599))+(((-1.0)*x5596*x5599)));
evalcond[3]=((1.0)+((r12*x5590))+(((-1.0)*x5598*x5599))+(((-1.0)*x5597*x5599)));
evalcond[4]=(((x5590*x5592))+((x5590*x5595))+((sj1*sj2))+(((-1.0)*cj1*x5593))+((r22*x5591)));
evalcond[5]=(((x5590*x5594))+((x5590*x5596))+(((-1.0)*cj1*sj2))+((r02*x5591))+(((-1.0)*sj1*x5593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5600=((1.0)*cj5);
CheckValue<IkReal> x5601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5600))+((r01*sj5)))),-1);
if(!x5601.valid){
continue;
}
CheckValue<IkReal> x5602 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5600))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5601.value)))+(x5602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5603=IKsin(j4);
IkReal x5604=IKcos(j4);
IkReal x5605=(r20*sj5);
IkReal x5606=((1.0)*cj2);
IkReal x5607=(r00*sj5);
IkReal x5608=(cj5*r21);
IkReal x5609=(cj5*r01);
IkReal x5610=(r10*sj5);
IkReal x5611=(cj5*r11);
IkReal x5612=((1.0)*x5604);
evalcond[0]=(((x5603*x5610))+((x5603*x5611))+((r12*x5604)));
evalcond[1]=((((-1.0)*x5608*x5612))+(((-1.0)*x5605*x5612))+((r22*x5603)));
evalcond[2]=((((-1.0)*x5609*x5612))+((r02*x5603))+(((-1.0)*x5607*x5612)));
evalcond[3]=((1.0)+((r12*x5603))+(((-1.0)*x5610*x5612))+(((-1.0)*x5611*x5612)));
evalcond[4]=(((x5603*x5605))+((x5603*x5608))+((sj1*sj2))+(((-1.0)*cj1*x5606))+((r22*x5604)));
evalcond[5]=(((r02*x5604))+((x5603*x5607))+((x5603*x5609))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5613=((1.0)*sj5);
IkReal x5614=((((-1.0)*r01*x5613))+((cj5*r00)));
j4eval[0]=x5614;
j4eval[1]=IKsign(x5614);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5613))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5615=((1.0)*cj5);
IkReal x5616=(((r21*sj5))+(((-1.0)*r20*x5615)));
j4eval[0]=x5616;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5615))+(((-1.0)*r00*sj5))))));
j4eval[2]=IKsign(x5616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5617=cj5*cj5;
IkReal x5618=r10*r10;
IkReal x5619=(cj5*r11);
IkReal x5620=(r10*sj5);
IkReal x5621=(x5618+(r12*r12)+(((2.0)*x5619*x5620))+((x5617*(r11*r11)))+(((-1.0)*x5617*x5618)));
j4eval[0]=x5621;
j4eval[1]=IKsign(x5621);
j4eval[2]=((IKabs(((((-1.0)*x5619))+(((-1.0)*x5620)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5622=cj5*cj5;
IkReal x5623=r10*r10;
IkReal x5624=(cj5*r11);
IkReal x5625=(r10*sj5);
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5625))+(((-1.0)*x5624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
CheckValue<IkReal> x5627=IKPowWithIntegerCheck(IKsign((x5623+(r12*r12)+((x5622*(r11*r11)))+(((-1.0)*x5622*x5623))+(((2.0)*x5624*x5625)))),-1);
if(!x5627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5626.value)+(((1.5707963267949)*(x5627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5628=IKsin(j4);
IkReal x5629=IKcos(j4);
IkReal x5630=(r20*sj5);
IkReal x5631=(r00*sj5);
IkReal x5632=(cj5*r21);
IkReal x5633=(cj5*r01);
IkReal x5634=(r10*sj5);
IkReal x5635=(cj5*r11);
IkReal x5636=((1.0)*x5629);
evalcond[0]=(((x5628*x5634))+((x5628*x5635))+((r12*x5629)));
evalcond[1]=((((-1.0)*x5632*x5636))+(((-1.0)*x5630*x5636))+((r22*x5628)));
evalcond[2]=((((-1.0)*x5633*x5636))+((r02*x5628))+(((-1.0)*x5631*x5636)));
evalcond[3]=((-1.0)+(((-1.0)*x5635*x5636))+((r12*x5628))+(((-1.0)*x5634*x5636)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x5629))+((x5628*x5633))+((x5628*x5631)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x5628*x5632))+((x5628*x5630))+((sj1*sj2))+((r22*x5629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5637=((1.0)*cj5);
CheckValue<IkReal> x5638=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x5637)))),-1);
if(!x5638.valid){
continue;
}
CheckValue<IkReal> x5639 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5637)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5638.value)))+(x5639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5640=IKsin(j4);
IkReal x5641=IKcos(j4);
IkReal x5642=(r20*sj5);
IkReal x5643=(r00*sj5);
IkReal x5644=(cj5*r21);
IkReal x5645=(cj5*r01);
IkReal x5646=(r10*sj5);
IkReal x5647=(cj5*r11);
IkReal x5648=((1.0)*x5641);
evalcond[0]=(((r12*x5641))+((x5640*x5646))+((x5640*x5647)));
evalcond[1]=((((-1.0)*x5642*x5648))+(((-1.0)*x5644*x5648))+((r22*x5640)));
evalcond[2]=((((-1.0)*x5645*x5648))+(((-1.0)*x5643*x5648))+((r02*x5640)));
evalcond[3]=((-1.0)+(((-1.0)*x5646*x5648))+(((-1.0)*x5647*x5648))+((r12*x5640)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5640*x5645))+((x5640*x5643))+((r02*x5641)));
evalcond[5]=(((x5640*x5642))+((x5640*x5644))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5649=((1.0)*sj5);
CheckValue<IkReal> x5650 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5649))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5650.valid){
continue;
}
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5649))+((cj5*r00)))),-1);
if(!x5651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5650.value)+(((1.5707963267949)*(x5651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5652=IKsin(j4);
IkReal x5653=IKcos(j4);
IkReal x5654=(r20*sj5);
IkReal x5655=(r00*sj5);
IkReal x5656=(cj5*r21);
IkReal x5657=(cj5*r01);
IkReal x5658=(r10*sj5);
IkReal x5659=(cj5*r11);
IkReal x5660=((1.0)*x5653);
evalcond[0]=(((x5652*x5659))+((x5652*x5658))+((r12*x5653)));
evalcond[1]=((((-1.0)*x5656*x5660))+((r22*x5652))+(((-1.0)*x5654*x5660)));
evalcond[2]=((((-1.0)*x5657*x5660))+(((-1.0)*x5655*x5660))+((r02*x5652)));
evalcond[3]=((-1.0)+(((-1.0)*x5659*x5660))+((r12*x5652))+(((-1.0)*x5658*x5660)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5652*x5657))+((x5652*x5655))+((r02*x5653)));
evalcond[5]=(((x5652*x5656))+((x5652*x5654))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5662 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5662)==0){
continue;
}
IkReal x5661=pow(x5662,-0.5);
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
IkReal gconst160=((-1.0)*(x5663.value));
IkReal gconst161=(r00*x5661);
IkReal gconst162=(r01*x5661);
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5664.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5667 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5667.valid){
continue;
}
IkReal x5665=((-1.0)*(x5667.value));
IkReal x5666=x5661;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst161;
cj5=gconst162;
j5=x5665;
IkReal gconst160=x5665;
IkReal gconst161=(r00*x5666);
IkReal gconst162=(r01*x5666);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5668=((1.0)*sj0);
IkReal x5669=((1.0)*cj0);
CheckValue<IkReal> x5670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst161*r21))+((gconst162*r20)))),-1);
if(!x5670.valid){
continue;
}
CheckValue<IkReal> x5671 = IKatan2WithCheck(IkReal(((((-1.0)*gconst162*r11*x5668))+(((-1.0)*gconst162*r01*x5669))+(((-1.0)*gconst161*r00*x5669))+(((-1.0)*gconst161*r10*x5668)))),IkReal(((((-1.0)*r02*x5669))+(((-1.0)*r12*x5668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5670.value)))+(x5671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5672=IKcos(j4);
IkReal x5673=IKsin(j4);
IkReal x5674=(gconst162*r01);
IkReal x5675=(gconst162*r11);
IkReal x5676=((1.0)*cj2);
IkReal x5677=((1.0)*sj0);
IkReal x5678=(gconst162*r21);
IkReal x5679=(cj1*sj2);
IkReal x5680=((1.0)*x5672);
IkReal x5681=(gconst161*x5673);
evalcond[0]=((((-1.0)*x5678*x5680))+(((-1.0)*gconst161*r20*x5680))+((r22*x5673)));
evalcond[1]=((((-1.0)*gconst161*r10*x5680))+cj0+(((-1.0)*x5675*x5680))+((r12*x5673)));
evalcond[2]=(((r02*x5673))+(((-1.0)*x5674*x5680))+(((-1.0)*gconst161*r00*x5680))+(((-1.0)*x5677)));
evalcond[3]=(((sj1*sj2))+((x5673*x5678))+((r20*x5681))+((r22*x5672))+(((-1.0)*cj1*x5676)));
evalcond[4]=(((r02*x5672))+(((-1.0)*cj0*sj1*x5676))+((x5673*x5674))+(((-1.0)*cj0*x5679))+((r00*x5681)));
evalcond[5]=(((x5673*x5675))+((r12*x5672))+((r10*x5681))+(((-1.0)*sj0*sj1*x5676))+(((-1.0)*x5677*x5679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5682=((1.0)*gconst162);
CheckValue<IkReal> x5683 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x5682))+(((-1.0)*gconst161*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5683.valid){
continue;
}
CheckValue<IkReal> x5684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5682))+((gconst161*r11)))),-1);
if(!x5684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5683.value)+(((1.5707963267949)*(x5684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5685=IKcos(j4);
IkReal x5686=IKsin(j4);
IkReal x5687=(gconst162*r01);
IkReal x5688=(gconst162*r11);
IkReal x5689=((1.0)*cj2);
IkReal x5690=((1.0)*sj0);
IkReal x5691=(gconst162*r21);
IkReal x5692=(cj1*sj2);
IkReal x5693=((1.0)*x5685);
IkReal x5694=(gconst161*x5686);
evalcond[0]=((((-1.0)*x5691*x5693))+((r22*x5686))+(((-1.0)*gconst161*r20*x5693)));
evalcond[1]=(cj0+((r12*x5686))+(((-1.0)*x5688*x5693))+(((-1.0)*gconst161*r10*x5693)));
evalcond[2]=((((-1.0)*x5690))+((r02*x5686))+(((-1.0)*x5687*x5693))+(((-1.0)*gconst161*r00*x5693)));
evalcond[3]=(((x5686*x5691))+((r22*x5685))+((sj1*sj2))+((r20*x5694))+(((-1.0)*cj1*x5689)));
evalcond[4]=((((-1.0)*cj0*sj1*x5689))+((x5686*x5687))+((r02*x5685))+(((-1.0)*cj0*x5692))+((r00*x5694)));
evalcond[5]=((((-1.0)*x5690*x5692))+((x5686*x5688))+(((-1.0)*sj0*sj1*x5689))+((r12*x5685))+((r10*x5694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5695=((-1.0)*r00);
IkReal x5697 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5697)==0){
continue;
}
IkReal x5696=pow(x5697,-0.5);
CheckValue<IkReal> x5698 = IKatan2WithCheck(IkReal(x5695),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5698.valid){
continue;
}
IkReal gconst163=((3.14159265358979)+(((-1.0)*(x5698.value))));
IkReal gconst164=(x5695*x5696);
IkReal gconst165=((-1.0)*r01*x5696);
CheckValue<IkReal> x5699 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5699.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5699.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5700=((-1.0)*r00);
CheckValue<IkReal> x5703 = IKatan2WithCheck(IkReal(x5700),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5703.valid){
continue;
}
IkReal x5701=((1.0)*(x5703.value));
IkReal x5702=x5696;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x5701)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x5701)));
IkReal gconst164=(x5700*x5702);
IkReal gconst165=((-1.0)*r01*x5702);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5704=((-1.0)*r00);
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(x5704),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
IkReal x5705=((1.0)*(x5707.value));
IkReal x5706=x5696;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x5705)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x5705)));
IkReal gconst164=(x5704*x5706);
IkReal gconst165=((-1.0)*r01*x5706);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5708=((-1.0)*r00);
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(x5708),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
IkReal x5709=((1.0)*(x5711.value));
IkReal x5710=x5696;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x5709)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x5709)));
IkReal gconst164=(x5708*x5710);
IkReal gconst165=((-1.0)*r01*x5710);
IkReal x5712=r02*r02;
IkReal x5713=(r12*sj0);
IkReal x5714=((1.0)*cj0);
IkReal x5715=x5696;
j4eval[0]=((IKabs(((((-1.0)*x5713))+(((-1.0)*r02*x5714)))))+(IKabs(((((-1.0)*x5714*x5715))+((cj0*x5712*x5715))+((r02*x5713*x5715))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5716=((1.0)*sj0);
IkReal x5717=((1.0)*cj0);
CheckValue<IkReal> x5718=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst164*r21))+((gconst165*r20)))),-1);
if(!x5718.valid){
continue;
}
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal(((((-1.0)*gconst164*r10*x5716))+(((-1.0)*gconst165*r11*x5716))+(((-1.0)*gconst164*r00*x5717))+(((-1.0)*gconst165*r01*x5717)))),IkReal(((((-1.0)*r12*x5716))+(((-1.0)*r02*x5717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5718.value)))+(x5719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5720=IKcos(j4);
IkReal x5721=IKsin(j4);
IkReal x5722=((1.0)*cj2);
IkReal x5723=((1.0)*sj0);
IkReal x5724=(cj1*sj2);
IkReal x5725=(gconst165*x5721);
IkReal x5726=(gconst164*x5721);
IkReal x5727=((1.0)*gconst165*x5720);
IkReal x5728=((1.0)*gconst164*x5720);
evalcond[0]=((((-1.0)*r20*x5728))+(((-1.0)*r21*x5727))+((r22*x5721)));
evalcond[1]=(cj0+((r12*x5721))+(((-1.0)*r11*x5727))+(((-1.0)*r10*x5728)));
evalcond[2]=((((-1.0)*x5723))+((r02*x5721))+(((-1.0)*r00*x5728))+(((-1.0)*r01*x5727)));
evalcond[3]=(((r21*x5725))+((r20*x5726))+((sj1*sj2))+(((-1.0)*cj1*x5722))+((r22*x5720)));
evalcond[4]=((((-1.0)*cj0*sj1*x5722))+((r00*x5726))+((r01*x5725))+((r02*x5720))+(((-1.0)*cj0*x5724)));
evalcond[5]=((((-1.0)*x5723*x5724))+((r11*x5725))+((r12*x5720))+((r10*x5726))+(((-1.0)*sj0*sj1*x5722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5729=((1.0)*gconst165);
CheckValue<IkReal> x5730 = IKatan2WithCheck(IkReal(((((-1.0)*gconst164*r20*sj0))+(((-1.0)*r21*sj0*x5729)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5730.valid){
continue;
}
CheckValue<IkReal> x5731=IKPowWithIntegerCheck(IKsign((((gconst164*r11))+(((-1.0)*r10*x5729)))),-1);
if(!x5731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5730.value)+(((1.5707963267949)*(x5731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5732=IKcos(j4);
IkReal x5733=IKsin(j4);
IkReal x5734=((1.0)*cj2);
IkReal x5735=((1.0)*sj0);
IkReal x5736=(cj1*sj2);
IkReal x5737=(gconst165*x5733);
IkReal x5738=(gconst164*x5733);
IkReal x5739=((1.0)*gconst165*x5732);
IkReal x5740=((1.0)*gconst164*x5732);
evalcond[0]=((((-1.0)*r21*x5739))+(((-1.0)*r20*x5740))+((r22*x5733)));
evalcond[1]=(cj0+((r12*x5733))+(((-1.0)*r11*x5739))+(((-1.0)*r10*x5740)));
evalcond[2]=((((-1.0)*x5735))+(((-1.0)*r00*x5740))+((r02*x5733))+(((-1.0)*r01*x5739)));
evalcond[3]=(((r21*x5737))+((r20*x5738))+((sj1*sj2))+(((-1.0)*cj1*x5734))+((r22*x5732)));
evalcond[4]=(((r01*x5737))+(((-1.0)*cj0*sj1*x5734))+((r00*x5738))+((r02*x5732))+(((-1.0)*cj0*x5736)));
evalcond[5]=(((r11*x5737))+((r12*x5732))+(((-1.0)*x5735*x5736))+((r10*x5738))+(((-1.0)*sj0*sj1*x5734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5741=((1.0)*cj0);
CheckValue<IkReal> x5742=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst165*r00))+((gconst164*r01)))),-1);
if(!x5742.valid){
continue;
}
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal(((((-1.0)*gconst164*r20*x5741))+(((-1.0)*gconst165*r21*x5741)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5742.value)))+(x5743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5744=IKcos(j4);
IkReal x5745=IKsin(j4);
IkReal x5746=((1.0)*cj2);
IkReal x5747=((1.0)*sj0);
IkReal x5748=(cj1*sj2);
IkReal x5749=(gconst165*x5745);
IkReal x5750=(gconst164*x5745);
IkReal x5751=((1.0)*gconst165*x5744);
IkReal x5752=((1.0)*gconst164*x5744);
evalcond[0]=(((r22*x5745))+(((-1.0)*r20*x5752))+(((-1.0)*r21*x5751)));
evalcond[1]=(cj0+(((-1.0)*r11*x5751))+(((-1.0)*r10*x5752))+((r12*x5745)));
evalcond[2]=((((-1.0)*r00*x5752))+(((-1.0)*r01*x5751))+(((-1.0)*x5747))+((r02*x5745)));
evalcond[3]=((((-1.0)*cj1*x5746))+((r22*x5744))+((sj1*sj2))+((r20*x5750))+((r21*x5749)));
evalcond[4]=((((-1.0)*cj0*x5748))+((r01*x5749))+((r00*x5750))+(((-1.0)*cj0*sj1*x5746))+((r02*x5744)));
evalcond[5]=(((r11*x5749))+(((-1.0)*sj0*sj1*x5746))+(((-1.0)*x5747*x5748))+((r12*x5744))+((r10*x5750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5753=((1.0)*cj5);
IkReal x5754=(((r11*sj5))+(((-1.0)*r10*x5753)));
j4eval[0]=x5754;
j4eval[1]=((IKabs(((((-1.0)*r21*x5753))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5755=((1.0)*sj5);
IkReal x5756=(((cj5*r20))+(((-1.0)*r21*x5755)));
j4eval[0]=x5756;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5755))))));
j4eval[2]=IKsign(x5756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5757=cj5*cj5;
IkReal x5758=r00*r00;
IkReal x5759=(r00*sj5);
IkReal x5760=(cj5*r01);
IkReal x5761=(((x5757*(r01*r01)))+(((-1.0)*x5757*x5758))+(r02*r02)+x5758+(((2.0)*x5759*x5760)));
j4eval[0]=x5761;
j4eval[1]=IKsign(x5761);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5760))+(((-1.0)*x5759))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5762=cj5*cj5;
IkReal x5763=r00*r00;
IkReal x5764=(cj5*r01);
IkReal x5765=(r00*sj5);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5764))+(((-1.0)*x5765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
CheckValue<IkReal> x5767=IKPowWithIntegerCheck(IKsign(((((2.0)*x5764*x5765))+(((-1.0)*x5762*x5763))+(r02*r02)+((x5762*(r01*r01)))+x5763)),-1);
if(!x5767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5766.value)+(((1.5707963267949)*(x5767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5768=IKsin(j4);
IkReal x5769=IKcos(j4);
IkReal x5770=(r20*sj5);
IkReal x5771=((1.0)*cj2);
IkReal x5772=(r00*sj5);
IkReal x5773=(cj5*r21);
IkReal x5774=(cj5*r01);
IkReal x5775=(r10*sj5);
IkReal x5776=(cj5*r11);
IkReal x5777=((1.0)*x5769);
evalcond[0]=(((r02*x5769))+((x5768*x5774))+((x5768*x5772)));
evalcond[1]=(((r22*x5768))+(((-1.0)*x5770*x5777))+(((-1.0)*x5773*x5777)));
evalcond[2]=((((-1.0)*x5776*x5777))+(((-1.0)*x5775*x5777))+((r12*x5768)));
evalcond[3]=((-1.0)+(((-1.0)*x5774*x5777))+((r02*x5768))+(((-1.0)*x5772*x5777)));
evalcond[4]=((((-1.0)*cj1*x5771))+((r22*x5769))+((sj1*sj2))+((x5768*x5773))+((x5768*x5770)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5771))+((x5768*x5776))+((x5768*x5775))+((r12*x5769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5778=((1.0)*sj5);
CheckValue<IkReal> x5779 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5778)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5779.valid){
continue;
}
CheckValue<IkReal> x5780=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x5778)))),-1);
if(!x5780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5779.value)+(((1.5707963267949)*(x5780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5781=IKsin(j4);
IkReal x5782=IKcos(j4);
IkReal x5783=(r20*sj5);
IkReal x5784=((1.0)*cj2);
IkReal x5785=(r00*sj5);
IkReal x5786=(cj5*r21);
IkReal x5787=(cj5*r01);
IkReal x5788=(r10*sj5);
IkReal x5789=(cj5*r11);
IkReal x5790=((1.0)*x5782);
evalcond[0]=(((r02*x5782))+((x5781*x5787))+((x5781*x5785)));
evalcond[1]=((((-1.0)*x5783*x5790))+(((-1.0)*x5786*x5790))+((r22*x5781)));
evalcond[2]=(((r12*x5781))+(((-1.0)*x5789*x5790))+(((-1.0)*x5788*x5790)));
evalcond[3]=((-1.0)+(((-1.0)*x5785*x5790))+(((-1.0)*x5787*x5790))+((r02*x5781)));
evalcond[4]=((((-1.0)*cj1*x5784))+((sj1*sj2))+((r22*x5782))+((x5781*x5786))+((x5781*x5783)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x5782))+(((-1.0)*sj1*x5784))+((x5781*x5788))+((x5781*x5789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5791=((1.0)*cj5);
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5791))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
CheckValue<IkReal> x5793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5791))+((r11*sj5)))),-1);
if(!x5793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5792.value)+(((1.5707963267949)*(x5793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5794=IKsin(j4);
IkReal x5795=IKcos(j4);
IkReal x5796=(r20*sj5);
IkReal x5797=((1.0)*cj2);
IkReal x5798=(r00*sj5);
IkReal x5799=(cj5*r21);
IkReal x5800=(cj5*r01);
IkReal x5801=(r10*sj5);
IkReal x5802=(cj5*r11);
IkReal x5803=((1.0)*x5795);
evalcond[0]=(((x5794*x5800))+((x5794*x5798))+((r02*x5795)));
evalcond[1]=((((-1.0)*x5796*x5803))+((r22*x5794))+(((-1.0)*x5799*x5803)));
evalcond[2]=(((r12*x5794))+(((-1.0)*x5802*x5803))+(((-1.0)*x5801*x5803)));
evalcond[3]=((-1.0)+(((-1.0)*x5800*x5803))+(((-1.0)*x5798*x5803))+((r02*x5794)));
evalcond[4]=(((x5794*x5796))+((x5794*x5799))+(((-1.0)*cj1*x5797))+((sj1*sj2))+((r22*x5795)));
evalcond[5]=(((x5794*x5802))+((x5794*x5801))+((r12*x5795))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5804=((1.0)*sj5);
IkReal x5805=(((cj5*r10))+(((-1.0)*r11*x5804)));
j4eval[0]=x5805;
j4eval[1]=IKsign(x5805);
j4eval[2]=((IKabs(((((-1.0)*r20*x5804))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5806=((1.0)*cj5);
IkReal x5807=((((-1.0)*r20*x5806))+((r21*sj5)));
j4eval[0]=x5807;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5806)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5808=cj5*cj5;
IkReal x5809=r00*r00;
IkReal x5810=(cj5*r01);
IkReal x5811=(r00*sj5);
IkReal x5812=((((-1.0)*x5808*(r01*r01)))+(((-1.0)*(r02*r02)))+((x5808*x5809))+(((-1.0)*x5809))+(((-2.0)*x5810*x5811)));
j4eval[0]=x5812;
j4eval[1]=IKsign(x5812);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5810))+(((-1.0)*x5811))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5813=cj5*cj5;
IkReal x5814=r00*r00;
IkReal x5815=(cj5*r01);
IkReal x5816=(r00*sj5);
CheckValue<IkReal> x5817=IKPowWithIntegerCheck(IKsign((((x5813*x5814))+(((-1.0)*x5813*(r01*r01)))+(((-1.0)*x5814))+(((-1.0)*(r02*r02)))+(((-2.0)*x5815*x5816)))),-1);
if(!x5817.valid){
continue;
}
CheckValue<IkReal> x5818 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5815))+(((-1.0)*x5816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5817.value)))+(x5818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5819=IKsin(j4);
IkReal x5820=IKcos(j4);
IkReal x5821=(r20*sj5);
IkReal x5822=(r00*sj5);
IkReal x5823=(cj5*r21);
IkReal x5824=(cj5*r01);
IkReal x5825=(r10*sj5);
IkReal x5826=(cj5*r11);
IkReal x5827=((1.0)*x5820);
evalcond[0]=(((r02*x5820))+((x5819*x5824))+((x5819*x5822)));
evalcond[1]=((((-1.0)*x5823*x5827))+((r22*x5819))+(((-1.0)*x5821*x5827)));
evalcond[2]=(((r12*x5819))+(((-1.0)*x5826*x5827))+(((-1.0)*x5825*x5827)));
evalcond[3]=((1.0)+((r02*x5819))+(((-1.0)*x5824*x5827))+(((-1.0)*x5822*x5827)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x5820))+((x5819*x5826))+((x5819*x5825)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x5819*x5821))+((x5819*x5823))+((r22*x5820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5828=((1.0)*cj5);
CheckValue<IkReal> x5829 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5828)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5829.valid){
continue;
}
CheckValue<IkReal> x5830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5828))+((r21*sj5)))),-1);
if(!x5830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5829.value)+(((1.5707963267949)*(x5830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5831=IKsin(j4);
IkReal x5832=IKcos(j4);
IkReal x5833=(r20*sj5);
IkReal x5834=(r00*sj5);
IkReal x5835=(cj5*r21);
IkReal x5836=(cj5*r01);
IkReal x5837=(r10*sj5);
IkReal x5838=(cj5*r11);
IkReal x5839=((1.0)*x5832);
evalcond[0]=(((r02*x5832))+((x5831*x5834))+((x5831*x5836)));
evalcond[1]=((((-1.0)*x5833*x5839))+((r22*x5831))+(((-1.0)*x5835*x5839)));
evalcond[2]=(((r12*x5831))+(((-1.0)*x5838*x5839))+(((-1.0)*x5837*x5839)));
evalcond[3]=((1.0)+((r02*x5831))+(((-1.0)*x5834*x5839))+(((-1.0)*x5836*x5839)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x5832))+((x5831*x5837))+((x5831*x5838)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x5831*x5835))+((x5831*x5833))+((r22*x5832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5840=((1.0)*sj5);
CheckValue<IkReal> x5841 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5840))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5841.valid){
continue;
}
CheckValue<IkReal> x5842=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x5840)))),-1);
if(!x5842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5841.value)+(((1.5707963267949)*(x5842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5843=IKsin(j4);
IkReal x5844=IKcos(j4);
IkReal x5845=(r20*sj5);
IkReal x5846=(r00*sj5);
IkReal x5847=(cj5*r21);
IkReal x5848=(cj5*r01);
IkReal x5849=(r10*sj5);
IkReal x5850=(cj5*r11);
IkReal x5851=((1.0)*x5844);
evalcond[0]=(((x5843*x5848))+((x5843*x5846))+((r02*x5844)));
evalcond[1]=((((-1.0)*x5847*x5851))+(((-1.0)*x5845*x5851))+((r22*x5843)));
evalcond[2]=((((-1.0)*x5849*x5851))+((r12*x5843))+(((-1.0)*x5850*x5851)));
evalcond[3]=((1.0)+(((-1.0)*x5846*x5851))+(((-1.0)*x5848*x5851))+((r02*x5843)));
evalcond[4]=(((cj2*sj1))+((x5843*x5850))+((cj1*sj2))+((r12*x5844))+((x5843*x5849)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x5843*x5845))+((x5843*x5847))+((r22*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5852=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5852);
rxp1_1=(px*r21);
rxp1_2=(r11*x5852);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5853=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5853);
rxp1_1=(px*r21);
rxp1_2=(r11*x5853);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5854=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5854);
rxp1_1=(px*r21);
rxp1_2=(r11*x5854);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5857=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x5857.valid){
continue;
}
IkReal x5855=x5857.value;
IkReal x5856=(sj0*x5855);
sj4array[0]=(((cj2*sj1*x5856))+((cj1*sj2*x5856)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5858=IKcos(j4);
IkReal x5859=IKsin(j4);
IkReal x5860=(r20*sj5);
IkReal x5861=((1.0)*x5858);
IkReal x5862=(cj5*x5861);
evalcond[0]=(r02*x5858);
evalcond[1]=((((-1.0)*sj0))+((r02*x5859)));
evalcond[2]=((((-1.0)*x5860*x5861))+(((-1.0)*r21*x5862)));
evalcond[3]=((((-1.0)*r11*x5862))+(((-1.0)*r10*sj5*x5861)));
evalcond[4]=(((cj5*r21*x5859))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5859*x5860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5864=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x5864.valid){
continue;
}
IkReal x5863=x5864.value;
sj4array[0]=(((cj1*cj2*x5863))+(((-1.0)*sj1*sj2*x5863)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5865=IKcos(j4);
IkReal x5866=IKsin(j4);
IkReal x5867=(r10*sj5);
IkReal x5868=((1.0)*sj0);
IkReal x5869=((1.0)*x5865);
IkReal x5870=(cj5*x5869);
evalcond[0]=(r02*x5865);
evalcond[1]=((((-1.0)*x5868))+((r02*x5866)));
evalcond[2]=((((-1.0)*r20*sj5*x5869))+(((-1.0)*r21*x5870)));
evalcond[3]=((((-1.0)*r11*x5870))+(((-1.0)*x5867*x5869)));
evalcond[4]=((((-1.0)*cj1*sj2*x5868))+(((-1.0)*cj2*sj1*x5868))+((x5866*x5867))+((cj5*r11*x5866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5871=IKPowWithIntegerCheck(r02,-1);
if(!x5871.valid){
continue;
}
sj4array[0]=(sj0*(x5871.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5872=IKcos(j4);
IkReal x5873=IKsin(j4);
IkReal x5874=((1.0)*sj0);
IkReal x5875=(sj5*x5873);
IkReal x5876=(cj5*x5873);
IkReal x5877=((1.0)*cj5*x5872);
IkReal x5878=((1.0)*sj5*x5872);
evalcond[0]=(r02*x5872);
evalcond[1]=((((-1.0)*r20*x5878))+(((-1.0)*r21*x5877)));
evalcond[2]=((((-1.0)*r11*x5877))+(((-1.0)*r10*x5878)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x5875))+((r21*x5876)));
evalcond[4]=((((-1.0)*cj2*sj1*x5874))+((r11*x5876))+((r10*x5875))+(((-1.0)*cj1*sj2*x5874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5879=((1.0)*sj0);
IkReal x5880=((1.0)*cj0);
CheckValue<IkReal> x5881 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5*x5879))+(((-1.0)*r00*sj5*x5880))+(((-1.0)*cj5*r01*x5880))+(((-1.0)*cj5*r11*x5879)))),IkReal(((((-1.0)*r12*x5879))+(((-1.0)*r02*x5880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5881.valid){
continue;
}
CheckValue<IkReal> x5882=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x5882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5881.value)+(((1.5707963267949)*(x5882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5883=IKcos(j4);
IkReal x5884=IKsin(j4);
IkReal x5885=(r20*sj5);
IkReal x5886=((1.0)*cj2);
IkReal x5887=(r00*sj5);
IkReal x5888=(cj5*r21);
IkReal x5889=(cj5*r01);
IkReal x5890=(r10*sj5);
IkReal x5891=((1.0)*sj0);
IkReal x5892=(cj1*sj2);
IkReal x5893=(cj5*r11);
IkReal x5894=((1.0)*x5883);
evalcond[0]=((((-1.0)*x5885*x5894))+((r22*x5884))+(((-1.0)*x5888*x5894)));
evalcond[1]=((((-1.0)*x5893*x5894))+cj0+((r12*x5884))+(((-1.0)*x5890*x5894)));
evalcond[2]=((((-1.0)*x5889*x5894))+(((-1.0)*x5891))+(((-1.0)*x5887*x5894))+((r02*x5884)));
evalcond[3]=((((-1.0)*cj1*x5886))+((sj1*sj2))+((x5884*x5885))+((x5884*x5888))+((r22*x5883)));
evalcond[4]=(((x5884*x5889))+((x5884*x5887))+(((-1.0)*cj0*x5892))+((r02*x5883))+(((-1.0)*cj0*sj1*x5886)));
evalcond[5]=((((-1.0)*sj0*sj1*x5886))+((r12*x5883))+((x5884*x5893))+((x5884*x5890))+(((-1.0)*x5891*x5892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5895=((1.0)*cj5);
CheckValue<IkReal> x5896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5895))+((r11*sj5)))),-1);
if(!x5896.valid){
continue;
}
CheckValue<IkReal> x5897 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x5895))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5896.value)))+(x5897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5898=IKcos(j4);
IkReal x5899=IKsin(j4);
IkReal x5900=(r20*sj5);
IkReal x5901=((1.0)*cj2);
IkReal x5902=(r00*sj5);
IkReal x5903=(cj5*r21);
IkReal x5904=(cj5*r01);
IkReal x5905=(r10*sj5);
IkReal x5906=((1.0)*sj0);
IkReal x5907=(cj1*sj2);
IkReal x5908=(cj5*r11);
IkReal x5909=((1.0)*x5898);
evalcond[0]=(((r22*x5899))+(((-1.0)*x5903*x5909))+(((-1.0)*x5900*x5909)));
evalcond[1]=(cj0+(((-1.0)*x5905*x5909))+(((-1.0)*x5908*x5909))+((r12*x5899)));
evalcond[2]=((((-1.0)*x5902*x5909))+(((-1.0)*x5904*x5909))+((r02*x5899))+(((-1.0)*x5906)));
evalcond[3]=(((r22*x5898))+((sj1*sj2))+(((-1.0)*cj1*x5901))+((x5899*x5900))+((x5899*x5903)));
evalcond[4]=((((-1.0)*cj0*x5907))+((r02*x5898))+((x5899*x5904))+((x5899*x5902))+(((-1.0)*cj0*sj1*x5901)));
evalcond[5]=((((-1.0)*x5906*x5907))+((x5899*x5908))+((x5899*x5905))+(((-1.0)*sj0*sj1*x5901))+((r12*x5898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5910=((1.0)*cj0);
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x5910))+(((-1.0)*cj5*r21*x5910)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5911.value)+(((1.5707963267949)*(x5912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5913=IKcos(j4);
IkReal x5914=IKsin(j4);
IkReal x5915=(r20*sj5);
IkReal x5916=((1.0)*cj2);
IkReal x5917=(r00*sj5);
IkReal x5918=(cj5*r21);
IkReal x5919=(cj5*r01);
IkReal x5920=(r10*sj5);
IkReal x5921=((1.0)*sj0);
IkReal x5922=(cj1*sj2);
IkReal x5923=(cj5*r11);
IkReal x5924=((1.0)*x5913);
evalcond[0]=(((r22*x5914))+(((-1.0)*x5918*x5924))+(((-1.0)*x5915*x5924)));
evalcond[1]=(((r12*x5914))+cj0+(((-1.0)*x5920*x5924))+(((-1.0)*x5923*x5924)));
evalcond[2]=((((-1.0)*x5917*x5924))+((r02*x5914))+(((-1.0)*x5921))+(((-1.0)*x5919*x5924)));
evalcond[3]=(((r22*x5913))+((sj1*sj2))+(((-1.0)*cj1*x5916))+((x5914*x5918))+((x5914*x5915)));
evalcond[4]=((((-1.0)*cj0*x5922))+((r02*x5913))+((x5914*x5919))+((x5914*x5917))+(((-1.0)*cj0*sj1*x5916)));
evalcond[5]=(((r12*x5913))+((x5914*x5920))+((x5914*x5923))+(((-1.0)*sj0*sj1*x5916))+(((-1.0)*x5921*x5922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5925=cj5*cj5;
IkReal x5926=r20*r20;
IkReal x5927=(r20*sj5);
IkReal x5928=(cj5*r21);
IkReal x5929=(cj1*cj2);
IkReal x5930=((1.0)*sj1*sj2);
CheckValue<IkReal> x5931=IKPowWithIntegerCheck(IKsign(((((2.0)*x5927*x5928))+(r22*r22)+(((-1.0)*x5925*x5926))+((x5925*(r21*r21)))+x5926)),-1);
if(!x5931.valid){
continue;
}
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal((((x5927*x5929))+(((-1.0)*x5928*x5930))+((x5928*x5929))+(((-1.0)*x5927*x5930)))),IkReal((((r22*x5929))+(((-1.0)*r22*x5930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5931.value)))+(x5932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5933=IKcos(j4);
IkReal x5934=IKsin(j4);
IkReal x5935=(cj5*r21);
IkReal x5936=(r20*sj5);
IkReal x5937=((1.0)*x5933);
evalcond[0]=(((r22*x5934))+(((-1.0)*x5935*x5937))+(((-1.0)*x5936*x5937)));
evalcond[1]=(((x5934*x5936))+((x5934*x5935))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5938=(cj4*cj5);
IkReal x5939=(cj4*sj5);
if( IKabs(((((-1.0)*r01*x5938))+(((-1.0)*r00*x5939))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5939))+((r11*x5938))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x5938))+(((-1.0)*r00*x5939))+((r02*sj4))))+IKsqr((((r10*x5939))+((r11*x5938))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x5938))+(((-1.0)*r00*x5939))+((r02*sj4))), (((r10*x5939))+((r11*x5938))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5940=IKcos(j0);
IkReal x5941=IKsin(j0);
IkReal x5942=((1.0)*sj2);
IkReal x5943=((1.0)*cj5);
IkReal x5944=(r11*sj5);
IkReal x5945=(sj4*sj5);
IkReal x5946=(cj5*sj4);
IkReal x5947=((1.0)*cj2);
IkReal x5948=((0.1535)*cj2);
IkReal x5949=((0.121)*cj5);
IkReal x5950=(r01*sj5);
IkReal x5951=(cj1*x5940);
IkReal x5952=(cj1*x5941);
IkReal x5953=(sj1*x5940);
IkReal x5954=((1.0)*cj4*sj5);
IkReal x5955=(sj1*x5941);
IkReal x5956=(sj2*x5955);
evalcond[0]=((((-1.0)*r10*x5954))+(((-1.0)*cj4*r11*x5943))+((r12*sj4))+x5940);
evalcond[1]=((((-1.0)*r00*x5954))+(((-1.0)*x5941))+((r02*sj4))+(((-1.0)*cj4*r01*x5943)));
evalcond[2]=(((cj2*x5951))+(((-1.0)*x5942*x5953))+(((-1.0)*r00*x5943))+x5950);
evalcond[3]=(((cj2*x5952))+(((-1.0)*x5942*x5955))+(((-1.0)*r10*x5943))+x5944);
evalcond[4]=((((-1.0)*x5947*x5953))+((r01*x5946))+((r00*x5945))+(((-1.0)*x5942*x5951))+((cj4*r02)));
evalcond[5]=((((-1.0)*x5947*x5955))+(((-1.0)*x5942*x5952))+((r11*x5946))+((r10*x5945))+((cj4*r12)));
evalcond[6]=(((r00*x5949))+(((-1.0)*px))+((x5948*x5951))+(((0.0385)*x5951))+(((0.1445)*x5953))+(((-0.121)*x5950))+(((-0.1535)*sj2*x5953))+(((-0.00175)*x5941)));
evalcond[7]=((((-0.121)*x5944))+(((0.00175)*x5940))+(((-1.0)*py))+(((-0.1535)*x5956))+((x5948*x5952))+(((0.0385)*x5952))+(((0.1445)*x5955))+((r10*x5949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5957=((1.0)*sj5);
CheckValue<IkReal> x5958 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x5957)))),IkReal(((((-1.0)*r01*x5957))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5958.valid){
continue;
}
CheckValue<IkReal> x5959=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5959.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5958.value)+(((1.5707963267949)*(x5959.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5960=IKcos(j0);
IkReal x5961=IKsin(j0);
IkReal x5962=(cj1*cj2);
IkReal x5963=((0.0385)*cj1);
IkReal x5964=((1.0)*cj5);
IkReal x5965=(r11*sj5);
IkReal x5966=((0.121)*cj5);
IkReal x5967=(r01*sj5);
IkReal x5968=(sj1*x5960);
IkReal x5969=(sj1*sj2*x5961);
evalcond[0]=(((x5960*x5962))+(((-1.0)*r00*x5964))+(((-1.0)*sj2*x5968))+x5967);
evalcond[1]=((((-1.0)*x5969))+((x5961*x5962))+(((-1.0)*r10*x5964))+x5965);
evalcond[2]=((((-0.1535)*sj2*x5968))+((r00*x5966))+((x5960*x5963))+(((-0.121)*x5967))+(((-1.0)*px))+(((-0.00175)*x5961))+(((0.1535)*x5960*x5962))+(((0.1445)*x5968)));
evalcond[3]=((((0.1445)*sj1*x5961))+((x5961*x5963))+(((-0.121)*x5965))+(((-1.0)*py))+((r10*x5966))+(((0.1535)*x5961*x5962))+(((0.00175)*x5960))+(((-0.1535)*x5969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5970=((1.0)*cj5);
IkReal x5971=(((r01*sj5))+(((-1.0)*r00*x5970)));
j4eval[0]=x5971;
j4eval[1]=IKsign(x5971);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x5970)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5972=((1.0)*cj5);
IkReal x5973=(((r11*sj5))+(((-1.0)*r10*x5972)));
j4eval[0]=x5973;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5972))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x5973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5974=((1.0)*sj0);
IkReal x5975=((1.0)*sj5);
IkReal x5976=((1.0)*cj0);
IkReal x5977=(((cj5*r20))+(((-1.0)*r21*x5975)));
j4eval[0]=x5977;
j4eval[1]=((IKabs(((((-1.0)*r02*x5976))+(((-1.0)*r12*x5974)))))+(IKabs(((((-1.0)*cj0*r00*x5975))+(((-1.0)*cj5*r11*x5974))+(((-1.0)*r10*sj5*x5974))+(((-1.0)*cj5*r01*x5976))))));
j4eval[2]=IKsign(x5977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5978=((-1.0)*r21);
IkReal x5980 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5980)==0){
continue;
}
IkReal x5979=pow(x5980,-0.5);
CheckValue<IkReal> x5981 = IKatan2WithCheck(IkReal(r20),IkReal(x5978),IKFAST_ATAN2_MAGTHRESH);
if(!x5981.valid){
continue;
}
IkReal gconst148=((-1.0)*(x5981.value));
IkReal gconst149=((-1.0)*r20*x5979);
IkReal gconst150=(x5978*x5979);
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5982.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5983=((-1.0)*r21);
CheckValue<IkReal> x5986 = IKatan2WithCheck(IkReal(r20),IkReal(x5983),IKFAST_ATAN2_MAGTHRESH);
if(!x5986.valid){
continue;
}
IkReal x5984=((-1.0)*(x5986.value));
IkReal x5985=x5979;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst149;
cj5=gconst150;
j5=x5984;
IkReal gconst148=x5984;
IkReal gconst149=((-1.0)*r20*x5985);
IkReal gconst150=(x5983*x5985);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5987=((-1.0)*r21);
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal(r20),IkReal(x5987),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
IkReal x5988=((-1.0)*(x5990.value));
IkReal x5989=x5979;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst149;
cj5=gconst150;
j5=x5988;
IkReal gconst148=x5988;
IkReal gconst149=((-1.0)*r20*x5989);
IkReal gconst150=(x5987*x5989);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5991=((-1.0)*r21);
CheckValue<IkReal> x5994 = IKatan2WithCheck(IkReal(r20),IkReal(x5991),IKFAST_ATAN2_MAGTHRESH);
if(!x5994.valid){
continue;
}
IkReal x5992=((-1.0)*(x5994.value));
IkReal x5993=x5979;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst149;
cj5=gconst150;
j5=x5992;
IkReal gconst148=x5992;
IkReal gconst149=((-1.0)*r20*x5993);
IkReal gconst150=(x5991*x5993);
IkReal x5995=r22*r22;
CheckValue<IkReal> x5998=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5995))),-1);
if(!x5998.valid){
continue;
}
IkReal x5996=x5998.value;
IkReal x5997=(((x5996*(r21*r21*r21*r21)))+(((2.0)*x5996*(r20*r20)*(r21*r21)))+x5995+((x5996*(r20*r20*r20*r20))));
j4eval[0]=x5997;
j4eval[1]=IKsign(x5997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5999=(cj1*cj2);
IkReal x6000=(gconst150*r21);
IkReal x6001=(gconst149*r20);
IkReal x6002=((1.0)*sj1*sj2);
CheckValue<IkReal> x6003 = IKatan2WithCheck(IkReal(((((-1.0)*x6000*x6002))+((x5999*x6001))+((x5999*x6000))+(((-1.0)*x6001*x6002)))),IkReal(((((-1.0)*r22*x6002))+((r22*x5999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6003.valid){
continue;
}
CheckValue<IkReal> x6004=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((2.0)*x6000*x6001))+(x6001*x6001)+(x6000*x6000))),-1);
if(!x6004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6003.value)+(((1.5707963267949)*(x6004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6005=IKcos(j4);
IkReal x6006=IKsin(j4);
IkReal x6007=((1.0)*sj0);
IkReal x6008=((1.0)*cj2);
IkReal x6009=(cj1*sj2);
IkReal x6010=(gconst149*x6006);
IkReal x6011=(gconst150*x6006);
IkReal x6012=((1.0)*gconst150*x6005);
IkReal x6013=((1.0)*gconst149*x6005);
evalcond[0]=((((-1.0)*r21*x6012))+((r22*x6006))+(((-1.0)*r20*x6013)));
evalcond[1]=(((r12*x6006))+cj0+(((-1.0)*r11*x6012))+(((-1.0)*r10*x6013)));
evalcond[2]=((((-1.0)*x6007))+((r02*x6006))+(((-1.0)*r00*x6013))+(((-1.0)*r01*x6012)));
evalcond[3]=(((r22*x6005))+(((-1.0)*cj1*x6008))+((r21*x6011))+((sj1*sj2))+((r20*x6010)));
evalcond[4]=(((r01*x6011))+(((-1.0)*cj0*sj1*x6008))+((r02*x6005))+(((-1.0)*cj0*x6009))+((r00*x6010)));
evalcond[5]=((((-1.0)*cj2*sj1*x6007))+((r12*x6005))+((r11*x6011))+(((-1.0)*x6007*x6009))+((r10*x6010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6014=((1.0)*sj0);
CheckValue<IkReal> x6015 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*x6014))+(((-1.0)*gconst150*r21*x6014)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016=IKPowWithIntegerCheck(IKsign((((gconst149*r11))+(((-1.0)*gconst150*r10)))),-1);
if(!x6016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6015.value)+(((1.5707963267949)*(x6016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6017=IKcos(j4);
IkReal x6018=IKsin(j4);
IkReal x6019=((1.0)*sj0);
IkReal x6020=((1.0)*cj2);
IkReal x6021=(cj1*sj2);
IkReal x6022=(gconst149*x6018);
IkReal x6023=(gconst150*x6018);
IkReal x6024=((1.0)*gconst150*x6017);
IkReal x6025=((1.0)*gconst149*x6017);
evalcond[0]=((((-1.0)*r20*x6025))+(((-1.0)*r21*x6024))+((r22*x6018)));
evalcond[1]=((((-1.0)*r10*x6025))+(((-1.0)*r11*x6024))+cj0+((r12*x6018)));
evalcond[2]=((((-1.0)*r00*x6025))+(((-1.0)*r01*x6024))+((r02*x6018))+(((-1.0)*x6019)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x6020))+((r21*x6023))+((r22*x6017))+((r20*x6022)));
evalcond[4]=((((-1.0)*cj0*sj1*x6020))+(((-1.0)*cj0*x6021))+((r00*x6022))+((r01*x6023))+((r02*x6017)));
evalcond[5]=((((-1.0)*cj2*sj1*x6019))+((r12*x6017))+(((-1.0)*x6019*x6021))+((r11*x6023))+((r10*x6022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6026=((1.0)*cj0);
CheckValue<IkReal> x6027=IKPowWithIntegerCheck(IKsign((((gconst149*r01))+(((-1.0)*gconst150*r00)))),-1);
if(!x6027.valid){
continue;
}
CheckValue<IkReal> x6028 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*x6026))+(((-1.0)*gconst150*r21*x6026)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6027.value)))+(x6028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6029=IKcos(j4);
IkReal x6030=IKsin(j4);
IkReal x6031=((1.0)*sj0);
IkReal x6032=((1.0)*cj2);
IkReal x6033=(cj1*sj2);
IkReal x6034=(gconst149*x6030);
IkReal x6035=(gconst150*x6030);
IkReal x6036=((1.0)*gconst150*x6029);
IkReal x6037=((1.0)*gconst149*x6029);
evalcond[0]=(((r22*x6030))+(((-1.0)*r20*x6037))+(((-1.0)*r21*x6036)));
evalcond[1]=(cj0+((r12*x6030))+(((-1.0)*r11*x6036))+(((-1.0)*r10*x6037)));
evalcond[2]=((((-1.0)*x6031))+(((-1.0)*r00*x6037))+(((-1.0)*r01*x6036))+((r02*x6030)));
evalcond[3]=(((r21*x6035))+(((-1.0)*cj1*x6032))+((sj1*sj2))+((r20*x6034))+((r22*x6029)));
evalcond[4]=(((r02*x6029))+(((-1.0)*cj0*sj1*x6032))+((r00*x6034))+(((-1.0)*cj0*x6033))+((r01*x6035)));
evalcond[5]=((((-1.0)*x6031*x6033))+((r11*x6035))+((r10*x6034))+((r12*x6029))+(((-1.0)*cj2*sj1*x6031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6040 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6040)==0){
continue;
}
IkReal x6038=pow(x6040,-0.5);
IkReal x6039=((1.0)*x6038);
CheckValue<IkReal> x6041 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6041.valid){
continue;
}
IkReal gconst151=((3.14159265358979)+(((-1.0)*(x6041.value))));
IkReal gconst152=(r20*x6039);
IkReal gconst153=(r21*x6039);
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6042.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6046 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6046.valid){
continue;
}
IkReal x6043=((1.0)*(x6046.value));
IkReal x6044=x6038;
IkReal x6045=((1.0)*x6044);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x6043)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x6043)));
IkReal gconst152=(r20*x6045);
IkReal gconst153=(r21*x6045);
IkReal x6047=r22*r22;
IkReal x6048=((1.0)*x6047);
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(((-1.0)+x6047),-1);
if(!x6052.valid){
continue;
}
IkReal x6049=x6052.value;
if((((1.0)+(((-1.0)*x6048)))) < -0.00001)
continue;
IkReal x6050=IKsqrt(((1.0)+(((-1.0)*x6048))));
IkReal x6051=(cj0*x6049*x6050);
j4eval[0]=((IKabs((x6051+(((-1.0)*x6048*x6051)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6056 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6056.valid){
continue;
}
IkReal x6053=((1.0)*(x6056.value));
IkReal x6054=x6038;
IkReal x6055=((1.0)*x6054);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x6053)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x6053)));
IkReal gconst152=(r20*x6055);
IkReal gconst153=(r21*x6055);
IkReal x6057=r22*r22;
IkReal x6058=((1.0)*x6057);
CheckValue<IkReal> x6062=IKPowWithIntegerCheck(((-1.0)+x6057),-1);
if(!x6062.valid){
continue;
}
IkReal x6059=x6062.value;
if((((1.0)+(((-1.0)*x6058)))) < -0.00001)
continue;
IkReal x6060=IKsqrt(((1.0)+(((-1.0)*x6058))));
IkReal x6061=(sj0*x6059*x6060);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6061+(((-1.0)*x6058*x6061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
IkReal x6063=((1.0)*(x6066.value));
IkReal x6064=x6038;
IkReal x6065=((1.0)*x6064);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x6063)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x6063)));
IkReal gconst152=(r20*x6065);
IkReal gconst153=(r21*x6065);
IkReal x6067=r22*r22;
IkReal x6068=((1.0)*r12*sj0);
IkReal x6069=((1.0)*cj0*r02);
CheckValue<IkReal> x6073=IKPowWithIntegerCheck(((-1.0)+x6067),-1);
if(!x6073.valid){
continue;
}
IkReal x6070=x6073.value;
if((((1.0)+(((-1.0)*x6067)))) < -0.00001)
continue;
IkReal x6071=IKsqrt(((1.0)+(((-1.0)*x6067))));
IkReal x6072=(r22*x6070*x6071);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6069))+(((-1.0)*x6068)))))+(IKabs(((((-1.0)*x6068*x6072))+(((-1.0)*x6069*x6072))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6074=((1.0)*sj0);
IkReal x6075=((1.0)*cj0);
CheckValue<IkReal> x6076=IKPowWithIntegerCheck(IKsign((((gconst153*r20))+(((-1.0)*gconst152*r21)))),-1);
if(!x6076.valid){
continue;
}
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(((((-1.0)*gconst153*r11*x6074))+(((-1.0)*gconst152*r10*x6074))+(((-1.0)*gconst153*r01*x6075))+(((-1.0)*gconst152*r00*x6075)))),IkReal(((((-1.0)*r02*x6075))+(((-1.0)*r12*x6074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6076.value)))+(x6077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6078=IKcos(j4);
IkReal x6079=IKsin(j4);
IkReal x6080=(gconst152*r10);
IkReal x6081=((1.0)*cj2);
IkReal x6082=(gconst152*r20);
IkReal x6083=((1.0)*sj0);
IkReal x6084=(cj1*sj2);
IkReal x6085=(gconst152*r00);
IkReal x6086=((1.0)*x6078);
IkReal x6087=(gconst153*x6079);
evalcond[0]=((((-1.0)*gconst153*r21*x6086))+((r22*x6079))+(((-1.0)*x6082*x6086)));
evalcond[1]=((((-1.0)*x6080*x6086))+cj0+(((-1.0)*gconst153*r11*x6086))+((r12*x6079)));
evalcond[2]=((((-1.0)*x6085*x6086))+(((-1.0)*gconst153*r01*x6086))+(((-1.0)*x6083))+((r02*x6079)));
evalcond[3]=(((r22*x6078))+((x6079*x6082))+((sj1*sj2))+((r21*x6087))+(((-1.0)*cj1*x6081)));
evalcond[4]=((((-1.0)*cj0*sj1*x6081))+(((-1.0)*cj0*x6084))+((r01*x6087))+((x6079*x6085))+((r02*x6078)));
evalcond[5]=(((x6079*x6080))+(((-1.0)*x6083*x6084))+((r11*x6087))+((r12*x6078))+(((-1.0)*sj0*sj1*x6081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6088=((1.0)*gconst153);
CheckValue<IkReal> x6089 = IKatan2WithCheck(IkReal(((((-1.0)*gconst152*r20*sj0))+(((-1.0)*r21*sj0*x6088)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6089.valid){
continue;
}
CheckValue<IkReal> x6090=IKPowWithIntegerCheck(IKsign((((gconst152*r11))+(((-1.0)*r10*x6088)))),-1);
if(!x6090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6089.value)+(((1.5707963267949)*(x6090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6091=IKcos(j4);
IkReal x6092=IKsin(j4);
IkReal x6093=(gconst152*r10);
IkReal x6094=((1.0)*cj2);
IkReal x6095=(gconst152*r20);
IkReal x6096=((1.0)*sj0);
IkReal x6097=(cj1*sj2);
IkReal x6098=(gconst152*r00);
IkReal x6099=((1.0)*x6091);
IkReal x6100=(gconst153*x6092);
evalcond[0]=((((-1.0)*gconst153*r21*x6099))+(((-1.0)*x6095*x6099))+((r22*x6092)));
evalcond[1]=(cj0+(((-1.0)*x6093*x6099))+(((-1.0)*gconst153*r11*x6099))+((r12*x6092)));
evalcond[2]=((((-1.0)*gconst153*r01*x6099))+(((-1.0)*x6096))+(((-1.0)*x6098*x6099))+((r02*x6092)));
evalcond[3]=(((x6092*x6095))+((r21*x6100))+((sj1*sj2))+((r22*x6091))+(((-1.0)*cj1*x6094)));
evalcond[4]=(((x6092*x6098))+(((-1.0)*cj0*x6097))+((r01*x6100))+((r02*x6091))+(((-1.0)*cj0*sj1*x6094)));
evalcond[5]=(((r11*x6100))+((x6092*x6093))+(((-1.0)*x6096*x6097))+((r12*x6091))+(((-1.0)*sj0*sj1*x6094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6101=((1.0)*cj0);
CheckValue<IkReal> x6102=IKPowWithIntegerCheck(IKsign((((gconst152*r01))+(((-1.0)*gconst153*r00)))),-1);
if(!x6102.valid){
continue;
}
CheckValue<IkReal> x6103 = IKatan2WithCheck(IkReal(((((-1.0)*gconst153*r21*x6101))+(((-1.0)*gconst152*r20*x6101)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6102.value)))+(x6103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6104=IKcos(j4);
IkReal x6105=IKsin(j4);
IkReal x6106=(gconst152*r10);
IkReal x6107=((1.0)*cj2);
IkReal x6108=(gconst152*r20);
IkReal x6109=((1.0)*sj0);
IkReal x6110=(cj1*sj2);
IkReal x6111=(gconst152*r00);
IkReal x6112=((1.0)*x6104);
IkReal x6113=(gconst153*x6105);
evalcond[0]=(((r22*x6105))+(((-1.0)*gconst153*r21*x6112))+(((-1.0)*x6108*x6112)));
evalcond[1]=(cj0+(((-1.0)*x6106*x6112))+(((-1.0)*gconst153*r11*x6112))+((r12*x6105)));
evalcond[2]=((((-1.0)*x6111*x6112))+((r02*x6105))+(((-1.0)*x6109))+(((-1.0)*gconst153*r01*x6112)));
evalcond[3]=(((r22*x6104))+((sj1*sj2))+((r21*x6113))+(((-1.0)*cj1*x6107))+((x6105*x6108)));
evalcond[4]=(((x6105*x6111))+((r01*x6113))+(((-1.0)*cj0*x6110))+((r02*x6104))+(((-1.0)*cj0*sj1*x6107)));
evalcond[5]=((((-1.0)*x6109*x6110))+((r11*x6113))+(((-1.0)*sj0*sj1*x6107))+((r12*x6104))+((x6105*x6106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6115 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6115)==0){
continue;
}
IkReal x6114=pow(x6115,-0.5);
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
IkReal gconst154=((-1.0)*(x6116.value));
IkReal gconst155=(r10*x6114);
IkReal gconst156=(r11*x6114);
CheckValue<IkReal> x6117 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6117.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6117.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
IkReal x6118=((-1.0)*(x6120.value));
IkReal x6119=x6114;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst155;
cj5=gconst156;
j5=x6118;
IkReal gconst154=x6118;
IkReal gconst155=(r10*x6119);
IkReal gconst156=(r11*x6119);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6121=((1.0)*sj0);
IkReal x6122=((1.0)*cj0);
CheckValue<IkReal> x6123 = IKatan2WithCheck(IkReal(((((-1.0)*gconst155*r10*x6121))+(((-1.0)*gconst156*r01*x6122))+(((-1.0)*gconst156*r11*x6121))+(((-1.0)*gconst155*r00*x6122)))),IkReal(((((-1.0)*r02*x6122))+(((-1.0)*r12*x6121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6123.valid){
continue;
}
CheckValue<IkReal> x6124=IKPowWithIntegerCheck(IKsign((((gconst156*r20))+(((-1.0)*gconst155*r21)))),-1);
if(!x6124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6123.value)+(((1.5707963267949)*(x6124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6125=IKcos(j4);
IkReal x6126=IKsin(j4);
IkReal x6127=(gconst156*r11);
IkReal x6128=((1.0)*cj2);
IkReal x6129=(gconst156*r21);
IkReal x6130=((1.0)*sj0);
IkReal x6131=(gconst156*r01);
IkReal x6132=(cj1*sj2);
IkReal x6133=((1.0)*x6125);
IkReal x6134=(gconst155*x6126);
IkReal x6135=(gconst155*x6133);
evalcond[0]=((((-1.0)*x6129*x6133))+(((-1.0)*r20*x6135))+((r22*x6126)));
evalcond[1]=(((r12*x6126))+cj0+(((-1.0)*r10*x6135))+(((-1.0)*x6127*x6133)));
evalcond[2]=((((-1.0)*x6131*x6133))+(((-1.0)*r00*x6135))+((r02*x6126))+(((-1.0)*x6130)));
evalcond[3]=(((x6126*x6129))+((sj1*sj2))+((r20*x6134))+((r22*x6125))+(((-1.0)*cj1*x6128)));
evalcond[4]=(((x6126*x6131))+((r02*x6125))+(((-1.0)*cj0*sj1*x6128))+(((-1.0)*cj0*x6132))+((r00*x6134)));
evalcond[5]=((((-1.0)*x6130*x6132))+((r12*x6125))+((x6126*x6127))+((r10*x6134))+(((-1.0)*sj0*sj1*x6128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6136=((1.0)*gconst156);
CheckValue<IkReal> x6137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6136))+((gconst155*r01)))),-1);
if(!x6137.valid){
continue;
}
CheckValue<IkReal> x6138 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6136))+(((-1.0)*cj0*gconst155*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6137.value)))+(x6138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6139=IKcos(j4);
IkReal x6140=IKsin(j4);
IkReal x6141=(gconst156*r11);
IkReal x6142=((1.0)*cj2);
IkReal x6143=(gconst156*r21);
IkReal x6144=((1.0)*sj0);
IkReal x6145=(gconst156*r01);
IkReal x6146=(cj1*sj2);
IkReal x6147=((1.0)*x6139);
IkReal x6148=(gconst155*x6140);
IkReal x6149=(gconst155*x6147);
evalcond[0]=((((-1.0)*r20*x6149))+((r22*x6140))+(((-1.0)*x6143*x6147)));
evalcond[1]=(cj0+(((-1.0)*r10*x6149))+((r12*x6140))+(((-1.0)*x6141*x6147)));
evalcond[2]=((((-1.0)*x6144))+(((-1.0)*r00*x6149))+(((-1.0)*x6145*x6147))+((r02*x6140)));
evalcond[3]=(((r22*x6139))+((sj1*sj2))+(((-1.0)*cj1*x6142))+((x6140*x6143))+((r20*x6148)));
evalcond[4]=((((-1.0)*cj0*x6146))+((r00*x6148))+((r02*x6139))+((x6140*x6145))+(((-1.0)*cj0*sj1*x6142)));
evalcond[5]=((((-1.0)*x6144*x6146))+((r10*x6148))+(((-1.0)*sj0*sj1*x6142))+((x6140*x6141))+((r12*x6139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6152 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6152)==0){
continue;
}
IkReal x6150=pow(x6152,-0.5);
IkReal x6151=((-1.0)*x6150);
CheckValue<IkReal> x6153 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6153.valid){
continue;
}
IkReal gconst157=((3.14159265358979)+(((-1.0)*(x6153.value))));
IkReal gconst158=(r10*x6151);
IkReal gconst159=(r11*x6151);
CheckValue<IkReal> x6154 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6154.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6154.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6158 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6158.valid){
continue;
}
IkReal x6155=((1.0)*(x6158.value));
IkReal x6156=x6150;
IkReal x6157=((-1.0)*x6156);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x6155)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x6155)));
IkReal gconst158=(r10*x6157);
IkReal gconst159=(r11*x6157);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6162 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6162.valid){
continue;
}
IkReal x6159=((1.0)*(x6162.value));
IkReal x6160=x6150;
IkReal x6161=((-1.0)*x6160);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x6159)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x6159)));
IkReal gconst158=(r10*x6161);
IkReal gconst159=(r11*x6161);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6166 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6166.valid){
continue;
}
IkReal x6163=((1.0)*(x6166.value));
IkReal x6164=x6150;
IkReal x6165=((-1.0)*x6164);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x6163)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x6163)));
IkReal gconst158=(r10*x6165);
IkReal gconst159=(r11*x6165);
IkReal x6167=r12*r12;
IkReal x6168=((1.0)*sj0);
IkReal x6169=(cj0*r02);
IkReal x6170=x6150;
j4eval[0]=((IKabs(((((-1.0)*r12*x6168))+(((-1.0)*x6169)))))+(IKabs(((((-1.0)*x6168*x6170))+((sj0*x6167*x6170))+((r12*x6169*x6170))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6171=((1.0)*sj0);
IkReal x6172=((1.0)*gconst158);
IkReal x6173=((1.0)*cj0);
CheckValue<IkReal> x6174 = IKatan2WithCheck(IkReal(((((-1.0)*gconst158*r10*x6171))+(((-1.0)*gconst159*r11*x6171))+(((-1.0)*cj0*r00*x6172))+(((-1.0)*gconst159*r01*x6173)))),IkReal(((((-1.0)*r12*x6171))+(((-1.0)*r02*x6173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6174.valid){
continue;
}
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign((((gconst159*r20))+(((-1.0)*r21*x6172)))),-1);
if(!x6175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6174.value)+(((1.5707963267949)*(x6175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6176=IKcos(j4);
IkReal x6177=IKsin(j4);
IkReal x6178=(gconst159*r11);
IkReal x6179=((1.0)*cj2);
IkReal x6180=((1.0)*sj0);
IkReal x6181=(cj1*sj2);
IkReal x6182=(gconst158*x6177);
IkReal x6183=((1.0)*x6176);
IkReal x6184=(gconst159*x6177);
evalcond[0]=((((-1.0)*gconst158*r20*x6183))+((r22*x6177))+(((-1.0)*gconst159*r21*x6183)));
evalcond[1]=(cj0+((r12*x6177))+(((-1.0)*x6178*x6183))+(((-1.0)*gconst158*r10*x6183)));
evalcond[2]=((((-1.0)*gconst159*r01*x6183))+(((-1.0)*gconst158*r00*x6183))+((r02*x6177))+(((-1.0)*x6180)));
evalcond[3]=(((r21*x6184))+((sj1*sj2))+(((-1.0)*cj1*x6179))+((r20*x6182))+((r22*x6176)));
evalcond[4]=(((r00*x6182))+((r01*x6184))+(((-1.0)*cj0*x6181))+((r02*x6176))+(((-1.0)*cj0*sj1*x6179)));
evalcond[5]=(((r12*x6176))+(((-1.0)*sj0*sj1*x6179))+((x6177*x6178))+((r10*x6182))+(((-1.0)*x6180*x6181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6185=((1.0)*gconst159);
CheckValue<IkReal> x6186 = IKatan2WithCheck(IkReal(((((-1.0)*gconst158*r20*sj0))+(((-1.0)*r21*sj0*x6185)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6186.valid){
continue;
}
CheckValue<IkReal> x6187=IKPowWithIntegerCheck(IKsign((((gconst158*r11))+(((-1.0)*r10*x6185)))),-1);
if(!x6187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6186.value)+(((1.5707963267949)*(x6187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6188=IKcos(j4);
IkReal x6189=IKsin(j4);
IkReal x6190=(gconst159*r11);
IkReal x6191=((1.0)*cj2);
IkReal x6192=((1.0)*sj0);
IkReal x6193=(cj1*sj2);
IkReal x6194=(gconst158*x6189);
IkReal x6195=((1.0)*x6188);
IkReal x6196=(gconst159*x6189);
evalcond[0]=(((r22*x6189))+(((-1.0)*gconst159*r21*x6195))+(((-1.0)*gconst158*r20*x6195)));
evalcond[1]=(cj0+(((-1.0)*x6190*x6195))+((r12*x6189))+(((-1.0)*gconst158*r10*x6195)));
evalcond[2]=((((-1.0)*gconst158*r00*x6195))+(((-1.0)*x6192))+((r02*x6189))+(((-1.0)*gconst159*r01*x6195)));
evalcond[3]=(((r20*x6194))+((r22*x6188))+((sj1*sj2))+((r21*x6196))+(((-1.0)*cj1*x6191)));
evalcond[4]=((((-1.0)*cj0*sj1*x6191))+(((-1.0)*cj0*x6193))+((r02*x6188))+((r00*x6194))+((r01*x6196)));
evalcond[5]=((((-1.0)*sj0*sj1*x6191))+((r10*x6194))+(((-1.0)*x6192*x6193))+((x6189*x6190))+((r12*x6188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6197=((1.0)*cj0);
CheckValue<IkReal> x6198 = IKatan2WithCheck(IkReal(((((-1.0)*gconst159*r21*x6197))+(((-1.0)*gconst158*r20*x6197)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6198.valid){
continue;
}
CheckValue<IkReal> x6199=IKPowWithIntegerCheck(IKsign((((gconst158*r01))+(((-1.0)*gconst159*r00)))),-1);
if(!x6199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6198.value)+(((1.5707963267949)*(x6199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6200=IKcos(j4);
IkReal x6201=IKsin(j4);
IkReal x6202=(gconst159*r11);
IkReal x6203=((1.0)*cj2);
IkReal x6204=((1.0)*sj0);
IkReal x6205=(cj1*sj2);
IkReal x6206=(gconst158*x6201);
IkReal x6207=((1.0)*x6200);
IkReal x6208=(gconst159*x6201);
evalcond[0]=(((r22*x6201))+(((-1.0)*gconst159*r21*x6207))+(((-1.0)*gconst158*r20*x6207)));
evalcond[1]=((((-1.0)*x6202*x6207))+cj0+(((-1.0)*gconst158*r10*x6207))+((r12*x6201)));
evalcond[2]=((((-1.0)*gconst158*r00*x6207))+((r02*x6201))+(((-1.0)*x6204))+(((-1.0)*gconst159*r01*x6207)));
evalcond[3]=((((-1.0)*cj1*x6203))+((r22*x6200))+((sj1*sj2))+((r21*x6208))+((r20*x6206)));
evalcond[4]=((((-1.0)*cj0*sj1*x6203))+(((-1.0)*cj0*x6205))+((r01*x6208))+((r00*x6206))+((r02*x6200)));
evalcond[5]=((((-1.0)*sj0*sj1*x6203))+((r10*x6206))+(((-1.0)*x6204*x6205))+((x6201*x6202))+((r12*x6200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6209=((1.0)*cj5);
IkReal x6210=((((-1.0)*r00*x6209))+((r01*sj5)));
j4eval[0]=x6210;
j4eval[1]=IKsign(x6210);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x6209))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6211=((1.0)*sj5);
IkReal x6212=(((cj5*r20))+(((-1.0)*r21*x6211)));
j4eval[0]=x6212;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6211))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x6212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6213=(cj1*cj2);
IkReal x6214=(r10*sj5);
IkReal x6215=(sj1*sj2);
IkReal x6216=(cj5*r11);
IkReal x6217=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6217;
j4eval[1]=IKsign(x6217);
j4eval[2]=((IKabs((((r12*x6215))+(((-1.0)*r12*x6213)))))+(IKabs((((x6213*x6214))+((x6213*x6216))+(((-1.0)*x6215*x6216))+(((-1.0)*x6214*x6215))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6218=(cj1*cj2);
IkReal x6219=(r10*sj5);
IkReal x6220=(cj5*r11);
IkReal x6221=(sj1*sj2);
CheckValue<IkReal> x6222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x6222.valid){
continue;
}
CheckValue<IkReal> x6223 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6218))+((r12*x6221)))),IkReal(((((-1.0)*x6219*x6221))+((x6218*x6219))+((x6218*x6220))+(((-1.0)*x6220*x6221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6222.value)))+(x6223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6224=IKsin(j4);
IkReal x6225=IKcos(j4);
IkReal x6226=(r20*sj5);
IkReal x6227=((1.0)*cj2);
IkReal x6228=(r00*sj5);
IkReal x6229=(cj5*r21);
IkReal x6230=(cj5*r01);
IkReal x6231=(r10*sj5);
IkReal x6232=(cj5*r11);
IkReal x6233=((1.0)*x6225);
evalcond[0]=(((x6224*x6232))+((x6224*x6231))+((r12*x6225)));
evalcond[1]=((((-1.0)*x6226*x6233))+((r22*x6224))+(((-1.0)*x6229*x6233)));
evalcond[2]=(((r02*x6224))+(((-1.0)*x6228*x6233))+(((-1.0)*x6230*x6233)));
evalcond[3]=((1.0)+(((-1.0)*x6232*x6233))+(((-1.0)*x6231*x6233))+((r12*x6224)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x6227))+((r22*x6225))+((x6224*x6229))+((x6224*x6226)));
evalcond[5]=((((-1.0)*sj1*x6227))+((r02*x6225))+(((-1.0)*cj1*sj2))+((x6224*x6230))+((x6224*x6228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6234=((1.0)*sj5);
CheckValue<IkReal> x6235 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x6234))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6235.valid){
continue;
}
CheckValue<IkReal> x6236=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x6234)))),-1);
if(!x6236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6235.value)+(((1.5707963267949)*(x6236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6237=IKsin(j4);
IkReal x6238=IKcos(j4);
IkReal x6239=(r20*sj5);
IkReal x6240=((1.0)*cj2);
IkReal x6241=(r00*sj5);
IkReal x6242=(cj5*r21);
IkReal x6243=(cj5*r01);
IkReal x6244=(r10*sj5);
IkReal x6245=(cj5*r11);
IkReal x6246=((1.0)*x6238);
evalcond[0]=(((r12*x6238))+((x6237*x6245))+((x6237*x6244)));
evalcond[1]=((((-1.0)*x6242*x6246))+(((-1.0)*x6239*x6246))+((r22*x6237)));
evalcond[2]=(((r02*x6237))+(((-1.0)*x6241*x6246))+(((-1.0)*x6243*x6246)));
evalcond[3]=((1.0)+((r12*x6237))+(((-1.0)*x6245*x6246))+(((-1.0)*x6244*x6246)));
evalcond[4]=(((sj1*sj2))+((x6237*x6242))+((r22*x6238))+((x6237*x6239))+(((-1.0)*cj1*x6240)));
evalcond[5]=(((r02*x6238))+(((-1.0)*cj1*sj2))+((x6237*x6243))+((x6237*x6241))+(((-1.0)*sj1*x6240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6247=((1.0)*cj5);
CheckValue<IkReal> x6248=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x6247)))),-1);
if(!x6248.valid){
continue;
}
CheckValue<IkReal> x6249 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6247))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6248.value)))+(x6249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6250=IKsin(j4);
IkReal x6251=IKcos(j4);
IkReal x6252=(r20*sj5);
IkReal x6253=((1.0)*cj2);
IkReal x6254=(r00*sj5);
IkReal x6255=(cj5*r21);
IkReal x6256=(cj5*r01);
IkReal x6257=(r10*sj5);
IkReal x6258=(cj5*r11);
IkReal x6259=((1.0)*x6251);
evalcond[0]=(((x6250*x6257))+((x6250*x6258))+((r12*x6251)));
evalcond[1]=((((-1.0)*x6252*x6259))+((r22*x6250))+(((-1.0)*x6255*x6259)));
evalcond[2]=((((-1.0)*x6254*x6259))+((r02*x6250))+(((-1.0)*x6256*x6259)));
evalcond[3]=((1.0)+(((-1.0)*x6258*x6259))+(((-1.0)*x6257*x6259))+((r12*x6250)));
evalcond[4]=(((r22*x6251))+((sj1*sj2))+((x6250*x6255))+((x6250*x6252))+(((-1.0)*cj1*x6253)));
evalcond[5]=((((-1.0)*sj1*x6253))+(((-1.0)*cj1*sj2))+((x6250*x6254))+((x6250*x6256))+((r02*x6251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6260=((1.0)*sj5);
IkReal x6261=((((-1.0)*r01*x6260))+((cj5*r00)));
j4eval[0]=x6261;
j4eval[1]=IKsign(x6261);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6260)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6262=((1.0)*cj5);
IkReal x6263=(((r21*sj5))+(((-1.0)*r20*x6262)));
j4eval[0]=x6263;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6262))))));
j4eval[2]=IKsign(x6263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6264=cj5*cj5;
IkReal x6265=r10*r10;
IkReal x6266=(cj5*r11);
IkReal x6267=(r10*sj5);
IkReal x6268=((r12*r12)+x6265+(((2.0)*x6266*x6267))+(((-1.0)*x6264*x6265))+((x6264*(r11*r11))));
j4eval[0]=x6268;
j4eval[1]=IKsign(x6268);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6266))+(((-1.0)*x6267))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6269=cj5*cj5;
IkReal x6270=r10*r10;
IkReal x6271=(cj5*r11);
IkReal x6272=(r10*sj5);
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6271))+(((-1.0)*x6272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
CheckValue<IkReal> x6274=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6270+(((-1.0)*x6269*x6270))+((x6269*(r11*r11)))+(((2.0)*x6271*x6272)))),-1);
if(!x6274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6273.value)+(((1.5707963267949)*(x6274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6275=IKsin(j4);
IkReal x6276=IKcos(j4);
IkReal x6277=(r20*sj5);
IkReal x6278=(r00*sj5);
IkReal x6279=(cj5*r21);
IkReal x6280=(cj5*r01);
IkReal x6281=(r10*sj5);
IkReal x6282=(cj5*r11);
IkReal x6283=((1.0)*x6276);
evalcond[0]=(((r12*x6276))+((x6275*x6281))+((x6275*x6282)));
evalcond[1]=(((r22*x6275))+(((-1.0)*x6279*x6283))+(((-1.0)*x6277*x6283)));
evalcond[2]=(((r02*x6275))+(((-1.0)*x6280*x6283))+(((-1.0)*x6278*x6283)));
evalcond[3]=((-1.0)+((r12*x6275))+(((-1.0)*x6282*x6283))+(((-1.0)*x6281*x6283)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6275*x6280))+((r02*x6276))+((x6275*x6278)));
evalcond[5]=(((r22*x6276))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6275*x6279))+((x6275*x6277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6284=((1.0)*cj5);
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6284))+((r21*sj5)))),-1);
if(!x6285.valid){
continue;
}
CheckValue<IkReal> x6286 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6284)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6285.value)))+(x6286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6287=IKsin(j4);
IkReal x6288=IKcos(j4);
IkReal x6289=(r20*sj5);
IkReal x6290=(r00*sj5);
IkReal x6291=(cj5*r21);
IkReal x6292=(cj5*r01);
IkReal x6293=(r10*sj5);
IkReal x6294=(cj5*r11);
IkReal x6295=((1.0)*x6288);
evalcond[0]=(((r12*x6288))+((x6287*x6294))+((x6287*x6293)));
evalcond[1]=(((r22*x6287))+(((-1.0)*x6289*x6295))+(((-1.0)*x6291*x6295)));
evalcond[2]=((((-1.0)*x6290*x6295))+((r02*x6287))+(((-1.0)*x6292*x6295)));
evalcond[3]=((-1.0)+(((-1.0)*x6294*x6295))+(((-1.0)*x6293*x6295))+((r12*x6287)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x6288))+((x6287*x6290))+((x6287*x6292)));
evalcond[5]=(((r22*x6288))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6287*x6289))+((x6287*x6291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6296=((1.0)*sj5);
CheckValue<IkReal> x6297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6296))+((cj5*r00)))),-1);
if(!x6297.valid){
continue;
}
CheckValue<IkReal> x6298 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x6296))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6297.value)))+(x6298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6299=IKsin(j4);
IkReal x6300=IKcos(j4);
IkReal x6301=(r20*sj5);
IkReal x6302=(r00*sj5);
IkReal x6303=(cj5*r21);
IkReal x6304=(cj5*r01);
IkReal x6305=(r10*sj5);
IkReal x6306=(cj5*r11);
IkReal x6307=((1.0)*x6300);
evalcond[0]=(((r12*x6300))+((x6299*x6305))+((x6299*x6306)));
evalcond[1]=(((r22*x6299))+(((-1.0)*x6303*x6307))+(((-1.0)*x6301*x6307)));
evalcond[2]=((((-1.0)*x6302*x6307))+(((-1.0)*x6304*x6307))+((r02*x6299)));
evalcond[3]=((-1.0)+(((-1.0)*x6305*x6307))+((r12*x6299))+(((-1.0)*x6306*x6307)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x6300))+((x6299*x6302))+((x6299*x6304)));
evalcond[5]=(((r22*x6300))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6299*x6303))+((x6299*x6301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6309 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6309)==0){
continue;
}
IkReal x6308=pow(x6309,-0.5);
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
IkReal gconst160=((-1.0)*(x6310.value));
IkReal gconst161=(r00*x6308);
IkReal gconst162=(r01*x6308);
CheckValue<IkReal> x6311 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6311.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6311.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
IkReal x6312=((-1.0)*(x6314.value));
IkReal x6313=x6308;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst161;
cj5=gconst162;
j5=x6312;
IkReal gconst160=x6312;
IkReal gconst161=(r00*x6313);
IkReal gconst162=(r01*x6313);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6315=((1.0)*sj0);
IkReal x6316=((1.0)*cj0);
CheckValue<IkReal> x6317=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst161*r21))+((gconst162*r20)))),-1);
if(!x6317.valid){
continue;
}
CheckValue<IkReal> x6318 = IKatan2WithCheck(IkReal(((((-1.0)*gconst161*r00*x6316))+(((-1.0)*gconst162*r01*x6316))+(((-1.0)*gconst162*r11*x6315))+(((-1.0)*gconst161*r10*x6315)))),IkReal(((((-1.0)*r02*x6316))+(((-1.0)*r12*x6315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6317.value)))+(x6318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6319=IKcos(j4);
IkReal x6320=IKsin(j4);
IkReal x6321=(gconst162*r01);
IkReal x6322=(gconst162*r11);
IkReal x6323=((1.0)*cj2);
IkReal x6324=((1.0)*sj0);
IkReal x6325=(gconst162*r21);
IkReal x6326=(cj1*sj2);
IkReal x6327=((1.0)*x6319);
IkReal x6328=(gconst161*x6320);
evalcond[0]=((((-1.0)*x6325*x6327))+(((-1.0)*gconst161*r20*x6327))+((r22*x6320)));
evalcond[1]=(cj0+(((-1.0)*gconst161*r10*x6327))+((r12*x6320))+(((-1.0)*x6322*x6327)));
evalcond[2]=(((r02*x6320))+(((-1.0)*x6321*x6327))+(((-1.0)*gconst161*r00*x6327))+(((-1.0)*x6324)));
evalcond[3]=(((r22*x6319))+((sj1*sj2))+((r20*x6328))+((x6320*x6325))+(((-1.0)*cj1*x6323)));
evalcond[4]=(((r02*x6319))+((r00*x6328))+(((-1.0)*cj0*sj1*x6323))+((x6320*x6321))+(((-1.0)*cj0*x6326)));
evalcond[5]=(((r10*x6328))+(((-1.0)*sj0*sj1*x6323))+((x6320*x6322))+(((-1.0)*x6324*x6326))+((r12*x6319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6329=((1.0)*gconst162);
CheckValue<IkReal> x6330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6329))+((gconst161*r11)))),-1);
if(!x6330.valid){
continue;
}
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(((((-1.0)*gconst161*r20*sj0))+(((-1.0)*r21*sj0*x6329)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6330.value)))+(x6331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6332=IKcos(j4);
IkReal x6333=IKsin(j4);
IkReal x6334=(gconst162*r01);
IkReal x6335=(gconst162*r11);
IkReal x6336=((1.0)*cj2);
IkReal x6337=((1.0)*sj0);
IkReal x6338=(gconst162*r21);
IkReal x6339=(cj1*sj2);
IkReal x6340=((1.0)*x6332);
IkReal x6341=(gconst161*x6333);
evalcond[0]=((((-1.0)*gconst161*r20*x6340))+((r22*x6333))+(((-1.0)*x6338*x6340)));
evalcond[1]=(((r12*x6333))+cj0+(((-1.0)*gconst161*r10*x6340))+(((-1.0)*x6335*x6340)));
evalcond[2]=(((r02*x6333))+(((-1.0)*gconst161*r00*x6340))+(((-1.0)*x6334*x6340))+(((-1.0)*x6337)));
evalcond[3]=(((r22*x6332))+((sj1*sj2))+((r20*x6341))+(((-1.0)*cj1*x6336))+((x6333*x6338)));
evalcond[4]=(((r02*x6332))+(((-1.0)*cj0*x6339))+((r00*x6341))+((x6333*x6334))+(((-1.0)*cj0*sj1*x6336)));
evalcond[5]=(((r12*x6332))+(((-1.0)*x6337*x6339))+((r10*x6341))+((x6333*x6335))+(((-1.0)*sj0*sj1*x6336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6342=((-1.0)*r00);
IkReal x6344 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6344)==0){
continue;
}
IkReal x6343=pow(x6344,-0.5);
CheckValue<IkReal> x6345 = IKatan2WithCheck(IkReal(x6342),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6345.valid){
continue;
}
IkReal gconst163=((3.14159265358979)+(((-1.0)*(x6345.value))));
IkReal gconst164=(x6342*x6343);
IkReal gconst165=((-1.0)*r01*x6343);
CheckValue<IkReal> x6346 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6346.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6346.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6347=((-1.0)*r00);
CheckValue<IkReal> x6350 = IKatan2WithCheck(IkReal(x6347),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6350.valid){
continue;
}
IkReal x6348=((1.0)*(x6350.value));
IkReal x6349=x6343;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x6348)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x6348)));
IkReal gconst164=(x6347*x6349);
IkReal gconst165=((-1.0)*r01*x6349);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6351=((-1.0)*r00);
CheckValue<IkReal> x6354 = IKatan2WithCheck(IkReal(x6351),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6354.valid){
continue;
}
IkReal x6352=((1.0)*(x6354.value));
IkReal x6353=x6343;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x6352)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x6352)));
IkReal gconst164=(x6351*x6353);
IkReal gconst165=((-1.0)*r01*x6353);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6355=((-1.0)*r00);
CheckValue<IkReal> x6358 = IKatan2WithCheck(IkReal(x6355),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6358.valid){
continue;
}
IkReal x6356=((1.0)*(x6358.value));
IkReal x6357=x6343;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x6356)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x6356)));
IkReal gconst164=(x6355*x6357);
IkReal gconst165=((-1.0)*r01*x6357);
IkReal x6359=r02*r02;
IkReal x6360=(r12*sj0);
IkReal x6361=((1.0)*cj0);
IkReal x6362=x6343;
j4eval[0]=((IKabs((((r02*x6360*x6362))+(((-1.0)*x6361*x6362))+((cj0*x6359*x6362)))))+(IKabs(((((-1.0)*r02*x6361))+(((-1.0)*x6360))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6363=((1.0)*sj0);
IkReal x6364=((1.0)*cj0);
CheckValue<IkReal> x6365=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst164*r21))+((gconst165*r20)))),-1);
if(!x6365.valid){
continue;
}
CheckValue<IkReal> x6366 = IKatan2WithCheck(IkReal(((((-1.0)*gconst164*r10*x6363))+(((-1.0)*gconst165*r11*x6363))+(((-1.0)*gconst164*r00*x6364))+(((-1.0)*gconst165*r01*x6364)))),IkReal(((((-1.0)*r02*x6364))+(((-1.0)*r12*x6363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6365.value)))+(x6366.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6367=IKcos(j4);
IkReal x6368=IKsin(j4);
IkReal x6369=((1.0)*cj2);
IkReal x6370=((1.0)*sj0);
IkReal x6371=(cj1*sj2);
IkReal x6372=(gconst165*x6368);
IkReal x6373=(gconst164*x6368);
IkReal x6374=((1.0)*gconst165*x6367);
IkReal x6375=((1.0)*gconst164*x6367);
evalcond[0]=(((r22*x6368))+(((-1.0)*r20*x6375))+(((-1.0)*r21*x6374)));
evalcond[1]=(cj0+((r12*x6368))+(((-1.0)*r11*x6374))+(((-1.0)*r10*x6375)));
evalcond[2]=((((-1.0)*r01*x6374))+(((-1.0)*x6370))+((r02*x6368))+(((-1.0)*r00*x6375)));
evalcond[3]=(((r21*x6372))+((sj1*sj2))+((r20*x6373))+(((-1.0)*cj1*x6369))+((r22*x6367)));
evalcond[4]=(((r00*x6373))+((r01*x6372))+(((-1.0)*cj0*x6371))+(((-1.0)*cj0*sj1*x6369))+((r02*x6367)));
evalcond[5]=(((r12*x6367))+(((-1.0)*sj0*sj1*x6369))+((r11*x6372))+(((-1.0)*x6370*x6371))+((r10*x6373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6376=((1.0)*gconst165);
CheckValue<IkReal> x6377 = IKatan2WithCheck(IkReal(((((-1.0)*gconst164*r20*sj0))+(((-1.0)*r21*sj0*x6376)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6377.valid){
continue;
}
CheckValue<IkReal> x6378=IKPowWithIntegerCheck(IKsign((((gconst164*r11))+(((-1.0)*r10*x6376)))),-1);
if(!x6378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6377.value)+(((1.5707963267949)*(x6378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6379=IKcos(j4);
IkReal x6380=IKsin(j4);
IkReal x6381=((1.0)*cj2);
IkReal x6382=((1.0)*sj0);
IkReal x6383=(cj1*sj2);
IkReal x6384=(gconst165*x6380);
IkReal x6385=(gconst164*x6380);
IkReal x6386=((1.0)*gconst165*x6379);
IkReal x6387=((1.0)*gconst164*x6379);
evalcond[0]=(((r22*x6380))+(((-1.0)*r20*x6387))+(((-1.0)*r21*x6386)));
evalcond[1]=(cj0+(((-1.0)*r10*x6387))+(((-1.0)*r11*x6386))+((r12*x6380)));
evalcond[2]=((((-1.0)*x6382))+((r02*x6380))+(((-1.0)*r00*x6387))+(((-1.0)*r01*x6386)));
evalcond[3]=(((sj1*sj2))+((r21*x6384))+((r22*x6379))+((r20*x6385))+(((-1.0)*cj1*x6381)));
evalcond[4]=((((-1.0)*cj0*sj1*x6381))+((r00*x6385))+((r01*x6384))+((r02*x6379))+(((-1.0)*cj0*x6383)));
evalcond[5]=((((-1.0)*sj0*sj1*x6381))+(((-1.0)*x6382*x6383))+((r10*x6385))+((r12*x6379))+((r11*x6384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6388=((1.0)*cj0);
CheckValue<IkReal> x6389 = IKatan2WithCheck(IkReal(((((-1.0)*gconst165*r21*x6388))+(((-1.0)*gconst164*r20*x6388)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst165*r00))+((gconst164*r01)))),-1);
if(!x6390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6389.value)+(((1.5707963267949)*(x6390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6391=IKcos(j4);
IkReal x6392=IKsin(j4);
IkReal x6393=((1.0)*cj2);
IkReal x6394=((1.0)*sj0);
IkReal x6395=(cj1*sj2);
IkReal x6396=(gconst165*x6392);
IkReal x6397=(gconst164*x6392);
IkReal x6398=((1.0)*gconst165*x6391);
IkReal x6399=((1.0)*gconst164*x6391);
evalcond[0]=((((-1.0)*r21*x6398))+(((-1.0)*r20*x6399))+((r22*x6392)));
evalcond[1]=(cj0+((r12*x6392))+(((-1.0)*r10*x6399))+(((-1.0)*r11*x6398)));
evalcond[2]=((((-1.0)*r00*x6399))+(((-1.0)*x6394))+((r02*x6392))+(((-1.0)*r01*x6398)));
evalcond[3]=(((sj1*sj2))+((r20*x6397))+((r21*x6396))+(((-1.0)*cj1*x6393))+((r22*x6391)));
evalcond[4]=(((r01*x6396))+((r00*x6397))+(((-1.0)*cj0*x6395))+(((-1.0)*cj0*sj1*x6393))+((r02*x6391)));
evalcond[5]=(((r11*x6396))+((r12*x6391))+((r10*x6397))+(((-1.0)*sj0*sj1*x6393))+(((-1.0)*x6394*x6395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6400=((1.0)*cj5);
IkReal x6401=((((-1.0)*r10*x6400))+((r11*sj5)));
j4eval[0]=x6401;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x6400))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x6401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6402=((1.0)*sj5);
IkReal x6403=(((cj5*r20))+(((-1.0)*r21*x6402)));
j4eval[0]=x6403;
j4eval[1]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6402)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6404=cj5*cj5;
IkReal x6405=r00*r00;
IkReal x6406=(r00*sj5);
IkReal x6407=(cj5*r01);
IkReal x6408=(((x6404*(r01*r01)))+(((2.0)*x6406*x6407))+x6405+(r02*r02)+(((-1.0)*x6404*x6405)));
j4eval[0]=x6408;
j4eval[1]=IKsign(x6408);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6406))+(((-1.0)*x6407))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6409=cj5*cj5;
IkReal x6410=r00*r00;
IkReal x6411=(cj5*r01);
IkReal x6412=(r00*sj5);
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6412))+(((-1.0)*x6411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
CheckValue<IkReal> x6414=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6409*x6410))+x6410+(((2.0)*x6411*x6412))+((x6409*(r01*r01)))+(r02*r02))),-1);
if(!x6414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6413.value)+(((1.5707963267949)*(x6414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6415=IKsin(j4);
IkReal x6416=IKcos(j4);
IkReal x6417=(r20*sj5);
IkReal x6418=((1.0)*cj2);
IkReal x6419=(r00*sj5);
IkReal x6420=(cj5*r21);
IkReal x6421=(cj5*r01);
IkReal x6422=(r10*sj5);
IkReal x6423=(cj5*r11);
IkReal x6424=((1.0)*x6416);
evalcond[0]=(((r02*x6416))+((x6415*x6419))+((x6415*x6421)));
evalcond[1]=((((-1.0)*x6417*x6424))+((r22*x6415))+(((-1.0)*x6420*x6424)));
evalcond[2]=((((-1.0)*x6422*x6424))+((r12*x6415))+(((-1.0)*x6423*x6424)));
evalcond[3]=((-1.0)+((r02*x6415))+(((-1.0)*x6421*x6424))+(((-1.0)*x6419*x6424)));
evalcond[4]=((((-1.0)*cj1*x6418))+((sj1*sj2))+((x6415*x6417))+((r22*x6416))+((x6415*x6420)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x6418))+((r12*x6416))+((x6415*x6422))+((x6415*x6423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6425=((1.0)*sj5);
CheckValue<IkReal> x6426=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x6425)))),-1);
if(!x6426.valid){
continue;
}
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6425)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6426.value)))+(x6427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6428=IKsin(j4);
IkReal x6429=IKcos(j4);
IkReal x6430=(r20*sj5);
IkReal x6431=((1.0)*cj2);
IkReal x6432=(r00*sj5);
IkReal x6433=(cj5*r21);
IkReal x6434=(cj5*r01);
IkReal x6435=(r10*sj5);
IkReal x6436=(cj5*r11);
IkReal x6437=((1.0)*x6429);
evalcond[0]=(((r02*x6429))+((x6428*x6434))+((x6428*x6432)));
evalcond[1]=((((-1.0)*x6430*x6437))+(((-1.0)*x6433*x6437))+((r22*x6428)));
evalcond[2]=((((-1.0)*x6435*x6437))+((r12*x6428))+(((-1.0)*x6436*x6437)));
evalcond[3]=((-1.0)+((r02*x6428))+(((-1.0)*x6434*x6437))+(((-1.0)*x6432*x6437)));
evalcond[4]=((((-1.0)*cj1*x6431))+((sj1*sj2))+((r22*x6429))+((x6428*x6430))+((x6428*x6433)));
evalcond[5]=((((-1.0)*sj1*x6431))+(((-1.0)*cj1*sj2))+((r12*x6429))+((x6428*x6435))+((x6428*x6436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6438=((1.0)*cj5);
CheckValue<IkReal> x6439 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6438))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6439.valid){
continue;
}
CheckValue<IkReal> x6440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6438))+((r11*sj5)))),-1);
if(!x6440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6439.value)+(((1.5707963267949)*(x6440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6441=IKsin(j4);
IkReal x6442=IKcos(j4);
IkReal x6443=(r20*sj5);
IkReal x6444=((1.0)*cj2);
IkReal x6445=(r00*sj5);
IkReal x6446=(cj5*r21);
IkReal x6447=(cj5*r01);
IkReal x6448=(r10*sj5);
IkReal x6449=(cj5*r11);
IkReal x6450=((1.0)*x6442);
evalcond[0]=(((r02*x6442))+((x6441*x6445))+((x6441*x6447)));
evalcond[1]=((((-1.0)*x6446*x6450))+((r22*x6441))+(((-1.0)*x6443*x6450)));
evalcond[2]=(((r12*x6441))+(((-1.0)*x6449*x6450))+(((-1.0)*x6448*x6450)));
evalcond[3]=((-1.0)+(((-1.0)*x6447*x6450))+(((-1.0)*x6445*x6450))+((r02*x6441)));
evalcond[4]=((((-1.0)*cj1*x6444))+((sj1*sj2))+((r22*x6442))+((x6441*x6443))+((x6441*x6446)));
evalcond[5]=(((r12*x6442))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x6444))+((x6441*x6449))+((x6441*x6448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6451=((1.0)*sj5);
IkReal x6452=(((cj5*r10))+(((-1.0)*r11*x6451)));
j4eval[0]=x6452;
j4eval[1]=IKsign(x6452);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6451))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6453=((1.0)*cj5);
IkReal x6454=((((-1.0)*r20*x6453))+((r21*sj5)));
j4eval[0]=x6454;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6453))))));
j4eval[2]=IKsign(x6454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6455=cj5*cj5;
IkReal x6456=r00*r00;
IkReal x6457=(cj5*r01);
IkReal x6458=(r00*sj5);
IkReal x6459=((((-2.0)*x6457*x6458))+(((-1.0)*x6455*(r01*r01)))+(((-1.0)*(r02*r02)))+((x6455*x6456))+(((-1.0)*x6456)));
j4eval[0]=x6459;
j4eval[1]=IKsign(x6459);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6458))+(((-1.0)*x6457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6460=cj5*cj5;
IkReal x6461=r00*r00;
IkReal x6462=(cj5*r01);
IkReal x6463=(r00*sj5);
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6462))+(((-1.0)*x6463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
CheckValue<IkReal> x6465=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6460*(r01*r01)))+(((-2.0)*x6462*x6463))+((x6460*x6461))+(((-1.0)*(r02*r02)))+(((-1.0)*x6461)))),-1);
if(!x6465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6464.value)+(((1.5707963267949)*(x6465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6466=IKsin(j4);
IkReal x6467=IKcos(j4);
IkReal x6468=(r20*sj5);
IkReal x6469=(r00*sj5);
IkReal x6470=(cj5*r21);
IkReal x6471=(cj5*r01);
IkReal x6472=(r10*sj5);
IkReal x6473=(cj5*r11);
IkReal x6474=((1.0)*x6467);
evalcond[0]=(((x6466*x6471))+((x6466*x6469))+((r02*x6467)));
evalcond[1]=((((-1.0)*x6468*x6474))+((r22*x6466))+(((-1.0)*x6470*x6474)));
evalcond[2]=((((-1.0)*x6473*x6474))+(((-1.0)*x6472*x6474))+((r12*x6466)));
evalcond[3]=((1.0)+(((-1.0)*x6469*x6474))+(((-1.0)*x6471*x6474))+((r02*x6466)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6466*x6473))+((x6466*x6472))+((r12*x6467)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x6466*x6470))+((sj1*sj2))+((x6466*x6468))+((r22*x6467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6475=((1.0)*cj5);
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x6475)))),-1);
if(!x6476.valid){
continue;
}
CheckValue<IkReal> x6477 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6475))+(((-1.0)*r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6476.value)))+(x6477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6478=IKsin(j4);
IkReal x6479=IKcos(j4);
IkReal x6480=(r20*sj5);
IkReal x6481=(r00*sj5);
IkReal x6482=(cj5*r21);
IkReal x6483=(cj5*r01);
IkReal x6484=(r10*sj5);
IkReal x6485=(cj5*r11);
IkReal x6486=((1.0)*x6479);
evalcond[0]=(((r02*x6479))+((x6478*x6481))+((x6478*x6483)));
evalcond[1]=(((r22*x6478))+(((-1.0)*x6480*x6486))+(((-1.0)*x6482*x6486)));
evalcond[2]=((((-1.0)*x6485*x6486))+((r12*x6478))+(((-1.0)*x6484*x6486)));
evalcond[3]=((1.0)+(((-1.0)*x6481*x6486))+((r02*x6478))+(((-1.0)*x6483*x6486)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x6479))+((x6478*x6484))+((x6478*x6485)));
evalcond[5]=(((r22*x6479))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6478*x6480))+((x6478*x6482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6487=((1.0)*sj5);
CheckValue<IkReal> x6488 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6487)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6488.valid){
continue;
}
CheckValue<IkReal> x6489=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x6487)))),-1);
if(!x6489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6488.value)+(((1.5707963267949)*(x6489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6490=IKsin(j4);
IkReal x6491=IKcos(j4);
IkReal x6492=(r20*sj5);
IkReal x6493=(r00*sj5);
IkReal x6494=(cj5*r21);
IkReal x6495=(cj5*r01);
IkReal x6496=(r10*sj5);
IkReal x6497=(cj5*r11);
IkReal x6498=((1.0)*x6491);
evalcond[0]=(((r02*x6491))+((x6490*x6495))+((x6490*x6493)));
evalcond[1]=((((-1.0)*x6494*x6498))+(((-1.0)*x6492*x6498))+((r22*x6490)));
evalcond[2]=(((r12*x6490))+(((-1.0)*x6496*x6498))+(((-1.0)*x6497*x6498)));
evalcond[3]=((1.0)+(((-1.0)*x6495*x6498))+((r02*x6490))+(((-1.0)*x6493*x6498)));
evalcond[4]=(((cj2*sj1))+((r12*x6491))+((cj1*sj2))+((x6490*x6496))+((x6490*x6497)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x6490*x6494))+((x6490*x6492))+((r22*x6491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6499=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6499);
rxp1_1=(px*r21);
rxp1_2=(r11*x6499);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6500=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6500);
rxp1_1=(px*r21);
rxp1_2=(r11*x6500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6501=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6501);
rxp1_1=(px*r21);
rxp1_2=(r11*x6501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6504=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x6504.valid){
continue;
}
IkReal x6502=x6504.value;
IkReal x6503=(sj0*x6502);
sj4array[0]=(((cj1*sj2*x6503))+((cj2*sj1*x6503)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6505=IKcos(j4);
IkReal x6506=IKsin(j4);
IkReal x6507=(r20*sj5);
IkReal x6508=((1.0)*x6505);
IkReal x6509=(cj5*x6508);
evalcond[0]=(r02*x6505);
evalcond[1]=(((r02*x6506))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x6507*x6508))+(((-1.0)*r21*x6509)));
evalcond[3]=((((-1.0)*r11*x6509))+(((-1.0)*r10*sj5*x6508)));
evalcond[4]=(((cj5*r21*x6506))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6506*x6507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6511=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x6511.valid){
continue;
}
IkReal x6510=x6511.value;
sj4array[0]=((((-1.0)*sj1*sj2*x6510))+((cj1*cj2*x6510)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6512=IKcos(j4);
IkReal x6513=IKsin(j4);
IkReal x6514=(r10*sj5);
IkReal x6515=((1.0)*sj0);
IkReal x6516=((1.0)*x6512);
IkReal x6517=(cj5*x6516);
evalcond[0]=(r02*x6512);
evalcond[1]=((((-1.0)*x6515))+((r02*x6513)));
evalcond[2]=((((-1.0)*r21*x6517))+(((-1.0)*r20*sj5*x6516)));
evalcond[3]=((((-1.0)*x6514*x6516))+(((-1.0)*r11*x6517)));
evalcond[4]=((((-1.0)*cj1*sj2*x6515))+((x6513*x6514))+(((-1.0)*cj2*sj1*x6515))+((cj5*r11*x6513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6518=IKPowWithIntegerCheck(r02,-1);
if(!x6518.valid){
continue;
}
sj4array[0]=(sj0*(x6518.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6519=IKcos(j4);
IkReal x6520=IKsin(j4);
IkReal x6521=((1.0)*sj0);
IkReal x6522=(sj5*x6520);
IkReal x6523=(cj5*x6520);
IkReal x6524=((1.0)*cj5*x6519);
IkReal x6525=((1.0)*sj5*x6519);
evalcond[0]=(r02*x6519);
evalcond[1]=((((-1.0)*r21*x6524))+(((-1.0)*r20*x6525)));
evalcond[2]=((((-1.0)*r11*x6524))+(((-1.0)*r10*x6525)));
evalcond[3]=(((r20*x6522))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6523)));
evalcond[4]=((((-1.0)*cj1*sj2*x6521))+(((-1.0)*cj2*sj1*x6521))+((r10*x6522))+((r11*x6523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6526=((1.0)*sj0);
IkReal x6527=((1.0)*cj0);
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x6528.valid){
continue;
}
CheckValue<IkReal> x6529 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x6527))+(((-1.0)*cj5*r11*x6526))+(((-1.0)*cj5*r01*x6527))+(((-1.0)*r10*sj5*x6526)))),IkReal(((((-1.0)*r02*x6527))+(((-1.0)*r12*x6526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6528.value)))+(x6529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6530=IKcos(j4);
IkReal x6531=IKsin(j4);
IkReal x6532=(r20*sj5);
IkReal x6533=((1.0)*cj2);
IkReal x6534=(r00*sj5);
IkReal x6535=(cj5*r21);
IkReal x6536=(cj5*r01);
IkReal x6537=(r10*sj5);
IkReal x6538=((1.0)*sj0);
IkReal x6539=(cj1*sj2);
IkReal x6540=(cj5*r11);
IkReal x6541=((1.0)*x6530);
evalcond[0]=(((r22*x6531))+(((-1.0)*x6535*x6541))+(((-1.0)*x6532*x6541)));
evalcond[1]=((((-1.0)*x6540*x6541))+cj0+(((-1.0)*x6537*x6541))+((r12*x6531)));
evalcond[2]=(((r02*x6531))+(((-1.0)*x6538))+(((-1.0)*x6536*x6541))+(((-1.0)*x6534*x6541)));
evalcond[3]=((((-1.0)*cj1*x6533))+((r22*x6530))+((sj1*sj2))+((x6531*x6535))+((x6531*x6532)));
evalcond[4]=(((r02*x6530))+(((-1.0)*cj0*sj1*x6533))+((x6531*x6534))+((x6531*x6536))+(((-1.0)*cj0*x6539)));
evalcond[5]=(((x6531*x6537))+((x6531*x6540))+(((-1.0)*x6538*x6539))+((r12*x6530))+(((-1.0)*sj0*sj1*x6533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6542=((1.0)*cj5);
CheckValue<IkReal> x6543=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x6542)))),-1);
if(!x6543.valid){
continue;
}
CheckValue<IkReal> x6544 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6542))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6543.value)))+(x6544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6545=IKcos(j4);
IkReal x6546=IKsin(j4);
IkReal x6547=(r20*sj5);
IkReal x6548=((1.0)*cj2);
IkReal x6549=(r00*sj5);
IkReal x6550=(cj5*r21);
IkReal x6551=(cj5*r01);
IkReal x6552=(r10*sj5);
IkReal x6553=((1.0)*sj0);
IkReal x6554=(cj1*sj2);
IkReal x6555=(cj5*r11);
IkReal x6556=((1.0)*x6545);
evalcond[0]=((((-1.0)*x6550*x6556))+(((-1.0)*x6547*x6556))+((r22*x6546)));
evalcond[1]=((((-1.0)*x6552*x6556))+cj0+(((-1.0)*x6555*x6556))+((r12*x6546)));
evalcond[2]=((((-1.0)*x6551*x6556))+(((-1.0)*x6553))+((r02*x6546))+(((-1.0)*x6549*x6556)));
evalcond[3]=((((-1.0)*cj1*x6548))+((sj1*sj2))+((x6546*x6550))+((x6546*x6547))+((r22*x6545)));
evalcond[4]=((((-1.0)*cj0*sj1*x6548))+((r02*x6545))+((x6546*x6551))+((x6546*x6549))+(((-1.0)*cj0*x6554)));
evalcond[5]=((((-1.0)*x6553*x6554))+(((-1.0)*sj0*sj1*x6548))+((x6546*x6552))+((x6546*x6555))+((r12*x6545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6557=((1.0)*cj0);
CheckValue<IkReal> x6558=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6558.valid){
continue;
}
CheckValue<IkReal> x6559 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x6557))+(((-1.0)*cj5*r21*x6557)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6558.value)))+(x6559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6560=IKcos(j4);
IkReal x6561=IKsin(j4);
IkReal x6562=(r20*sj5);
IkReal x6563=((1.0)*cj2);
IkReal x6564=(r00*sj5);
IkReal x6565=(cj5*r21);
IkReal x6566=(cj5*r01);
IkReal x6567=(r10*sj5);
IkReal x6568=((1.0)*sj0);
IkReal x6569=(cj1*sj2);
IkReal x6570=(cj5*r11);
IkReal x6571=((1.0)*x6560);
evalcond[0]=((((-1.0)*x6565*x6571))+((r22*x6561))+(((-1.0)*x6562*x6571)));
evalcond[1]=((((-1.0)*x6567*x6571))+cj0+((r12*x6561))+(((-1.0)*x6570*x6571)));
evalcond[2]=((((-1.0)*x6566*x6571))+(((-1.0)*x6568))+((r02*x6561))+(((-1.0)*x6564*x6571)));
evalcond[3]=(((x6561*x6565))+((x6561*x6562))+((r22*x6560))+(((-1.0)*cj1*x6563))+((sj1*sj2)));
evalcond[4]=(((x6561*x6566))+((x6561*x6564))+((r02*x6560))+(((-1.0)*cj0*x6569))+(((-1.0)*cj0*sj1*x6563)));
evalcond[5]=(((x6561*x6570))+((x6561*x6567))+((r12*x6560))+(((-1.0)*sj0*sj1*x6563))+(((-1.0)*x6568*x6569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6572=((1.0)*cj5);
IkReal x6573=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6573;
j0eval[1]=IKsign(x6573);
j0eval[2]=((IKabs((((r11*sj5))+(((-1.0)*r10*x6572)))))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6572))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6574=r20*r20;
IkReal x6575=cj5*cj5;
IkReal x6576=(r20*sj5);
IkReal x6577=(cj5*r21);
IkReal x6578=(cj1*cj2);
IkReal x6579=((1.0)*sj1*sj2);
IkReal x6580=((((-1.0)*x6575*(r21*r21)))+(((-1.0)*(r22*r22)))+((x6574*x6575))+(((-1.0)*x6574))+(((-2.0)*x6576*x6577)));
j4eval[0]=x6580;
j4eval[1]=((IKabs((((r22*x6578))+(((-1.0)*r22*x6579)))))+(IKabs(((((-1.0)*x6576*x6579))+(((-1.0)*x6577*x6579))+((x6576*x6578))+((x6577*x6578))))));
j4eval[2]=IKsign(x6580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.17820324005891)*py))+(((25.920471281296)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((1.17820324005891)*py))+(((25.920471281296)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((25.920471281296)*py))+(((-1.17820324005891)*px))), ((((1.17820324005891)*py))+(((25.920471281296)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6581=IKcos(j0);
IkReal x6582=IKsin(j0);
evalcond[0]=((((-0.00175)*x6582))+(((-1.0)*px))+(((0.0385)*x6581)));
evalcond[1]=((((0.00175)*x6581))+(((-1.0)*py))+(((0.0385)*x6582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6583=((1.0)*cj5);
IkReal x6584=((((-1.0)*r00*x6583))+((r01*sj5)));
j4eval[0]=x6584;
j4eval[1]=IKsign(x6584);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6583))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6585=((1.0)*cj5);
IkReal x6586=((((-1.0)*r10*x6585))+((r11*sj5)));
j4eval[0]=x6586;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6585))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x6586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6587=cj5*cj5;
IkReal x6588=((1.0)*r20);
IkReal x6589=(cj5*r21);
IkReal x6590=(((cj5*r01*r20*sj5))+((r00*r20))+((r01*r21*x6587))+(((-1.0)*r00*x6587*x6588))+((r00*sj5*x6589))+((r02*r22)));
j4eval[0]=x6590;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x6588))+(((-1.0)*cj0*x6589)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6591=cj5*cj5;
IkReal x6592=((1.0)*r20);
IkReal x6593=(cj5*r21);
CheckValue<IkReal> x6594=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x6591*x6592))+((r00*r20))+((r01*r21*x6591))+((r02*r22))+((r00*sj5*x6593)))),-1);
if(!x6594.valid){
continue;
}
CheckValue<IkReal> x6595 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x6593))+(((-1.0)*cj0*sj5*x6592)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6594.value)))+(x6595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6596=IKcos(j4);
IkReal x6597=IKsin(j4);
IkReal x6598=((1.0)*sj0);
IkReal x6599=(r00*sj5);
IkReal x6600=(r20*sj5);
IkReal x6601=(r10*sj5);
IkReal x6602=((1.0)*x6596);
IkReal x6603=((1.0)*x6597);
IkReal x6604=(cj5*x6603);
evalcond[0]=(((r22*x6597))+(((-1.0)*x6600*x6602))+(((-1.0)*cj5*r21*x6602)));
evalcond[1]=(((r12*x6597))+cj0+(((-1.0)*x6601*x6602))+(((-1.0)*cj5*r11*x6602)));
evalcond[2]=((((-1.0)*r22*x6602))+(((-1.0)*x6600*x6603))+(((-1.0)*r21*x6604)));
evalcond[3]=(((r02*x6597))+(((-1.0)*x6599*x6602))+(((-1.0)*cj5*r01*x6602))+(((-1.0)*x6598)));
evalcond[4]=((((-1.0)*x6599*x6603))+(((-1.0)*r02*x6602))+(((-1.0)*r01*x6604))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6601*x6603))+(((-1.0)*r12*x6602))+(((-1.0)*r11*x6604))+(((-1.0)*x6598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6605=((1.0)*cj5);
CheckValue<IkReal> x6606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6605))+((r11*sj5)))),-1);
if(!x6606.valid){
continue;
}
CheckValue<IkReal> x6607 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6605))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6606.value)))+(x6607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6608=IKcos(j4);
IkReal x6609=IKsin(j4);
IkReal x6610=((1.0)*sj0);
IkReal x6611=(r00*sj5);
IkReal x6612=(r20*sj5);
IkReal x6613=(r10*sj5);
IkReal x6614=((1.0)*x6608);
IkReal x6615=((1.0)*x6609);
IkReal x6616=(cj5*x6615);
evalcond[0]=(((r22*x6609))+(((-1.0)*x6612*x6614))+(((-1.0)*cj5*r21*x6614)));
evalcond[1]=((((-1.0)*x6613*x6614))+cj0+(((-1.0)*cj5*r11*x6614))+((r12*x6609)));
evalcond[2]=((((-1.0)*x6612*x6615))+(((-1.0)*r22*x6614))+(((-1.0)*r21*x6616)));
evalcond[3]=((((-1.0)*x6610))+(((-1.0)*cj5*r01*x6614))+(((-1.0)*x6611*x6614))+((r02*x6609)));
evalcond[4]=((((-1.0)*x6611*x6615))+(((-1.0)*r02*x6614))+(((-1.0)*r01*x6616))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6613*x6615))+(((-1.0)*r12*x6614))+(((-1.0)*x6610))+(((-1.0)*r11*x6616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6617=((1.0)*cj0);
CheckValue<IkReal> x6618=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6618.valid){
continue;
}
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x6617))+(((-1.0)*r20*sj5*x6617)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6618.value)))+(x6619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6620=IKcos(j4);
IkReal x6621=IKsin(j4);
IkReal x6622=((1.0)*sj0);
IkReal x6623=(r00*sj5);
IkReal x6624=(r20*sj5);
IkReal x6625=(r10*sj5);
IkReal x6626=((1.0)*x6620);
IkReal x6627=((1.0)*x6621);
IkReal x6628=(cj5*x6627);
evalcond[0]=((((-1.0)*cj5*r21*x6626))+((r22*x6621))+(((-1.0)*x6624*x6626)));
evalcond[1]=(cj0+((r12*x6621))+(((-1.0)*cj5*r11*x6626))+(((-1.0)*x6625*x6626)));
evalcond[2]=((((-1.0)*r22*x6626))+(((-1.0)*x6624*x6627))+(((-1.0)*r21*x6628)));
evalcond[3]=((((-1.0)*x6622))+((r02*x6621))+(((-1.0)*cj5*r01*x6626))+(((-1.0)*x6623*x6626)));
evalcond[4]=((((-1.0)*r02*x6626))+(((-1.0)*r01*x6628))+(((-1.0)*cj0))+(((-1.0)*x6623*x6627)));
evalcond[5]=((((-1.0)*x6622))+(((-1.0)*r11*x6628))+(((-1.0)*r12*x6626))+(((-1.0)*x6625*x6627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.17820324005891)*py))+(((25.920471281296)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((1.17820324005891)*py))+(((25.920471281296)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((25.920471281296)*py))+(((-1.17820324005891)*px))), ((((1.17820324005891)*py))+(((25.920471281296)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6629=IKcos(j0);
IkReal x6630=IKsin(j0);
evalcond[0]=((((0.0385)*x6629))+(((-1.0)*px))+(((-0.00175)*x6630)));
evalcond[1]=((((0.00175)*x6629))+(((0.0385)*x6630))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6631=((1.0)*cj5);
IkReal x6632=(((r01*sj5))+(((-1.0)*r00*x6631)));
j4eval[0]=x6632;
j4eval[1]=IKsign(x6632);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6631))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6633=cj5*cj5;
IkReal x6634=(r10*r20);
IkReal x6635=((1.0)*r21);
IkReal x6636=((1.0)*r20*sj5);
IkReal x6637=((((-1.0)*r11*x6633*x6635))+(((-1.0)*x6634))+(((-1.0)*r12*r22))+(((-1.0)*cj5*r11*x6636))+(((-1.0)*cj5*r10*sj5*x6635))+((x6633*x6634)));
j4eval[0]=x6637;
j4eval[1]=IKsign(x6637);
j4eval[2]=((IKabs(((((-1.0)*cj0*x6636))+(((-1.0)*cj0*cj5*x6635)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6638=cj5*cj5;
IkReal x6639=((1.0)*r00);
IkReal x6640=(cj5*r21);
IkReal x6641=((1.0)*cj0);
IkReal x6642=(r20*sj5);
IkReal x6643=((1.0)*r01);
IkReal x6644=((((-1.0)*r02*r22))+(((-1.0)*sj5*x6639*x6640))+(((-1.0)*cj5*x6642*x6643))+(((-1.0)*r21*x6638*x6643))+(((-1.0)*r20*x6639))+((r00*r20*x6638)));
j4eval[0]=x6644;
j4eval[1]=((IKabs(((((-1.0)*x6640*x6641))+(((-1.0)*x6641*x6642)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6645=cj5*cj5;
IkReal x6646=((1.0)*r00);
IkReal x6647=(cj5*r21);
IkReal x6648=((1.0)*cj0);
IkReal x6649=(r20*sj5);
IkReal x6650=((1.0)*r01);
CheckValue<IkReal> x6651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*sj5*x6646*x6647))+(((-1.0)*r21*x6645*x6650))+(((-1.0)*r20*x6646))+((r00*r20*x6645))+(((-1.0)*cj5*x6649*x6650)))),-1);
if(!x6651.valid){
continue;
}
CheckValue<IkReal> x6652 = IKatan2WithCheck(IkReal(((((-1.0)*x6647*x6648))+(((-1.0)*x6648*x6649)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6651.value)))+(x6652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6653=IKcos(j4);
IkReal x6654=IKsin(j4);
IkReal x6655=(cj5*r21);
IkReal x6656=(cj5*r11);
IkReal x6657=(r00*sj5);
IkReal x6658=(r20*sj5);
IkReal x6659=(cj5*r01);
IkReal x6660=(r10*sj5);
IkReal x6661=((1.0)*x6653);
IkReal x6662=((1.0)*x6654);
evalcond[0]=((((-1.0)*x6658*x6661))+(((-1.0)*x6655*x6661))+((r22*x6654)));
evalcond[1]=(cj0+((r12*x6654))+(((-1.0)*x6660*x6661))+(((-1.0)*x6656*x6661)));
evalcond[2]=((((-1.0)*x6658*x6662))+(((-1.0)*x6655*x6662))+(((-1.0)*r22*x6661)));
evalcond[3]=(cj0+(((-1.0)*x6657*x6662))+(((-1.0)*x6659*x6662))+(((-1.0)*r02*x6661)));
evalcond[4]=(sj0+(((-1.0)*x6660*x6662))+(((-1.0)*r12*x6661))+(((-1.0)*x6656*x6662)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6657*x6661))+((r02*x6654))+(((-1.0)*x6659*x6661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6663=cj5*cj5;
IkReal x6664=((1.0)*cj5);
IkReal x6665=(r20*sj5);
IkReal x6666=(r10*r20);
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*x6665))+(((-1.0)*cj0*r21*x6664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
CheckValue<IkReal> x6668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r11*x6664*x6665))+(((-1.0)*x6666))+(((-1.0)*r11*r21*x6663))+(((-1.0)*r10*r21*sj5*x6664))+((x6663*x6666)))),-1);
if(!x6668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6667.value)+(((1.5707963267949)*(x6668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6669=IKcos(j4);
IkReal x6670=IKsin(j4);
IkReal x6671=(cj5*r21);
IkReal x6672=(cj5*r11);
IkReal x6673=(r00*sj5);
IkReal x6674=(r20*sj5);
IkReal x6675=(cj5*r01);
IkReal x6676=(r10*sj5);
IkReal x6677=((1.0)*x6669);
IkReal x6678=((1.0)*x6670);
evalcond[0]=((((-1.0)*x6671*x6677))+(((-1.0)*x6674*x6677))+((r22*x6670)));
evalcond[1]=((((-1.0)*x6672*x6677))+cj0+((r12*x6670))+(((-1.0)*x6676*x6677)));
evalcond[2]=((((-1.0)*x6671*x6678))+(((-1.0)*x6674*x6678))+(((-1.0)*r22*x6677)));
evalcond[3]=((((-1.0)*x6673*x6678))+(((-1.0)*r02*x6677))+cj0+(((-1.0)*x6675*x6678)));
evalcond[4]=(sj0+(((-1.0)*x6672*x6678))+(((-1.0)*r12*x6677))+(((-1.0)*x6676*x6678)));
evalcond[5]=((((-1.0)*x6673*x6677))+(((-1.0)*sj0))+((r02*x6670))+(((-1.0)*x6675*x6677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6679=((1.0)*cj0);
CheckValue<IkReal> x6680 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x6679))+(((-1.0)*cj5*r21*x6679)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6680.valid){
continue;
}
CheckValue<IkReal> x6681=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6680.value)+(((1.5707963267949)*(x6681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6682=IKcos(j4);
IkReal x6683=IKsin(j4);
IkReal x6684=(cj5*r21);
IkReal x6685=(cj5*r11);
IkReal x6686=(r00*sj5);
IkReal x6687=(r20*sj5);
IkReal x6688=(cj5*r01);
IkReal x6689=(r10*sj5);
IkReal x6690=((1.0)*x6682);
IkReal x6691=((1.0)*x6683);
evalcond[0]=((((-1.0)*x6684*x6690))+((r22*x6683))+(((-1.0)*x6687*x6690)));
evalcond[1]=((((-1.0)*x6685*x6690))+((r12*x6683))+cj0+(((-1.0)*x6689*x6690)));
evalcond[2]=((((-1.0)*x6684*x6691))+(((-1.0)*x6687*x6691))+(((-1.0)*r22*x6690)));
evalcond[3]=((((-1.0)*x6686*x6691))+cj0+(((-1.0)*x6688*x6691))+(((-1.0)*r02*x6690)));
evalcond[4]=((((-1.0)*x6685*x6691))+sj0+(((-1.0)*x6689*x6691))+(((-1.0)*r12*x6690)));
evalcond[5]=(((r02*x6683))+(((-1.0)*sj0))+(((-1.0)*x6686*x6690))+(((-1.0)*x6688*x6690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))))+IKsqr(((((6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))), ((((6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6692=IKcos(j0);
IkReal x6693=IKsin(j0);
evalcond[0]=((((-0.00175)*x6693))+(((-1.0)*px))+(((0.1445)*x6692)));
evalcond[1]=((((-1.0)*py))+(((0.1445)*x6693))+(((0.00175)*x6692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6694=((1.0)*cj5);
IkReal x6695=(((r01*sj5))+(((-1.0)*r00*x6694)));
j4eval[0]=x6695;
j4eval[1]=IKsign(x6695);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6694))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6696=((1.0)*cj5);
IkReal x6697=((((-1.0)*r10*x6696))+((r11*sj5)));
j4eval[0]=x6697;
j4eval[1]=((IKabs(((((-1.0)*r21*sj0*x6696))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6698=cj5*cj5;
IkReal x6699=((1.0)*r20);
IkReal x6700=(cj5*r21);
IkReal x6701=(((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x6700))+(((-1.0)*r00*x6698*x6699))+((r02*r22))+((r01*r21*x6698)));
j4eval[0]=x6701;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x6699))+(((-1.0)*cj0*x6700))))));
j4eval[2]=IKsign(x6701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6702=cj5*cj5;
IkReal x6703=((1.0)*r20);
IkReal x6704=(cj5*r21);
CheckValue<IkReal> x6705=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x6704))+((r01*r21*x6702))+(((-1.0)*r00*x6702*x6703))+((r02*r22)))),-1);
if(!x6705.valid){
continue;
}
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x6703))+(((-1.0)*cj0*x6704)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6705.value)))+(x6706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6707=IKcos(j4);
IkReal x6708=IKsin(j4);
IkReal x6709=((1.0)*sj0);
IkReal x6710=(r00*sj5);
IkReal x6711=(r20*sj5);
IkReal x6712=(r10*sj5);
IkReal x6713=((1.0)*x6707);
IkReal x6714=((1.0)*x6708);
IkReal x6715=(cj5*x6714);
evalcond[0]=((((-1.0)*x6711*x6713))+(((-1.0)*cj5*r21*x6713))+((r22*x6708)));
evalcond[1]=(cj0+(((-1.0)*x6712*x6713))+((r12*x6708))+(((-1.0)*cj5*r11*x6713)));
evalcond[2]=((((-1.0)*r21*x6715))+(((-1.0)*x6711*x6714))+(((-1.0)*r22*x6713)));
evalcond[3]=((((-1.0)*cj5*r01*x6713))+(((-1.0)*x6710*x6713))+(((-1.0)*x6709))+((r02*x6708)));
evalcond[4]=((((-1.0)*x6710*x6714))+(((-1.0)*r02*x6713))+(((-1.0)*r01*x6715))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6709))+(((-1.0)*r11*x6715))+(((-1.0)*x6712*x6714))+(((-1.0)*r12*x6713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6716=((1.0)*cj5);
CheckValue<IkReal> x6717 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6716))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6717.valid){
continue;
}
CheckValue<IkReal> x6718=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x6716)))),-1);
if(!x6718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6717.value)+(((1.5707963267949)*(x6718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6719=IKcos(j4);
IkReal x6720=IKsin(j4);
IkReal x6721=((1.0)*sj0);
IkReal x6722=(r00*sj5);
IkReal x6723=(r20*sj5);
IkReal x6724=(r10*sj5);
IkReal x6725=((1.0)*x6719);
IkReal x6726=((1.0)*x6720);
IkReal x6727=(cj5*x6726);
evalcond[0]=((((-1.0)*x6723*x6725))+(((-1.0)*cj5*r21*x6725))+((r22*x6720)));
evalcond[1]=(((r12*x6720))+(((-1.0)*x6724*x6725))+cj0+(((-1.0)*cj5*r11*x6725)));
evalcond[2]=((((-1.0)*r22*x6725))+(((-1.0)*x6723*x6726))+(((-1.0)*r21*x6727)));
evalcond[3]=((((-1.0)*x6721))+((r02*x6720))+(((-1.0)*x6722*x6725))+(((-1.0)*cj5*r01*x6725)));
evalcond[4]=((((-1.0)*x6722*x6726))+(((-1.0)*r02*x6725))+(((-1.0)*r01*x6727))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6724*x6726))+(((-1.0)*x6721))+(((-1.0)*r12*x6725))+(((-1.0)*r11*x6727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6728=((1.0)*cj0);
CheckValue<IkReal> x6729=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6729.valid){
continue;
}
CheckValue<IkReal> x6730 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x6728))+(((-1.0)*cj5*r21*x6728)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6729.value)))+(x6730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6731=IKcos(j4);
IkReal x6732=IKsin(j4);
IkReal x6733=((1.0)*sj0);
IkReal x6734=(r00*sj5);
IkReal x6735=(r20*sj5);
IkReal x6736=(r10*sj5);
IkReal x6737=((1.0)*x6731);
IkReal x6738=((1.0)*x6732);
IkReal x6739=(cj5*x6738);
evalcond[0]=(((r22*x6732))+(((-1.0)*cj5*r21*x6737))+(((-1.0)*x6735*x6737)));
evalcond[1]=(cj0+((r12*x6732))+(((-1.0)*x6736*x6737))+(((-1.0)*cj5*r11*x6737)));
evalcond[2]=((((-1.0)*r22*x6737))+(((-1.0)*x6735*x6738))+(((-1.0)*r21*x6739)));
evalcond[3]=((((-1.0)*x6733))+(((-1.0)*x6734*x6737))+(((-1.0)*cj5*r01*x6737))+((r02*x6732)));
evalcond[4]=((((-1.0)*r01*x6739))+(((-1.0)*r02*x6737))+(((-1.0)*x6734*x6738))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6739))+(((-1.0)*r12*x6737))+(((-1.0)*x6736*x6738))+(((-1.0)*x6733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))))+IKsqr(((((6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((6.91940035853986)*py))), ((((6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6740=IKcos(j0);
IkReal x6741=IKsin(j0);
evalcond[0]=((((-0.00175)*x6741))+(((-1.0)*px))+(((0.1445)*x6740)));
evalcond[1]=((((0.00175)*x6740))+(((-1.0)*py))+(((0.1445)*x6741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6742=((1.0)*cj5);
IkReal x6743=((((-1.0)*r00*x6742))+((r01*sj5)));
j4eval[0]=x6743;
j4eval[1]=IKsign(x6743);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6742)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6744=cj5*cj5;
IkReal x6745=(r10*r20);
IkReal x6746=((1.0)*r21);
IkReal x6747=((1.0)*r20*sj5);
IkReal x6748=((((-1.0)*x6745))+(((-1.0)*cj5*r10*sj5*x6746))+(((-1.0)*r11*x6744*x6746))+(((-1.0)*r12*r22))+((x6744*x6745))+(((-1.0)*cj5*r11*x6747)));
j4eval[0]=x6748;
j4eval[1]=IKsign(x6748);
j4eval[2]=((IKabs(((((-1.0)*cj0*x6747))+(((-1.0)*cj0*cj5*x6746)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6749=cj5*cj5;
IkReal x6750=((1.0)*r00);
IkReal x6751=(cj5*r21);
IkReal x6752=((1.0)*cj0);
IkReal x6753=(r20*sj5);
IkReal x6754=((1.0)*r01);
IkReal x6755=((((-1.0)*r20*x6750))+(((-1.0)*r02*r22))+(((-1.0)*cj5*x6753*x6754))+(((-1.0)*r21*x6749*x6754))+((r00*r20*x6749))+(((-1.0)*sj5*x6750*x6751)));
j4eval[0]=x6755;
j4eval[1]=((IKabs(((((-1.0)*x6751*x6752))+(((-1.0)*x6752*x6753)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6756=cj5*cj5;
IkReal x6757=((1.0)*r00);
IkReal x6758=(cj5*r21);
IkReal x6759=((1.0)*cj0);
IkReal x6760=(r20*sj5);
IkReal x6761=((1.0)*r01);
CheckValue<IkReal> x6762 = IKatan2WithCheck(IkReal(((((-1.0)*x6758*x6759))+(((-1.0)*x6759*x6760)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6762.valid){
continue;
}
CheckValue<IkReal> x6763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6757))+(((-1.0)*r02*r22))+(((-1.0)*sj5*x6757*x6758))+(((-1.0)*r21*x6756*x6761))+(((-1.0)*cj5*x6760*x6761))+((r00*r20*x6756)))),-1);
if(!x6763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6762.value)+(((1.5707963267949)*(x6763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6764=IKcos(j4);
IkReal x6765=IKsin(j4);
IkReal x6766=(cj5*r21);
IkReal x6767=(cj5*r11);
IkReal x6768=(r00*sj5);
IkReal x6769=(r20*sj5);
IkReal x6770=(cj5*r01);
IkReal x6771=(r10*sj5);
IkReal x6772=((1.0)*x6764);
IkReal x6773=((1.0)*x6765);
evalcond[0]=(((r22*x6765))+(((-1.0)*x6769*x6772))+(((-1.0)*x6766*x6772)));
evalcond[1]=(((r12*x6765))+cj0+(((-1.0)*x6771*x6772))+(((-1.0)*x6767*x6772)));
evalcond[2]=((((-1.0)*r22*x6772))+(((-1.0)*x6769*x6773))+(((-1.0)*x6766*x6773)));
evalcond[3]=((((-1.0)*x6768*x6773))+cj0+(((-1.0)*x6770*x6773))+(((-1.0)*r02*x6772)));
evalcond[4]=(sj0+(((-1.0)*r12*x6772))+(((-1.0)*x6771*x6773))+(((-1.0)*x6767*x6773)));
evalcond[5]=((((-1.0)*x6768*x6772))+(((-1.0)*sj0))+(((-1.0)*x6770*x6772))+((r02*x6765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6774=cj5*cj5;
IkReal x6775=((1.0)*cj5);
IkReal x6776=(r20*sj5);
IkReal x6777=(r10*r20);
CheckValue<IkReal> x6778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r21*sj5*x6775))+(((-1.0)*r11*r21*x6774))+(((-1.0)*r12*r22))+(((-1.0)*x6777))+(((-1.0)*r11*x6775*x6776))+((x6774*x6777)))),-1);
if(!x6778.valid){
continue;
}
CheckValue<IkReal> x6779 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*x6776))+(((-1.0)*cj0*r21*x6775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6778.value)))+(x6779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6780=IKcos(j4);
IkReal x6781=IKsin(j4);
IkReal x6782=(cj5*r21);
IkReal x6783=(cj5*r11);
IkReal x6784=(r00*sj5);
IkReal x6785=(r20*sj5);
IkReal x6786=(cj5*r01);
IkReal x6787=(r10*sj5);
IkReal x6788=((1.0)*x6780);
IkReal x6789=((1.0)*x6781);
evalcond[0]=((((-1.0)*x6782*x6788))+(((-1.0)*x6785*x6788))+((r22*x6781)));
evalcond[1]=(((r12*x6781))+(((-1.0)*x6787*x6788))+cj0+(((-1.0)*x6783*x6788)));
evalcond[2]=((((-1.0)*x6782*x6789))+(((-1.0)*x6785*x6789))+(((-1.0)*r22*x6788)));
evalcond[3]=((((-1.0)*x6784*x6789))+cj0+(((-1.0)*x6786*x6789))+(((-1.0)*r02*x6788)));
evalcond[4]=(sj0+(((-1.0)*x6787*x6789))+(((-1.0)*r12*x6788))+(((-1.0)*x6783*x6789)));
evalcond[5]=((((-1.0)*x6784*x6788))+(((-1.0)*sj0))+(((-1.0)*x6786*x6788))+((r02*x6781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6790=((1.0)*cj0);
CheckValue<IkReal> x6791 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x6790))+(((-1.0)*cj5*r21*x6790)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6791.valid){
continue;
}
CheckValue<IkReal> x6792=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6791.value)+(((1.5707963267949)*(x6792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6793=IKcos(j4);
IkReal x6794=IKsin(j4);
IkReal x6795=(cj5*r21);
IkReal x6796=(cj5*r11);
IkReal x6797=(r00*sj5);
IkReal x6798=(r20*sj5);
IkReal x6799=(cj5*r01);
IkReal x6800=(r10*sj5);
IkReal x6801=((1.0)*x6793);
IkReal x6802=((1.0)*x6794);
evalcond[0]=(((r22*x6794))+(((-1.0)*x6795*x6801))+(((-1.0)*x6798*x6801)));
evalcond[1]=((((-1.0)*x6796*x6801))+cj0+((r12*x6794))+(((-1.0)*x6800*x6801)));
evalcond[2]=((((-1.0)*x6795*x6802))+(((-1.0)*r22*x6801))+(((-1.0)*x6798*x6802)));
evalcond[3]=(cj0+(((-1.0)*r02*x6801))+(((-1.0)*x6797*x6802))+(((-1.0)*x6799*x6802)));
evalcond[4]=((((-1.0)*x6796*x6802))+sj0+(((-1.0)*r12*x6801))+(((-1.0)*x6800*x6802)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6794))+(((-1.0)*x6797*x6801))+(((-1.0)*x6799*x6801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-25.920471281296)*px))+(((1.17820324005891)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((-25.920471281296)*px))+(((1.17820324005891)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-25.920471281296)*py))+(((-1.17820324005891)*px))), ((((-25.920471281296)*px))+(((1.17820324005891)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6803=IKcos(j0);
IkReal x6804=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x6804))+(((-0.0385)*x6803)));
evalcond[1]=((((-1.0)*py))+(((0.00175)*x6803))+(((-0.0385)*x6804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6805=((1.0)*cj5);
IkReal x6806=(((r01*sj5))+(((-1.0)*r00*x6805)));
j4eval[0]=x6806;
j4eval[1]=IKsign(x6806);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6805)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6807=cj5*cj5;
IkReal x6808=(r10*r20);
IkReal x6809=((1.0)*r21);
IkReal x6810=((1.0)*r20*sj5);
IkReal x6811=((((-1.0)*r11*x6807*x6809))+(((-1.0)*r12*r22))+(((-1.0)*cj5*r11*x6810))+(((-1.0)*cj5*r10*sj5*x6809))+(((-1.0)*x6808))+((x6807*x6808)));
j4eval[0]=x6811;
j4eval[1]=IKsign(x6811);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6809))+(((-1.0)*cj0*x6810))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6812=cj5*cj5;
IkReal x6813=((1.0)*r00);
IkReal x6814=(cj5*r21);
IkReal x6815=((1.0)*cj0);
IkReal x6816=(r20*sj5);
IkReal x6817=((1.0)*r01);
IkReal x6818=((((-1.0)*cj5*x6816*x6817))+(((-1.0)*r02*r22))+((r00*r20*x6812))+(((-1.0)*sj5*x6813*x6814))+(((-1.0)*r20*x6813))+(((-1.0)*r21*x6812*x6817)));
j4eval[0]=x6818;
j4eval[1]=((IKabs(((((-1.0)*x6815*x6816))+(((-1.0)*x6814*x6815)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6819=cj5*cj5;
IkReal x6820=((1.0)*r00);
IkReal x6821=(cj5*r21);
IkReal x6822=((1.0)*cj0);
IkReal x6823=(r20*sj5);
IkReal x6824=((1.0)*r01);
CheckValue<IkReal> x6825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r00*r20*x6819))+(((-1.0)*r21*x6819*x6824))+(((-1.0)*sj5*x6820*x6821))+(((-1.0)*r20*x6820))+(((-1.0)*cj5*x6823*x6824)))),-1);
if(!x6825.valid){
continue;
}
CheckValue<IkReal> x6826 = IKatan2WithCheck(IkReal(((((-1.0)*x6821*x6822))+(((-1.0)*x6822*x6823)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6825.value)))+(x6826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6827=IKcos(j4);
IkReal x6828=IKsin(j4);
IkReal x6829=(cj5*r21);
IkReal x6830=(cj5*r11);
IkReal x6831=(r00*sj5);
IkReal x6832=(r20*sj5);
IkReal x6833=(cj5*r01);
IkReal x6834=(r10*sj5);
IkReal x6835=((1.0)*x6827);
IkReal x6836=((1.0)*x6828);
evalcond[0]=(((r22*x6828))+(((-1.0)*x6832*x6835))+(((-1.0)*x6829*x6835)));
evalcond[1]=(cj0+((r12*x6828))+(((-1.0)*x6834*x6835))+(((-1.0)*x6830*x6835)));
evalcond[2]=((((-1.0)*x6832*x6836))+(((-1.0)*r22*x6835))+(((-1.0)*x6829*x6836)));
evalcond[3]=(cj0+(((-1.0)*x6833*x6836))+(((-1.0)*r02*x6835))+(((-1.0)*x6831*x6836)));
evalcond[4]=(sj0+(((-1.0)*r12*x6835))+(((-1.0)*x6834*x6836))+(((-1.0)*x6830*x6836)));
evalcond[5]=(((r02*x6828))+(((-1.0)*sj0))+(((-1.0)*x6833*x6835))+(((-1.0)*x6831*x6835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6837=cj5*cj5;
IkReal x6838=((1.0)*cj5);
IkReal x6839=(r20*sj5);
IkReal x6840=(r10*r20);
CheckValue<IkReal> x6841 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6838))+(((-1.0)*cj0*x6839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6841.valid){
continue;
}
CheckValue<IkReal> x6842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r21*sj5*x6838))+(((-1.0)*r11*x6838*x6839))+(((-1.0)*x6840))+((x6837*x6840))+(((-1.0)*r11*r21*x6837)))),-1);
if(!x6842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6841.value)+(((1.5707963267949)*(x6842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6843=IKcos(j4);
IkReal x6844=IKsin(j4);
IkReal x6845=(cj5*r21);
IkReal x6846=(cj5*r11);
IkReal x6847=(r00*sj5);
IkReal x6848=(r20*sj5);
IkReal x6849=(cj5*r01);
IkReal x6850=(r10*sj5);
IkReal x6851=((1.0)*x6843);
IkReal x6852=((1.0)*x6844);
evalcond[0]=(((r22*x6844))+(((-1.0)*x6848*x6851))+(((-1.0)*x6845*x6851)));
evalcond[1]=(cj0+((r12*x6844))+(((-1.0)*x6846*x6851))+(((-1.0)*x6850*x6851)));
evalcond[2]=((((-1.0)*r22*x6851))+(((-1.0)*x6848*x6852))+(((-1.0)*x6845*x6852)));
evalcond[3]=(cj0+(((-1.0)*r02*x6851))+(((-1.0)*x6847*x6852))+(((-1.0)*x6849*x6852)));
evalcond[4]=(sj0+(((-1.0)*x6846*x6852))+(((-1.0)*r12*x6851))+(((-1.0)*x6850*x6852)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6847*x6851))+(((-1.0)*x6849*x6851))+((r02*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6853=((1.0)*cj0);
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x6853))+(((-1.0)*cj5*r21*x6853)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
CheckValue<IkReal> x6855=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6854.value)+(((1.5707963267949)*(x6855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6856=IKcos(j4);
IkReal x6857=IKsin(j4);
IkReal x6858=(cj5*r21);
IkReal x6859=(cj5*r11);
IkReal x6860=(r00*sj5);
IkReal x6861=(r20*sj5);
IkReal x6862=(cj5*r01);
IkReal x6863=(r10*sj5);
IkReal x6864=((1.0)*x6856);
IkReal x6865=((1.0)*x6857);
evalcond[0]=(((r22*x6857))+(((-1.0)*x6861*x6864))+(((-1.0)*x6858*x6864)));
evalcond[1]=(cj0+(((-1.0)*x6863*x6864))+((r12*x6857))+(((-1.0)*x6859*x6864)));
evalcond[2]=((((-1.0)*r22*x6864))+(((-1.0)*x6861*x6865))+(((-1.0)*x6858*x6865)));
evalcond[3]=((((-1.0)*x6860*x6865))+cj0+(((-1.0)*x6862*x6865))+(((-1.0)*r02*x6864)));
evalcond[4]=(sj0+(((-1.0)*x6863*x6865))+(((-1.0)*r12*x6864))+(((-1.0)*x6859*x6865)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6857))+(((-1.0)*x6860*x6864))+(((-1.0)*x6862*x6864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-25.920471281296)*py))+(((-1.17820324005891)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-25.920471281296)*px))+(((1.17820324005891)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-25.920471281296)*py))+(((-1.17820324005891)*px))))+IKsqr(((((-25.920471281296)*px))+(((1.17820324005891)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-25.920471281296)*py))+(((-1.17820324005891)*px))), ((((-25.920471281296)*px))+(((1.17820324005891)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6866=IKcos(j0);
IkReal x6867=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x6867))+(((-0.0385)*x6866)));
evalcond[1]=((((-1.0)*py))+(((0.00175)*x6866))+(((-0.0385)*x6867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6868=((1.0)*cj5);
IkReal x6869=((((-1.0)*r00*x6868))+((r01*sj5)));
j4eval[0]=x6869;
j4eval[1]=IKsign(x6869);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6868))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6870=((1.0)*cj5);
IkReal x6871=(((r11*sj5))+(((-1.0)*r10*x6870)));
j4eval[0]=x6871;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6870))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x6871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6872=cj5*cj5;
IkReal x6873=((1.0)*r20);
IkReal x6874=(cj5*r21);
IkReal x6875=(((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x6874))+(((-1.0)*r00*x6872*x6873))+((r02*r22))+((r01*r21*x6872)));
j4eval[0]=x6875;
j4eval[1]=((IKabs(((((-1.0)*cj0*x6874))+(((-1.0)*cj0*sj5*x6873)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6876=cj5*cj5;
IkReal x6877=((1.0)*r20);
IkReal x6878=(cj5*r21);
CheckValue<IkReal> x6879 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x6878))+(((-1.0)*cj0*sj5*x6877)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6879.valid){
continue;
}
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x6878))+((r02*r22))+((r01*r21*x6876))+(((-1.0)*r00*x6876*x6877)))),-1);
if(!x6880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6879.value)+(((1.5707963267949)*(x6880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6881=IKcos(j4);
IkReal x6882=IKsin(j4);
IkReal x6883=((1.0)*sj0);
IkReal x6884=(r00*sj5);
IkReal x6885=(r20*sj5);
IkReal x6886=(r10*sj5);
IkReal x6887=((1.0)*x6881);
IkReal x6888=((1.0)*x6882);
IkReal x6889=(cj5*x6888);
evalcond[0]=((((-1.0)*cj5*r21*x6887))+(((-1.0)*x6885*x6887))+((r22*x6882)));
evalcond[1]=((((-1.0)*x6886*x6887))+cj0+(((-1.0)*cj5*r11*x6887))+((r12*x6882)));
evalcond[2]=((((-1.0)*r21*x6889))+(((-1.0)*x6885*x6888))+(((-1.0)*r22*x6887)));
evalcond[3]=((((-1.0)*cj5*r01*x6887))+(((-1.0)*x6884*x6887))+((r02*x6882))+(((-1.0)*x6883)));
evalcond[4]=((((-1.0)*x6884*x6888))+(((-1.0)*r02*x6887))+(((-1.0)*r01*x6889))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6886*x6888))+(((-1.0)*x6883))+(((-1.0)*r11*x6889))+(((-1.0)*r12*x6887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6890=((1.0)*cj5);
CheckValue<IkReal> x6891=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6890))+((r11*sj5)))),-1);
if(!x6891.valid){
continue;
}
CheckValue<IkReal> x6892 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6890))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6891.value)))+(x6892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6893=IKcos(j4);
IkReal x6894=IKsin(j4);
IkReal x6895=((1.0)*sj0);
IkReal x6896=(r00*sj5);
IkReal x6897=(r20*sj5);
IkReal x6898=(r10*sj5);
IkReal x6899=((1.0)*x6893);
IkReal x6900=((1.0)*x6894);
IkReal x6901=(cj5*x6900);
evalcond[0]=((((-1.0)*x6897*x6899))+(((-1.0)*cj5*r21*x6899))+((r22*x6894)));
evalcond[1]=(((r12*x6894))+cj0+(((-1.0)*cj5*r11*x6899))+(((-1.0)*x6898*x6899)));
evalcond[2]=((((-1.0)*r21*x6901))+(((-1.0)*x6897*x6900))+(((-1.0)*r22*x6899)));
evalcond[3]=((((-1.0)*x6896*x6899))+(((-1.0)*cj5*r01*x6899))+((r02*x6894))+(((-1.0)*x6895)));
evalcond[4]=((((-1.0)*r02*x6899))+(((-1.0)*r01*x6901))+(((-1.0)*x6896*x6900))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6901))+(((-1.0)*x6898*x6900))+(((-1.0)*x6895))+(((-1.0)*r12*x6899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6902=((1.0)*cj0);
CheckValue<IkReal> x6903=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6903.valid){
continue;
}
CheckValue<IkReal> x6904 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x6902))+(((-1.0)*cj5*r21*x6902)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6903.value)))+(x6904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6905=IKcos(j4);
IkReal x6906=IKsin(j4);
IkReal x6907=((1.0)*sj0);
IkReal x6908=(r00*sj5);
IkReal x6909=(r20*sj5);
IkReal x6910=(r10*sj5);
IkReal x6911=((1.0)*x6905);
IkReal x6912=((1.0)*x6906);
IkReal x6913=(cj5*x6912);
evalcond[0]=(((r22*x6906))+(((-1.0)*cj5*r21*x6911))+(((-1.0)*x6909*x6911)));
evalcond[1]=(cj0+(((-1.0)*cj5*r11*x6911))+(((-1.0)*x6910*x6911))+((r12*x6906)));
evalcond[2]=((((-1.0)*r22*x6911))+(((-1.0)*r21*x6913))+(((-1.0)*x6909*x6912)));
evalcond[3]=((((-1.0)*x6908*x6911))+(((-1.0)*cj5*r01*x6911))+(((-1.0)*x6907))+((r02*x6906)));
evalcond[4]=((((-1.0)*x6908*x6912))+(((-1.0)*r01*x6913))+(((-1.0)*r02*x6911))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6910*x6912))+(((-1.0)*r11*x6913))+(((-1.0)*x6907))+(((-1.0)*r12*x6911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))))+IKsqr(((((-6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))), ((((-6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6914=IKcos(j0);
IkReal x6915=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.1445)*x6914))+(((-0.00175)*x6915)));
evalcond[1]=((((0.00175)*x6914))+(((-1.0)*py))+(((-0.1445)*x6915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6916=((1.0)*cj5);
IkReal x6917=(((r01*sj5))+(((-1.0)*r00*x6916)));
j4eval[0]=x6917;
j4eval[1]=IKsign(x6917);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6916))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6918=cj5*cj5;
IkReal x6919=(r10*r20);
IkReal x6920=((1.0)*r21);
IkReal x6921=((1.0)*r20*sj5);
IkReal x6922=((((-1.0)*cj5*r10*sj5*x6920))+(((-1.0)*r12*r22))+((x6918*x6919))+(((-1.0)*r11*x6918*x6920))+(((-1.0)*x6919))+(((-1.0)*cj5*r11*x6921)));
j4eval[0]=x6922;
j4eval[1]=IKsign(x6922);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*x6920))+(((-1.0)*cj0*x6921)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6923=cj5*cj5;
IkReal x6924=((1.0)*r00);
IkReal x6925=(cj5*r21);
IkReal x6926=((1.0)*cj0);
IkReal x6927=(r20*sj5);
IkReal x6928=((1.0)*r01);
IkReal x6929=((((-1.0)*cj5*x6927*x6928))+(((-1.0)*r02*r22))+(((-1.0)*r21*x6923*x6928))+(((-1.0)*sj5*x6924*x6925))+((r00*r20*x6923))+(((-1.0)*r20*x6924)));
j4eval[0]=x6929;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x6925*x6926))+(((-1.0)*x6926*x6927))))));
j4eval[2]=IKsign(x6929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6930=cj5*cj5;
IkReal x6931=((1.0)*r00);
IkReal x6932=(cj5*r21);
IkReal x6933=((1.0)*cj0);
IkReal x6934=(r20*sj5);
IkReal x6935=((1.0)*r01);
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r21*x6930*x6935))+(((-1.0)*cj5*x6934*x6935))+(((-1.0)*sj5*x6931*x6932))+(((-1.0)*r20*x6931))+((r00*r20*x6930)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal(((((-1.0)*x6932*x6933))+(((-1.0)*x6933*x6934)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6938=IKcos(j4);
IkReal x6939=IKsin(j4);
IkReal x6940=(cj5*r21);
IkReal x6941=(cj5*r11);
IkReal x6942=(r00*sj5);
IkReal x6943=(r20*sj5);
IkReal x6944=(cj5*r01);
IkReal x6945=(r10*sj5);
IkReal x6946=((1.0)*x6938);
IkReal x6947=((1.0)*x6939);
evalcond[0]=((((-1.0)*x6943*x6946))+((r22*x6939))+(((-1.0)*x6940*x6946)));
evalcond[1]=(cj0+(((-1.0)*x6941*x6946))+(((-1.0)*x6945*x6946))+((r12*x6939)));
evalcond[2]=((((-1.0)*x6943*x6947))+(((-1.0)*r22*x6946))+(((-1.0)*x6940*x6947)));
evalcond[3]=(cj0+(((-1.0)*x6942*x6947))+(((-1.0)*r02*x6946))+(((-1.0)*x6944*x6947)));
evalcond[4]=(sj0+(((-1.0)*r12*x6946))+(((-1.0)*x6941*x6947))+(((-1.0)*x6945*x6947)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6942*x6946))+(((-1.0)*x6944*x6946))+((r02*x6939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6948=cj5*cj5;
IkReal x6949=((1.0)*cj5);
IkReal x6950=(r20*sj5);
IkReal x6951=(r10*r20);
CheckValue<IkReal> x6952 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*x6950))+(((-1.0)*cj0*r21*x6949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6952.valid){
continue;
}
CheckValue<IkReal> x6953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x6951))+(((-1.0)*r11*r21*x6948))+(((-1.0)*r11*x6949*x6950))+(((-1.0)*r10*r21*sj5*x6949))+((x6948*x6951)))),-1);
if(!x6953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6952.value)+(((1.5707963267949)*(x6953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6954=IKcos(j4);
IkReal x6955=IKsin(j4);
IkReal x6956=(cj5*r21);
IkReal x6957=(cj5*r11);
IkReal x6958=(r00*sj5);
IkReal x6959=(r20*sj5);
IkReal x6960=(cj5*r01);
IkReal x6961=(r10*sj5);
IkReal x6962=((1.0)*x6954);
IkReal x6963=((1.0)*x6955);
evalcond[0]=((((-1.0)*x6959*x6962))+((r22*x6955))+(((-1.0)*x6956*x6962)));
evalcond[1]=(cj0+(((-1.0)*x6961*x6962))+(((-1.0)*x6957*x6962))+((r12*x6955)));
evalcond[2]=((((-1.0)*x6959*x6963))+(((-1.0)*r22*x6962))+(((-1.0)*x6956*x6963)));
evalcond[3]=((((-1.0)*r02*x6962))+cj0+(((-1.0)*x6958*x6963))+(((-1.0)*x6960*x6963)));
evalcond[4]=(sj0+(((-1.0)*x6961*x6963))+(((-1.0)*r12*x6962))+(((-1.0)*x6957*x6963)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6958*x6962))+((r02*x6955))+(((-1.0)*x6960*x6962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6964=((1.0)*cj0);
CheckValue<IkReal> x6965 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x6964))+(((-1.0)*cj5*r21*x6964)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6965.valid){
continue;
}
CheckValue<IkReal> x6966=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6965.value)+(((1.5707963267949)*(x6966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6967=IKcos(j4);
IkReal x6968=IKsin(j4);
IkReal x6969=(cj5*r21);
IkReal x6970=(cj5*r11);
IkReal x6971=(r00*sj5);
IkReal x6972=(r20*sj5);
IkReal x6973=(cj5*r01);
IkReal x6974=(r10*sj5);
IkReal x6975=((1.0)*x6967);
IkReal x6976=((1.0)*x6968);
evalcond[0]=(((r22*x6968))+(((-1.0)*x6969*x6975))+(((-1.0)*x6972*x6975)));
evalcond[1]=((((-1.0)*x6974*x6975))+(((-1.0)*x6970*x6975))+cj0+((r12*x6968)));
evalcond[2]=((((-1.0)*x6969*x6976))+(((-1.0)*r22*x6975))+(((-1.0)*x6972*x6976)));
evalcond[3]=((((-1.0)*r02*x6975))+cj0+(((-1.0)*x6971*x6976))+(((-1.0)*x6973*x6976)));
evalcond[4]=((((-1.0)*x6974*x6976))+sj0+(((-1.0)*x6970*x6976))+(((-1.0)*r12*x6975)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6971*x6975))+((r02*x6968))+(((-1.0)*x6973*x6975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-6.91940035853986)*px))+(((0.0837989662798945)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))))+IKsqr(((((-6.91940035853986)*px))+(((0.0837989662798945)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.0837989662798945)*px))+(((-6.91940035853986)*py))), ((((-6.91940035853986)*px))+(((0.0837989662798945)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6977=IKcos(j0);
IkReal x6978=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.00175)*x6978))+(((-0.1445)*x6977)));
evalcond[1]=((((-1.0)*py))+(((0.00175)*x6977))+(((-0.1445)*x6978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6979=((1.0)*cj5);
IkReal x6980=(((r01*sj5))+(((-1.0)*r00*x6979)));
j4eval[0]=x6980;
j4eval[1]=IKsign(x6980);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x6979))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6981=((1.0)*cj5);
IkReal x6982=((((-1.0)*r10*x6981))+((r11*sj5)));
j4eval[0]=x6982;
j4eval[1]=((IKabs(((((-1.0)*r21*sj0*x6981))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6983=cj5*cj5;
IkReal x6984=((1.0)*r20);
IkReal x6985=(cj5*r21);
IkReal x6986=(((cj5*r01*r20*sj5))+((r00*sj5*x6985))+(((-1.0)*r00*x6983*x6984))+((r00*r20))+((r02*r22))+((r01*r21*x6983)));
j4eval[0]=x6986;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x6984))+(((-1.0)*cj0*x6985)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6987=cj5*cj5;
IkReal x6988=((1.0)*r20);
IkReal x6989=(cj5*r21);
CheckValue<IkReal> x6990=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*sj5*x6989))+((r00*r20))+(((-1.0)*r00*x6987*x6988))+((r02*r22))+((r01*r21*x6987)))),-1);
if(!x6990.valid){
continue;
}
CheckValue<IkReal> x6991 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x6988))+(((-1.0)*cj0*x6989)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6990.value)))+(x6991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6992=IKcos(j4);
IkReal x6993=IKsin(j4);
IkReal x6994=((1.0)*sj0);
IkReal x6995=(r00*sj5);
IkReal x6996=(r20*sj5);
IkReal x6997=(r10*sj5);
IkReal x6998=((1.0)*x6992);
IkReal x6999=((1.0)*x6993);
IkReal x7000=(cj5*x6999);
evalcond[0]=((((-1.0)*x6996*x6998))+(((-1.0)*cj5*r21*x6998))+((r22*x6993)));
evalcond[1]=(cj0+(((-1.0)*cj5*r11*x6998))+((r12*x6993))+(((-1.0)*x6997*x6998)));
evalcond[2]=((((-1.0)*r21*x7000))+(((-1.0)*r22*x6998))+(((-1.0)*x6996*x6999)));
evalcond[3]=(((r02*x6993))+(((-1.0)*x6995*x6998))+(((-1.0)*cj5*r01*x6998))+(((-1.0)*x6994)));
evalcond[4]=((((-1.0)*x6995*x6999))+(((-1.0)*r01*x7000))+(((-1.0)*r02*x6998))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x7000))+(((-1.0)*r12*x6998))+(((-1.0)*x6997*x6999))+(((-1.0)*x6994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7001=((1.0)*cj5);
CheckValue<IkReal> x7002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7001))+((r11*sj5)))),-1);
if(!x7002.valid){
continue;
}
CheckValue<IkReal> x7003 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7001))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7002.value)))+(x7003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7004=IKcos(j4);
IkReal x7005=IKsin(j4);
IkReal x7006=((1.0)*sj0);
IkReal x7007=(r00*sj5);
IkReal x7008=(r20*sj5);
IkReal x7009=(r10*sj5);
IkReal x7010=((1.0)*x7004);
IkReal x7011=((1.0)*x7005);
IkReal x7012=(cj5*x7011);
evalcond[0]=((((-1.0)*cj5*r21*x7010))+(((-1.0)*x7008*x7010))+((r22*x7005)));
evalcond[1]=((((-1.0)*x7009*x7010))+cj0+((r12*x7005))+(((-1.0)*cj5*r11*x7010)));
evalcond[2]=((((-1.0)*r22*x7010))+(((-1.0)*x7008*x7011))+(((-1.0)*r21*x7012)));
evalcond[3]=((((-1.0)*cj5*r01*x7010))+((r02*x7005))+(((-1.0)*x7006))+(((-1.0)*x7007*x7010)));
evalcond[4]=((((-1.0)*x7007*x7011))+(((-1.0)*r02*x7010))+(((-1.0)*r01*x7012))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7009*x7011))+(((-1.0)*r11*x7012))+(((-1.0)*x7006))+(((-1.0)*r12*x7010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7013=((1.0)*cj0);
CheckValue<IkReal> x7014 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x7013))+(((-1.0)*r20*sj5*x7013)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7014.valid){
continue;
}
CheckValue<IkReal> x7015=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x7015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7014.value)+(((1.5707963267949)*(x7015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7016=IKcos(j4);
IkReal x7017=IKsin(j4);
IkReal x7018=((1.0)*sj0);
IkReal x7019=(r00*sj5);
IkReal x7020=(r20*sj5);
IkReal x7021=(r10*sj5);
IkReal x7022=((1.0)*x7016);
IkReal x7023=((1.0)*x7017);
IkReal x7024=(cj5*x7023);
evalcond[0]=(((r22*x7017))+(((-1.0)*x7020*x7022))+(((-1.0)*cj5*r21*x7022)));
evalcond[1]=((((-1.0)*x7021*x7022))+cj0+(((-1.0)*cj5*r11*x7022))+((r12*x7017)));
evalcond[2]=((((-1.0)*r22*x7022))+(((-1.0)*x7020*x7023))+(((-1.0)*r21*x7024)));
evalcond[3]=(((r02*x7017))+(((-1.0)*cj5*r01*x7022))+(((-1.0)*x7018))+(((-1.0)*x7019*x7022)));
evalcond[4]=((((-1.0)*x7019*x7023))+(((-1.0)*r02*x7022))+(((-1.0)*r01*x7024))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7022))+(((-1.0)*r11*x7024))+(((-1.0)*x7021*x7023))+(((-1.0)*x7018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7025=(r01*sj5);
IkReal x7026=(cj1*cj2);
IkReal x7027=((4000.0)*px);
IkReal x7028=(sj1*sj2);
IkReal x7029=(cj5*r00);
IkReal x7030=((578.0)*sj1);
IkReal x7031=((154.0)*cj1);
IkReal x7032=((130.0)*x7029);
CheckValue<IkReal> x7033=IKPowWithIntegerCheck(((((7.0)*x7026))+(((-7.0)*x7028))),-1);
if(!x7033.valid){
continue;
}
CheckValue<IkReal> x7034=IKPowWithIntegerCheck((x7026+(((-1.0)*x7028))),-1);
if(!x7034.valid){
continue;
}
if( IKabs(((x7033.value)*((((x7027*x7028))+(((130.0)*x7025*x7026))+(((-1.0)*x7026*x7027))+(((-1.0)*x7026*x7032))+((x7028*x7032))+(((-1.0)*x7029*x7031))+(((-1.0)*x7029*x7030))+(((-130.0)*x7025*x7028))+((x7025*x7031))+((x7025*x7030)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7034.value)*((x7025+(((-1.0)*x7029)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7033.value)*((((x7027*x7028))+(((130.0)*x7025*x7026))+(((-1.0)*x7026*x7027))+(((-1.0)*x7026*x7032))+((x7028*x7032))+(((-1.0)*x7029*x7031))+(((-1.0)*x7029*x7030))+(((-130.0)*x7025*x7028))+((x7025*x7031))+((x7025*x7030))))))+IKsqr(((x7034.value)*((x7025+(((-1.0)*x7029))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7033.value)*((((x7027*x7028))+(((130.0)*x7025*x7026))+(((-1.0)*x7026*x7027))+(((-1.0)*x7026*x7032))+((x7028*x7032))+(((-1.0)*x7029*x7031))+(((-1.0)*x7029*x7030))+(((-130.0)*x7025*x7028))+((x7025*x7031))+((x7025*x7030))))), ((x7034.value)*((x7025+(((-1.0)*x7029))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7035=IKcos(j0);
IkReal x7036=IKsin(j0);
IkReal x7037=(cj5*r10);
IkReal x7038=(r11*sj5);
IkReal x7039=(cj5*r00);
IkReal x7040=((0.1535)*cj2);
IkReal x7041=(r01*sj5);
IkReal x7042=(cj1*x7036);
IkReal x7043=(cj1*x7035);
IkReal x7044=(sj1*x7035);
IkReal x7045=(sj1*sj2*x7036);
evalcond[0]=(x7039+(((-1.0)*sj2*x7044))+((cj2*x7043))+(((-1.0)*x7041)));
evalcond[1]=(x7037+((cj2*x7042))+(((-1.0)*x7045))+(((-1.0)*x7038)));
evalcond[2]=((((0.0385)*x7043))+(((0.1445)*x7044))+(((0.121)*x7039))+(((-1.0)*px))+(((-0.1535)*sj2*x7044))+(((-0.00175)*x7036))+((x7040*x7043))+(((-0.121)*x7041)));
evalcond[3]=((((0.00175)*x7035))+(((0.1445)*sj1*x7036))+(((0.0385)*x7042))+(((0.121)*x7037))+(((-1.0)*py))+((x7040*x7042))+(((-0.1535)*x7045))+(((-0.121)*x7038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7046=((1.0)*cj5);
IkReal x7047=(((r01*sj5))+(((-1.0)*r00*x7046)));
j4eval[0]=x7047;
j4eval[1]=IKsign(x7047);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x7046))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7048=((1.0)*cj5);
IkReal x7049=(((r11*sj5))+(((-1.0)*r10*x7048)));
j4eval[0]=x7049;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7048))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x7049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7050=((1.0)*sj0);
IkReal x7051=((1.0)*sj5);
IkReal x7052=((1.0)*cj0);
IkReal x7053=(((cj5*r20))+(((-1.0)*r21*x7051)));
j4eval[0]=x7053;
j4eval[1]=((IKabs(((((-1.0)*r12*x7050))+(((-1.0)*r02*x7052)))))+(IKabs(((((-1.0)*cj0*r00*x7051))+(((-1.0)*cj5*r01*x7052))+(((-1.0)*r10*sj5*x7050))+(((-1.0)*cj5*r11*x7050))))));
j4eval[2]=IKsign(x7053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7054=((-1.0)*r21);
IkReal x7056 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7056)==0){
continue;
}
IkReal x7055=pow(x7056,-0.5);
CheckValue<IkReal> x7057 = IKatan2WithCheck(IkReal(r20),IkReal(x7054),IKFAST_ATAN2_MAGTHRESH);
if(!x7057.valid){
continue;
}
IkReal gconst166=((-1.0)*(x7057.value));
IkReal gconst167=((-1.0)*r20*x7055);
IkReal gconst168=(x7054*x7055);
CheckValue<IkReal> x7058 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7058.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7058.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7059=((-1.0)*r21);
CheckValue<IkReal> x7062 = IKatan2WithCheck(IkReal(r20),IkReal(x7059),IKFAST_ATAN2_MAGTHRESH);
if(!x7062.valid){
continue;
}
IkReal x7060=((-1.0)*(x7062.value));
IkReal x7061=x7055;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst167;
cj5=gconst168;
j5=x7060;
IkReal gconst166=x7060;
IkReal gconst167=((-1.0)*r20*x7061);
IkReal gconst168=(x7059*x7061);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7063=((-1.0)*r21);
CheckValue<IkReal> x7066 = IKatan2WithCheck(IkReal(r20),IkReal(x7063),IKFAST_ATAN2_MAGTHRESH);
if(!x7066.valid){
continue;
}
IkReal x7064=((-1.0)*(x7066.value));
IkReal x7065=x7055;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst167;
cj5=gconst168;
j5=x7064;
IkReal gconst166=x7064;
IkReal gconst167=((-1.0)*r20*x7065);
IkReal gconst168=(x7063*x7065);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7067=((-1.0)*r21);
CheckValue<IkReal> x7070 = IKatan2WithCheck(IkReal(r20),IkReal(x7067),IKFAST_ATAN2_MAGTHRESH);
if(!x7070.valid){
continue;
}
IkReal x7068=((-1.0)*(x7070.value));
IkReal x7069=x7055;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst167;
cj5=gconst168;
j5=x7068;
IkReal gconst166=x7068;
IkReal gconst167=((-1.0)*r20*x7069);
IkReal gconst168=(x7067*x7069);
IkReal x7071=((1.0)*(r22*r22));
CheckValue<IkReal> x7075=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7071))),-1);
if(!x7075.valid){
continue;
}
IkReal x7072=x7075.value;
IkReal x7073=((1.0)*x7072);
IkReal x7074=((((-1.0)*x7073*(r21*r21*r21*r21)))+(((-1.0)*x7071))+(((-1.0)*x7073*(r20*r20*r20*r20)))+(((-2.0)*x7072*(r20*r20)*(r21*r21))));
j4eval[0]=x7074;
j4eval[1]=IKsign(x7074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7076=(gconst167*r20);
IkReal x7077=(cj1*cj2);
IkReal x7078=(gconst168*r21);
IkReal x7079=((1.0)*sj1*sj2);
CheckValue<IkReal> x7080 = IKatan2WithCheck(IkReal(((((-1.0)*x7076*x7079))+(((-1.0)*x7078*x7079))+((x7076*x7077))+((x7077*x7078)))),IkReal((((r22*x7077))+(((-1.0)*r22*x7079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7080.valid){
continue;
}
CheckValue<IkReal> x7081=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7076*x7076)))+(((-2.0)*x7076*x7078))+(((-1.0)*(x7078*x7078)))+(((-1.0)*(r22*r22))))),-1);
if(!x7081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7080.value)+(((1.5707963267949)*(x7081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7082=IKcos(j4);
IkReal x7083=IKsin(j4);
IkReal x7084=(gconst168*r21);
IkReal x7085=(gconst167*r00);
IkReal x7086=((1.0)*cj2);
IkReal x7087=(gconst168*r11);
IkReal x7088=((1.0)*sj0);
IkReal x7089=(gconst167*r10);
IkReal x7090=(gconst168*r01);
IkReal x7091=(gconst167*r20);
IkReal x7092=(cj1*sj2);
IkReal x7093=((1.0)*x7082);
IkReal x7094=((1.0)*x7083);
evalcond[0]=((((-1.0)*x7084*x7093))+((r22*x7083))+(((-1.0)*x7091*x7093)));
evalcond[1]=(cj0+((r12*x7083))+(((-1.0)*x7089*x7093))+(((-1.0)*x7087*x7093)));
evalcond[2]=(((r02*x7083))+(((-1.0)*x7090*x7093))+(((-1.0)*x7085*x7093))+(((-1.0)*x7088)));
evalcond[3]=((((-1.0)*x7084*x7094))+(((-1.0)*cj1*x7086))+((sj1*sj2))+(((-1.0)*r22*x7093))+(((-1.0)*x7091*x7094)));
evalcond[4]=((((-1.0)*cj0*x7092))+(((-1.0)*cj0*sj1*x7086))+(((-1.0)*x7090*x7094))+(((-1.0)*x7085*x7094))+(((-1.0)*r02*x7093)));
evalcond[5]=((((-1.0)*x7088*x7092))+(((-1.0)*x7089*x7094))+(((-1.0)*x7087*x7094))+(((-1.0)*sj0*sj1*x7086))+(((-1.0)*r12*x7093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7095=((1.0)*gconst168);
CheckValue<IkReal> x7096 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7095))+(((-1.0)*gconst167*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7096.valid){
continue;
}
CheckValue<IkReal> x7097=IKPowWithIntegerCheck(IKsign((((gconst167*r11))+(((-1.0)*r10*x7095)))),-1);
if(!x7097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7096.value)+(((1.5707963267949)*(x7097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7098=IKcos(j4);
IkReal x7099=IKsin(j4);
IkReal x7100=(gconst168*r21);
IkReal x7101=(gconst167*r00);
IkReal x7102=((1.0)*cj2);
IkReal x7103=(gconst168*r11);
IkReal x7104=((1.0)*sj0);
IkReal x7105=(gconst167*r10);
IkReal x7106=(gconst168*r01);
IkReal x7107=(gconst167*r20);
IkReal x7108=(cj1*sj2);
IkReal x7109=((1.0)*x7098);
IkReal x7110=((1.0)*x7099);
evalcond[0]=(((r22*x7099))+(((-1.0)*x7100*x7109))+(((-1.0)*x7107*x7109)));
evalcond[1]=(cj0+(((-1.0)*x7103*x7109))+((r12*x7099))+(((-1.0)*x7105*x7109)));
evalcond[2]=((((-1.0)*x7104))+(((-1.0)*x7101*x7109))+((r02*x7099))+(((-1.0)*x7106*x7109)));
evalcond[3]=((((-1.0)*x7107*x7110))+(((-1.0)*x7100*x7110))+((sj1*sj2))+(((-1.0)*r22*x7109))+(((-1.0)*cj1*x7102)));
evalcond[4]=((((-1.0)*cj0*x7108))+(((-1.0)*x7101*x7110))+(((-1.0)*r02*x7109))+(((-1.0)*cj0*sj1*x7102))+(((-1.0)*x7106*x7110)));
evalcond[5]=((((-1.0)*x7103*x7110))+(((-1.0)*r12*x7109))+(((-1.0)*sj0*sj1*x7102))+(((-1.0)*x7105*x7110))+(((-1.0)*x7104*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7111=((1.0)*cj0);
CheckValue<IkReal> x7112 = IKatan2WithCheck(IkReal(((((-1.0)*gconst168*r21*x7111))+(((-1.0)*gconst167*r20*x7111)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7112.valid){
continue;
}
CheckValue<IkReal> x7113=IKPowWithIntegerCheck(IKsign((((gconst167*r01))+(((-1.0)*gconst168*r00)))),-1);
if(!x7113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7112.value)+(((1.5707963267949)*(x7113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7114=IKcos(j4);
IkReal x7115=IKsin(j4);
IkReal x7116=(gconst168*r21);
IkReal x7117=(gconst167*r00);
IkReal x7118=((1.0)*cj2);
IkReal x7119=(gconst168*r11);
IkReal x7120=((1.0)*sj0);
IkReal x7121=(gconst167*r10);
IkReal x7122=(gconst168*r01);
IkReal x7123=(gconst167*r20);
IkReal x7124=(cj1*sj2);
IkReal x7125=((1.0)*x7114);
IkReal x7126=((1.0)*x7115);
evalcond[0]=((((-1.0)*x7116*x7125))+(((-1.0)*x7123*x7125))+((r22*x7115)));
evalcond[1]=(((r12*x7115))+(((-1.0)*x7119*x7125))+(((-1.0)*x7121*x7125))+cj0);
evalcond[2]=(((r02*x7115))+(((-1.0)*x7122*x7125))+(((-1.0)*x7120))+(((-1.0)*x7117*x7125)));
evalcond[3]=((((-1.0)*x7116*x7126))+(((-1.0)*x7123*x7126))+(((-1.0)*r22*x7125))+((sj1*sj2))+(((-1.0)*cj1*x7118)));
evalcond[4]=((((-1.0)*cj0*x7124))+(((-1.0)*x7122*x7126))+(((-1.0)*r02*x7125))+(((-1.0)*cj0*sj1*x7118))+(((-1.0)*x7117*x7126)));
evalcond[5]=((((-1.0)*x7120*x7124))+(((-1.0)*x7119*x7126))+(((-1.0)*x7121*x7126))+(((-1.0)*sj0*sj1*x7118))+(((-1.0)*r12*x7125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7129 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7129)==0){
continue;
}
IkReal x7127=pow(x7129,-0.5);
IkReal x7128=((1.0)*x7127);
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
IkReal gconst169=((3.14159265358979)+(((-1.0)*(x7130.value))));
IkReal gconst170=(r20*x7128);
IkReal gconst171=(r21*x7128);
CheckValue<IkReal> x7131 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7131.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7131.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7135 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7135.valid){
continue;
}
IkReal x7132=((1.0)*(x7135.value));
IkReal x7133=x7127;
IkReal x7134=((1.0)*x7133);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7132)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7132)));
IkReal gconst170=(r20*x7134);
IkReal gconst171=(r21*x7134);
IkReal x7136=r22*r22;
IkReal x7137=((1.0)*x7136);
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(((-1.0)+x7136),-1);
if(!x7141.valid){
continue;
}
IkReal x7138=x7141.value;
if((((1.0)+(((-1.0)*x7137)))) < -0.00001)
continue;
IkReal x7139=IKsqrt(((1.0)+(((-1.0)*x7137))));
IkReal x7140=(cj0*x7138*x7139);
j4eval[0]=((IKabs((x7140+(((-1.0)*x7137*x7140)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7145 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7145.valid){
continue;
}
IkReal x7142=((1.0)*(x7145.value));
IkReal x7143=x7127;
IkReal x7144=((1.0)*x7143);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7142)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7142)));
IkReal gconst170=(r20*x7144);
IkReal gconst171=(r21*x7144);
IkReal x7146=r22*r22;
IkReal x7147=((1.0)*x7146);
CheckValue<IkReal> x7151=IKPowWithIntegerCheck(((-1.0)+x7146),-1);
if(!x7151.valid){
continue;
}
IkReal x7148=x7151.value;
if((((1.0)+(((-1.0)*x7147)))) < -0.00001)
continue;
IkReal x7149=IKsqrt(((1.0)+(((-1.0)*x7147))));
IkReal x7150=(sj0*x7148*x7149);
j4eval[0]=((IKabs((x7150+(((-1.0)*x7147*x7150)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7155 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7155.valid){
continue;
}
IkReal x7152=((1.0)*(x7155.value));
IkReal x7153=x7127;
IkReal x7154=((1.0)*x7153);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7152)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7152)));
IkReal gconst170=(r20*x7154);
IkReal gconst171=(r21*x7154);
IkReal x7156=r22*r22;
IkReal x7157=((1.0)*r12*sj0);
IkReal x7158=((1.0)*cj0*r02);
CheckValue<IkReal> x7162=IKPowWithIntegerCheck(((-1.0)+x7156),-1);
if(!x7162.valid){
continue;
}
IkReal x7159=x7162.value;
if((((1.0)+(((-1.0)*x7156)))) < -0.00001)
continue;
IkReal x7160=IKsqrt(((1.0)+(((-1.0)*x7156))));
IkReal x7161=(r22*x7159*x7160);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7157*x7161))+(((-1.0)*x7158*x7161)))))+(IKabs(((((-1.0)*x7158))+(((-1.0)*x7157))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7163=((1.0)*sj0);
IkReal x7164=((1.0)*cj0);
CheckValue<IkReal> x7165=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst170*r21))+((gconst171*r20)))),-1);
if(!x7165.valid){
continue;
}
CheckValue<IkReal> x7166 = IKatan2WithCheck(IkReal(((((-1.0)*gconst170*r10*x7163))+(((-1.0)*gconst170*r00*x7164))+(((-1.0)*gconst171*r01*x7164))+(((-1.0)*gconst171*r11*x7163)))),IkReal(((((-1.0)*r02*x7164))+(((-1.0)*r12*x7163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7165.value)))+(x7166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7167=IKcos(j4);
IkReal x7168=IKsin(j4);
IkReal x7169=(gconst170*r20);
IkReal x7170=(gconst171*r01);
IkReal x7171=(gconst171*r21);
IkReal x7172=((1.0)*cj2);
IkReal x7173=((1.0)*sj0);
IkReal x7174=(gconst170*r00);
IkReal x7175=(gconst171*r11);
IkReal x7176=(gconst170*r10);
IkReal x7177=(cj1*sj2);
IkReal x7178=((1.0)*x7167);
IkReal x7179=((1.0)*x7168);
evalcond[0]=((((-1.0)*x7169*x7178))+(((-1.0)*x7171*x7178))+((r22*x7168)));
evalcond[1]=(cj0+((r12*x7168))+(((-1.0)*x7175*x7178))+(((-1.0)*x7176*x7178)));
evalcond[2]=((((-1.0)*x7170*x7178))+(((-1.0)*x7174*x7178))+(((-1.0)*x7173))+((r02*x7168)));
evalcond[3]=((((-1.0)*x7169*x7179))+(((-1.0)*x7171*x7179))+((sj1*sj2))+(((-1.0)*cj1*x7172))+(((-1.0)*r22*x7178)));
evalcond[4]=((((-1.0)*x7170*x7179))+(((-1.0)*x7174*x7179))+(((-1.0)*r02*x7178))+(((-1.0)*cj0*x7177))+(((-1.0)*cj0*sj1*x7172)));
evalcond[5]=((((-1.0)*x7173*x7177))+(((-1.0)*r12*x7178))+(((-1.0)*sj0*sj1*x7172))+(((-1.0)*x7175*x7179))+(((-1.0)*x7176*x7179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7180=((1.0)*sj0);
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal(((((-1.0)*gconst171*r21*x7180))+(((-1.0)*gconst170*r20*x7180)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182=IKPowWithIntegerCheck(IKsign((((gconst170*r11))+(((-1.0)*gconst171*r10)))),-1);
if(!x7182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7181.value)+(((1.5707963267949)*(x7182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7183=IKcos(j4);
IkReal x7184=IKsin(j4);
IkReal x7185=(gconst170*r20);
IkReal x7186=(gconst171*r01);
IkReal x7187=(gconst171*r21);
IkReal x7188=((1.0)*cj2);
IkReal x7189=((1.0)*sj0);
IkReal x7190=(gconst170*r00);
IkReal x7191=(gconst171*r11);
IkReal x7192=(gconst170*r10);
IkReal x7193=(cj1*sj2);
IkReal x7194=((1.0)*x7183);
IkReal x7195=((1.0)*x7184);
evalcond[0]=((((-1.0)*x7187*x7194))+(((-1.0)*x7185*x7194))+((r22*x7184)));
evalcond[1]=(((r12*x7184))+cj0+(((-1.0)*x7191*x7194))+(((-1.0)*x7192*x7194)));
evalcond[2]=((((-1.0)*x7186*x7194))+(((-1.0)*x7189))+((r02*x7184))+(((-1.0)*x7190*x7194)));
evalcond[3]=((((-1.0)*x7187*x7195))+((sj1*sj2))+(((-1.0)*x7185*x7195))+(((-1.0)*cj1*x7188))+(((-1.0)*r22*x7194)));
evalcond[4]=((((-1.0)*cj0*x7193))+(((-1.0)*cj0*sj1*x7188))+(((-1.0)*x7186*x7195))+(((-1.0)*x7190*x7195))+(((-1.0)*r02*x7194)));
evalcond[5]=((((-1.0)*sj0*sj1*x7188))+(((-1.0)*x7189*x7193))+(((-1.0)*x7191*x7195))+(((-1.0)*r12*x7194))+(((-1.0)*x7192*x7195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7196=((1.0)*gconst171);
CheckValue<IkReal> x7197=IKPowWithIntegerCheck(IKsign((((gconst170*r01))+(((-1.0)*r00*x7196)))),-1);
if(!x7197.valid){
continue;
}
CheckValue<IkReal> x7198 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7196))+(((-1.0)*cj0*gconst170*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7197.value)))+(x7198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7199=IKcos(j4);
IkReal x7200=IKsin(j4);
IkReal x7201=(gconst170*r20);
IkReal x7202=(gconst171*r01);
IkReal x7203=(gconst171*r21);
IkReal x7204=((1.0)*cj2);
IkReal x7205=((1.0)*sj0);
IkReal x7206=(gconst170*r00);
IkReal x7207=(gconst171*r11);
IkReal x7208=(gconst170*r10);
IkReal x7209=(cj1*sj2);
IkReal x7210=((1.0)*x7199);
IkReal x7211=((1.0)*x7200);
evalcond[0]=((((-1.0)*x7201*x7210))+(((-1.0)*x7203*x7210))+((r22*x7200)));
evalcond[1]=(cj0+((r12*x7200))+(((-1.0)*x7207*x7210))+(((-1.0)*x7208*x7210)));
evalcond[2]=((((-1.0)*x7202*x7210))+(((-1.0)*x7206*x7210))+((r02*x7200))+(((-1.0)*x7205)));
evalcond[3]=((((-1.0)*cj1*x7204))+((sj1*sj2))+(((-1.0)*x7201*x7211))+(((-1.0)*x7203*x7211))+(((-1.0)*r22*x7210)));
evalcond[4]=((((-1.0)*cj0*sj1*x7204))+(((-1.0)*x7202*x7211))+(((-1.0)*x7206*x7211))+(((-1.0)*cj0*x7209))+(((-1.0)*r02*x7210)));
evalcond[5]=((((-1.0)*sj0*sj1*x7204))+(((-1.0)*x7205*x7209))+(((-1.0)*r12*x7210))+(((-1.0)*x7207*x7211))+(((-1.0)*x7208*x7211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7213 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7213)==0){
continue;
}
IkReal x7212=pow(x7213,-0.5);
CheckValue<IkReal> x7214 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7214.valid){
continue;
}
IkReal gconst172=((-1.0)*(x7214.value));
IkReal gconst173=(r10*x7212);
IkReal gconst174=(r11*x7212);
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7215.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7218 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7218.valid){
continue;
}
IkReal x7216=((-1.0)*(x7218.value));
IkReal x7217=x7212;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst173;
cj5=gconst174;
j5=x7216;
IkReal gconst172=x7216;
IkReal gconst173=(r10*x7217);
IkReal gconst174=(r11*x7217);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7219=((1.0)*sj0);
IkReal x7220=((1.0)*gconst173);
IkReal x7221=((1.0)*cj0);
CheckValue<IkReal> x7222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7220))+((gconst174*r20)))),-1);
if(!x7222.valid){
continue;
}
CheckValue<IkReal> x7223 = IKatan2WithCheck(IkReal(((((-1.0)*gconst174*r01*x7221))+(((-1.0)*gconst173*r10*x7219))+(((-1.0)*cj0*r00*x7220))+(((-1.0)*gconst174*r11*x7219)))),IkReal(((((-1.0)*r02*x7221))+(((-1.0)*r12*x7219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7222.value)))+(x7223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7224=IKcos(j4);
IkReal x7225=IKsin(j4);
IkReal x7226=(gconst174*r21);
IkReal x7227=(gconst173*r10);
IkReal x7228=(gconst173*r00);
IkReal x7229=(gconst173*r20);
IkReal x7230=((1.0)*cj2);
IkReal x7231=(gconst174*r11);
IkReal x7232=((1.0)*sj0);
IkReal x7233=(gconst174*r01);
IkReal x7234=(cj1*sj2);
IkReal x7235=((1.0)*x7224);
IkReal x7236=((1.0)*x7225);
evalcond[0]=((((-1.0)*x7229*x7235))+(((-1.0)*x7226*x7235))+((r22*x7225)));
evalcond[1]=((((-1.0)*x7231*x7235))+cj0+(((-1.0)*x7227*x7235))+((r12*x7225)));
evalcond[2]=((((-1.0)*x7228*x7235))+(((-1.0)*x7233*x7235))+((r02*x7225))+(((-1.0)*x7232)));
evalcond[3]=((((-1.0)*cj1*x7230))+((sj1*sj2))+(((-1.0)*x7229*x7236))+(((-1.0)*x7226*x7236))+(((-1.0)*r22*x7235)));
evalcond[4]=((((-1.0)*cj0*sj1*x7230))+(((-1.0)*x7228*x7236))+(((-1.0)*cj0*x7234))+(((-1.0)*x7233*x7236))+(((-1.0)*r02*x7235)));
evalcond[5]=((((-1.0)*x7231*x7236))+(((-1.0)*x7232*x7234))+(((-1.0)*x7227*x7236))+(((-1.0)*r12*x7235))+(((-1.0)*sj0*sj1*x7230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7237=((1.0)*cj0);
CheckValue<IkReal> x7238=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst174*r00))+((gconst173*r01)))),-1);
if(!x7238.valid){
continue;
}
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal(((((-1.0)*gconst174*r21*x7237))+(((-1.0)*gconst173*r20*x7237)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7238.value)))+(x7239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7240=IKcos(j4);
IkReal x7241=IKsin(j4);
IkReal x7242=(gconst174*r21);
IkReal x7243=(gconst173*r10);
IkReal x7244=(gconst173*r00);
IkReal x7245=(gconst173*r20);
IkReal x7246=((1.0)*cj2);
IkReal x7247=(gconst174*r11);
IkReal x7248=((1.0)*sj0);
IkReal x7249=(gconst174*r01);
IkReal x7250=(cj1*sj2);
IkReal x7251=((1.0)*x7240);
IkReal x7252=((1.0)*x7241);
evalcond[0]=((((-1.0)*x7242*x7251))+((r22*x7241))+(((-1.0)*x7245*x7251)));
evalcond[1]=((((-1.0)*x7243*x7251))+cj0+(((-1.0)*x7247*x7251))+((r12*x7241)));
evalcond[2]=((((-1.0)*x7244*x7251))+((r02*x7241))+(((-1.0)*x7249*x7251))+(((-1.0)*x7248)));
evalcond[3]=((((-1.0)*x7242*x7252))+((sj1*sj2))+(((-1.0)*r22*x7251))+(((-1.0)*cj1*x7246))+(((-1.0)*x7245*x7252)));
evalcond[4]=((((-1.0)*x7244*x7252))+(((-1.0)*cj0*x7250))+(((-1.0)*x7249*x7252))+(((-1.0)*r02*x7251))+(((-1.0)*cj0*sj1*x7246)));
evalcond[5]=((((-1.0)*x7243*x7252))+(((-1.0)*x7247*x7252))+(((-1.0)*r12*x7251))+(((-1.0)*x7248*x7250))+(((-1.0)*sj0*sj1*x7246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7255 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7255)==0){
continue;
}
IkReal x7253=pow(x7255,-0.5);
IkReal x7254=((-1.0)*x7253);
CheckValue<IkReal> x7256 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7256.valid){
continue;
}
IkReal gconst175=((3.14159265358979)+(((-1.0)*(x7256.value))));
IkReal gconst176=(r10*x7254);
IkReal gconst177=(r11*x7254);
CheckValue<IkReal> x7257 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7257.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7257.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7261 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7261.valid){
continue;
}
IkReal x7258=((1.0)*(x7261.value));
IkReal x7259=x7253;
IkReal x7260=((-1.0)*x7259);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7258)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7258)));
IkReal gconst176=(r10*x7260);
IkReal gconst177=(r11*x7260);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7265 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7265.valid){
continue;
}
IkReal x7262=((1.0)*(x7265.value));
IkReal x7263=x7253;
IkReal x7264=((-1.0)*x7263);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7262)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7262)));
IkReal gconst176=(r10*x7264);
IkReal gconst177=(r11*x7264);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
IkReal x7266=((1.0)*(x7269.value));
IkReal x7267=x7253;
IkReal x7268=((-1.0)*x7267);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7266)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7266)));
IkReal gconst176=(r10*x7268);
IkReal gconst177=(r11*x7268);
IkReal x7270=r12*r12;
IkReal x7271=((1.0)*sj0);
IkReal x7272=(cj0*r02);
IkReal x7273=x7253;
j4eval[0]=((IKabs((((r12*x7272*x7273))+(((-1.0)*x7271*x7273))+((sj0*x7270*x7273)))))+(IKabs(((((-1.0)*x7272))+(((-1.0)*r12*x7271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7274=((1.0)*sj0);
IkReal x7275=((1.0)*gconst176);
IkReal x7276=((1.0)*cj0);
CheckValue<IkReal> x7277=IKPowWithIntegerCheck(IKsign((((gconst177*r20))+(((-1.0)*r21*x7275)))),-1);
if(!x7277.valid){
continue;
}
CheckValue<IkReal> x7278 = IKatan2WithCheck(IkReal(((((-1.0)*gconst177*r01*x7276))+(((-1.0)*cj0*r00*x7275))+(((-1.0)*gconst177*r11*x7274))+(((-1.0)*gconst176*r10*x7274)))),IkReal(((((-1.0)*r12*x7274))+(((-1.0)*r02*x7276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7277.value)))+(x7278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7279=IKcos(j4);
IkReal x7280=IKsin(j4);
IkReal x7281=(gconst176*r10);
IkReal x7282=(gconst177*r11);
IkReal x7283=(gconst176*r00);
IkReal x7284=(gconst177*r01);
IkReal x7285=((1.0)*cj2);
IkReal x7286=(gconst176*r20);
IkReal x7287=((1.0)*sj0);
IkReal x7288=(gconst177*r21);
IkReal x7289=(cj1*sj2);
IkReal x7290=((1.0)*x7279);
IkReal x7291=((1.0)*x7280);
evalcond[0]=((((-1.0)*x7286*x7290))+((r22*x7280))+(((-1.0)*x7288*x7290)));
evalcond[1]=((((-1.0)*x7281*x7290))+cj0+((r12*x7280))+(((-1.0)*x7282*x7290)));
evalcond[2]=((((-1.0)*x7287))+(((-1.0)*x7284*x7290))+((r02*x7280))+(((-1.0)*x7283*x7290)));
evalcond[3]=((((-1.0)*cj1*x7285))+(((-1.0)*x7286*x7291))+(((-1.0)*r22*x7290))+(((-1.0)*x7288*x7291))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x7284*x7291))+(((-1.0)*r02*x7290))+(((-1.0)*x7283*x7291))+(((-1.0)*cj0*sj1*x7285))+(((-1.0)*cj0*x7289)));
evalcond[5]=((((-1.0)*x7281*x7291))+(((-1.0)*r12*x7290))+(((-1.0)*x7282*x7291))+(((-1.0)*x7287*x7289))+(((-1.0)*sj0*sj1*x7285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7292=((1.0)*sj0);
CheckValue<IkReal> x7293 = IKatan2WithCheck(IkReal(((((-1.0)*gconst177*r21*x7292))+(((-1.0)*gconst176*r20*x7292)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7293.valid){
continue;
}
CheckValue<IkReal> x7294=IKPowWithIntegerCheck(IKsign((((gconst176*r11))+(((-1.0)*gconst177*r10)))),-1);
if(!x7294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7293.value)+(((1.5707963267949)*(x7294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7295=IKcos(j4);
IkReal x7296=IKsin(j4);
IkReal x7297=(gconst176*r10);
IkReal x7298=(gconst177*r11);
IkReal x7299=(gconst176*r00);
IkReal x7300=(gconst177*r01);
IkReal x7301=((1.0)*cj2);
IkReal x7302=(gconst176*r20);
IkReal x7303=((1.0)*sj0);
IkReal x7304=(gconst177*r21);
IkReal x7305=(cj1*sj2);
IkReal x7306=((1.0)*x7295);
IkReal x7307=((1.0)*x7296);
evalcond[0]=((((-1.0)*x7302*x7306))+((r22*x7296))+(((-1.0)*x7304*x7306)));
evalcond[1]=((((-1.0)*x7297*x7306))+((r12*x7296))+cj0+(((-1.0)*x7298*x7306)));
evalcond[2]=(((r02*x7296))+(((-1.0)*x7300*x7306))+(((-1.0)*x7299*x7306))+(((-1.0)*x7303)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x7302*x7307))+(((-1.0)*r22*x7306))+(((-1.0)*x7304*x7307))+(((-1.0)*cj1*x7301)));
evalcond[4]=((((-1.0)*cj0*x7305))+(((-1.0)*r02*x7306))+(((-1.0)*cj0*sj1*x7301))+(((-1.0)*x7300*x7307))+(((-1.0)*x7299*x7307)));
evalcond[5]=((((-1.0)*sj0*sj1*x7301))+(((-1.0)*x7297*x7307))+(((-1.0)*x7303*x7305))+(((-1.0)*r12*x7306))+(((-1.0)*x7298*x7307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7308=((1.0)*cj0);
CheckValue<IkReal> x7309 = IKatan2WithCheck(IkReal(((((-1.0)*gconst176*r20*x7308))+(((-1.0)*gconst177*r21*x7308)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7309.valid){
continue;
}
CheckValue<IkReal> x7310=IKPowWithIntegerCheck(IKsign((((gconst176*r01))+(((-1.0)*gconst177*r00)))),-1);
if(!x7310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7309.value)+(((1.5707963267949)*(x7310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7311=IKcos(j4);
IkReal x7312=IKsin(j4);
IkReal x7313=(gconst176*r10);
IkReal x7314=(gconst177*r11);
IkReal x7315=(gconst176*r00);
IkReal x7316=(gconst177*r01);
IkReal x7317=((1.0)*cj2);
IkReal x7318=(gconst176*r20);
IkReal x7319=((1.0)*sj0);
IkReal x7320=(gconst177*r21);
IkReal x7321=(cj1*sj2);
IkReal x7322=((1.0)*x7311);
IkReal x7323=((1.0)*x7312);
evalcond[0]=(((r22*x7312))+(((-1.0)*x7318*x7322))+(((-1.0)*x7320*x7322)));
evalcond[1]=(((r12*x7312))+cj0+(((-1.0)*x7313*x7322))+(((-1.0)*x7314*x7322)));
evalcond[2]=(((r02*x7312))+(((-1.0)*x7316*x7322))+(((-1.0)*x7315*x7322))+(((-1.0)*x7319)));
evalcond[3]=((((-1.0)*r22*x7322))+((sj1*sj2))+(((-1.0)*x7318*x7323))+(((-1.0)*cj1*x7317))+(((-1.0)*x7320*x7323)));
evalcond[4]=((((-1.0)*x7316*x7323))+(((-1.0)*cj0*sj1*x7317))+(((-1.0)*x7315*x7323))+(((-1.0)*cj0*x7321))+(((-1.0)*r02*x7322)));
evalcond[5]=((((-1.0)*x7319*x7321))+(((-1.0)*x7313*x7323))+(((-1.0)*x7314*x7323))+(((-1.0)*r12*x7322))+(((-1.0)*sj0*sj1*x7317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7324=((1.0)*cj5);
IkReal x7325=(((r01*sj5))+(((-1.0)*r00*x7324)));
j4eval[0]=x7325;
j4eval[1]=IKsign(x7325);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x7324))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7326=((1.0)*sj5);
IkReal x7327=(((cj5*r20))+(((-1.0)*r21*x7326)));
j4eval[0]=x7327;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7326))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x7327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7328=cj5*cj5;
IkReal x7329=r10*r10;
IkReal x7330=(cj5*r11);
IkReal x7331=(r10*sj5);
IkReal x7332=((((-1.0)*x7329))+(((-1.0)*x7328*(r11*r11)))+(((-1.0)*(r12*r12)))+((x7328*x7329))+(((-2.0)*x7330*x7331)));
j4eval[0]=x7332;
j4eval[1]=IKsign(x7332);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7331))+(((-1.0)*x7330))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7333=cj5*cj5;
IkReal x7334=r10*r10;
IkReal x7335=(cj5*r11);
IkReal x7336=(r10*sj5);
CheckValue<IkReal> x7337=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7334))+(((-1.0)*x7333*(r11*r11)))+(((-2.0)*x7335*x7336))+(((-1.0)*(r12*r12)))+((x7333*x7334)))),-1);
if(!x7337.valid){
continue;
}
CheckValue<IkReal> x7338 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7336))+(((-1.0)*x7335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7337.value)))+(x7338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7339=IKcos(j4);
IkReal x7340=IKsin(j4);
IkReal x7341=(r00*sj5);
IkReal x7342=(cj5*r01);
IkReal x7343=(r20*sj5);
IkReal x7344=((1.0)*cj2);
IkReal x7345=(cj5*r21);
IkReal x7346=(cj5*r11);
IkReal x7347=(r10*sj5);
IkReal x7348=((1.0)*x7339);
IkReal x7349=((1.0)*x7340);
evalcond[0]=((((-1.0)*x7343*x7348))+(((-1.0)*x7345*x7348))+((r22*x7340)));
evalcond[1]=((((-1.0)*x7341*x7348))+(((-1.0)*x7342*x7348))+((r02*x7340)));
evalcond[2]=((1.0)+((r12*x7340))+(((-1.0)*x7346*x7348))+(((-1.0)*x7347*x7348)));
evalcond[3]=((((-1.0)*r12*x7348))+(((-1.0)*x7346*x7349))+(((-1.0)*x7347*x7349)));
evalcond[4]=((((-1.0)*r22*x7348))+((sj1*sj2))+(((-1.0)*x7343*x7349))+(((-1.0)*cj1*x7344))+(((-1.0)*x7345*x7349)));
evalcond[5]=((((-1.0)*sj1*x7344))+(((-1.0)*cj1*sj2))+(((-1.0)*x7341*x7349))+(((-1.0)*x7342*x7349))+(((-1.0)*r02*x7348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7350=((1.0)*sj5);
CheckValue<IkReal> x7351 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7350))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7351.valid){
continue;
}
CheckValue<IkReal> x7352=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x7350)))),-1);
if(!x7352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7351.value)+(((1.5707963267949)*(x7352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7353=IKcos(j4);
IkReal x7354=IKsin(j4);
IkReal x7355=(r00*sj5);
IkReal x7356=(cj5*r01);
IkReal x7357=(r20*sj5);
IkReal x7358=((1.0)*cj2);
IkReal x7359=(cj5*r21);
IkReal x7360=(cj5*r11);
IkReal x7361=(r10*sj5);
IkReal x7362=((1.0)*x7353);
IkReal x7363=((1.0)*x7354);
evalcond[0]=((((-1.0)*x7357*x7362))+((r22*x7354))+(((-1.0)*x7359*x7362)));
evalcond[1]=((((-1.0)*x7356*x7362))+((r02*x7354))+(((-1.0)*x7355*x7362)));
evalcond[2]=((1.0)+((r12*x7354))+(((-1.0)*x7360*x7362))+(((-1.0)*x7361*x7362)));
evalcond[3]=((((-1.0)*r12*x7362))+(((-1.0)*x7360*x7363))+(((-1.0)*x7361*x7363)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x7362))+(((-1.0)*x7357*x7363))+(((-1.0)*cj1*x7358))+(((-1.0)*x7359*x7363)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x7356*x7363))+(((-1.0)*r02*x7362))+(((-1.0)*sj1*x7358))+(((-1.0)*x7355*x7363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7364=((1.0)*cj5);
CheckValue<IkReal> x7365=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x7364)))),-1);
if(!x7365.valid){
continue;
}
CheckValue<IkReal> x7366 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7364))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7365.value)))+(x7366.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7367=IKcos(j4);
IkReal x7368=IKsin(j4);
IkReal x7369=(r00*sj5);
IkReal x7370=(cj5*r01);
IkReal x7371=(r20*sj5);
IkReal x7372=((1.0)*cj2);
IkReal x7373=(cj5*r21);
IkReal x7374=(cj5*r11);
IkReal x7375=(r10*sj5);
IkReal x7376=((1.0)*x7367);
IkReal x7377=((1.0)*x7368);
evalcond[0]=((((-1.0)*x7373*x7376))+((r22*x7368))+(((-1.0)*x7371*x7376)));
evalcond[1]=((((-1.0)*x7370*x7376))+(((-1.0)*x7369*x7376))+((r02*x7368)));
evalcond[2]=((1.0)+((r12*x7368))+(((-1.0)*x7374*x7376))+(((-1.0)*x7375*x7376)));
evalcond[3]=((((-1.0)*x7374*x7377))+(((-1.0)*r12*x7376))+(((-1.0)*x7375*x7377)));
evalcond[4]=((((-1.0)*r22*x7376))+((sj1*sj2))+(((-1.0)*cj1*x7372))+(((-1.0)*x7373*x7377))+(((-1.0)*x7371*x7377)));
evalcond[5]=((((-1.0)*sj1*x7372))+(((-1.0)*cj1*sj2))+(((-1.0)*x7370*x7377))+(((-1.0)*r02*x7376))+(((-1.0)*x7369*x7377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7378=((1.0)*sj5);
IkReal x7379=((((-1.0)*r01*x7378))+((cj5*r00)));
j4eval[0]=x7379;
j4eval[1]=IKsign(x7379);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7378))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7380=((1.0)*cj5);
IkReal x7381=(((r21*sj5))+(((-1.0)*r20*x7380)));
j4eval[0]=x7381;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7380))))));
j4eval[2]=IKsign(x7381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7382=cj5*cj5;
IkReal x7383=r10*r10;
IkReal x7384=(cj5*r11);
IkReal x7385=(r10*sj5);
IkReal x7386=(x7383+(r12*r12)+(((2.0)*x7384*x7385))+((x7382*(r11*r11)))+(((-1.0)*x7382*x7383)));
j4eval[0]=x7386;
j4eval[1]=IKsign(x7386);
j4eval[2]=((IKabs(((((-1.0)*x7384))+(((-1.0)*x7385)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7387=cj5*cj5;
IkReal x7388=r10*r10;
IkReal x7389=(cj5*r11);
IkReal x7390=(r10*sj5);
CheckValue<IkReal> x7391 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7389))+(((-1.0)*x7390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7391.valid){
continue;
}
CheckValue<IkReal> x7392=IKPowWithIntegerCheck(IKsign((x7388+(r12*r12)+(((2.0)*x7389*x7390))+(((-1.0)*x7387*x7388))+((x7387*(r11*r11))))),-1);
if(!x7392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7391.value)+(((1.5707963267949)*(x7392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7393=IKcos(j4);
IkReal x7394=IKsin(j4);
IkReal x7395=(r00*sj5);
IkReal x7396=(cj5*r01);
IkReal x7397=(r20*sj5);
IkReal x7398=(cj5*r21);
IkReal x7399=(cj5*r11);
IkReal x7400=(r10*sj5);
IkReal x7401=((1.0)*x7393);
IkReal x7402=((1.0)*x7394);
evalcond[0]=((((-1.0)*x7397*x7401))+((r22*x7394))+(((-1.0)*x7398*x7401)));
evalcond[1]=(((r02*x7394))+(((-1.0)*x7396*x7401))+(((-1.0)*x7395*x7401)));
evalcond[2]=((-1.0)+(((-1.0)*x7399*x7401))+((r12*x7394))+(((-1.0)*x7400*x7401)));
evalcond[3]=((((-1.0)*r12*x7401))+(((-1.0)*x7399*x7402))+(((-1.0)*x7400*x7402)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7396*x7402))+(((-1.0)*x7395*x7402))+(((-1.0)*r02*x7401)));
evalcond[5]=((((-1.0)*x7397*x7402))+(((-1.0)*x7398*x7402))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7403=((1.0)*cj5);
CheckValue<IkReal> x7404=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x7403)))),-1);
if(!x7404.valid){
continue;
}
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7403))+(((-1.0)*r00*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7404.value)))+(x7405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7406=IKcos(j4);
IkReal x7407=IKsin(j4);
IkReal x7408=(r00*sj5);
IkReal x7409=(cj5*r01);
IkReal x7410=(r20*sj5);
IkReal x7411=(cj5*r21);
IkReal x7412=(cj5*r11);
IkReal x7413=(r10*sj5);
IkReal x7414=((1.0)*x7406);
IkReal x7415=((1.0)*x7407);
evalcond[0]=((((-1.0)*x7411*x7414))+((r22*x7407))+(((-1.0)*x7410*x7414)));
evalcond[1]=(((r02*x7407))+(((-1.0)*x7409*x7414))+(((-1.0)*x7408*x7414)));
evalcond[2]=((-1.0)+(((-1.0)*x7412*x7414))+(((-1.0)*x7413*x7414))+((r12*x7407)));
evalcond[3]=((((-1.0)*r12*x7414))+(((-1.0)*x7412*x7415))+(((-1.0)*x7413*x7415)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7409*x7415))+(((-1.0)*x7408*x7415))+(((-1.0)*r02*x7414)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7411*x7415))+(((-1.0)*r22*x7414))+(((-1.0)*x7410*x7415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7416=((1.0)*sj5);
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x7416))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
CheckValue<IkReal> x7418=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7416))+((cj5*r00)))),-1);
if(!x7418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7417.value)+(((1.5707963267949)*(x7418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7419=IKcos(j4);
IkReal x7420=IKsin(j4);
IkReal x7421=(r00*sj5);
IkReal x7422=(cj5*r01);
IkReal x7423=(r20*sj5);
IkReal x7424=(cj5*r21);
IkReal x7425=(cj5*r11);
IkReal x7426=(r10*sj5);
IkReal x7427=((1.0)*x7419);
IkReal x7428=((1.0)*x7420);
evalcond[0]=((((-1.0)*x7424*x7427))+((r22*x7420))+(((-1.0)*x7423*x7427)));
evalcond[1]=((((-1.0)*x7421*x7427))+(((-1.0)*x7422*x7427))+((r02*x7420)));
evalcond[2]=((-1.0)+((r12*x7420))+(((-1.0)*x7425*x7427))+(((-1.0)*x7426*x7427)));
evalcond[3]=((((-1.0)*r12*x7427))+(((-1.0)*x7425*x7428))+(((-1.0)*x7426*x7428)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7421*x7428))+(((-1.0)*x7422*x7428))+((cj1*sj2))+(((-1.0)*r02*x7427)));
evalcond[5]=((((-1.0)*r22*x7427))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7424*x7428))+(((-1.0)*x7423*x7428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7430 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7430)==0){
continue;
}
IkReal x7429=pow(x7430,-0.5);
CheckValue<IkReal> x7431 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7431.valid){
continue;
}
IkReal gconst178=((-1.0)*(x7431.value));
IkReal gconst179=(r00*x7429);
IkReal gconst180=(r01*x7429);
CheckValue<IkReal> x7432 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7432.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7432.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7435 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7435.valid){
continue;
}
IkReal x7433=((-1.0)*(x7435.value));
IkReal x7434=x7429;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst179;
cj5=gconst180;
j5=x7433;
IkReal gconst178=x7433;
IkReal gconst179=(r00*x7434);
IkReal gconst180=(r01*x7434);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7436=((1.0)*sj0);
IkReal x7437=((1.0)*gconst179);
IkReal x7438=((1.0)*cj0);
CheckValue<IkReal> x7439=IKPowWithIntegerCheck(IKsign((((gconst180*r20))+(((-1.0)*r21*x7437)))),-1);
if(!x7439.valid){
continue;
}
CheckValue<IkReal> x7440 = IKatan2WithCheck(IkReal(((((-1.0)*gconst180*r01*x7438))+(((-1.0)*gconst179*r10*x7436))+(((-1.0)*gconst180*r11*x7436))+(((-1.0)*cj0*r00*x7437)))),IkReal(((((-1.0)*r02*x7438))+(((-1.0)*r12*x7436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7439.value)))+(x7440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7441=IKcos(j4);
IkReal x7442=IKsin(j4);
IkReal x7443=(gconst179*r10);
IkReal x7444=(gconst180*r21);
IkReal x7445=(gconst180*r01);
IkReal x7446=((1.0)*cj2);
IkReal x7447=(gconst179*r20);
IkReal x7448=(gconst180*r11);
IkReal x7449=((1.0)*sj0);
IkReal x7450=(gconst179*r00);
IkReal x7451=(cj1*sj2);
IkReal x7452=((1.0)*x7441);
IkReal x7453=((1.0)*x7442);
evalcond[0]=(((r22*x7442))+(((-1.0)*x7447*x7452))+(((-1.0)*x7444*x7452)));
evalcond[1]=((((-1.0)*x7443*x7452))+((r12*x7442))+cj0+(((-1.0)*x7448*x7452)));
evalcond[2]=((((-1.0)*x7449))+(((-1.0)*x7450*x7452))+(((-1.0)*x7445*x7452))+((r02*x7442)));
evalcond[3]=((((-1.0)*cj1*x7446))+((sj1*sj2))+(((-1.0)*x7447*x7453))+(((-1.0)*x7444*x7453))+(((-1.0)*r22*x7452)));
evalcond[4]=((((-1.0)*cj0*sj1*x7446))+(((-1.0)*cj0*x7451))+(((-1.0)*x7450*x7453))+(((-1.0)*r02*x7452))+(((-1.0)*x7445*x7453)));
evalcond[5]=((((-1.0)*x7443*x7453))+(((-1.0)*sj0*sj1*x7446))+(((-1.0)*x7449*x7451))+(((-1.0)*r12*x7452))+(((-1.0)*x7448*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7454=((1.0)*sj0);
CheckValue<IkReal> x7455 = IKatan2WithCheck(IkReal(((((-1.0)*gconst180*r21*x7454))+(((-1.0)*gconst179*r20*x7454)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7455.valid){
continue;
}
CheckValue<IkReal> x7456=IKPowWithIntegerCheck(IKsign((((gconst179*r11))+(((-1.0)*gconst180*r10)))),-1);
if(!x7456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7455.value)+(((1.5707963267949)*(x7456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7457=IKcos(j4);
IkReal x7458=IKsin(j4);
IkReal x7459=(gconst179*r10);
IkReal x7460=(gconst180*r21);
IkReal x7461=(gconst180*r01);
IkReal x7462=((1.0)*cj2);
IkReal x7463=(gconst179*r20);
IkReal x7464=(gconst180*r11);
IkReal x7465=((1.0)*sj0);
IkReal x7466=(gconst179*r00);
IkReal x7467=(cj1*sj2);
IkReal x7468=((1.0)*x7457);
IkReal x7469=((1.0)*x7458);
evalcond[0]=(((r22*x7458))+(((-1.0)*x7460*x7468))+(((-1.0)*x7463*x7468)));
evalcond[1]=(((r12*x7458))+cj0+(((-1.0)*x7464*x7468))+(((-1.0)*x7459*x7468)));
evalcond[2]=(((r02*x7458))+(((-1.0)*x7461*x7468))+(((-1.0)*x7466*x7468))+(((-1.0)*x7465)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x7468))+(((-1.0)*cj1*x7462))+(((-1.0)*x7460*x7469))+(((-1.0)*x7463*x7469)));
evalcond[4]=((((-1.0)*r02*x7468))+(((-1.0)*x7461*x7469))+(((-1.0)*cj0*x7467))+(((-1.0)*x7466*x7469))+(((-1.0)*cj0*sj1*x7462)));
evalcond[5]=((((-1.0)*sj0*sj1*x7462))+(((-1.0)*x7464*x7469))+(((-1.0)*r12*x7468))+(((-1.0)*x7459*x7469))+(((-1.0)*x7465*x7467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7470=((-1.0)*r00);
IkReal x7472 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7472)==0){
continue;
}
IkReal x7471=pow(x7472,-0.5);
CheckValue<IkReal> x7473 = IKatan2WithCheck(IkReal(x7470),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7473.valid){
continue;
}
IkReal gconst181=((3.14159265358979)+(((-1.0)*(x7473.value))));
IkReal gconst182=(x7470*x7471);
IkReal gconst183=((-1.0)*r01*x7471);
CheckValue<IkReal> x7474 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7474.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7474.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7475=((-1.0)*r00);
CheckValue<IkReal> x7478 = IKatan2WithCheck(IkReal(x7475),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7478.valid){
continue;
}
IkReal x7476=((1.0)*(x7478.value));
IkReal x7477=x7471;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x7476)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x7476)));
IkReal gconst182=(x7475*x7477);
IkReal gconst183=((-1.0)*r01*x7477);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7479=((-1.0)*r00);
CheckValue<IkReal> x7482 = IKatan2WithCheck(IkReal(x7479),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7482.valid){
continue;
}
IkReal x7480=((1.0)*(x7482.value));
IkReal x7481=x7471;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x7480)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x7480)));
IkReal gconst182=(x7479*x7481);
IkReal gconst183=((-1.0)*r01*x7481);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7483=((-1.0)*r00);
CheckValue<IkReal> x7486 = IKatan2WithCheck(IkReal(x7483),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7486.valid){
continue;
}
IkReal x7484=((1.0)*(x7486.value));
IkReal x7485=x7471;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x7484)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x7484)));
IkReal gconst182=(x7483*x7485);
IkReal gconst183=((-1.0)*r01*x7485);
IkReal x7487=r02*r02;
IkReal x7488=(r12*sj0);
IkReal x7489=((1.0)*cj0);
IkReal x7490=x7471;
j4eval[0]=((IKabs((((r02*x7488*x7490))+(((-1.0)*x7489*x7490))+((cj0*x7487*x7490)))))+(IKabs(((((-1.0)*x7488))+(((-1.0)*r02*x7489))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7491=((1.0)*sj0);
IkReal x7492=((1.0)*gconst182);
IkReal x7493=((1.0)*cj0);
CheckValue<IkReal> x7494 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x7492))+(((-1.0)*gconst182*r10*x7491))+(((-1.0)*gconst183*r11*x7491))+(((-1.0)*gconst183*r01*x7493)))),IkReal(((((-1.0)*r02*x7493))+(((-1.0)*r12*x7491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7494.valid){
continue;
}
CheckValue<IkReal> x7495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7492))+((gconst183*r20)))),-1);
if(!x7495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7494.value)+(((1.5707963267949)*(x7495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7496=IKcos(j4);
IkReal x7497=IKsin(j4);
IkReal x7498=((1.0)*cj2);
IkReal x7499=(gconst182*r20);
IkReal x7500=((1.0)*sj0);
IkReal x7501=(gconst182*r10);
IkReal x7502=(gconst183*r01);
IkReal x7503=(gconst183*r21);
IkReal x7504=(gconst182*r00);
IkReal x7505=(gconst183*r11);
IkReal x7506=(cj1*sj2);
IkReal x7507=((1.0)*x7496);
IkReal x7508=((1.0)*x7497);
evalcond[0]=(((r22*x7497))+(((-1.0)*x7499*x7507))+(((-1.0)*x7503*x7507)));
evalcond[1]=((((-1.0)*x7501*x7507))+cj0+((r12*x7497))+(((-1.0)*x7505*x7507)));
evalcond[2]=((((-1.0)*x7502*x7507))+((r02*x7497))+(((-1.0)*x7504*x7507))+(((-1.0)*x7500)));
evalcond[3]=((((-1.0)*r22*x7507))+(((-1.0)*x7499*x7508))+(((-1.0)*cj1*x7498))+(((-1.0)*x7503*x7508))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x7498))+(((-1.0)*x7502*x7508))+(((-1.0)*r02*x7507))+(((-1.0)*x7504*x7508))+(((-1.0)*cj0*x7506)));
evalcond[5]=((((-1.0)*x7501*x7508))+(((-1.0)*x7500*x7506))+(((-1.0)*sj0*sj1*x7498))+(((-1.0)*x7505*x7508))+(((-1.0)*r12*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7509=((1.0)*gconst183);
CheckValue<IkReal> x7510 = IKatan2WithCheck(IkReal(((((-1.0)*gconst182*r20*sj0))+(((-1.0)*r21*sj0*x7509)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7510.valid){
continue;
}
CheckValue<IkReal> x7511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7509))+((gconst182*r11)))),-1);
if(!x7511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7510.value)+(((1.5707963267949)*(x7511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7512=IKcos(j4);
IkReal x7513=IKsin(j4);
IkReal x7514=((1.0)*cj2);
IkReal x7515=(gconst182*r20);
IkReal x7516=((1.0)*sj0);
IkReal x7517=(gconst182*r10);
IkReal x7518=(gconst183*r01);
IkReal x7519=(gconst183*r21);
IkReal x7520=(gconst182*r00);
IkReal x7521=(gconst183*r11);
IkReal x7522=(cj1*sj2);
IkReal x7523=((1.0)*x7512);
IkReal x7524=((1.0)*x7513);
evalcond[0]=((((-1.0)*x7515*x7523))+((r22*x7513))+(((-1.0)*x7519*x7523)));
evalcond[1]=(cj0+((r12*x7513))+(((-1.0)*x7521*x7523))+(((-1.0)*x7517*x7523)));
evalcond[2]=(((r02*x7513))+(((-1.0)*x7520*x7523))+(((-1.0)*x7518*x7523))+(((-1.0)*x7516)));
evalcond[3]=((((-1.0)*x7515*x7524))+(((-1.0)*cj1*x7514))+((sj1*sj2))+(((-1.0)*x7519*x7524))+(((-1.0)*r22*x7523)));
evalcond[4]=((((-1.0)*cj0*x7522))+(((-1.0)*cj0*sj1*x7514))+(((-1.0)*r02*x7523))+(((-1.0)*x7520*x7524))+(((-1.0)*x7518*x7524)));
evalcond[5]=((((-1.0)*x7516*x7522))+(((-1.0)*x7521*x7524))+(((-1.0)*x7517*x7524))+(((-1.0)*r12*x7523))+(((-1.0)*sj0*sj1*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7525=((1.0)*cj0);
CheckValue<IkReal> x7526 = IKatan2WithCheck(IkReal(((((-1.0)*gconst182*r20*x7525))+(((-1.0)*gconst183*r21*x7525)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst183*r00))+((gconst182*r01)))),-1);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7526.value)+(((1.5707963267949)*(x7527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKcos(j4);
IkReal x7529=IKsin(j4);
IkReal x7530=((1.0)*cj2);
IkReal x7531=(gconst182*r20);
IkReal x7532=((1.0)*sj0);
IkReal x7533=(gconst182*r10);
IkReal x7534=(gconst183*r01);
IkReal x7535=(gconst183*r21);
IkReal x7536=(gconst182*r00);
IkReal x7537=(gconst183*r11);
IkReal x7538=(cj1*sj2);
IkReal x7539=((1.0)*x7528);
IkReal x7540=((1.0)*x7529);
evalcond[0]=((((-1.0)*x7531*x7539))+((r22*x7529))+(((-1.0)*x7535*x7539)));
evalcond[1]=(cj0+((r12*x7529))+(((-1.0)*x7533*x7539))+(((-1.0)*x7537*x7539)));
evalcond[2]=((((-1.0)*x7532))+((r02*x7529))+(((-1.0)*x7534*x7539))+(((-1.0)*x7536*x7539)));
evalcond[3]=((((-1.0)*x7535*x7540))+(((-1.0)*r22*x7539))+((sj1*sj2))+(((-1.0)*x7531*x7540))+(((-1.0)*cj1*x7530)));
evalcond[4]=((((-1.0)*x7534*x7540))+(((-1.0)*cj0*sj1*x7530))+(((-1.0)*cj0*x7538))+(((-1.0)*x7536*x7540))+(((-1.0)*r02*x7539)));
evalcond[5]=((((-1.0)*x7533*x7540))+(((-1.0)*x7532*x7538))+(((-1.0)*sj0*sj1*x7530))+(((-1.0)*r12*x7539))+(((-1.0)*x7537*x7540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7541=((1.0)*cj5);
IkReal x7542=((((-1.0)*r10*x7541))+((r11*sj5)));
j4eval[0]=x7542;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x7541))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x7542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7543=((1.0)*sj5);
IkReal x7544=(((cj5*r20))+(((-1.0)*r21*x7543)));
j4eval[0]=x7544;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7543))))));
j4eval[2]=IKsign(x7544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7545=cj5*cj5;
IkReal x7546=r00*r00;
IkReal x7547=(r00*sj5);
IkReal x7548=(cj5*r01);
IkReal x7549=((((-1.0)*x7545*x7546))+(((2.0)*x7547*x7548))+x7546+(r02*r02)+((x7545*(r01*r01))));
j4eval[0]=x7549;
j4eval[1]=IKsign(x7549);
j4eval[2]=((IKabs(((((-1.0)*x7547))+(((-1.0)*x7548)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7550=cj5*cj5;
IkReal x7551=r00*r00;
IkReal x7552=(cj5*r01);
IkReal x7553=(r00*sj5);
CheckValue<IkReal> x7554=IKPowWithIntegerCheck(IKsign(((((2.0)*x7552*x7553))+((x7550*(r01*r01)))+(((-1.0)*x7550*x7551))+x7551+(r02*r02))),-1);
if(!x7554.valid){
continue;
}
CheckValue<IkReal> x7555 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7553))+(((-1.0)*x7552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7554.value)))+(x7555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7556=IKcos(j4);
IkReal x7557=IKsin(j4);
IkReal x7558=(r00*sj5);
IkReal x7559=(cj5*r01);
IkReal x7560=(r20*sj5);
IkReal x7561=((1.0)*cj2);
IkReal x7562=(cj5*r21);
IkReal x7563=(cj5*r11);
IkReal x7564=(r10*sj5);
IkReal x7565=((1.0)*x7556);
IkReal x7566=((1.0)*x7557);
evalcond[0]=((((-1.0)*x7562*x7565))+((r22*x7557))+(((-1.0)*x7560*x7565)));
evalcond[1]=((((-1.0)*x7563*x7565))+(((-1.0)*x7564*x7565))+((r12*x7557)));
evalcond[2]=((-1.0)+(((-1.0)*x7559*x7565))+((r02*x7557))+(((-1.0)*x7558*x7565)));
evalcond[3]=((((-1.0)*r02*x7565))+(((-1.0)*x7559*x7566))+(((-1.0)*x7558*x7566)));
evalcond[4]=((((-1.0)*x7562*x7566))+(((-1.0)*r22*x7565))+((sj1*sj2))+(((-1.0)*x7560*x7566))+(((-1.0)*cj1*x7561)));
evalcond[5]=((((-1.0)*x7563*x7566))+(((-1.0)*x7564*x7566))+(((-1.0)*sj1*x7561))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x7565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7567=((1.0)*sj5);
CheckValue<IkReal> x7568 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7567)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7568.valid){
continue;
}
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x7567)))),-1);
if(!x7569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7568.value)+(((1.5707963267949)*(x7569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7570=IKcos(j4);
IkReal x7571=IKsin(j4);
IkReal x7572=(r00*sj5);
IkReal x7573=(cj5*r01);
IkReal x7574=(r20*sj5);
IkReal x7575=((1.0)*cj2);
IkReal x7576=(cj5*r21);
IkReal x7577=(cj5*r11);
IkReal x7578=(r10*sj5);
IkReal x7579=((1.0)*x7570);
IkReal x7580=((1.0)*x7571);
evalcond[0]=((((-1.0)*x7576*x7579))+(((-1.0)*x7574*x7579))+((r22*x7571)));
evalcond[1]=((((-1.0)*x7578*x7579))+((r12*x7571))+(((-1.0)*x7577*x7579)));
evalcond[2]=((-1.0)+((r02*x7571))+(((-1.0)*x7573*x7579))+(((-1.0)*x7572*x7579)));
evalcond[3]=((((-1.0)*x7573*x7580))+(((-1.0)*x7572*x7580))+(((-1.0)*r02*x7579)));
evalcond[4]=((((-1.0)*x7576*x7580))+((sj1*sj2))+(((-1.0)*cj1*x7575))+(((-1.0)*r22*x7579))+(((-1.0)*x7574*x7580)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x7577*x7580))+(((-1.0)*sj1*x7575))+(((-1.0)*r12*x7579))+(((-1.0)*x7578*x7580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7581=((1.0)*cj5);
CheckValue<IkReal> x7582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7581))+((r11*sj5)))),-1);
if(!x7582.valid){
continue;
}
CheckValue<IkReal> x7583 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7581))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7582.value)))+(x7583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7584=IKcos(j4);
IkReal x7585=IKsin(j4);
IkReal x7586=(r00*sj5);
IkReal x7587=(cj5*r01);
IkReal x7588=(r20*sj5);
IkReal x7589=((1.0)*cj2);
IkReal x7590=(cj5*r21);
IkReal x7591=(cj5*r11);
IkReal x7592=(r10*sj5);
IkReal x7593=((1.0)*x7584);
IkReal x7594=((1.0)*x7585);
evalcond[0]=((((-1.0)*x7590*x7593))+((r22*x7585))+(((-1.0)*x7588*x7593)));
evalcond[1]=((((-1.0)*x7592*x7593))+((r12*x7585))+(((-1.0)*x7591*x7593)));
evalcond[2]=((-1.0)+((r02*x7585))+(((-1.0)*x7586*x7593))+(((-1.0)*x7587*x7593)));
evalcond[3]=((((-1.0)*x7586*x7594))+(((-1.0)*x7587*x7594))+(((-1.0)*r02*x7593)));
evalcond[4]=((((-1.0)*cj1*x7589))+(((-1.0)*x7590*x7594))+(((-1.0)*r22*x7593))+((sj1*sj2))+(((-1.0)*x7588*x7594)));
evalcond[5]=((((-1.0)*x7592*x7594))+(((-1.0)*x7591*x7594))+(((-1.0)*sj1*x7589))+(((-1.0)*r12*x7593))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7595=((1.0)*sj5);
IkReal x7596=(((cj5*r10))+(((-1.0)*r11*x7595)));
j4eval[0]=x7596;
j4eval[1]=IKsign(x7596);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7595)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7597=((1.0)*cj5);
IkReal x7598=(((r21*sj5))+(((-1.0)*r20*x7597)));
j4eval[0]=x7598;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7597))))));
j4eval[2]=IKsign(x7598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7599=cj5*cj5;
IkReal x7600=r00*r00;
IkReal x7601=(cj5*r01);
IkReal x7602=(r00*sj5);
IkReal x7603=(((x7599*x7600))+(((-1.0)*(r02*r02)))+(((-1.0)*x7599*(r01*r01)))+(((-2.0)*x7601*x7602))+(((-1.0)*x7600)));
j4eval[0]=x7603;
j4eval[1]=IKsign(x7603);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7602))+(((-1.0)*x7601))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7604=cj5*cj5;
IkReal x7605=r00*r00;
IkReal x7606=(cj5*r01);
IkReal x7607=(r00*sj5);
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7606))+(((-1.0)*x7607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
CheckValue<IkReal> x7609=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7604*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-2.0)*x7606*x7607))+((x7604*x7605))+(((-1.0)*x7605)))),-1);
if(!x7609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7608.value)+(((1.5707963267949)*(x7609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7610=IKcos(j4);
IkReal x7611=IKsin(j4);
IkReal x7612=(r00*sj5);
IkReal x7613=(cj5*r01);
IkReal x7614=(r20*sj5);
IkReal x7615=(cj5*r21);
IkReal x7616=(cj5*r11);
IkReal x7617=(r10*sj5);
IkReal x7618=((1.0)*x7610);
IkReal x7619=((1.0)*x7611);
evalcond[0]=((((-1.0)*x7614*x7618))+(((-1.0)*x7615*x7618))+((r22*x7611)));
evalcond[1]=(((r12*x7611))+(((-1.0)*x7617*x7618))+(((-1.0)*x7616*x7618)));
evalcond[2]=((1.0)+(((-1.0)*x7612*x7618))+(((-1.0)*x7613*x7618))+((r02*x7611)));
evalcond[3]=((((-1.0)*x7612*x7619))+(((-1.0)*x7613*x7619))+(((-1.0)*r02*x7618)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x7618))+(((-1.0)*x7617*x7619))+((cj1*sj2))+(((-1.0)*x7616*x7619)));
evalcond[5]=((((-1.0)*r22*x7618))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7614*x7619))+(((-1.0)*x7615*x7619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7620=((1.0)*cj5);
CheckValue<IkReal> x7621 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7620)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7621.valid){
continue;
}
CheckValue<IkReal> x7622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7620))+((r21*sj5)))),-1);
if(!x7622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7621.value)+(((1.5707963267949)*(x7622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7623=IKcos(j4);
IkReal x7624=IKsin(j4);
IkReal x7625=(r00*sj5);
IkReal x7626=(cj5*r01);
IkReal x7627=(r20*sj5);
IkReal x7628=(cj5*r21);
IkReal x7629=(cj5*r11);
IkReal x7630=(r10*sj5);
IkReal x7631=((1.0)*x7623);
IkReal x7632=((1.0)*x7624);
evalcond[0]=((((-1.0)*x7628*x7631))+(((-1.0)*x7627*x7631))+((r22*x7624)));
evalcond[1]=((((-1.0)*x7630*x7631))+(((-1.0)*x7629*x7631))+((r12*x7624)));
evalcond[2]=((1.0)+((r02*x7624))+(((-1.0)*x7626*x7631))+(((-1.0)*x7625*x7631)));
evalcond[3]=((((-1.0)*x7626*x7632))+(((-1.0)*r02*x7631))+(((-1.0)*x7625*x7632)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7630*x7632))+((cj1*sj2))+(((-1.0)*x7629*x7632))+(((-1.0)*r12*x7631)));
evalcond[5]=((((-1.0)*r22*x7631))+(((-1.0)*x7628*x7632))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7627*x7632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7633=((1.0)*sj5);
CheckValue<IkReal> x7634=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x7633)))),-1);
if(!x7634.valid){
continue;
}
CheckValue<IkReal> x7635 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7633)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7634.value)))+(x7635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7636=IKcos(j4);
IkReal x7637=IKsin(j4);
IkReal x7638=(r00*sj5);
IkReal x7639=(cj5*r01);
IkReal x7640=(r20*sj5);
IkReal x7641=(cj5*r21);
IkReal x7642=(cj5*r11);
IkReal x7643=(r10*sj5);
IkReal x7644=((1.0)*x7636);
IkReal x7645=((1.0)*x7637);
evalcond[0]=(((r22*x7637))+(((-1.0)*x7640*x7644))+(((-1.0)*x7641*x7644)));
evalcond[1]=(((r12*x7637))+(((-1.0)*x7643*x7644))+(((-1.0)*x7642*x7644)));
evalcond[2]=((1.0)+(((-1.0)*x7639*x7644))+((r02*x7637))+(((-1.0)*x7638*x7644)));
evalcond[3]=((((-1.0)*r02*x7644))+(((-1.0)*x7639*x7645))+(((-1.0)*x7638*x7645)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x7644))+(((-1.0)*x7643*x7645))+(((-1.0)*x7642*x7645)));
evalcond[5]=((((-1.0)*r22*x7644))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7640*x7645))+(((-1.0)*x7641*x7645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7646=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7646);
rxp1_1=(px*r21);
rxp1_2=(r11*x7646);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7647=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7647);
rxp1_1=(px*r21);
rxp1_2=(r11*x7647);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7648=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7648);
rxp1_1=(px*r21);
rxp1_2=(r11*x7648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7651=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x7651.valid){
continue;
}
IkReal x7649=x7651.value;
IkReal x7650=(sj0*x7649);
sj4array[0]=(((cj1*sj2*x7650))+((cj2*sj1*x7650)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7652=IKcos(j4);
IkReal x7653=IKsin(j4);
IkReal x7654=(r20*sj5);
IkReal x7655=((1.0)*cj5*r21);
IkReal x7656=((1.0)*x7652);
evalcond[0]=((-1.0)*r02*x7652);
evalcond[1]=((((-1.0)*sj0))+((r02*x7653)));
evalcond[2]=((((-1.0)*x7654*x7656))+(((-1.0)*x7652*x7655)));
evalcond[3]=((((-1.0)*r10*sj5*x7656))+(((-1.0)*cj5*r11*x7656)));
evalcond[4]=((((-1.0)*x7653*x7655))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7653*x7654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7658=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x7658.valid){
continue;
}
IkReal x7657=x7658.value;
sj4array[0]=((((-1.0)*sj1*sj2*x7657))+((cj1*cj2*x7657)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7659=IKcos(j4);
IkReal x7660=IKsin(j4);
IkReal x7661=((1.0)*sj0);
IkReal x7662=(r10*sj5);
IkReal x7663=((1.0)*x7660);
IkReal x7664=((1.0)*x7659);
IkReal x7665=(cj5*x7664);
evalcond[0]=((-1.0)*r02*x7659);
evalcond[1]=((((-1.0)*x7661))+((r02*x7660)));
evalcond[2]=((((-1.0)*r20*sj5*x7664))+(((-1.0)*r21*x7665)));
evalcond[3]=((((-1.0)*r11*x7665))+(((-1.0)*x7662*x7664)));
evalcond[4]=((((-1.0)*cj5*r11*x7663))+(((-1.0)*cj1*sj2*x7661))+(((-1.0)*cj2*sj1*x7661))+(((-1.0)*x7662*x7663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7666=IKPowWithIntegerCheck(r02,-1);
if(!x7666.valid){
continue;
}
sj4array[0]=(sj0*(x7666.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7667=IKcos(j4);
IkReal x7668=IKsin(j4);
IkReal x7669=((1.0)*sj0);
IkReal x7670=((1.0)*cj5*r21);
IkReal x7671=((1.0)*cj5*r11);
IkReal x7672=((1.0)*sj5*x7668);
IkReal x7673=((1.0)*sj5*x7667);
evalcond[0]=((-1.0)*r02*x7667);
evalcond[1]=((((-1.0)*r20*x7673))+(((-1.0)*x7667*x7670)));
evalcond[2]=((((-1.0)*x7667*x7671))+(((-1.0)*r10*x7673)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x7672))+(((-1.0)*x7668*x7670)));
evalcond[4]=((((-1.0)*cj1*sj2*x7669))+(((-1.0)*cj2*sj1*x7669))+(((-1.0)*r10*x7672))+(((-1.0)*x7668*x7671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7674=((1.0)*sj0);
IkReal x7675=((1.0)*cj0);
CheckValue<IkReal> x7676 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5*x7674))+(((-1.0)*cj5*r11*x7674))+(((-1.0)*r00*sj5*x7675))+(((-1.0)*cj5*r01*x7675)))),IkReal(((((-1.0)*r02*x7675))+(((-1.0)*r12*x7674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7676.valid){
continue;
}
CheckValue<IkReal> x7677=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x7677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7676.value)+(((1.5707963267949)*(x7677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7678=IKcos(j4);
IkReal x7679=IKsin(j4);
IkReal x7680=(r00*sj5);
IkReal x7681=(cj5*r01);
IkReal x7682=(r20*sj5);
IkReal x7683=((1.0)*cj2);
IkReal x7684=(cj5*r21);
IkReal x7685=(cj5*r11);
IkReal x7686=((1.0)*sj0);
IkReal x7687=(r10*sj5);
IkReal x7688=(cj1*sj2);
IkReal x7689=((1.0)*x7678);
IkReal x7690=((1.0)*x7679);
evalcond[0]=(((r22*x7679))+(((-1.0)*x7682*x7689))+(((-1.0)*x7684*x7689)));
evalcond[1]=(((r12*x7679))+cj0+(((-1.0)*x7687*x7689))+(((-1.0)*x7685*x7689)));
evalcond[2]=(((r02*x7679))+(((-1.0)*x7681*x7689))+(((-1.0)*x7680*x7689))+(((-1.0)*x7686)));
evalcond[3]=((((-1.0)*r22*x7689))+((sj1*sj2))+(((-1.0)*x7682*x7690))+(((-1.0)*cj1*x7683))+(((-1.0)*x7684*x7690)));
evalcond[4]=((((-1.0)*cj0*sj1*x7683))+(((-1.0)*x7681*x7690))+(((-1.0)*x7680*x7690))+(((-1.0)*cj0*x7688))+(((-1.0)*r02*x7689)));
evalcond[5]=((((-1.0)*sj0*sj1*x7683))+(((-1.0)*x7687*x7690))+(((-1.0)*x7686*x7688))+(((-1.0)*r12*x7689))+(((-1.0)*x7685*x7690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7691=((1.0)*cj5);
CheckValue<IkReal> x7692 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7691))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7692.valid){
continue;
}
CheckValue<IkReal> x7693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7691))+((r11*sj5)))),-1);
if(!x7693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7692.value)+(((1.5707963267949)*(x7693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7694=IKcos(j4);
IkReal x7695=IKsin(j4);
IkReal x7696=(r00*sj5);
IkReal x7697=(cj5*r01);
IkReal x7698=(r20*sj5);
IkReal x7699=((1.0)*cj2);
IkReal x7700=(cj5*r21);
IkReal x7701=(cj5*r11);
IkReal x7702=((1.0)*sj0);
IkReal x7703=(r10*sj5);
IkReal x7704=(cj1*sj2);
IkReal x7705=((1.0)*x7694);
IkReal x7706=((1.0)*x7695);
evalcond[0]=((((-1.0)*x7698*x7705))+(((-1.0)*x7700*x7705))+((r22*x7695)));
evalcond[1]=(cj0+((r12*x7695))+(((-1.0)*x7701*x7705))+(((-1.0)*x7703*x7705)));
evalcond[2]=(((r02*x7695))+(((-1.0)*x7697*x7705))+(((-1.0)*x7696*x7705))+(((-1.0)*x7702)));
evalcond[3]=((((-1.0)*x7698*x7706))+(((-1.0)*r22*x7705))+((sj1*sj2))+(((-1.0)*cj1*x7699))+(((-1.0)*x7700*x7706)));
evalcond[4]=((((-1.0)*x7697*x7706))+(((-1.0)*x7696*x7706))+(((-1.0)*r02*x7705))+(((-1.0)*cj0*x7704))+(((-1.0)*cj0*sj1*x7699)));
evalcond[5]=((((-1.0)*sj0*sj1*x7699))+(((-1.0)*r12*x7705))+(((-1.0)*x7702*x7704))+(((-1.0)*x7701*x7706))+(((-1.0)*x7703*x7706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7707=((1.0)*cj0);
CheckValue<IkReal> x7708=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x7708.valid){
continue;
}
CheckValue<IkReal> x7709 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x7707))+(((-1.0)*cj5*r21*x7707)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7708.value)))+(x7709.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7710=IKcos(j4);
IkReal x7711=IKsin(j4);
IkReal x7712=(r00*sj5);
IkReal x7713=(cj5*r01);
IkReal x7714=(r20*sj5);
IkReal x7715=((1.0)*cj2);
IkReal x7716=(cj5*r21);
IkReal x7717=(cj5*r11);
IkReal x7718=((1.0)*sj0);
IkReal x7719=(r10*sj5);
IkReal x7720=(cj1*sj2);
IkReal x7721=((1.0)*x7710);
IkReal x7722=((1.0)*x7711);
evalcond[0]=((((-1.0)*x7714*x7721))+(((-1.0)*x7716*x7721))+((r22*x7711)));
evalcond[1]=(cj0+((r12*x7711))+(((-1.0)*x7719*x7721))+(((-1.0)*x7717*x7721)));
evalcond[2]=(((r02*x7711))+(((-1.0)*x7713*x7721))+(((-1.0)*x7718))+(((-1.0)*x7712*x7721)));
evalcond[3]=((((-1.0)*x7714*x7722))+(((-1.0)*x7716*x7722))+((sj1*sj2))+(((-1.0)*cj1*x7715))+(((-1.0)*r22*x7721)));
evalcond[4]=((((-1.0)*x7713*x7722))+(((-1.0)*cj0*x7720))+(((-1.0)*cj0*sj1*x7715))+(((-1.0)*r02*x7721))+(((-1.0)*x7712*x7722)));
evalcond[5]=((((-1.0)*x7719*x7722))+(((-1.0)*x7718*x7720))+(((-1.0)*sj0*sj1*x7715))+(((-1.0)*x7717*x7722))+(((-1.0)*r12*x7721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7723=r20*r20;
IkReal x7724=cj5*cj5;
IkReal x7725=(r20*sj5);
IkReal x7726=(cj5*r21);
IkReal x7727=(cj1*cj2);
IkReal x7728=((1.0)*sj1*sj2);
CheckValue<IkReal> x7729 = IKatan2WithCheck(IkReal(((((-1.0)*x7725*x7728))+(((-1.0)*x7726*x7728))+((x7725*x7727))+((x7726*x7727)))),IkReal((((r22*x7727))+(((-1.0)*r22*x7728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7729.valid){
continue;
}
CheckValue<IkReal> x7730=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7725*x7726))+((x7723*x7724))+(((-1.0)*(r22*r22)))+(((-1.0)*x7723))+(((-1.0)*x7724*(r21*r21))))),-1);
if(!x7730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7729.value)+(((1.5707963267949)*(x7730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7731=IKcos(j4);
IkReal x7732=IKsin(j4);
IkReal x7733=(cj5*r21);
IkReal x7734=(r20*sj5);
IkReal x7735=((1.0)*x7731);
IkReal x7736=((1.0)*x7732);
evalcond[0]=((((-1.0)*x7734*x7735))+((r22*x7732))+(((-1.0)*x7733*x7735)));
evalcond[1]=((((-1.0)*r22*x7735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7734*x7736))+(((-1.0)*x7733*x7736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7737=(cj4*cj5);
IkReal x7738=(cj4*sj5);
if( IKabs(((((-1.0)*r01*x7737))+((r02*sj4))+(((-1.0)*r00*x7738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x7737))+((r10*x7738))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x7737))+((r02*sj4))+(((-1.0)*r00*x7738))))+IKsqr((((r11*x7737))+((r10*x7738))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x7737))+((r02*sj4))+(((-1.0)*r00*x7738))), (((r11*x7737))+((r10*x7738))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7739=IKcos(j0);
IkReal x7740=IKsin(j0);
IkReal x7741=((1.0)*sj2);
IkReal x7742=(cj5*r00);
IkReal x7743=(cj5*r10);
IkReal x7744=(r11*sj5);
IkReal x7745=((1.0)*cj2);
IkReal x7746=((0.1535)*cj2);
IkReal x7747=((1.0)*cj5);
IkReal x7748=((1.0)*cj4);
IkReal x7749=(r01*sj5);
IkReal x7750=(cj1*x7739);
IkReal x7751=(cj1*x7740);
IkReal x7752=(sj1*x7739);
IkReal x7753=((1.0)*sj4*sj5);
IkReal x7754=(sj1*x7740);
IkReal x7755=(sj2*x7754);
evalcond[0]=((((-1.0)*r10*sj5*x7748))+(((-1.0)*cj4*r11*x7747))+((r12*sj4))+x7739);
evalcond[1]=((((-1.0)*cj4*r01*x7747))+((r02*sj4))+(((-1.0)*x7740))+(((-1.0)*r00*sj5*x7748)));
evalcond[2]=((((-1.0)*x7741*x7752))+(((-1.0)*x7749))+((cj2*x7750))+x7742);
evalcond[3]=((((-1.0)*x7741*x7754))+(((-1.0)*x7744))+((cj2*x7751))+x7743);
evalcond[4]=((((-1.0)*r02*x7748))+(((-1.0)*x7741*x7750))+(((-1.0)*r01*sj4*x7747))+(((-1.0)*r00*x7753))+(((-1.0)*x7745*x7752)));
evalcond[5]=((((-1.0)*r10*x7753))+(((-1.0)*x7741*x7751))+(((-1.0)*r12*x7748))+(((-1.0)*r11*sj4*x7747))+(((-1.0)*x7745*x7754)));
evalcond[6]=((((-0.00175)*x7740))+(((0.121)*x7742))+(((-1.0)*px))+(((-0.1535)*sj2*x7752))+((x7746*x7750))+(((-0.121)*x7749))+(((0.1445)*x7752))+(((0.0385)*x7750)));
evalcond[7]=((((0.00175)*x7739))+(((0.121)*x7743))+(((-1.0)*py))+((x7746*x7751))+(((-0.121)*x7744))+(((0.1445)*x7754))+(((0.0385)*x7751))+(((-0.1535)*x7755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7756=((1.0)*cj5);
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7757.valid){
continue;
}
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x7756))+((r11*sj5)))),IkReal((((r01*sj5))+(((-1.0)*r00*x7756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7757.value)))+(x7758.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7759=IKcos(j0);
IkReal x7760=IKsin(j0);
IkReal x7761=(cj5*r10);
IkReal x7762=(r11*sj5);
IkReal x7763=(cj5*r00);
IkReal x7764=((0.1535)*cj2);
IkReal x7765=(r01*sj5);
IkReal x7766=(cj1*x7760);
IkReal x7767=(cj1*x7759);
IkReal x7768=(sj1*x7759);
IkReal x7769=(sj1*sj2*x7760);
evalcond[0]=((((-1.0)*x7765))+((cj2*x7767))+x7763+(((-1.0)*sj2*x7768)));
evalcond[1]=((((-1.0)*x7769))+(((-1.0)*x7762))+((cj2*x7766))+x7761);
evalcond[2]=((((0.121)*x7763))+(((-0.00175)*x7760))+((x7764*x7767))+(((-0.1535)*sj2*x7768))+(((-1.0)*px))+(((0.1445)*x7768))+(((0.0385)*x7767))+(((-0.121)*x7765)));
evalcond[3]=((((0.121)*x7761))+((x7764*x7766))+(((-1.0)*py))+(((0.0385)*x7766))+(((0.00175)*x7759))+(((0.1445)*sj1*x7760))+(((-0.1535)*x7769))+(((-0.121)*x7762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7770=((1.0)*cj5);
IkReal x7771=(((r01*sj5))+(((-1.0)*r00*x7770)));
j4eval[0]=x7771;
j4eval[1]=IKsign(x7771);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x7770)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7772=((1.0)*cj5);
IkReal x7773=((((-1.0)*r10*x7772))+((r11*sj5)));
j4eval[0]=x7773;
j4eval[1]=((IKabs(((((-1.0)*r21*sj0*x7772))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7774=((1.0)*sj0);
IkReal x7775=((1.0)*sj5);
IkReal x7776=((1.0)*cj0);
IkReal x7777=(((cj5*r20))+(((-1.0)*r21*x7775)));
j4eval[0]=x7777;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5*x7774))+(((-1.0)*cj5*r11*x7774))+(((-1.0)*cj5*r01*x7776))+(((-1.0)*cj0*r00*x7775)))))+(IKabs(((((-1.0)*r02*x7776))+(((-1.0)*r12*x7774))))));
j4eval[2]=IKsign(x7777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7778=((-1.0)*r21);
IkReal x7780 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7780)==0){
continue;
}
IkReal x7779=pow(x7780,-0.5);
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal(r20),IkReal(x7778),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
IkReal gconst166=((-1.0)*(x7781.value));
IkReal gconst167=((-1.0)*r20*x7779);
IkReal gconst168=(x7778*x7779);
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7782.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7783=((-1.0)*r21);
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal(r20),IkReal(x7783),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
IkReal x7784=((-1.0)*(x7786.value));
IkReal x7785=x7779;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst167;
cj5=gconst168;
j5=x7784;
IkReal gconst166=x7784;
IkReal gconst167=((-1.0)*r20*x7785);
IkReal gconst168=(x7783*x7785);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7787=((-1.0)*r21);
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal(r20),IkReal(x7787),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
IkReal x7788=((-1.0)*(x7790.value));
IkReal x7789=x7779;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst167;
cj5=gconst168;
j5=x7788;
IkReal gconst166=x7788;
IkReal gconst167=((-1.0)*r20*x7789);
IkReal gconst168=(x7787*x7789);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7791=((-1.0)*r21);
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal(r20),IkReal(x7791),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
IkReal x7792=((-1.0)*(x7794.value));
IkReal x7793=x7779;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst167;
cj5=gconst168;
j5=x7792;
IkReal gconst166=x7792;
IkReal gconst167=((-1.0)*r20*x7793);
IkReal gconst168=(x7791*x7793);
IkReal x7795=((1.0)*(r22*r22));
CheckValue<IkReal> x7799=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7795))),-1);
if(!x7799.valid){
continue;
}
IkReal x7796=x7799.value;
IkReal x7797=((1.0)*x7796);
IkReal x7798=((((-1.0)*x7795))+(((-2.0)*x7796*(r20*r20)*(r21*r21)))+(((-1.0)*x7797*(r20*r20*r20*r20)))+(((-1.0)*x7797*(r21*r21*r21*r21))));
j4eval[0]=x7798;
j4eval[1]=IKsign(x7798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7800=(gconst167*r20);
IkReal x7801=(cj1*cj2);
IkReal x7802=(gconst168*r21);
IkReal x7803=((1.0)*sj1*sj2);
CheckValue<IkReal> x7804 = IKatan2WithCheck(IkReal((((x7800*x7801))+(((-1.0)*x7802*x7803))+(((-1.0)*x7800*x7803))+((x7801*x7802)))),IkReal((((r22*x7801))+(((-1.0)*r22*x7803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7804.valid){
continue;
}
CheckValue<IkReal> x7805=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-2.0)*x7800*x7802))+(((-1.0)*(x7802*x7802)))+(((-1.0)*(x7800*x7800))))),-1);
if(!x7805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7804.value)+(((1.5707963267949)*(x7805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7806=IKcos(j4);
IkReal x7807=IKsin(j4);
IkReal x7808=(gconst168*r21);
IkReal x7809=(gconst167*r00);
IkReal x7810=((1.0)*cj2);
IkReal x7811=(gconst168*r11);
IkReal x7812=((1.0)*sj0);
IkReal x7813=(gconst167*r10);
IkReal x7814=(gconst168*r01);
IkReal x7815=(gconst167*r20);
IkReal x7816=(cj1*sj2);
IkReal x7817=((1.0)*x7806);
IkReal x7818=((1.0)*x7807);
evalcond[0]=(((r22*x7807))+(((-1.0)*x7815*x7817))+(((-1.0)*x7808*x7817)));
evalcond[1]=((((-1.0)*x7811*x7817))+cj0+((r12*x7807))+(((-1.0)*x7813*x7817)));
evalcond[2]=((((-1.0)*x7812))+(((-1.0)*x7814*x7817))+((r02*x7807))+(((-1.0)*x7809*x7817)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x7810))+(((-1.0)*r22*x7817))+(((-1.0)*x7815*x7818))+(((-1.0)*x7808*x7818)));
evalcond[4]=((((-1.0)*r02*x7817))+(((-1.0)*x7814*x7818))+(((-1.0)*cj0*sj1*x7810))+(((-1.0)*x7809*x7818))+(((-1.0)*cj0*x7816)));
evalcond[5]=((((-1.0)*x7811*x7818))+(((-1.0)*x7812*x7816))+(((-1.0)*r12*x7817))+(((-1.0)*x7813*x7818))+(((-1.0)*sj0*sj1*x7810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7819=((1.0)*gconst168);
CheckValue<IkReal> x7820 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7819))+(((-1.0)*gconst167*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7820.valid){
continue;
}
CheckValue<IkReal> x7821=IKPowWithIntegerCheck(IKsign((((gconst167*r11))+(((-1.0)*r10*x7819)))),-1);
if(!x7821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7820.value)+(((1.5707963267949)*(x7821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7822=IKcos(j4);
IkReal x7823=IKsin(j4);
IkReal x7824=(gconst168*r21);
IkReal x7825=(gconst167*r00);
IkReal x7826=((1.0)*cj2);
IkReal x7827=(gconst168*r11);
IkReal x7828=((1.0)*sj0);
IkReal x7829=(gconst167*r10);
IkReal x7830=(gconst168*r01);
IkReal x7831=(gconst167*r20);
IkReal x7832=(cj1*sj2);
IkReal x7833=((1.0)*x7822);
IkReal x7834=((1.0)*x7823);
evalcond[0]=((((-1.0)*x7824*x7833))+(((-1.0)*x7831*x7833))+((r22*x7823)));
evalcond[1]=((((-1.0)*x7829*x7833))+cj0+((r12*x7823))+(((-1.0)*x7827*x7833)));
evalcond[2]=(((r02*x7823))+(((-1.0)*x7830*x7833))+(((-1.0)*x7828))+(((-1.0)*x7825*x7833)));
evalcond[3]=((((-1.0)*x7824*x7834))+(((-1.0)*r22*x7833))+(((-1.0)*cj1*x7826))+(((-1.0)*x7831*x7834))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x7830*x7834))+(((-1.0)*r02*x7833))+(((-1.0)*cj0*sj1*x7826))+(((-1.0)*cj0*x7832))+(((-1.0)*x7825*x7834)));
evalcond[5]=((((-1.0)*x7828*x7832))+(((-1.0)*sj0*sj1*x7826))+(((-1.0)*x7829*x7834))+(((-1.0)*r12*x7833))+(((-1.0)*x7827*x7834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7835=((1.0)*cj0);
CheckValue<IkReal> x7836=IKPowWithIntegerCheck(IKsign((((gconst167*r01))+(((-1.0)*gconst168*r00)))),-1);
if(!x7836.valid){
continue;
}
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal(((((-1.0)*gconst168*r21*x7835))+(((-1.0)*gconst167*r20*x7835)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7836.value)))+(x7837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7838=IKcos(j4);
IkReal x7839=IKsin(j4);
IkReal x7840=(gconst168*r21);
IkReal x7841=(gconst167*r00);
IkReal x7842=((1.0)*cj2);
IkReal x7843=(gconst168*r11);
IkReal x7844=((1.0)*sj0);
IkReal x7845=(gconst167*r10);
IkReal x7846=(gconst168*r01);
IkReal x7847=(gconst167*r20);
IkReal x7848=(cj1*sj2);
IkReal x7849=((1.0)*x7838);
IkReal x7850=((1.0)*x7839);
evalcond[0]=((((-1.0)*x7840*x7849))+(((-1.0)*x7847*x7849))+((r22*x7839)));
evalcond[1]=(((r12*x7839))+cj0+(((-1.0)*x7843*x7849))+(((-1.0)*x7845*x7849)));
evalcond[2]=((((-1.0)*x7841*x7849))+(((-1.0)*x7846*x7849))+((r02*x7839))+(((-1.0)*x7844)));
evalcond[3]=((((-1.0)*x7847*x7850))+(((-1.0)*r22*x7849))+((sj1*sj2))+(((-1.0)*cj1*x7842))+(((-1.0)*x7840*x7850)));
evalcond[4]=((((-1.0)*x7846*x7850))+(((-1.0)*x7841*x7850))+(((-1.0)*cj0*sj1*x7842))+(((-1.0)*r02*x7849))+(((-1.0)*cj0*x7848)));
evalcond[5]=((((-1.0)*x7844*x7848))+(((-1.0)*r12*x7849))+(((-1.0)*x7843*x7850))+(((-1.0)*sj0*sj1*x7842))+(((-1.0)*x7845*x7850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7853 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7853)==0){
continue;
}
IkReal x7851=pow(x7853,-0.5);
IkReal x7852=((1.0)*x7851);
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
IkReal gconst169=((3.14159265358979)+(((-1.0)*(x7854.value))));
IkReal gconst170=(r20*x7852);
IkReal gconst171=(r21*x7852);
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7855.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
IkReal x7856=((1.0)*(x7859.value));
IkReal x7857=x7851;
IkReal x7858=((1.0)*x7857);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7856)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7856)));
IkReal gconst170=(r20*x7858);
IkReal gconst171=(r21*x7858);
IkReal x7860=r22*r22;
IkReal x7861=((1.0)*x7860);
CheckValue<IkReal> x7865=IKPowWithIntegerCheck(((-1.0)+x7860),-1);
if(!x7865.valid){
continue;
}
IkReal x7862=x7865.value;
if((((1.0)+(((-1.0)*x7861)))) < -0.00001)
continue;
IkReal x7863=IKsqrt(((1.0)+(((-1.0)*x7861))));
IkReal x7864=(cj0*x7862*x7863);
j4eval[0]=((IKabs((x7864+(((-1.0)*x7861*x7864)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7869 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7869.valid){
continue;
}
IkReal x7866=((1.0)*(x7869.value));
IkReal x7867=x7851;
IkReal x7868=((1.0)*x7867);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7866)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7866)));
IkReal gconst170=(r20*x7868);
IkReal gconst171=(r21*x7868);
IkReal x7870=r22*r22;
IkReal x7871=((1.0)*x7870);
CheckValue<IkReal> x7875=IKPowWithIntegerCheck(((-1.0)+x7870),-1);
if(!x7875.valid){
continue;
}
IkReal x7872=x7875.value;
if((((1.0)+(((-1.0)*x7871)))) < -0.00001)
continue;
IkReal x7873=IKsqrt(((1.0)+(((-1.0)*x7871))));
IkReal x7874=(sj0*x7872*x7873);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7871*x7874))+x7874))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7879 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7879.valid){
continue;
}
IkReal x7876=((1.0)*(x7879.value));
IkReal x7877=x7851;
IkReal x7878=((1.0)*x7877);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7876)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7876)));
IkReal gconst170=(r20*x7878);
IkReal gconst171=(r21*x7878);
IkReal x7880=r22*r22;
IkReal x7881=((1.0)*r12*sj0);
IkReal x7882=((1.0)*cj0*r02);
CheckValue<IkReal> x7886=IKPowWithIntegerCheck(((-1.0)+x7880),-1);
if(!x7886.valid){
continue;
}
IkReal x7883=x7886.value;
if((((1.0)+(((-1.0)*x7880)))) < -0.00001)
continue;
IkReal x7884=IKsqrt(((1.0)+(((-1.0)*x7880))));
IkReal x7885=(r22*x7883*x7884);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7882))+(((-1.0)*x7881)))))+(IKabs(((((-1.0)*x7882*x7885))+(((-1.0)*x7881*x7885))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7887=((1.0)*sj0);
IkReal x7888=((1.0)*cj0);
CheckValue<IkReal> x7889=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst170*r21))+((gconst171*r20)))),-1);
if(!x7889.valid){
continue;
}
CheckValue<IkReal> x7890 = IKatan2WithCheck(IkReal(((((-1.0)*gconst170*r00*x7888))+(((-1.0)*gconst171*r11*x7887))+(((-1.0)*gconst170*r10*x7887))+(((-1.0)*gconst171*r01*x7888)))),IkReal(((((-1.0)*r02*x7888))+(((-1.0)*r12*x7887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7889.value)))+(x7890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7891=IKcos(j4);
IkReal x7892=IKsin(j4);
IkReal x7893=(gconst170*r20);
IkReal x7894=(gconst171*r01);
IkReal x7895=(gconst171*r21);
IkReal x7896=((1.0)*cj2);
IkReal x7897=((1.0)*sj0);
IkReal x7898=(gconst170*r00);
IkReal x7899=(gconst171*r11);
IkReal x7900=(gconst170*r10);
IkReal x7901=(cj1*sj2);
IkReal x7902=((1.0)*x7891);
IkReal x7903=((1.0)*x7892);
evalcond[0]=((((-1.0)*x7895*x7902))+(((-1.0)*x7893*x7902))+((r22*x7892)));
evalcond[1]=(cj0+(((-1.0)*x7899*x7902))+((r12*x7892))+(((-1.0)*x7900*x7902)));
evalcond[2]=((((-1.0)*x7898*x7902))+(((-1.0)*x7897))+((r02*x7892))+(((-1.0)*x7894*x7902)));
evalcond[3]=((((-1.0)*x7895*x7903))+((sj1*sj2))+(((-1.0)*x7893*x7903))+(((-1.0)*r22*x7902))+(((-1.0)*cj1*x7896)));
evalcond[4]=((((-1.0)*x7898*x7903))+(((-1.0)*x7894*x7903))+(((-1.0)*cj0*x7901))+(((-1.0)*cj0*sj1*x7896))+(((-1.0)*r02*x7902)));
evalcond[5]=((((-1.0)*r12*x7902))+(((-1.0)*sj0*sj1*x7896))+(((-1.0)*x7899*x7903))+(((-1.0)*x7897*x7901))+(((-1.0)*x7900*x7903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7904=((1.0)*sj0);
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal(((((-1.0)*gconst170*r20*x7904))+(((-1.0)*gconst171*r21*x7904)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign((((gconst170*r11))+(((-1.0)*gconst171*r10)))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKcos(j4);
IkReal x7908=IKsin(j4);
IkReal x7909=(gconst170*r20);
IkReal x7910=(gconst171*r01);
IkReal x7911=(gconst171*r21);
IkReal x7912=((1.0)*cj2);
IkReal x7913=((1.0)*sj0);
IkReal x7914=(gconst170*r00);
IkReal x7915=(gconst171*r11);
IkReal x7916=(gconst170*r10);
IkReal x7917=(cj1*sj2);
IkReal x7918=((1.0)*x7907);
IkReal x7919=((1.0)*x7908);
evalcond[0]=((((-1.0)*x7911*x7918))+((r22*x7908))+(((-1.0)*x7909*x7918)));
evalcond[1]=((((-1.0)*x7915*x7918))+cj0+((r12*x7908))+(((-1.0)*x7916*x7918)));
evalcond[2]=(((r02*x7908))+(((-1.0)*x7913))+(((-1.0)*x7910*x7918))+(((-1.0)*x7914*x7918)));
evalcond[3]=((((-1.0)*r22*x7918))+((sj1*sj2))+(((-1.0)*x7911*x7919))+(((-1.0)*cj1*x7912))+(((-1.0)*x7909*x7919)));
evalcond[4]=((((-1.0)*r02*x7918))+(((-1.0)*x7910*x7919))+(((-1.0)*x7914*x7919))+(((-1.0)*cj0*sj1*x7912))+(((-1.0)*cj0*x7917)));
evalcond[5]=((((-1.0)*x7915*x7919))+(((-1.0)*x7913*x7917))+(((-1.0)*r12*x7918))+(((-1.0)*x7916*x7919))+(((-1.0)*sj0*sj1*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7920=((1.0)*gconst171);
CheckValue<IkReal> x7921=IKPowWithIntegerCheck(IKsign((((gconst170*r01))+(((-1.0)*r00*x7920)))),-1);
if(!x7921.valid){
continue;
}
CheckValue<IkReal> x7922 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7920))+(((-1.0)*cj0*gconst170*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7921.value)))+(x7922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7923=IKcos(j4);
IkReal x7924=IKsin(j4);
IkReal x7925=(gconst170*r20);
IkReal x7926=(gconst171*r01);
IkReal x7927=(gconst171*r21);
IkReal x7928=((1.0)*cj2);
IkReal x7929=((1.0)*sj0);
IkReal x7930=(gconst170*r00);
IkReal x7931=(gconst171*r11);
IkReal x7932=(gconst170*r10);
IkReal x7933=(cj1*sj2);
IkReal x7934=((1.0)*x7923);
IkReal x7935=((1.0)*x7924);
evalcond[0]=(((r22*x7924))+(((-1.0)*x7927*x7934))+(((-1.0)*x7925*x7934)));
evalcond[1]=(cj0+(((-1.0)*x7932*x7934))+((r12*x7924))+(((-1.0)*x7931*x7934)));
evalcond[2]=((((-1.0)*x7929))+(((-1.0)*x7926*x7934))+((r02*x7924))+(((-1.0)*x7930*x7934)));
evalcond[3]=((((-1.0)*x7927*x7935))+(((-1.0)*r22*x7934))+(((-1.0)*x7925*x7935))+((sj1*sj2))+(((-1.0)*cj1*x7928)));
evalcond[4]=((((-1.0)*cj0*x7933))+(((-1.0)*x7926*x7935))+(((-1.0)*r02*x7934))+(((-1.0)*cj0*sj1*x7928))+(((-1.0)*x7930*x7935)));
evalcond[5]=((((-1.0)*x7932*x7935))+(((-1.0)*r12*x7934))+(((-1.0)*x7929*x7933))+(((-1.0)*x7931*x7935))+(((-1.0)*sj0*sj1*x7928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7937 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7937)==0){
continue;
}
IkReal x7936=pow(x7937,-0.5);
CheckValue<IkReal> x7938 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7938.valid){
continue;
}
IkReal gconst172=((-1.0)*(x7938.value));
IkReal gconst173=(r10*x7936);
IkReal gconst174=(r11*x7936);
CheckValue<IkReal> x7939 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7939.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7942 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7942.valid){
continue;
}
IkReal x7940=((-1.0)*(x7942.value));
IkReal x7941=x7936;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst173;
cj5=gconst174;
j5=x7940;
IkReal gconst172=x7940;
IkReal gconst173=(r10*x7941);
IkReal gconst174=(r11*x7941);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7943=((1.0)*sj0);
IkReal x7944=((1.0)*gconst173);
IkReal x7945=((1.0)*cj0);
CheckValue<IkReal> x7946 = IKatan2WithCheck(IkReal(((((-1.0)*gconst174*r11*x7943))+(((-1.0)*cj0*r00*x7944))+(((-1.0)*gconst173*r10*x7943))+(((-1.0)*gconst174*r01*x7945)))),IkReal(((((-1.0)*r02*x7945))+(((-1.0)*r12*x7943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7946.valid){
continue;
}
CheckValue<IkReal> x7947=IKPowWithIntegerCheck(IKsign((((gconst174*r20))+(((-1.0)*r21*x7944)))),-1);
if(!x7947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7946.value)+(((1.5707963267949)*(x7947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7948=IKcos(j4);
IkReal x7949=IKsin(j4);
IkReal x7950=(gconst174*r21);
IkReal x7951=(gconst173*r10);
IkReal x7952=(gconst173*r00);
IkReal x7953=(gconst173*r20);
IkReal x7954=((1.0)*cj2);
IkReal x7955=(gconst174*r11);
IkReal x7956=((1.0)*sj0);
IkReal x7957=(gconst174*r01);
IkReal x7958=(cj1*sj2);
IkReal x7959=((1.0)*x7948);
IkReal x7960=((1.0)*x7949);
evalcond[0]=((((-1.0)*x7953*x7959))+(((-1.0)*x7950*x7959))+((r22*x7949)));
evalcond[1]=(cj0+(((-1.0)*x7955*x7959))+((r12*x7949))+(((-1.0)*x7951*x7959)));
evalcond[2]=((((-1.0)*x7957*x7959))+(((-1.0)*x7952*x7959))+((r02*x7949))+(((-1.0)*x7956)));
evalcond[3]=((((-1.0)*x7953*x7960))+(((-1.0)*cj1*x7954))+(((-1.0)*r22*x7959))+((sj1*sj2))+(((-1.0)*x7950*x7960)));
evalcond[4]=((((-1.0)*cj0*sj1*x7954))+(((-1.0)*x7957*x7960))+(((-1.0)*x7952*x7960))+(((-1.0)*cj0*x7958))+(((-1.0)*r02*x7959)));
evalcond[5]=((((-1.0)*x7956*x7958))+(((-1.0)*sj0*sj1*x7954))+(((-1.0)*x7955*x7960))+(((-1.0)*x7951*x7960))+(((-1.0)*r12*x7959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7961=((1.0)*cj0);
CheckValue<IkReal> x7962=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst174*r00))+((gconst173*r01)))),-1);
if(!x7962.valid){
continue;
}
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal(((((-1.0)*gconst174*r21*x7961))+(((-1.0)*gconst173*r20*x7961)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7962.value)))+(x7963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7964=IKcos(j4);
IkReal x7965=IKsin(j4);
IkReal x7966=(gconst174*r21);
IkReal x7967=(gconst173*r10);
IkReal x7968=(gconst173*r00);
IkReal x7969=(gconst173*r20);
IkReal x7970=((1.0)*cj2);
IkReal x7971=(gconst174*r11);
IkReal x7972=((1.0)*sj0);
IkReal x7973=(gconst174*r01);
IkReal x7974=(cj1*sj2);
IkReal x7975=((1.0)*x7964);
IkReal x7976=((1.0)*x7965);
evalcond[0]=((((-1.0)*x7966*x7975))+(((-1.0)*x7969*x7975))+((r22*x7965)));
evalcond[1]=(cj0+((r12*x7965))+(((-1.0)*x7967*x7975))+(((-1.0)*x7971*x7975)));
evalcond[2]=((((-1.0)*x7968*x7975))+(((-1.0)*x7972))+(((-1.0)*x7973*x7975))+((r02*x7965)));
evalcond[3]=((((-1.0)*r22*x7975))+(((-1.0)*x7966*x7976))+(((-1.0)*cj1*x7970))+((sj1*sj2))+(((-1.0)*x7969*x7976)));
evalcond[4]=((((-1.0)*x7968*x7976))+(((-1.0)*x7973*x7976))+(((-1.0)*cj0*x7974))+(((-1.0)*r02*x7975))+(((-1.0)*cj0*sj1*x7970)));
evalcond[5]=((((-1.0)*sj0*sj1*x7970))+(((-1.0)*x7967*x7976))+(((-1.0)*r12*x7975))+(((-1.0)*x7972*x7974))+(((-1.0)*x7971*x7976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7979 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7979)==0){
continue;
}
IkReal x7977=pow(x7979,-0.5);
IkReal x7978=((-1.0)*x7977);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
IkReal gconst175=((3.14159265358979)+(((-1.0)*(x7980.value))));
IkReal gconst176=(r10*x7978);
IkReal gconst177=(r11*x7978);
CheckValue<IkReal> x7981 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7981.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7981.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7985 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7985.valid){
continue;
}
IkReal x7982=((1.0)*(x7985.value));
IkReal x7983=x7977;
IkReal x7984=((-1.0)*x7983);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7982)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7982)));
IkReal gconst176=(r10*x7984);
IkReal gconst177=(r11*x7984);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
IkReal x7986=((1.0)*(x7989.value));
IkReal x7987=x7977;
IkReal x7988=((-1.0)*x7987);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7986)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7986)));
IkReal gconst176=(r10*x7988);
IkReal gconst177=(r11*x7988);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7993 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x7993.valid){
continue;
}
IkReal x7990=((1.0)*(x7993.value));
IkReal x7991=x7977;
IkReal x7992=((-1.0)*x7991);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7990)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7990)));
IkReal gconst176=(r10*x7992);
IkReal gconst177=(r11*x7992);
IkReal x7994=r12*r12;
IkReal x7995=((1.0)*sj0);
IkReal x7996=(cj0*r02);
IkReal x7997=x7977;
j4eval[0]=((IKabs((((r12*x7996*x7997))+(((-1.0)*x7995*x7997))+((sj0*x7994*x7997)))))+(IKabs(((((-1.0)*r12*x7995))+(((-1.0)*x7996))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7998=((1.0)*sj0);
IkReal x7999=((1.0)*gconst176);
IkReal x8000=((1.0)*cj0);
CheckValue<IkReal> x8001=IKPowWithIntegerCheck(IKsign((((gconst177*r20))+(((-1.0)*r21*x7999)))),-1);
if(!x8001.valid){
continue;
}
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(((((-1.0)*gconst176*r10*x7998))+(((-1.0)*gconst177*r11*x7998))+(((-1.0)*gconst177*r01*x8000))+(((-1.0)*cj0*r00*x7999)))),IkReal(((((-1.0)*r12*x7998))+(((-1.0)*r02*x8000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8001.value)))+(x8002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8003=IKcos(j4);
IkReal x8004=IKsin(j4);
IkReal x8005=(gconst176*r10);
IkReal x8006=(gconst177*r11);
IkReal x8007=(gconst176*r00);
IkReal x8008=(gconst177*r01);
IkReal x8009=((1.0)*cj2);
IkReal x8010=(gconst176*r20);
IkReal x8011=((1.0)*sj0);
IkReal x8012=(gconst177*r21);
IkReal x8013=(cj1*sj2);
IkReal x8014=((1.0)*x8003);
IkReal x8015=((1.0)*x8004);
evalcond[0]=((((-1.0)*x8012*x8014))+(((-1.0)*x8010*x8014))+((r22*x8004)));
evalcond[1]=(cj0+((r12*x8004))+(((-1.0)*x8006*x8014))+(((-1.0)*x8005*x8014)));
evalcond[2]=((((-1.0)*x8008*x8014))+(((-1.0)*x8011))+((r02*x8004))+(((-1.0)*x8007*x8014)));
evalcond[3]=((((-1.0)*r22*x8014))+(((-1.0)*x8012*x8015))+(((-1.0)*x8010*x8015))+((sj1*sj2))+(((-1.0)*cj1*x8009)));
evalcond[4]=((((-1.0)*x8008*x8015))+(((-1.0)*r02*x8014))+(((-1.0)*cj0*x8013))+(((-1.0)*cj0*sj1*x8009))+(((-1.0)*x8007*x8015)));
evalcond[5]=((((-1.0)*x8011*x8013))+(((-1.0)*sj0*sj1*x8009))+(((-1.0)*x8006*x8015))+(((-1.0)*x8005*x8015))+(((-1.0)*r12*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8016=((1.0)*sj0);
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(((((-1.0)*gconst177*r21*x8016))+(((-1.0)*gconst176*r20*x8016)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
CheckValue<IkReal> x8018=IKPowWithIntegerCheck(IKsign((((gconst176*r11))+(((-1.0)*gconst177*r10)))),-1);
if(!x8018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8017.value)+(((1.5707963267949)*(x8018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8019=IKcos(j4);
IkReal x8020=IKsin(j4);
IkReal x8021=(gconst176*r10);
IkReal x8022=(gconst177*r11);
IkReal x8023=(gconst176*r00);
IkReal x8024=(gconst177*r01);
IkReal x8025=((1.0)*cj2);
IkReal x8026=(gconst176*r20);
IkReal x8027=((1.0)*sj0);
IkReal x8028=(gconst177*r21);
IkReal x8029=(cj1*sj2);
IkReal x8030=((1.0)*x8019);
IkReal x8031=((1.0)*x8020);
evalcond[0]=((((-1.0)*x8028*x8030))+(((-1.0)*x8026*x8030))+((r22*x8020)));
evalcond[1]=(cj0+(((-1.0)*x8022*x8030))+((r12*x8020))+(((-1.0)*x8021*x8030)));
evalcond[2]=((((-1.0)*x8024*x8030))+(((-1.0)*x8023*x8030))+((r02*x8020))+(((-1.0)*x8027)));
evalcond[3]=((((-1.0)*x8028*x8031))+((sj1*sj2))+(((-1.0)*cj1*x8025))+(((-1.0)*x8026*x8031))+(((-1.0)*r22*x8030)));
evalcond[4]=((((-1.0)*x8024*x8031))+(((-1.0)*cj0*x8029))+(((-1.0)*x8023*x8031))+(((-1.0)*r02*x8030))+(((-1.0)*cj0*sj1*x8025)));
evalcond[5]=((((-1.0)*r12*x8030))+(((-1.0)*x8022*x8031))+(((-1.0)*sj0*sj1*x8025))+(((-1.0)*x8027*x8029))+(((-1.0)*x8021*x8031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8032=((1.0)*cj0);
CheckValue<IkReal> x8033 = IKatan2WithCheck(IkReal(((((-1.0)*gconst176*r20*x8032))+(((-1.0)*gconst177*r21*x8032)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8033.valid){
continue;
}
CheckValue<IkReal> x8034=IKPowWithIntegerCheck(IKsign((((gconst176*r01))+(((-1.0)*gconst177*r00)))),-1);
if(!x8034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8033.value)+(((1.5707963267949)*(x8034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8035=IKcos(j4);
IkReal x8036=IKsin(j4);
IkReal x8037=(gconst176*r10);
IkReal x8038=(gconst177*r11);
IkReal x8039=(gconst176*r00);
IkReal x8040=(gconst177*r01);
IkReal x8041=((1.0)*cj2);
IkReal x8042=(gconst176*r20);
IkReal x8043=((1.0)*sj0);
IkReal x8044=(gconst177*r21);
IkReal x8045=(cj1*sj2);
IkReal x8046=((1.0)*x8035);
IkReal x8047=((1.0)*x8036);
evalcond[0]=((((-1.0)*x8042*x8046))+(((-1.0)*x8044*x8046))+((r22*x8036)));
evalcond[1]=(cj0+(((-1.0)*x8037*x8046))+((r12*x8036))+(((-1.0)*x8038*x8046)));
evalcond[2]=(((r02*x8036))+(((-1.0)*x8040*x8046))+(((-1.0)*x8043))+(((-1.0)*x8039*x8046)));
evalcond[3]=((((-1.0)*x8042*x8047))+((sj1*sj2))+(((-1.0)*cj1*x8041))+(((-1.0)*x8044*x8047))+(((-1.0)*r22*x8046)));
evalcond[4]=((((-1.0)*cj0*x8045))+(((-1.0)*x8040*x8047))+(((-1.0)*r02*x8046))+(((-1.0)*cj0*sj1*x8041))+(((-1.0)*x8039*x8047)));
evalcond[5]=((((-1.0)*sj0*sj1*x8041))+(((-1.0)*x8043*x8045))+(((-1.0)*x8037*x8047))+(((-1.0)*x8038*x8047))+(((-1.0)*r12*x8046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8048=((1.0)*cj5);
IkReal x8049=(((r01*sj5))+(((-1.0)*r00*x8048)));
j4eval[0]=x8049;
j4eval[1]=IKsign(x8049);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x8048))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8050=((1.0)*sj5);
IkReal x8051=(((cj5*r20))+(((-1.0)*r21*x8050)));
j4eval[0]=x8051;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*r01))+(((-1.0)*r00*x8050))))));
j4eval[2]=IKsign(x8051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8052=cj5*cj5;
IkReal x8053=r10*r10;
IkReal x8054=(cj5*r11);
IkReal x8055=(r10*sj5);
IkReal x8056=((((-2.0)*x8054*x8055))+(((-1.0)*x8053))+(((-1.0)*(r12*r12)))+(((-1.0)*x8052*(r11*r11)))+((x8052*x8053)));
j4eval[0]=x8056;
j4eval[1]=IKsign(x8056);
j4eval[2]=((IKabs(((((-1.0)*x8055))+(((-1.0)*x8054)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8057=cj5*cj5;
IkReal x8058=r10*r10;
IkReal x8059=(cj5*r11);
IkReal x8060=(r10*sj5);
CheckValue<IkReal> x8061 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8060))+(((-1.0)*x8059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8061.valid){
continue;
}
CheckValue<IkReal> x8062=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8058))+(((-1.0)*(r12*r12)))+(((-1.0)*x8057*(r11*r11)))+(((-2.0)*x8059*x8060))+((x8057*x8058)))),-1);
if(!x8062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8061.value)+(((1.5707963267949)*(x8062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8063=IKcos(j4);
IkReal x8064=IKsin(j4);
IkReal x8065=(r00*sj5);
IkReal x8066=(cj5*r01);
IkReal x8067=(r20*sj5);
IkReal x8068=((1.0)*cj2);
IkReal x8069=(cj5*r21);
IkReal x8070=(cj5*r11);
IkReal x8071=(r10*sj5);
IkReal x8072=((1.0)*x8063);
IkReal x8073=((1.0)*x8064);
evalcond[0]=(((r22*x8064))+(((-1.0)*x8067*x8072))+(((-1.0)*x8069*x8072)));
evalcond[1]=((((-1.0)*x8065*x8072))+((r02*x8064))+(((-1.0)*x8066*x8072)));
evalcond[2]=((1.0)+(((-1.0)*x8071*x8072))+(((-1.0)*x8070*x8072))+((r12*x8064)));
evalcond[3]=((((-1.0)*x8071*x8073))+(((-1.0)*x8070*x8073))+(((-1.0)*r12*x8072)));
evalcond[4]=((((-1.0)*x8067*x8073))+((sj1*sj2))+(((-1.0)*cj1*x8068))+(((-1.0)*x8069*x8073))+(((-1.0)*r22*x8072)));
evalcond[5]=((((-1.0)*r02*x8072))+(((-1.0)*cj1*sj2))+(((-1.0)*x8065*x8073))+(((-1.0)*sj1*x8068))+(((-1.0)*x8066*x8073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8074=((1.0)*sj5);
CheckValue<IkReal> x8075 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8074))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8075.valid){
continue;
}
CheckValue<IkReal> x8076=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x8074)))),-1);
if(!x8076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8075.value)+(((1.5707963267949)*(x8076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8077=IKcos(j4);
IkReal x8078=IKsin(j4);
IkReal x8079=(r00*sj5);
IkReal x8080=(cj5*r01);
IkReal x8081=(r20*sj5);
IkReal x8082=((1.0)*cj2);
IkReal x8083=(cj5*r21);
IkReal x8084=(cj5*r11);
IkReal x8085=(r10*sj5);
IkReal x8086=((1.0)*x8077);
IkReal x8087=((1.0)*x8078);
evalcond[0]=(((r22*x8078))+(((-1.0)*x8083*x8086))+(((-1.0)*x8081*x8086)));
evalcond[1]=(((r02*x8078))+(((-1.0)*x8080*x8086))+(((-1.0)*x8079*x8086)));
evalcond[2]=((1.0)+((r12*x8078))+(((-1.0)*x8085*x8086))+(((-1.0)*x8084*x8086)));
evalcond[3]=((((-1.0)*r12*x8086))+(((-1.0)*x8085*x8087))+(((-1.0)*x8084*x8087)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x8083*x8087))+(((-1.0)*r22*x8086))+(((-1.0)*x8081*x8087))+(((-1.0)*cj1*x8082)));
evalcond[5]=((((-1.0)*r02*x8086))+(((-1.0)*sj1*x8082))+(((-1.0)*x8080*x8087))+(((-1.0)*cj1*sj2))+(((-1.0)*x8079*x8087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8088=((1.0)*cj5);
CheckValue<IkReal> x8089 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8088))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8089.valid){
continue;
}
CheckValue<IkReal> x8090=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x8088)))),-1);
if(!x8090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8089.value)+(((1.5707963267949)*(x8090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8091=IKcos(j4);
IkReal x8092=IKsin(j4);
IkReal x8093=(r00*sj5);
IkReal x8094=(cj5*r01);
IkReal x8095=(r20*sj5);
IkReal x8096=((1.0)*cj2);
IkReal x8097=(cj5*r21);
IkReal x8098=(cj5*r11);
IkReal x8099=(r10*sj5);
IkReal x8100=((1.0)*x8091);
IkReal x8101=((1.0)*x8092);
evalcond[0]=(((r22*x8092))+(((-1.0)*x8095*x8100))+(((-1.0)*x8097*x8100)));
evalcond[1]=((((-1.0)*x8094*x8100))+(((-1.0)*x8093*x8100))+((r02*x8092)));
evalcond[2]=((1.0)+(((-1.0)*x8099*x8100))+(((-1.0)*x8098*x8100))+((r12*x8092)));
evalcond[3]=((((-1.0)*x8099*x8101))+(((-1.0)*x8098*x8101))+(((-1.0)*r12*x8100)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x8100))+(((-1.0)*x8095*x8101))+(((-1.0)*cj1*x8096))+(((-1.0)*x8097*x8101)));
evalcond[5]=((((-1.0)*sj1*x8096))+(((-1.0)*cj1*sj2))+(((-1.0)*x8094*x8101))+(((-1.0)*x8093*x8101))+(((-1.0)*r02*x8100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8102=((1.0)*sj5);
IkReal x8103=((((-1.0)*r01*x8102))+((cj5*r00)));
j4eval[0]=x8103;
j4eval[1]=IKsign(x8103);
j4eval[2]=((IKabs(((((-1.0)*r20*x8102))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8104=((1.0)*cj5);
IkReal x8105=(((r21*sj5))+(((-1.0)*r20*x8104)));
j4eval[0]=x8105;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x8104))+(((-1.0)*r00*sj5))))));
j4eval[2]=IKsign(x8105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8106=cj5*cj5;
IkReal x8107=r10*r10;
IkReal x8108=(cj5*r11);
IkReal x8109=(r10*sj5);
IkReal x8110=((r12*r12)+(((-1.0)*x8106*x8107))+((x8106*(r11*r11)))+(((2.0)*x8108*x8109))+x8107);
j4eval[0]=x8110;
j4eval[1]=IKsign(x8110);
j4eval[2]=((IKabs(((((-1.0)*x8109))+(((-1.0)*x8108)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8111=cj5*cj5;
IkReal x8112=r10*r10;
IkReal x8113=(cj5*r11);
IkReal x8114=(r10*sj5);
CheckValue<IkReal> x8115 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8114))+(((-1.0)*x8113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x8111*(r11*r11)))+x8112+(((2.0)*x8113*x8114))+(((-1.0)*x8111*x8112)))),-1);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8115.value)+(((1.5707963267949)*(x8116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKcos(j4);
IkReal x8118=IKsin(j4);
IkReal x8119=(r00*sj5);
IkReal x8120=(cj5*r01);
IkReal x8121=(r20*sj5);
IkReal x8122=(cj5*r21);
IkReal x8123=(cj5*r11);
IkReal x8124=(r10*sj5);
IkReal x8125=((1.0)*x8117);
IkReal x8126=((1.0)*x8118);
evalcond[0]=((((-1.0)*x8122*x8125))+(((-1.0)*x8121*x8125))+((r22*x8118)));
evalcond[1]=(((r02*x8118))+(((-1.0)*x8119*x8125))+(((-1.0)*x8120*x8125)));
evalcond[2]=((-1.0)+(((-1.0)*x8124*x8125))+((r12*x8118))+(((-1.0)*x8123*x8125)));
evalcond[3]=((((-1.0)*r12*x8125))+(((-1.0)*x8124*x8126))+(((-1.0)*x8123*x8126)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x8125))+(((-1.0)*x8119*x8126))+(((-1.0)*x8120*x8126)));
evalcond[5]=((((-1.0)*x8122*x8126))+(((-1.0)*x8121*x8126))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8127=((1.0)*cj5);
CheckValue<IkReal> x8128 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8127)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8128.valid){
continue;
}
CheckValue<IkReal> x8129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8127))+((r21*sj5)))),-1);
if(!x8129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8128.value)+(((1.5707963267949)*(x8129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8130=IKcos(j4);
IkReal x8131=IKsin(j4);
IkReal x8132=(r00*sj5);
IkReal x8133=(cj5*r01);
IkReal x8134=(r20*sj5);
IkReal x8135=(cj5*r21);
IkReal x8136=(cj5*r11);
IkReal x8137=(r10*sj5);
IkReal x8138=((1.0)*x8130);
IkReal x8139=((1.0)*x8131);
evalcond[0]=(((r22*x8131))+(((-1.0)*x8134*x8138))+(((-1.0)*x8135*x8138)));
evalcond[1]=((((-1.0)*x8132*x8138))+((r02*x8131))+(((-1.0)*x8133*x8138)));
evalcond[2]=((-1.0)+((r12*x8131))+(((-1.0)*x8137*x8138))+(((-1.0)*x8136*x8138)));
evalcond[3]=((((-1.0)*x8137*x8139))+(((-1.0)*r12*x8138))+(((-1.0)*x8136*x8139)));
evalcond[4]=((((-1.0)*r02*x8138))+((cj2*sj1))+(((-1.0)*x8132*x8139))+((cj1*sj2))+(((-1.0)*x8133*x8139)));
evalcond[5]=((((-1.0)*x8134*x8139))+(((-1.0)*r22*x8138))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8135*x8139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8140=((1.0)*sj5);
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8140))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
CheckValue<IkReal> x8142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8140))+((cj5*r00)))),-1);
if(!x8142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8141.value)+(((1.5707963267949)*(x8142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8143=IKcos(j4);
IkReal x8144=IKsin(j4);
IkReal x8145=(r00*sj5);
IkReal x8146=(cj5*r01);
IkReal x8147=(r20*sj5);
IkReal x8148=(cj5*r21);
IkReal x8149=(cj5*r11);
IkReal x8150=(r10*sj5);
IkReal x8151=((1.0)*x8143);
IkReal x8152=((1.0)*x8144);
evalcond[0]=((((-1.0)*x8147*x8151))+(((-1.0)*x8148*x8151))+((r22*x8144)));
evalcond[1]=((((-1.0)*x8146*x8151))+(((-1.0)*x8145*x8151))+((r02*x8144)));
evalcond[2]=((-1.0)+(((-1.0)*x8150*x8151))+(((-1.0)*x8149*x8151))+((r12*x8144)));
evalcond[3]=((((-1.0)*x8150*x8152))+(((-1.0)*r12*x8151))+(((-1.0)*x8149*x8152)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8146*x8152))+(((-1.0)*r02*x8151))+(((-1.0)*x8145*x8152)));
evalcond[5]=((((-1.0)*x8147*x8152))+(((-1.0)*x8148*x8152))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8154 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8154)==0){
continue;
}
IkReal x8153=pow(x8154,-0.5);
CheckValue<IkReal> x8155 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8155.valid){
continue;
}
IkReal gconst178=((-1.0)*(x8155.value));
IkReal gconst179=(r00*x8153);
IkReal gconst180=(r01*x8153);
CheckValue<IkReal> x8156 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8156.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8156.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8159 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8159.valid){
continue;
}
IkReal x8157=((-1.0)*(x8159.value));
IkReal x8158=x8153;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst179;
cj5=gconst180;
j5=x8157;
IkReal gconst178=x8157;
IkReal gconst179=(r00*x8158);
IkReal gconst180=(r01*x8158);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8160=((1.0)*sj0);
IkReal x8161=((1.0)*gconst179);
IkReal x8162=((1.0)*cj0);
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x8161))+(((-1.0)*gconst179*r10*x8160))+(((-1.0)*gconst180*r11*x8160))+(((-1.0)*gconst180*r01*x8162)))),IkReal(((((-1.0)*r02*x8162))+(((-1.0)*r12*x8160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
CheckValue<IkReal> x8164=IKPowWithIntegerCheck(IKsign((((gconst180*r20))+(((-1.0)*r21*x8161)))),-1);
if(!x8164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8163.value)+(((1.5707963267949)*(x8164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8165=IKcos(j4);
IkReal x8166=IKsin(j4);
IkReal x8167=(gconst179*r10);
IkReal x8168=(gconst180*r21);
IkReal x8169=(gconst180*r01);
IkReal x8170=((1.0)*cj2);
IkReal x8171=(gconst179*r20);
IkReal x8172=(gconst180*r11);
IkReal x8173=((1.0)*sj0);
IkReal x8174=(gconst179*r00);
IkReal x8175=(cj1*sj2);
IkReal x8176=((1.0)*x8165);
IkReal x8177=((1.0)*x8166);
evalcond[0]=(((r22*x8166))+(((-1.0)*x8168*x8176))+(((-1.0)*x8171*x8176)));
evalcond[1]=(((r12*x8166))+cj0+(((-1.0)*x8172*x8176))+(((-1.0)*x8167*x8176)));
evalcond[2]=((((-1.0)*x8173))+(((-1.0)*x8169*x8176))+((r02*x8166))+(((-1.0)*x8174*x8176)));
evalcond[3]=((((-1.0)*x8168*x8177))+(((-1.0)*x8171*x8177))+((sj1*sj2))+(((-1.0)*r22*x8176))+(((-1.0)*cj1*x8170)));
evalcond[4]=((((-1.0)*cj0*sj1*x8170))+(((-1.0)*x8169*x8177))+(((-1.0)*x8174*x8177))+(((-1.0)*r02*x8176))+(((-1.0)*cj0*x8175)));
evalcond[5]=((((-1.0)*r12*x8176))+(((-1.0)*x8172*x8177))+(((-1.0)*sj0*sj1*x8170))+(((-1.0)*x8167*x8177))+(((-1.0)*x8173*x8175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8178=((1.0)*sj0);
CheckValue<IkReal> x8179 = IKatan2WithCheck(IkReal(((((-1.0)*gconst180*r21*x8178))+(((-1.0)*gconst179*r20*x8178)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8179.valid){
continue;
}
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(IKsign((((gconst179*r11))+(((-1.0)*gconst180*r10)))),-1);
if(!x8180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8179.value)+(((1.5707963267949)*(x8180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8181=IKcos(j4);
IkReal x8182=IKsin(j4);
IkReal x8183=(gconst179*r10);
IkReal x8184=(gconst180*r21);
IkReal x8185=(gconst180*r01);
IkReal x8186=((1.0)*cj2);
IkReal x8187=(gconst179*r20);
IkReal x8188=(gconst180*r11);
IkReal x8189=((1.0)*sj0);
IkReal x8190=(gconst179*r00);
IkReal x8191=(cj1*sj2);
IkReal x8192=((1.0)*x8181);
IkReal x8193=((1.0)*x8182);
evalcond[0]=(((r22*x8182))+(((-1.0)*x8184*x8192))+(((-1.0)*x8187*x8192)));
evalcond[1]=(((r12*x8182))+cj0+(((-1.0)*x8188*x8192))+(((-1.0)*x8183*x8192)));
evalcond[2]=((((-1.0)*x8185*x8192))+((r02*x8182))+(((-1.0)*x8190*x8192))+(((-1.0)*x8189)));
evalcond[3]=((((-1.0)*r22*x8192))+(((-1.0)*cj1*x8186))+((sj1*sj2))+(((-1.0)*x8184*x8193))+(((-1.0)*x8187*x8193)));
evalcond[4]=((((-1.0)*r02*x8192))+(((-1.0)*cj0*x8191))+(((-1.0)*x8185*x8193))+(((-1.0)*cj0*sj1*x8186))+(((-1.0)*x8190*x8193)));
evalcond[5]=((((-1.0)*x8188*x8193))+(((-1.0)*x8183*x8193))+(((-1.0)*r12*x8192))+(((-1.0)*x8189*x8191))+(((-1.0)*sj0*sj1*x8186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8194=((-1.0)*r00);
IkReal x8196 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8196)==0){
continue;
}
IkReal x8195=pow(x8196,-0.5);
CheckValue<IkReal> x8197 = IKatan2WithCheck(IkReal(x8194),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8197.valid){
continue;
}
IkReal gconst181=((3.14159265358979)+(((-1.0)*(x8197.value))));
IkReal gconst182=(x8194*x8195);
IkReal gconst183=((-1.0)*r01*x8195);
CheckValue<IkReal> x8198 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8198.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8198.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8199=((-1.0)*r00);
CheckValue<IkReal> x8202 = IKatan2WithCheck(IkReal(x8199),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8202.valid){
continue;
}
IkReal x8200=((1.0)*(x8202.value));
IkReal x8201=x8195;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x8200)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x8200)));
IkReal gconst182=(x8199*x8201);
IkReal gconst183=((-1.0)*r01*x8201);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8203=((-1.0)*r00);
CheckValue<IkReal> x8206 = IKatan2WithCheck(IkReal(x8203),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8206.valid){
continue;
}
IkReal x8204=((1.0)*(x8206.value));
IkReal x8205=x8195;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x8204)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x8204)));
IkReal gconst182=(x8203*x8205);
IkReal gconst183=((-1.0)*r01*x8205);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8207=((-1.0)*r00);
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal(x8207),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
IkReal x8208=((1.0)*(x8210.value));
IkReal x8209=x8195;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x8208)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x8208)));
IkReal gconst182=(x8207*x8209);
IkReal gconst183=((-1.0)*r01*x8209);
IkReal x8211=r02*r02;
IkReal x8212=(r12*sj0);
IkReal x8213=((1.0)*cj0);
IkReal x8214=x8195;
j4eval[0]=((IKabs(((((-1.0)*r02*x8213))+(((-1.0)*x8212)))))+(IKabs((((r02*x8212*x8214))+(((-1.0)*x8213*x8214))+((cj0*x8211*x8214))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8215=((1.0)*sj0);
IkReal x8216=((1.0)*gconst182);
IkReal x8217=((1.0)*cj0);
CheckValue<IkReal> x8218=IKPowWithIntegerCheck(IKsign((((gconst183*r20))+(((-1.0)*r21*x8216)))),-1);
if(!x8218.valid){
continue;
}
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal(((((-1.0)*gconst183*r11*x8215))+(((-1.0)*gconst183*r01*x8217))+(((-1.0)*gconst182*r10*x8215))+(((-1.0)*cj0*r00*x8216)))),IkReal(((((-1.0)*r02*x8217))+(((-1.0)*r12*x8215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8218.value)))+(x8219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8220=IKcos(j4);
IkReal x8221=IKsin(j4);
IkReal x8222=((1.0)*cj2);
IkReal x8223=(gconst182*r20);
IkReal x8224=((1.0)*sj0);
IkReal x8225=(gconst182*r10);
IkReal x8226=(gconst183*r01);
IkReal x8227=(gconst183*r21);
IkReal x8228=(gconst182*r00);
IkReal x8229=(gconst183*r11);
IkReal x8230=(cj1*sj2);
IkReal x8231=((1.0)*x8220);
IkReal x8232=((1.0)*x8221);
evalcond[0]=(((r22*x8221))+(((-1.0)*x8227*x8231))+(((-1.0)*x8223*x8231)));
evalcond[1]=(((r12*x8221))+cj0+(((-1.0)*x8229*x8231))+(((-1.0)*x8225*x8231)));
evalcond[2]=((((-1.0)*x8228*x8231))+((r02*x8221))+(((-1.0)*x8224))+(((-1.0)*x8226*x8231)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x8222))+(((-1.0)*r22*x8231))+(((-1.0)*x8227*x8232))+(((-1.0)*x8223*x8232)));
evalcond[4]=((((-1.0)*x8228*x8232))+(((-1.0)*cj0*x8230))+(((-1.0)*r02*x8231))+(((-1.0)*cj0*sj1*x8222))+(((-1.0)*x8226*x8232)));
evalcond[5]=((((-1.0)*sj0*sj1*x8222))+(((-1.0)*x8229*x8232))+(((-1.0)*x8224*x8230))+(((-1.0)*r12*x8231))+(((-1.0)*x8225*x8232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8233=((1.0)*gconst183);
CheckValue<IkReal> x8234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8233))+((gconst182*r11)))),-1);
if(!x8234.valid){
continue;
}
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x8233))+(((-1.0)*gconst182*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8234.value)))+(x8235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8236=IKcos(j4);
IkReal x8237=IKsin(j4);
IkReal x8238=((1.0)*cj2);
IkReal x8239=(gconst182*r20);
IkReal x8240=((1.0)*sj0);
IkReal x8241=(gconst182*r10);
IkReal x8242=(gconst183*r01);
IkReal x8243=(gconst183*r21);
IkReal x8244=(gconst182*r00);
IkReal x8245=(gconst183*r11);
IkReal x8246=(cj1*sj2);
IkReal x8247=((1.0)*x8236);
IkReal x8248=((1.0)*x8237);
evalcond[0]=((((-1.0)*x8243*x8247))+(((-1.0)*x8239*x8247))+((r22*x8237)));
evalcond[1]=((((-1.0)*x8245*x8247))+((r12*x8237))+(((-1.0)*x8241*x8247))+cj0);
evalcond[2]=(((r02*x8237))+(((-1.0)*x8244*x8247))+(((-1.0)*x8242*x8247))+(((-1.0)*x8240)));
evalcond[3]=((((-1.0)*x8243*x8248))+(((-1.0)*x8239*x8248))+((sj1*sj2))+(((-1.0)*r22*x8247))+(((-1.0)*cj1*x8238)));
evalcond[4]=((((-1.0)*x8244*x8248))+(((-1.0)*x8242*x8248))+(((-1.0)*cj0*x8246))+(((-1.0)*cj0*sj1*x8238))+(((-1.0)*r02*x8247)));
evalcond[5]=((((-1.0)*x8245*x8248))+(((-1.0)*sj0*sj1*x8238))+(((-1.0)*x8241*x8248))+(((-1.0)*x8240*x8246))+(((-1.0)*r12*x8247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8249=((1.0)*cj0);
CheckValue<IkReal> x8250 = IKatan2WithCheck(IkReal(((((-1.0)*gconst183*r21*x8249))+(((-1.0)*gconst182*r20*x8249)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8250.valid){
continue;
}
CheckValue<IkReal> x8251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst183*r00))+((gconst182*r01)))),-1);
if(!x8251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8250.value)+(((1.5707963267949)*(x8251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8252=IKcos(j4);
IkReal x8253=IKsin(j4);
IkReal x8254=((1.0)*cj2);
IkReal x8255=(gconst182*r20);
IkReal x8256=((1.0)*sj0);
IkReal x8257=(gconst182*r10);
IkReal x8258=(gconst183*r01);
IkReal x8259=(gconst183*r21);
IkReal x8260=(gconst182*r00);
IkReal x8261=(gconst183*r11);
IkReal x8262=(cj1*sj2);
IkReal x8263=((1.0)*x8252);
IkReal x8264=((1.0)*x8253);
evalcond[0]=((((-1.0)*x8259*x8263))+(((-1.0)*x8255*x8263))+((r22*x8253)));
evalcond[1]=(cj0+(((-1.0)*x8261*x8263))+((r12*x8253))+(((-1.0)*x8257*x8263)));
evalcond[2]=((((-1.0)*x8256))+(((-1.0)*x8260*x8263))+(((-1.0)*x8258*x8263))+((r02*x8253)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x8263))+(((-1.0)*x8259*x8264))+(((-1.0)*x8255*x8264))+(((-1.0)*cj1*x8254)));
evalcond[4]=((((-1.0)*cj0*x8262))+(((-1.0)*cj0*sj1*x8254))+(((-1.0)*x8260*x8264))+(((-1.0)*x8258*x8264))+(((-1.0)*r02*x8263)));
evalcond[5]=((((-1.0)*r12*x8263))+(((-1.0)*x8261*x8264))+(((-1.0)*x8256*x8262))+(((-1.0)*x8257*x8264))+(((-1.0)*sj0*sj1*x8254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8265=((1.0)*cj5);
IkReal x8266=(((r11*sj5))+(((-1.0)*r10*x8265)));
j4eval[0]=x8266;
j4eval[1]=((IKabs(((((-1.0)*r21*x8265))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8267=((1.0)*sj5);
IkReal x8268=(((cj5*r20))+(((-1.0)*r21*x8267)));
j4eval[0]=x8268;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8267))))));
j4eval[2]=IKsign(x8268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8269=cj5*cj5;
IkReal x8270=r00*r00;
IkReal x8271=(r00*sj5);
IkReal x8272=(cj5*r01);
IkReal x8273=((((2.0)*x8271*x8272))+(((-1.0)*x8269*x8270))+((x8269*(r01*r01)))+(r02*r02)+x8270);
j4eval[0]=x8273;
j4eval[1]=IKsign(x8273);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8271))+(((-1.0)*x8272))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8274=cj5*cj5;
IkReal x8275=r00*r00;
IkReal x8276=(cj5*r01);
IkReal x8277=(r00*sj5);
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8277))+(((-1.0)*x8276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
CheckValue<IkReal> x8279=IKPowWithIntegerCheck(IKsign(((((2.0)*x8276*x8277))+((x8274*(r01*r01)))+(((-1.0)*x8274*x8275))+(r02*r02)+x8275)),-1);
if(!x8279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8278.value)+(((1.5707963267949)*(x8279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8280=IKcos(j4);
IkReal x8281=IKsin(j4);
IkReal x8282=(r00*sj5);
IkReal x8283=(cj5*r01);
IkReal x8284=(r20*sj5);
IkReal x8285=((1.0)*cj2);
IkReal x8286=(cj5*r21);
IkReal x8287=(cj5*r11);
IkReal x8288=(r10*sj5);
IkReal x8289=((1.0)*x8280);
IkReal x8290=((1.0)*x8281);
evalcond[0]=((((-1.0)*x8286*x8289))+((r22*x8281))+(((-1.0)*x8284*x8289)));
evalcond[1]=((((-1.0)*x8287*x8289))+((r12*x8281))+(((-1.0)*x8288*x8289)));
evalcond[2]=((-1.0)+(((-1.0)*x8283*x8289))+(((-1.0)*x8282*x8289))+((r02*x8281)));
evalcond[3]=((((-1.0)*r02*x8289))+(((-1.0)*x8283*x8290))+(((-1.0)*x8282*x8290)));
evalcond[4]=((((-1.0)*x8284*x8290))+(((-1.0)*cj1*x8285))+((sj1*sj2))+(((-1.0)*x8286*x8290))+(((-1.0)*r22*x8289)));
evalcond[5]=((((-1.0)*r12*x8289))+(((-1.0)*sj1*x8285))+(((-1.0)*cj1*sj2))+(((-1.0)*x8287*x8290))+(((-1.0)*x8288*x8290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8291=((1.0)*sj5);
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8291)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8291))+((cj5*r20)))),-1);
if(!x8293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8292.value)+(((1.5707963267949)*(x8293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8294=IKcos(j4);
IkReal x8295=IKsin(j4);
IkReal x8296=(r00*sj5);
IkReal x8297=(cj5*r01);
IkReal x8298=(r20*sj5);
IkReal x8299=((1.0)*cj2);
IkReal x8300=(cj5*r21);
IkReal x8301=(cj5*r11);
IkReal x8302=(r10*sj5);
IkReal x8303=((1.0)*x8294);
IkReal x8304=((1.0)*x8295);
evalcond[0]=((((-1.0)*x8298*x8303))+(((-1.0)*x8300*x8303))+((r22*x8295)));
evalcond[1]=((((-1.0)*x8302*x8303))+(((-1.0)*x8301*x8303))+((r12*x8295)));
evalcond[2]=((-1.0)+(((-1.0)*x8297*x8303))+((r02*x8295))+(((-1.0)*x8296*x8303)));
evalcond[3]=((((-1.0)*x8297*x8304))+(((-1.0)*r02*x8303))+(((-1.0)*x8296*x8304)));
evalcond[4]=((((-1.0)*x8298*x8304))+(((-1.0)*r22*x8303))+(((-1.0)*cj1*x8299))+((sj1*sj2))+(((-1.0)*x8300*x8304)));
evalcond[5]=((((-1.0)*sj1*x8299))+(((-1.0)*r12*x8303))+(((-1.0)*cj1*sj2))+(((-1.0)*x8302*x8304))+(((-1.0)*x8301*x8304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8305=((1.0)*cj5);
CheckValue<IkReal> x8306 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8305))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8306.valid){
continue;
}
CheckValue<IkReal> x8307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8305))+((r11*sj5)))),-1);
if(!x8307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8306.value)+(((1.5707963267949)*(x8307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8308=IKcos(j4);
IkReal x8309=IKsin(j4);
IkReal x8310=(r00*sj5);
IkReal x8311=(cj5*r01);
IkReal x8312=(r20*sj5);
IkReal x8313=((1.0)*cj2);
IkReal x8314=(cj5*r21);
IkReal x8315=(cj5*r11);
IkReal x8316=(r10*sj5);
IkReal x8317=((1.0)*x8308);
IkReal x8318=((1.0)*x8309);
evalcond[0]=((((-1.0)*x8312*x8317))+((r22*x8309))+(((-1.0)*x8314*x8317)));
evalcond[1]=((((-1.0)*x8316*x8317))+((r12*x8309))+(((-1.0)*x8315*x8317)));
evalcond[2]=((-1.0)+((r02*x8309))+(((-1.0)*x8310*x8317))+(((-1.0)*x8311*x8317)));
evalcond[3]=((((-1.0)*x8310*x8318))+(((-1.0)*r02*x8317))+(((-1.0)*x8311*x8318)));
evalcond[4]=((((-1.0)*x8312*x8318))+(((-1.0)*r22*x8317))+(((-1.0)*cj1*x8313))+((sj1*sj2))+(((-1.0)*x8314*x8318)));
evalcond[5]=((((-1.0)*x8316*x8318))+(((-1.0)*cj1*sj2))+(((-1.0)*x8315*x8318))+(((-1.0)*sj1*x8313))+(((-1.0)*r12*x8317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8319=((1.0)*sj5);
IkReal x8320=(((cj5*r10))+(((-1.0)*r11*x8319)));
j4eval[0]=x8320;
j4eval[1]=IKsign(x8320);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x8319))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8321=((1.0)*cj5);
IkReal x8322=(((r21*sj5))+(((-1.0)*r20*x8321)));
j4eval[0]=x8322;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8321))))));
j4eval[2]=IKsign(x8322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8323=cj5*cj5;
IkReal x8324=r00*r00;
IkReal x8325=(cj5*r01);
IkReal x8326=(r00*sj5);
IkReal x8327=(((x8323*x8324))+(((-1.0)*(r02*r02)))+(((-2.0)*x8325*x8326))+(((-1.0)*x8324))+(((-1.0)*x8323*(r01*r01))));
j4eval[0]=x8327;
j4eval[1]=IKsign(x8327);
j4eval[2]=((IKabs(((((-1.0)*x8326))+(((-1.0)*x8325)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8328=cj5*cj5;
IkReal x8329=r00*r00;
IkReal x8330=(cj5*r01);
IkReal x8331=(r00*sj5);
CheckValue<IkReal> x8332 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8330))+(((-1.0)*x8331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8332.valid){
continue;
}
CheckValue<IkReal> x8333=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-2.0)*x8330*x8331))+(((-1.0)*x8328*(r01*r01)))+(((-1.0)*x8329))+((x8328*x8329)))),-1);
if(!x8333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8332.value)+(((1.5707963267949)*(x8333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8334=IKcos(j4);
IkReal x8335=IKsin(j4);
IkReal x8336=(r00*sj5);
IkReal x8337=(cj5*r01);
IkReal x8338=(r20*sj5);
IkReal x8339=(cj5*r21);
IkReal x8340=(cj5*r11);
IkReal x8341=(r10*sj5);
IkReal x8342=((1.0)*x8334);
IkReal x8343=((1.0)*x8335);
evalcond[0]=((((-1.0)*x8338*x8342))+(((-1.0)*x8339*x8342))+((r22*x8335)));
evalcond[1]=(((r12*x8335))+(((-1.0)*x8341*x8342))+(((-1.0)*x8340*x8342)));
evalcond[2]=((1.0)+(((-1.0)*x8336*x8342))+(((-1.0)*x8337*x8342))+((r02*x8335)));
evalcond[3]=((((-1.0)*r02*x8342))+(((-1.0)*x8336*x8343))+(((-1.0)*x8337*x8343)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8341*x8343))+(((-1.0)*x8340*x8343))+(((-1.0)*r12*x8342)));
evalcond[5]=((((-1.0)*x8338*x8343))+(((-1.0)*x8339*x8343))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8344=((1.0)*cj5);
CheckValue<IkReal> x8345=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x8344)))),-1);
if(!x8345.valid){
continue;
}
CheckValue<IkReal> x8346 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x8344))+(((-1.0)*r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8345.value)))+(x8346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8347=IKcos(j4);
IkReal x8348=IKsin(j4);
IkReal x8349=(r00*sj5);
IkReal x8350=(cj5*r01);
IkReal x8351=(r20*sj5);
IkReal x8352=(cj5*r21);
IkReal x8353=(cj5*r11);
IkReal x8354=(r10*sj5);
IkReal x8355=((1.0)*x8347);
IkReal x8356=((1.0)*x8348);
evalcond[0]=((((-1.0)*x8352*x8355))+(((-1.0)*x8351*x8355))+((r22*x8348)));
evalcond[1]=((((-1.0)*x8354*x8355))+(((-1.0)*x8353*x8355))+((r12*x8348)));
evalcond[2]=((1.0)+(((-1.0)*x8349*x8355))+(((-1.0)*x8350*x8355))+((r02*x8348)));
evalcond[3]=((((-1.0)*r02*x8355))+(((-1.0)*x8349*x8356))+(((-1.0)*x8350*x8356)));
evalcond[4]=((((-1.0)*x8354*x8356))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x8355))+(((-1.0)*x8353*x8356)));
evalcond[5]=((((-1.0)*r22*x8355))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8352*x8356))+(((-1.0)*x8351*x8356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8357=((1.0)*sj5);
CheckValue<IkReal> x8358=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x8357)))),-1);
if(!x8358.valid){
continue;
}
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8357))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8358.value)))+(x8359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8360=IKcos(j4);
IkReal x8361=IKsin(j4);
IkReal x8362=(r00*sj5);
IkReal x8363=(cj5*r01);
IkReal x8364=(r20*sj5);
IkReal x8365=(cj5*r21);
IkReal x8366=(cj5*r11);
IkReal x8367=(r10*sj5);
IkReal x8368=((1.0)*x8360);
IkReal x8369=((1.0)*x8361);
evalcond[0]=((((-1.0)*x8365*x8368))+((r22*x8361))+(((-1.0)*x8364*x8368)));
evalcond[1]=((((-1.0)*x8366*x8368))+(((-1.0)*x8367*x8368))+((r12*x8361)));
evalcond[2]=((1.0)+(((-1.0)*x8362*x8368))+(((-1.0)*x8363*x8368))+((r02*x8361)));
evalcond[3]=((((-1.0)*x8362*x8369))+(((-1.0)*r02*x8368))+(((-1.0)*x8363*x8369)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8366*x8369))+(((-1.0)*r12*x8368))+(((-1.0)*x8367*x8369)));
evalcond[5]=((((-1.0)*x8365*x8369))+(((-1.0)*x8364*x8369))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8370=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8370);
rxp1_1=(px*r21);
rxp1_2=(r11*x8370);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8371=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8371);
rxp1_1=(px*r21);
rxp1_2=(r11*x8371);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8372=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8372);
rxp1_1=(px*r21);
rxp1_2=(r11*x8372);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8375=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x8375.valid){
continue;
}
IkReal x8373=x8375.value;
IkReal x8374=(sj0*x8373);
sj4array[0]=(((cj2*sj1*x8374))+((cj1*sj2*x8374)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8376=IKcos(j4);
IkReal x8377=IKsin(j4);
IkReal x8378=(r20*sj5);
IkReal x8379=((1.0)*cj5*r21);
IkReal x8380=((1.0)*x8376);
evalcond[0]=((-1.0)*r02*x8376);
evalcond[1]=((((-1.0)*sj0))+((r02*x8377)));
evalcond[2]=((((-1.0)*x8376*x8379))+(((-1.0)*x8378*x8380)));
evalcond[3]=((((-1.0)*cj5*r11*x8380))+(((-1.0)*r10*sj5*x8380)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8377*x8379))+(((-1.0)*x8377*x8378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8382=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x8382.valid){
continue;
}
IkReal x8381=x8382.value;
sj4array[0]=((((-1.0)*sj1*sj2*x8381))+((cj1*cj2*x8381)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8383=IKcos(j4);
IkReal x8384=IKsin(j4);
IkReal x8385=((1.0)*sj0);
IkReal x8386=(r10*sj5);
IkReal x8387=((1.0)*x8384);
IkReal x8388=((1.0)*x8383);
IkReal x8389=(cj5*x8388);
evalcond[0]=((-1.0)*r02*x8383);
evalcond[1]=((((-1.0)*x8385))+((r02*x8384)));
evalcond[2]=((((-1.0)*r20*sj5*x8388))+(((-1.0)*r21*x8389)));
evalcond[3]=((((-1.0)*x8386*x8388))+(((-1.0)*r11*x8389)));
evalcond[4]=((((-1.0)*cj5*r11*x8387))+(((-1.0)*x8386*x8387))+(((-1.0)*cj2*sj1*x8385))+(((-1.0)*cj1*sj2*x8385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(r02,-1);
if(!x8390.valid){
continue;
}
sj4array[0]=(sj0*(x8390.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8391=IKcos(j4);
IkReal x8392=IKsin(j4);
IkReal x8393=((1.0)*sj0);
IkReal x8394=((1.0)*cj5*r21);
IkReal x8395=((1.0)*cj5*r11);
IkReal x8396=((1.0)*sj5*x8392);
IkReal x8397=((1.0)*sj5*x8391);
evalcond[0]=((-1.0)*r02*x8391);
evalcond[1]=((((-1.0)*x8391*x8394))+(((-1.0)*r20*x8397)));
evalcond[2]=((((-1.0)*x8391*x8395))+(((-1.0)*r10*x8397)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8392*x8394))+(((-1.0)*r20*x8396)));
evalcond[4]=((((-1.0)*cj2*sj1*x8393))+(((-1.0)*cj1*sj2*x8393))+(((-1.0)*x8392*x8395))+(((-1.0)*r10*x8396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8398=((1.0)*sj0);
IkReal x8399=((1.0)*cj0);
CheckValue<IkReal> x8400 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x8399))+(((-1.0)*cj5*r01*x8399))+(((-1.0)*r10*sj5*x8398))+(((-1.0)*cj5*r11*x8398)))),IkReal(((((-1.0)*r02*x8399))+(((-1.0)*r12*x8398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8400.valid){
continue;
}
CheckValue<IkReal> x8401=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x8401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8400.value)+(((1.5707963267949)*(x8401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8402=IKcos(j4);
IkReal x8403=IKsin(j4);
IkReal x8404=(r00*sj5);
IkReal x8405=(cj5*r01);
IkReal x8406=(r20*sj5);
IkReal x8407=((1.0)*cj2);
IkReal x8408=(cj5*r21);
IkReal x8409=(cj5*r11);
IkReal x8410=((1.0)*sj0);
IkReal x8411=(r10*sj5);
IkReal x8412=(cj1*sj2);
IkReal x8413=((1.0)*x8402);
IkReal x8414=((1.0)*x8403);
evalcond[0]=((((-1.0)*x8408*x8413))+((r22*x8403))+(((-1.0)*x8406*x8413)));
evalcond[1]=((((-1.0)*x8409*x8413))+cj0+((r12*x8403))+(((-1.0)*x8411*x8413)));
evalcond[2]=((((-1.0)*x8404*x8413))+(((-1.0)*x8405*x8413))+(((-1.0)*x8410))+((r02*x8403)));
evalcond[3]=((((-1.0)*x8408*x8414))+((sj1*sj2))+(((-1.0)*cj1*x8407))+(((-1.0)*x8406*x8414))+(((-1.0)*r22*x8413)));
evalcond[4]=((((-1.0)*x8404*x8414))+(((-1.0)*x8405*x8414))+(((-1.0)*r02*x8413))+(((-1.0)*cj0*sj1*x8407))+(((-1.0)*cj0*x8412)));
evalcond[5]=((((-1.0)*sj0*sj1*x8407))+(((-1.0)*r12*x8413))+(((-1.0)*x8409*x8414))+(((-1.0)*x8410*x8412))+(((-1.0)*x8411*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8415=((1.0)*cj5);
CheckValue<IkReal> x8416 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x8415))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8416.valid){
continue;
}
CheckValue<IkReal> x8417=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x8415)))),-1);
if(!x8417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8416.value)+(((1.5707963267949)*(x8417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8418=IKcos(j4);
IkReal x8419=IKsin(j4);
IkReal x8420=(r00*sj5);
IkReal x8421=(cj5*r01);
IkReal x8422=(r20*sj5);
IkReal x8423=((1.0)*cj2);
IkReal x8424=(cj5*r21);
IkReal x8425=(cj5*r11);
IkReal x8426=((1.0)*sj0);
IkReal x8427=(r10*sj5);
IkReal x8428=(cj1*sj2);
IkReal x8429=((1.0)*x8418);
IkReal x8430=((1.0)*x8419);
evalcond[0]=((((-1.0)*x8424*x8429))+(((-1.0)*x8422*x8429))+((r22*x8419)));
evalcond[1]=(cj0+(((-1.0)*x8427*x8429))+((r12*x8419))+(((-1.0)*x8425*x8429)));
evalcond[2]=(((r02*x8419))+(((-1.0)*x8421*x8429))+(((-1.0)*x8420*x8429))+(((-1.0)*x8426)));
evalcond[3]=((((-1.0)*x8424*x8430))+(((-1.0)*r22*x8429))+((sj1*sj2))+(((-1.0)*cj1*x8423))+(((-1.0)*x8422*x8430)));
evalcond[4]=((((-1.0)*x8420*x8430))+(((-1.0)*x8421*x8430))+(((-1.0)*cj0*sj1*x8423))+(((-1.0)*r02*x8429))+(((-1.0)*cj0*x8428)));
evalcond[5]=((((-1.0)*x8426*x8428))+(((-1.0)*x8427*x8430))+(((-1.0)*x8425*x8430))+(((-1.0)*sj0*sj1*x8423))+(((-1.0)*r12*x8429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8431=((1.0)*cj0);
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x8431))+(((-1.0)*r20*sj5*x8431)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
CheckValue<IkReal> x8433=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x8433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8432.value)+(((1.5707963267949)*(x8433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8434=IKcos(j4);
IkReal x8435=IKsin(j4);
IkReal x8436=(r00*sj5);
IkReal x8437=(cj5*r01);
IkReal x8438=(r20*sj5);
IkReal x8439=((1.0)*cj2);
IkReal x8440=(cj5*r21);
IkReal x8441=(cj5*r11);
IkReal x8442=((1.0)*sj0);
IkReal x8443=(r10*sj5);
IkReal x8444=(cj1*sj2);
IkReal x8445=((1.0)*x8434);
IkReal x8446=((1.0)*x8435);
evalcond[0]=((((-1.0)*x8438*x8445))+((r22*x8435))+(((-1.0)*x8440*x8445)));
evalcond[1]=(cj0+(((-1.0)*x8443*x8445))+((r12*x8435))+(((-1.0)*x8441*x8445)));
evalcond[2]=((((-1.0)*x8437*x8445))+((r02*x8435))+(((-1.0)*x8442))+(((-1.0)*x8436*x8445)));
evalcond[3]=((((-1.0)*x8438*x8446))+(((-1.0)*cj1*x8439))+((sj1*sj2))+(((-1.0)*x8440*x8446))+(((-1.0)*r22*x8445)));
evalcond[4]=((((-1.0)*x8437*x8446))+(((-1.0)*cj0*sj1*x8439))+(((-1.0)*r02*x8445))+(((-1.0)*x8436*x8446))+(((-1.0)*cj0*x8444)));
evalcond[5]=((((-1.0)*r12*x8445))+(((-1.0)*x8442*x8444))+(((-1.0)*sj0*sj1*x8439))+(((-1.0)*x8443*x8446))+(((-1.0)*x8441*x8446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8447=cj1*cj1;
IkReal x8448=cj2*cj2;
IkReal x8449=(px*sj1);
IkReal x8450=((74536.0)*cj1);
IkReal x8451=(cj5*r00);
IkReal x8452=(r01*sj5);
IkReal x8453=(r11*sj5);
IkReal x8454=(sj1*sj2);
IkReal x8455=((2456000.0)*py);
IkReal x8456=((279752.0)*sj1);
IkReal x8457=(cj1*cj2);
IkReal x8458=((616000.0)*cj1);
IkReal x8459=((709784.0)*sj2);
IkReal x8460=(cj5*r10);
IkReal x8461=((297176.0)*x8460);
CheckValue<IkReal> x8462 = IKatan2WithCheck(IkReal((((py*x8458))+((x8453*x8456))+((x8455*x8457))+(((-28000.0)*px))+(((-1.0)*x8454*x8455))+((x8450*x8453))+(((-1.0)*x8450*x8460))+(((-1.0)*x8457*x8461))+(((-3388.0)*x8452))+(((297176.0)*x8453*x8457))+(((3388.0)*x8451))+(((2312000.0)*py*sj1))+(((-297176.0)*x8453*x8454))+((x8454*x8461))+(((-1.0)*x8456*x8460)))),IkReal(((((-2456000.0)*sj2*x8449))+(((2456000.0)*px*x8457))+((px*x8458))+(((2312000.0)*x8449))+((x8450*x8452))+(((28000.0)*py))+(((-1.0)*x8450*x8451))+(((-1.0)*x8451*x8456))+(((-297176.0)*x8451*x8457))+(((3388.0)*x8453))+((x8452*x8456))+(((-3388.0)*x8460))+(((297176.0)*x8451*x8454))+(((-297176.0)*x8452*x8454))+(((297176.0)*x8452*x8457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8462.valid){
continue;
}
CheckValue<IkReal> x8463=IKPowWithIntegerCheck(IKsign(((711129.0)+(((-687364.0)*x8447))+(((-376996.0)*x8448))+(((178024.0)*cj1*sj1))+((x8447*x8459))+(((709784.0)*sj1*x8457))+(((-189112.0)*cj1*x8454))+(((189112.0)*cj2*x8447))+(((-753992.0)*x8454*x8457))+(((753992.0)*x8447*x8448))+(((-1.0)*x8459)))),-1);
if(!x8463.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8462.value)+(((1.5707963267949)*(x8463.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8464=IKcos(j0);
IkReal x8465=IKsin(j0);
IkReal x8466=((0.121)*cj5);
IkReal x8467=((0.121)*sj5);
IkReal x8468=((0.1535)*sj2);
IkReal x8469=((0.0385)*cj1);
IkReal x8470=(sj1*x8464);
IkReal x8471=(sj1*x8465);
IkReal x8472=((0.1535)*cj1*cj2);
evalcond[0]=(((x8464*x8469))+((x8464*x8472))+((r00*x8466))+(((0.1445)*x8470))+(((-1.0)*px))+(((-1.0)*r01*x8467))+(((-1.0)*x8468*x8470))+(((-0.00175)*x8465)));
evalcond[1]=(((x8465*x8469))+(((0.00175)*x8464))+(((0.1445)*x8471))+(((-1.0)*py))+((r10*x8466))+(((-1.0)*r11*x8467))+(((-1.0)*x8468*x8471))+((x8465*x8472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8473=((1.0)*cj5);
IkReal x8474=(((r01*sj5))+(((-1.0)*r00*x8473)));
j4eval[0]=x8474;
j4eval[1]=IKsign(x8474);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x8473)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8475=((1.0)*cj5);
IkReal x8476=(((r11*sj5))+(((-1.0)*r10*x8475)));
j4eval[0]=x8476;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x8475))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x8476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8477=((1.0)*sj0);
IkReal x8478=((1.0)*sj5);
IkReal x8479=((1.0)*cj0);
IkReal x8480=(((cj5*r20))+(((-1.0)*r21*x8478)));
j4eval[0]=x8480;
j4eval[1]=((IKabs(((((-1.0)*cj5*r01*x8479))+(((-1.0)*r10*sj5*x8477))+(((-1.0)*cj5*r11*x8477))+(((-1.0)*cj0*r00*x8478)))))+(IKabs(((((-1.0)*r02*x8479))+(((-1.0)*r12*x8477))))));
j4eval[2]=IKsign(x8480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8481=((-1.0)*r21);
IkReal x8483 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8483)==0){
continue;
}
IkReal x8482=pow(x8483,-0.5);
CheckValue<IkReal> x8484 = IKatan2WithCheck(IkReal(r20),IkReal(x8481),IKFAST_ATAN2_MAGTHRESH);
if(!x8484.valid){
continue;
}
IkReal gconst34=((-1.0)*(x8484.value));
IkReal gconst35=((-1.0)*r20*x8482);
IkReal gconst36=(x8481*x8482);
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8485.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8486=((-1.0)*r21);
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(r20),IkReal(x8486),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
IkReal x8487=((-1.0)*(x8489.value));
IkReal x8488=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8487;
IkReal gconst34=x8487;
IkReal gconst35=((-1.0)*r20*x8488);
IkReal gconst36=(x8486*x8488);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8490=((-1.0)*r21);
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(r20),IkReal(x8490),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
IkReal x8491=((-1.0)*(x8493.value));
IkReal x8492=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8491;
IkReal gconst34=x8491;
IkReal gconst35=((-1.0)*r20*x8492);
IkReal gconst36=(x8490*x8492);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8494=((-1.0)*r21);
CheckValue<IkReal> x8497 = IKatan2WithCheck(IkReal(r20),IkReal(x8494),IKFAST_ATAN2_MAGTHRESH);
if(!x8497.valid){
continue;
}
IkReal x8495=((-1.0)*(x8497.value));
IkReal x8496=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8495;
IkReal gconst34=x8495;
IkReal gconst35=((-1.0)*r20*x8496);
IkReal gconst36=(x8494*x8496);
IkReal x8498=r22*r22;
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8498))),-1);
if(!x8502.valid){
continue;
}
IkReal x8499=x8502.value;
IkReal x8500=(cj3*x8499);
IkReal x8501=(((cj3*x8498))+((x8500*(r21*r21*r21*r21)))+(((2.0)*x8500*(r20*r20)*(r21*r21)))+((x8500*(r20*r20*r20*r20))));
j4eval[0]=x8501;
j4eval[1]=IKsign(x8501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8503=((-1.0)*r21);
CheckValue<IkReal> x8506 = IKatan2WithCheck(IkReal(r20),IkReal(x8503),IKFAST_ATAN2_MAGTHRESH);
if(!x8506.valid){
continue;
}
IkReal x8504=((-1.0)*(x8506.value));
IkReal x8505=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8504;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst34=x8504;
IkReal gconst35=((-1.0)*r20*x8505);
IkReal gconst36=(x8503*x8505);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8507=((-1.0)*r21);
CheckValue<IkReal> x8510 = IKatan2WithCheck(IkReal(r20),IkReal(x8507),IKFAST_ATAN2_MAGTHRESH);
if(!x8510.valid){
continue;
}
IkReal x8508=((-1.0)*(x8510.value));
IkReal x8509=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8508;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst34=x8508;
IkReal gconst35=((-1.0)*r20*x8509);
IkReal gconst36=(x8507*x8509);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8511=((-1.0)*r21);
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal(r20),IkReal(x8511),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
IkReal x8512=((-1.0)*(x8514.value));
IkReal x8513=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8512;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst34=x8512;
IkReal gconst35=((-1.0)*r20*x8513);
IkReal gconst36=(x8511*x8513);
IkReal x8515=((1.0)*(r22*r22));
CheckValue<IkReal> x8519=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8515))),-1);
if(!x8519.valid){
continue;
}
IkReal x8516=x8519.value;
IkReal x8517=((1.0)*x8516);
IkReal x8518=((((-1.0)*x8517*(r21*r21*r21*r21)))+(((-1.0)*x8517*(r20*r20*r20*r20)))+(((-1.0)*x8515))+(((-2.0)*x8516*(r20*r20)*(r21*r21))));
j4eval[0]=x8518;
j4eval[1]=IKsign(x8518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8520=((-1.0)*r21);
CheckValue<IkReal> x8523 = IKatan2WithCheck(IkReal(r20),IkReal(x8520),IKFAST_ATAN2_MAGTHRESH);
if(!x8523.valid){
continue;
}
IkReal x8521=((-1.0)*(x8523.value));
IkReal x8522=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8521;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8521;
IkReal gconst35=((-1.0)*r20*x8522);
IkReal gconst36=(x8520*x8522);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8524=((-1.0)*r21);
CheckValue<IkReal> x8527 = IKatan2WithCheck(IkReal(r20),IkReal(x8524),IKFAST_ATAN2_MAGTHRESH);
if(!x8527.valid){
continue;
}
IkReal x8525=((-1.0)*(x8527.value));
IkReal x8526=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8525;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8525;
IkReal gconst35=((-1.0)*r20*x8526);
IkReal gconst36=(x8524*x8526);
IkReal x8528=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(x8528,-1);
if(!x8532.valid){
continue;
}
IkReal x8529=x8532.value;
IkReal x8530=((1.0)*x8529);
IkReal x8531=((((-2.0)*r10*r11*r20*r21*x8529))+(((-1.0)*x8530*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8530*(r10*r10)*(r20*r20))));
j4eval[0]=x8531;
j4eval[1]=r12;
j4eval[2]=x8528;
j4eval[3]=IKsign(x8531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8533=((-1.0)*r21);
CheckValue<IkReal> x8536 = IKatan2WithCheck(IkReal(r20),IkReal(x8533),IKFAST_ATAN2_MAGTHRESH);
if(!x8536.valid){
continue;
}
IkReal x8534=((-1.0)*(x8536.value));
IkReal x8535=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8534;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8534;
IkReal gconst35=((-1.0)*r20*x8535);
IkReal gconst36=(x8533*x8535);
IkReal x8537=((1.0)*(r22*r22));
CheckValue<IkReal> x8541=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8537))),-1);
if(!x8541.valid){
continue;
}
IkReal x8538=x8541.value;
IkReal x8539=((1.0)*x8538);
IkReal x8540=((((-1.0)*x8537))+(((-2.0)*x8538*(r20*r20)*(r21*r21)))+(((-1.0)*x8539*(r20*r20*r20*r20)))+(((-1.0)*x8539*(r21*r21*r21*r21))));
j4eval[0]=x8540;
j4eval[1]=IKsign(x8540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8542=(gconst35*r20);
IkReal x8543=(cj2*sj1);
IkReal x8544=(gconst36*r21);
IkReal x8545=(cj1*sj2);
CheckValue<IkReal> x8546 = IKatan2WithCheck(IkReal((((x8543*x8544))+((x8542*x8543))+((x8542*x8545))+((x8544*x8545)))),IkReal((((r22*x8545))+((r22*x8543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8546.valid){
continue;
}
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8542*x8544))+(((-1.0)*(x8542*x8542)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8544*x8544))))),-1);
if(!x8547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8546.value)+(((1.5707963267949)*(x8547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8548=IKcos(j4);
IkReal x8549=IKsin(j4);
IkReal x8550=(gconst36*r01);
IkReal x8551=(gconst35*r10);
IkReal x8552=(gconst35*r20);
IkReal x8553=(gconst36*r21);
IkReal x8554=((1.0)*sj1);
IkReal x8555=(gconst36*r11);
IkReal x8556=(gconst35*r00);
IkReal x8557=((1.0)*x8548);
IkReal x8558=((1.0)*x8549);
evalcond[0]=((((-1.0)*x8553*x8557))+(((-1.0)*x8552*x8557))+((r22*x8549)));
evalcond[1]=((((-1.0)*x8556*x8557))+((r02*x8549))+(((-1.0)*x8550*x8557)));
evalcond[2]=((1.0)+(((-1.0)*x8555*x8557))+(((-1.0)*x8551*x8557))+((r12*x8549)));
evalcond[3]=((((-1.0)*r12*x8557))+(((-1.0)*x8555*x8558))+(((-1.0)*x8551*x8558)));
evalcond[4]=((((-1.0)*x8556*x8558))+(((-1.0)*sj2*x8554))+((cj1*cj2))+(((-1.0)*x8550*x8558))+(((-1.0)*r02*x8557)));
evalcond[5]=((((-1.0)*r22*x8557))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8554))+(((-1.0)*x8553*x8558))+(((-1.0)*x8552*x8558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8559=(gconst36*r11);
IkReal x8560=(gconst35*r10);
CheckValue<IkReal> x8561 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8560))+(((-1.0)*x8559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8559*x8560))+(((-1.0)*(x8559*x8559)))+(((-1.0)*(x8560*x8560)))+(((-1.0)*(r12*r12))))),-1);
if(!x8562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8561.value)+(((1.5707963267949)*(x8562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8563=IKcos(j4);
IkReal x8564=IKsin(j4);
IkReal x8565=(gconst36*r01);
IkReal x8566=(gconst35*r10);
IkReal x8567=(gconst35*r20);
IkReal x8568=(gconst36*r21);
IkReal x8569=((1.0)*sj1);
IkReal x8570=(gconst36*r11);
IkReal x8571=(gconst35*r00);
IkReal x8572=((1.0)*x8563);
IkReal x8573=((1.0)*x8564);
evalcond[0]=((((-1.0)*x8568*x8572))+(((-1.0)*x8567*x8572))+((r22*x8564)));
evalcond[1]=((((-1.0)*x8571*x8572))+((r02*x8564))+(((-1.0)*x8565*x8572)));
evalcond[2]=((1.0)+(((-1.0)*x8570*x8572))+(((-1.0)*x8566*x8572))+((r12*x8564)));
evalcond[3]=((((-1.0)*x8570*x8573))+(((-1.0)*x8566*x8573))+(((-1.0)*r12*x8572)));
evalcond[4]=((((-1.0)*x8571*x8573))+(((-1.0)*r02*x8572))+(((-1.0)*x8565*x8573))+((cj1*cj2))+(((-1.0)*sj2*x8569)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x8568*x8573))+(((-1.0)*x8567*x8573))+(((-1.0)*cj2*x8569))+(((-1.0)*r22*x8572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8574=((1.0)*gconst36);
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8574))+(((-1.0)*gconst35*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
CheckValue<IkReal> x8576=IKPowWithIntegerCheck(IKsign((((gconst35*r01))+(((-1.0)*r00*x8574)))),-1);
if(!x8576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8575.value)+(((1.5707963267949)*(x8576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8577=IKcos(j4);
IkReal x8578=IKsin(j4);
IkReal x8579=(gconst36*r01);
IkReal x8580=(gconst35*r10);
IkReal x8581=(gconst35*r20);
IkReal x8582=(gconst36*r21);
IkReal x8583=((1.0)*sj1);
IkReal x8584=(gconst36*r11);
IkReal x8585=(gconst35*r00);
IkReal x8586=((1.0)*x8577);
IkReal x8587=((1.0)*x8578);
evalcond[0]=((((-1.0)*x8582*x8586))+((r22*x8578))+(((-1.0)*x8581*x8586)));
evalcond[1]=(((r02*x8578))+(((-1.0)*x8585*x8586))+(((-1.0)*x8579*x8586)));
evalcond[2]=((1.0)+(((-1.0)*x8580*x8586))+(((-1.0)*x8584*x8586))+((r12*x8578)));
evalcond[3]=((((-1.0)*x8580*x8587))+(((-1.0)*x8584*x8587))+(((-1.0)*r12*x8586)));
evalcond[4]=((((-1.0)*sj2*x8583))+(((-1.0)*x8585*x8587))+(((-1.0)*r02*x8586))+((cj1*cj2))+(((-1.0)*x8579*x8587)));
evalcond[5]=((((-1.0)*r22*x8586))+(((-1.0)*x8582*x8587))+(((-1.0)*cj2*x8583))+(((-1.0)*cj1*sj2))+(((-1.0)*x8581*x8587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8588=((-1.0)*r21);
CheckValue<IkReal> x8591 = IKatan2WithCheck(IkReal(r20),IkReal(x8588),IKFAST_ATAN2_MAGTHRESH);
if(!x8591.valid){
continue;
}
IkReal x8589=((-1.0)*(x8591.value));
IkReal x8590=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8589;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8589;
IkReal gconst35=((-1.0)*r20*x8590);
IkReal gconst36=(x8588*x8590);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8592=((-1.0)*r21);
CheckValue<IkReal> x8595 = IKatan2WithCheck(IkReal(r20),IkReal(x8592),IKFAST_ATAN2_MAGTHRESH);
if(!x8595.valid){
continue;
}
IkReal x8593=((-1.0)*(x8595.value));
IkReal x8594=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8593;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8593;
IkReal gconst35=((-1.0)*r20*x8594);
IkReal gconst36=(x8592*x8594);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8596=((-1.0)*r21);
CheckValue<IkReal> x8599 = IKatan2WithCheck(IkReal(r20),IkReal(x8596),IKFAST_ATAN2_MAGTHRESH);
if(!x8599.valid){
continue;
}
IkReal x8597=((-1.0)*(x8599.value));
IkReal x8598=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8597;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8597;
IkReal gconst35=((-1.0)*r20*x8598);
IkReal gconst36=(x8596*x8598);
IkReal x8600=((1.0)*(r22*r22));
CheckValue<IkReal> x8604=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8600))),-1);
if(!x8604.valid){
continue;
}
IkReal x8601=x8604.value;
IkReal x8602=((1.0)*x8601);
IkReal x8603=((((-1.0)*x8602*(r21*r21*r21*r21)))+(((-2.0)*x8601*(r20*r20)*(r21*r21)))+(((-1.0)*x8600))+(((-1.0)*x8602*(r20*r20*r20*r20))));
j4eval[0]=x8603;
j4eval[1]=IKsign(x8603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8605=(gconst35*r20);
IkReal x8606=(cj2*sj1);
IkReal x8607=(gconst36*r21);
IkReal x8608=(cj1*sj2);
CheckValue<IkReal> x8609=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8607*x8607)))+(((-2.0)*x8605*x8607))+(((-1.0)*(x8605*x8605)))+(((-1.0)*(r22*r22))))),-1);
if(!x8609.valid){
continue;
}
CheckValue<IkReal> x8610 = IKatan2WithCheck(IkReal((((x8606*x8607))+((x8607*x8608))+((x8605*x8606))+((x8605*x8608)))),IkReal((((r22*x8608))+((r22*x8606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8609.value)))+(x8610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8611=IKcos(j4);
IkReal x8612=IKsin(j4);
IkReal x8613=(gconst36*r01);
IkReal x8614=(gconst35*r10);
IkReal x8615=(gconst35*r20);
IkReal x8616=(gconst36*r21);
IkReal x8617=((1.0)*cj2);
IkReal x8618=(gconst36*r11);
IkReal x8619=(gconst35*r00);
IkReal x8620=((1.0)*x8611);
IkReal x8621=((1.0)*x8612);
evalcond[0]=(((r22*x8612))+(((-1.0)*x8615*x8620))+(((-1.0)*x8616*x8620)));
evalcond[1]=(((r02*x8612))+(((-1.0)*x8619*x8620))+(((-1.0)*x8613*x8620)));
evalcond[2]=((-1.0)+(((-1.0)*x8618*x8620))+((r12*x8612))+(((-1.0)*x8614*x8620)));
evalcond[3]=((((-1.0)*r12*x8620))+(((-1.0)*x8618*x8621))+(((-1.0)*x8614*x8621)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8617))+(((-1.0)*x8619*x8621))+(((-1.0)*x8613*x8621))+(((-1.0)*r02*x8620)));
evalcond[5]=((((-1.0)*sj1*x8617))+(((-1.0)*cj1*sj2))+(((-1.0)*x8615*x8621))+(((-1.0)*r22*x8620))+(((-1.0)*x8616*x8621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8622=(gconst36*r11);
IkReal x8623=(gconst35*r10);
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8623))+(((-1.0)*x8622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
CheckValue<IkReal> x8625=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x8622*x8623))+(x8623*x8623)+(x8622*x8622))),-1);
if(!x8625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8624.value)+(((1.5707963267949)*(x8625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8626=IKcos(j4);
IkReal x8627=IKsin(j4);
IkReal x8628=(gconst36*r01);
IkReal x8629=(gconst35*r10);
IkReal x8630=(gconst35*r20);
IkReal x8631=(gconst36*r21);
IkReal x8632=((1.0)*cj2);
IkReal x8633=(gconst36*r11);
IkReal x8634=(gconst35*r00);
IkReal x8635=((1.0)*x8626);
IkReal x8636=((1.0)*x8627);
evalcond[0]=((((-1.0)*x8630*x8635))+((r22*x8627))+(((-1.0)*x8631*x8635)));
evalcond[1]=((((-1.0)*x8634*x8635))+(((-1.0)*x8628*x8635))+((r02*x8627)));
evalcond[2]=((-1.0)+(((-1.0)*x8629*x8635))+((r12*x8627))+(((-1.0)*x8633*x8635)));
evalcond[3]=((((-1.0)*x8629*x8636))+(((-1.0)*r12*x8635))+(((-1.0)*x8633*x8636)));
evalcond[4]=((((-1.0)*x8634*x8636))+(((-1.0)*x8628*x8636))+(((-1.0)*cj1*x8632))+((sj1*sj2))+(((-1.0)*r02*x8635)));
evalcond[5]=((((-1.0)*sj1*x8632))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8635))+(((-1.0)*x8630*x8636))+(((-1.0)*x8631*x8636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8637=((1.0)*gconst35);
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r21))+(((-1.0)*r20*x8637)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
CheckValue<IkReal> x8639=IKPowWithIntegerCheck(IKsign((((gconst36*r00))+(((-1.0)*r01*x8637)))),-1);
if(!x8639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8638.value)+(((1.5707963267949)*(x8639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8640=IKcos(j4);
IkReal x8641=IKsin(j4);
IkReal x8642=(gconst36*r01);
IkReal x8643=(gconst35*r10);
IkReal x8644=(gconst35*r20);
IkReal x8645=(gconst36*r21);
IkReal x8646=((1.0)*cj2);
IkReal x8647=(gconst36*r11);
IkReal x8648=(gconst35*r00);
IkReal x8649=((1.0)*x8640);
IkReal x8650=((1.0)*x8641);
evalcond[0]=((((-1.0)*x8644*x8649))+(((-1.0)*x8645*x8649))+((r22*x8641)));
evalcond[1]=(((r02*x8641))+(((-1.0)*x8642*x8649))+(((-1.0)*x8648*x8649)));
evalcond[2]=((-1.0)+((r12*x8641))+(((-1.0)*x8643*x8649))+(((-1.0)*x8647*x8649)));
evalcond[3]=((((-1.0)*x8647*x8650))+(((-1.0)*r12*x8649))+(((-1.0)*x8643*x8650)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r02*x8649))+(((-1.0)*x8642*x8650))+(((-1.0)*cj1*x8646))+(((-1.0)*x8648*x8650)));
evalcond[5]=((((-1.0)*r22*x8649))+(((-1.0)*x8644*x8650))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8646))+(((-1.0)*x8645*x8650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8651=((-1.0)*r21);
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal(r20),IkReal(x8651),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
IkReal x8652=((-1.0)*(x8654.value));
IkReal x8653=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8652;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8652;
IkReal gconst35=((-1.0)*r20*x8653);
IkReal gconst36=(x8651*x8653);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8655=((-1.0)*r21);
CheckValue<IkReal> x8658 = IKatan2WithCheck(IkReal(r20),IkReal(x8655),IKFAST_ATAN2_MAGTHRESH);
if(!x8658.valid){
continue;
}
IkReal x8656=((-1.0)*(x8658.value));
IkReal x8657=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8656;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8656;
IkReal gconst35=((-1.0)*r20*x8657);
IkReal gconst36=(x8655*x8657);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8659=((-1.0)*r21);
CheckValue<IkReal> x8662 = IKatan2WithCheck(IkReal(r20),IkReal(x8659),IKFAST_ATAN2_MAGTHRESH);
if(!x8662.valid){
continue;
}
IkReal x8660=((-1.0)*(x8662.value));
IkReal x8661=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8660;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8660;
IkReal gconst35=((-1.0)*r20*x8661);
IkReal gconst36=(x8659*x8661);
IkReal x8663=((1.0)*(r22*r22));
CheckValue<IkReal> x8667=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8663))),-1);
if(!x8667.valid){
continue;
}
IkReal x8664=x8667.value;
IkReal x8665=((1.0)*x8664);
IkReal x8666=((((-2.0)*x8664*(r20*r20)*(r21*r21)))+(((-1.0)*x8665*(r20*r20*r20*r20)))+(((-1.0)*x8665*(r21*r21*r21*r21)))+(((-1.0)*x8663)));
j4eval[0]=x8666;
j4eval[1]=IKsign(x8666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8668=(gconst35*r20);
IkReal x8669=(cj2*sj1);
IkReal x8670=(gconst36*r21);
IkReal x8671=(cj1*sj2);
CheckValue<IkReal> x8672=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8670*x8670)))+(((-2.0)*x8668*x8670))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8668*x8668))))),-1);
if(!x8672.valid){
continue;
}
CheckValue<IkReal> x8673 = IKatan2WithCheck(IkReal((((x8669*x8670))+((x8670*x8671))+((x8668*x8669))+((x8668*x8671)))),IkReal((((r22*x8669))+((r22*x8671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8672.value)))+(x8673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8674=IKcos(j4);
IkReal x8675=IKsin(j4);
IkReal x8676=(gconst36*r01);
IkReal x8677=(gconst35*r10);
IkReal x8678=(gconst35*r20);
IkReal x8679=(gconst36*r21);
IkReal x8680=((1.0)*sj1);
IkReal x8681=(gconst36*r11);
IkReal x8682=(gconst35*r00);
IkReal x8683=((1.0)*x8674);
IkReal x8684=((1.0)*x8675);
evalcond[0]=((((-1.0)*x8678*x8683))+((r22*x8675))+(((-1.0)*x8679*x8683)));
evalcond[1]=((((-1.0)*x8681*x8683))+((r12*x8675))+(((-1.0)*x8677*x8683)));
evalcond[2]=((-1.0)+(((-1.0)*x8682*x8683))+(((-1.0)*x8676*x8683))+((r02*x8675)));
evalcond[3]=((((-1.0)*x8682*x8684))+(((-1.0)*r02*x8683))+(((-1.0)*x8676*x8684)));
evalcond[4]=((((-1.0)*x8681*x8684))+(((-1.0)*sj2*x8680))+(((-1.0)*r12*x8683))+(((-1.0)*x8677*x8684))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x8678*x8684))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8683))+(((-1.0)*cj2*x8680))+(((-1.0)*x8679*x8684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8685=(gconst36*r01);
IkReal x8686=(gconst35*r00);
CheckValue<IkReal> x8687=IKPowWithIntegerCheck(IKsign(((x8685*x8685)+(((2.0)*x8685*x8686))+(r02*r02)+(x8686*x8686))),-1);
if(!x8687.valid){
continue;
}
CheckValue<IkReal> x8688 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8685))+(((-1.0)*x8686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8687.value)))+(x8688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8689=IKcos(j4);
IkReal x8690=IKsin(j4);
IkReal x8691=(gconst36*r01);
IkReal x8692=(gconst35*r10);
IkReal x8693=(gconst35*r20);
IkReal x8694=(gconst36*r21);
IkReal x8695=((1.0)*sj1);
IkReal x8696=(gconst36*r11);
IkReal x8697=(gconst35*r00);
IkReal x8698=((1.0)*x8689);
IkReal x8699=((1.0)*x8690);
evalcond[0]=(((r22*x8690))+(((-1.0)*x8694*x8698))+(((-1.0)*x8693*x8698)));
evalcond[1]=((((-1.0)*x8696*x8698))+((r12*x8690))+(((-1.0)*x8692*x8698)));
evalcond[2]=((-1.0)+(((-1.0)*x8691*x8698))+((r02*x8690))+(((-1.0)*x8697*x8698)));
evalcond[3]=((((-1.0)*x8691*x8699))+(((-1.0)*r02*x8698))+(((-1.0)*x8697*x8699)));
evalcond[4]=((((-1.0)*x8696*x8699))+((cj1*cj2))+(((-1.0)*r12*x8698))+(((-1.0)*sj2*x8695))+(((-1.0)*x8692*x8699)));
evalcond[5]=((((-1.0)*cj2*x8695))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8698))+(((-1.0)*x8694*x8699))+(((-1.0)*x8693*x8699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8700=((1.0)*gconst36);
CheckValue<IkReal> x8701=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+(((-1.0)*r10*x8700)))),-1);
if(!x8701.valid){
continue;
}
CheckValue<IkReal> x8702 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r20))+(((-1.0)*r21*x8700)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8701.value)))+(x8702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8703=IKcos(j4);
IkReal x8704=IKsin(j4);
IkReal x8705=(gconst36*r01);
IkReal x8706=(gconst35*r10);
IkReal x8707=(gconst35*r20);
IkReal x8708=(gconst36*r21);
IkReal x8709=((1.0)*sj1);
IkReal x8710=(gconst36*r11);
IkReal x8711=(gconst35*r00);
IkReal x8712=((1.0)*x8703);
IkReal x8713=((1.0)*x8704);
evalcond[0]=((((-1.0)*x8707*x8712))+(((-1.0)*x8708*x8712))+((r22*x8704)));
evalcond[1]=((((-1.0)*x8706*x8712))+((r12*x8704))+(((-1.0)*x8710*x8712)));
evalcond[2]=((-1.0)+(((-1.0)*x8705*x8712))+(((-1.0)*x8711*x8712))+((r02*x8704)));
evalcond[3]=((((-1.0)*r02*x8712))+(((-1.0)*x8705*x8713))+(((-1.0)*x8711*x8713)));
evalcond[4]=((((-1.0)*x8706*x8713))+(((-1.0)*sj2*x8709))+(((-1.0)*r12*x8712))+(((-1.0)*x8710*x8713))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x8707*x8713))+(((-1.0)*cj2*x8709))+(((-1.0)*x8708*x8713))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8714=((-1.0)*r21);
CheckValue<IkReal> x8717 = IKatan2WithCheck(IkReal(r20),IkReal(x8714),IKFAST_ATAN2_MAGTHRESH);
if(!x8717.valid){
continue;
}
IkReal x8715=((-1.0)*(x8717.value));
IkReal x8716=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8715;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8715;
IkReal gconst35=((-1.0)*r20*x8716);
IkReal gconst36=(x8714*x8716);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8718=((-1.0)*r21);
CheckValue<IkReal> x8721 = IKatan2WithCheck(IkReal(r20),IkReal(x8718),IKFAST_ATAN2_MAGTHRESH);
if(!x8721.valid){
continue;
}
IkReal x8719=((-1.0)*(x8721.value));
IkReal x8720=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8719;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8719;
IkReal gconst35=((-1.0)*r20*x8720);
IkReal gconst36=(x8718*x8720);
IkReal x8722=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8726=IKPowWithIntegerCheck(x8722,-1);
if(!x8726.valid){
continue;
}
IkReal x8723=x8726.value;
IkReal x8724=((1.0)*x8723);
IkReal x8725=((((-1.0)*(r02*r02)))+(((-1.0)*x8724*(r01*r01)*(r21*r21)))+(((-1.0)*x8724*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8723)));
j4eval[0]=x8725;
j4eval[1]=r02;
j4eval[2]=x8722;
j4eval[3]=IKsign(x8725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8727=((-1.0)*r21);
CheckValue<IkReal> x8730 = IKatan2WithCheck(IkReal(r20),IkReal(x8727),IKFAST_ATAN2_MAGTHRESH);
if(!x8730.valid){
continue;
}
IkReal x8728=((-1.0)*(x8730.value));
IkReal x8729=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8728;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8728;
IkReal gconst35=((-1.0)*r20*x8729);
IkReal gconst36=(x8727*x8729);
IkReal x8731=((1.0)*(r22*r22));
CheckValue<IkReal> x8735=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8731))),-1);
if(!x8735.valid){
continue;
}
IkReal x8732=x8735.value;
IkReal x8733=((1.0)*x8732);
IkReal x8734=((((-1.0)*x8733*(r20*r20*r20*r20)))+(((-1.0)*x8733*(r21*r21*r21*r21)))+(((-1.0)*x8731))+(((-2.0)*x8732*(r20*r20)*(r21*r21))));
j4eval[0]=x8734;
j4eval[1]=IKsign(x8734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8736=(gconst35*r20);
IkReal x8737=(cj2*sj1);
IkReal x8738=(gconst36*r21);
IkReal x8739=(cj1*sj2);
CheckValue<IkReal> x8740 = IKatan2WithCheck(IkReal((((x8738*x8739))+((x8737*x8738))+((x8736*x8739))+((x8736*x8737)))),IkReal((((r22*x8739))+((r22*x8737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8740.valid){
continue;
}
CheckValue<IkReal> x8741=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8736*x8738))+(((-1.0)*(x8736*x8736)))+(((-1.0)*(x8738*x8738)))+(((-1.0)*(r22*r22))))),-1);
if(!x8741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8740.value)+(((1.5707963267949)*(x8741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8742=IKcos(j4);
IkReal x8743=IKsin(j4);
IkReal x8744=(gconst36*r01);
IkReal x8745=(gconst35*r10);
IkReal x8746=(gconst35*r20);
IkReal x8747=(gconst36*r21);
IkReal x8748=((1.0)*cj2);
IkReal x8749=(gconst36*r11);
IkReal x8750=(gconst35*r00);
IkReal x8751=((1.0)*x8742);
IkReal x8752=((1.0)*x8743);
evalcond[0]=((((-1.0)*x8746*x8751))+((r22*x8743))+(((-1.0)*x8747*x8751)));
evalcond[1]=(((r12*x8743))+(((-1.0)*x8749*x8751))+(((-1.0)*x8745*x8751)));
evalcond[2]=((1.0)+(((-1.0)*x8750*x8751))+((r02*x8743))+(((-1.0)*x8744*x8751)));
evalcond[3]=((((-1.0)*x8750*x8752))+(((-1.0)*r02*x8751))+(((-1.0)*x8744*x8752)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x8751))+(((-1.0)*cj1*x8748))+(((-1.0)*x8749*x8752))+(((-1.0)*x8745*x8752)));
evalcond[5]=((((-1.0)*x8746*x8752))+(((-1.0)*r22*x8751))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8748))+(((-1.0)*x8747*x8752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8753=(gconst36*r01);
IkReal x8754=(gconst35*r00);
CheckValue<IkReal> x8755 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8753))+(((-1.0)*x8754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8755.valid){
continue;
}
CheckValue<IkReal> x8756=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-2.0)*x8753*x8754))+(((-1.0)*(x8754*x8754)))+(((-1.0)*(x8753*x8753))))),-1);
if(!x8756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8755.value)+(((1.5707963267949)*(x8756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8757=IKcos(j4);
IkReal x8758=IKsin(j4);
IkReal x8759=(gconst36*r01);
IkReal x8760=(gconst35*r10);
IkReal x8761=(gconst35*r20);
IkReal x8762=(gconst36*r21);
IkReal x8763=((1.0)*cj2);
IkReal x8764=(gconst36*r11);
IkReal x8765=(gconst35*r00);
IkReal x8766=((1.0)*x8757);
IkReal x8767=((1.0)*x8758);
evalcond[0]=(((r22*x8758))+(((-1.0)*x8761*x8766))+(((-1.0)*x8762*x8766)));
evalcond[1]=((((-1.0)*x8760*x8766))+((r12*x8758))+(((-1.0)*x8764*x8766)));
evalcond[2]=((1.0)+((r02*x8758))+(((-1.0)*x8759*x8766))+(((-1.0)*x8765*x8766)));
evalcond[3]=((((-1.0)*x8759*x8767))+(((-1.0)*r02*x8766))+(((-1.0)*x8765*x8767)));
evalcond[4]=((((-1.0)*cj1*x8763))+((sj1*sj2))+(((-1.0)*x8760*x8767))+(((-1.0)*r12*x8766))+(((-1.0)*x8764*x8767)));
evalcond[5]=((((-1.0)*x8761*x8767))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8766))+(((-1.0)*sj1*x8763))+(((-1.0)*x8762*x8767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8768=((1.0)*gconst35);
CheckValue<IkReal> x8769 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8768))+(((-1.0)*gconst36*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8769.valid){
continue;
}
CheckValue<IkReal> x8770=IKPowWithIntegerCheck(IKsign((((gconst36*r10))+(((-1.0)*r11*x8768)))),-1);
if(!x8770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8769.value)+(((1.5707963267949)*(x8770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8771=IKcos(j4);
IkReal x8772=IKsin(j4);
IkReal x8773=(gconst36*r01);
IkReal x8774=(gconst35*r10);
IkReal x8775=(gconst35*r20);
IkReal x8776=(gconst36*r21);
IkReal x8777=((1.0)*cj2);
IkReal x8778=(gconst36*r11);
IkReal x8779=(gconst35*r00);
IkReal x8780=((1.0)*x8771);
IkReal x8781=((1.0)*x8772);
evalcond[0]=((((-1.0)*x8776*x8780))+(((-1.0)*x8775*x8780))+((r22*x8772)));
evalcond[1]=((((-1.0)*x8774*x8780))+(((-1.0)*x8778*x8780))+((r12*x8772)));
evalcond[2]=((1.0)+(((-1.0)*x8779*x8780))+(((-1.0)*x8773*x8780))+((r02*x8772)));
evalcond[3]=((((-1.0)*x8779*x8781))+(((-1.0)*x8773*x8781))+(((-1.0)*r02*x8780)));
evalcond[4]=((((-1.0)*x8774*x8781))+(((-1.0)*cj1*x8777))+(((-1.0)*x8778*x8781))+((sj1*sj2))+(((-1.0)*r12*x8780)));
evalcond[5]=((((-1.0)*x8776*x8781))+(((-1.0)*cj1*sj2))+(((-1.0)*x8775*x8781))+(((-1.0)*r22*x8780))+(((-1.0)*sj1*x8777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8782=((-1.0)*r21);
IkReal x8783=((-1.0)*px);
CheckValue<IkReal> x8785 = IKatan2WithCheck(IkReal(r20),IkReal(x8782),IKFAST_ATAN2_MAGTHRESH);
if(!x8785.valid){
continue;
}
IkReal x8784=((-1.0)*(x8785.value));
sj5=gconst35;
cj5=gconst36;
j5=x8784;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8783);
rxp1_1=(px*r21);
rxp1_2=(r11*x8783);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8784;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x8782;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8786=((-1.0)*r21);
IkReal x8787=((-1.0)*px);
CheckValue<IkReal> x8789 = IKatan2WithCheck(IkReal(r20),IkReal(x8786),IKFAST_ATAN2_MAGTHRESH);
if(!x8789.valid){
continue;
}
IkReal x8788=((-1.0)*(x8789.value));
sj5=gconst35;
cj5=gconst36;
j5=x8788;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8787);
rxp1_1=(px*r21);
rxp1_2=(r11*x8787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8788;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x8786;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8790=((-1.0)*r21);
IkReal x8791=((-1.0)*px);
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal(r20),IkReal(x8790),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
IkReal x8792=((-1.0)*(x8793.value));
sj5=gconst35;
cj5=gconst36;
j5=x8792;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8791);
rxp1_1=(px*r21);
rxp1_2=(r11*x8791);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8792;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x8790;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8796=IKPowWithIntegerCheck(((((-1.0)*gconst35*r10))+(((-1.0)*gconst36*r11))),-1);
if(!x8796.valid){
continue;
}
IkReal x8794=x8796.value;
IkReal x8795=(sj0*x8794);
sj4array[0]=(((sj1*sj2*x8795))+(((-1.0)*cj1*cj2*x8795)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8797=IKcos(j4);
IkReal x8798=IKsin(j4);
IkReal x8799=(gconst36*r21);
IkReal x8800=(gconst35*r20);
IkReal x8801=((1.0)*x8798);
IkReal x8802=((1.0)*x8797);
evalcond[0]=((-1.0)*r02*x8797);
evalcond[1]=((((-1.0)*sj0))+((r02*x8798)));
evalcond[2]=((((-1.0)*x8800*x8802))+(((-1.0)*x8799*x8802)));
evalcond[3]=((((-1.0)*gconst36*r11*x8802))+(((-1.0)*gconst35*r10*x8802)));
evalcond[4]=((((-1.0)*x8800*x8801))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x8799*x8801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8804=IKPowWithIntegerCheck(((((-1.0)*gconst35*r20))+(((-1.0)*gconst36*r21))),-1);
if(!x8804.valid){
continue;
}
IkReal x8803=x8804.value;
sj4array[0]=(((cj2*sj1*x8803))+((cj1*sj2*x8803)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8805=IKcos(j4);
IkReal x8806=IKsin(j4);
IkReal x8807=((1.0)*sj0);
IkReal x8808=((1.0)*gconst36);
IkReal x8809=((1.0)*gconst35*r10);
evalcond[0]=((-1.0)*r02*x8805);
evalcond[1]=(((r02*x8806))+(((-1.0)*x8807)));
evalcond[2]=((((-1.0)*gconst35*r20*x8805))+(((-1.0)*r21*x8805*x8808)));
evalcond[3]=((((-1.0)*x8805*x8809))+(((-1.0)*r11*x8805*x8808)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x8806*x8809))+(((-1.0)*sj1*sj2*x8807))+(((-1.0)*r11*x8806*x8808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8810=IKPowWithIntegerCheck(r02,-1);
if(!x8810.valid){
continue;
}
sj4array[0]=(sj0*(x8810.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8811=IKcos(j4);
IkReal x8812=IKsin(j4);
IkReal x8813=((1.0)*gconst35);
IkReal x8814=((1.0)*sj2);
IkReal x8815=((1.0)*gconst36*x8812);
IkReal x8816=((1.0)*gconst36*x8811);
evalcond[0]=((-1.0)*r02*x8811);
evalcond[1]=((((-1.0)*r20*x8811*x8813))+(((-1.0)*r21*x8816)));
evalcond[2]=((((-1.0)*r11*x8816))+(((-1.0)*r10*x8811*x8813)));
evalcond[3]=((((-1.0)*r21*x8815))+(((-1.0)*r20*x8812*x8813))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x8814)));
evalcond[4]=((((-1.0)*r11*x8815))+((cj1*cj2*sj0))+(((-1.0)*r10*x8812*x8813))+(((-1.0)*sj0*sj1*x8814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8817=(gconst35*r20);
IkReal x8818=(cj2*sj1);
IkReal x8819=(gconst36*r21);
IkReal x8820=(cj1*sj2);
CheckValue<IkReal> x8821=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x8819*x8819)))+(((-1.0)*(x8817*x8817)))+(((-2.0)*x8817*x8819)))),-1);
if(!x8821.valid){
continue;
}
CheckValue<IkReal> x8822 = IKatan2WithCheck(IkReal((((x8819*x8820))+((x8817*x8820))+((x8817*x8818))+((x8818*x8819)))),IkReal((((r22*x8820))+((r22*x8818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8821.value)))+(x8822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8823=IKcos(j4);
IkReal x8824=IKsin(j4);
IkReal x8825=(gconst36*r01);
IkReal x8826=(gconst35*r10);
IkReal x8827=(gconst35*r20);
IkReal x8828=(gconst36*r21);
IkReal x8829=((1.0)*sj1);
IkReal x8830=(cj1*cj2);
IkReal x8831=(gconst36*r11);
IkReal x8832=(gconst35*r00);
IkReal x8833=((1.0)*x8823);
IkReal x8834=((1.0)*x8824);
evalcond[0]=(((r22*x8824))+(((-1.0)*x8827*x8833))+(((-1.0)*x8828*x8833)));
evalcond[1]=(cj0+(((-1.0)*x8826*x8833))+((r12*x8824))+(((-1.0)*x8831*x8833)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8832*x8833))+((r02*x8824))+(((-1.0)*x8825*x8833)));
evalcond[3]=((((-1.0)*x8827*x8834))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8829))+(((-1.0)*x8828*x8834))+(((-1.0)*r22*x8833)));
evalcond[4]=((((-1.0)*x8832*x8834))+((cj0*x8830))+(((-1.0)*r02*x8833))+(((-1.0)*cj0*sj2*x8829))+(((-1.0)*x8825*x8834)));
evalcond[5]=((((-1.0)*x8826*x8834))+((sj0*x8830))+(((-1.0)*sj0*sj2*x8829))+(((-1.0)*x8831*x8834))+(((-1.0)*r12*x8833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8835=((1.0)*sj0);
CheckValue<IkReal> x8836=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst36*r10))+((gconst35*r11)))),-1);
if(!x8836.valid){
continue;
}
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r21*x8835))+(((-1.0)*gconst35*r20*x8835)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8836.value)))+(x8837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8838=IKcos(j4);
IkReal x8839=IKsin(j4);
IkReal x8840=(gconst36*r01);
IkReal x8841=(gconst35*r10);
IkReal x8842=(gconst35*r20);
IkReal x8843=(gconst36*r21);
IkReal x8844=((1.0)*sj1);
IkReal x8845=(cj1*cj2);
IkReal x8846=(gconst36*r11);
IkReal x8847=(gconst35*r00);
IkReal x8848=((1.0)*x8838);
IkReal x8849=((1.0)*x8839);
evalcond[0]=((((-1.0)*x8842*x8848))+(((-1.0)*x8843*x8848))+((r22*x8839)));
evalcond[1]=((((-1.0)*x8841*x8848))+cj0+((r12*x8839))+(((-1.0)*x8846*x8848)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8840*x8848))+((r02*x8839))+(((-1.0)*x8847*x8848)));
evalcond[3]=((((-1.0)*x8842*x8849))+(((-1.0)*cj1*sj2))+(((-1.0)*x8843*x8849))+(((-1.0)*cj2*x8844))+(((-1.0)*r22*x8848)));
evalcond[4]=(((cj0*x8845))+(((-1.0)*x8840*x8849))+(((-1.0)*r02*x8848))+(((-1.0)*cj0*sj2*x8844))+(((-1.0)*x8847*x8849)));
evalcond[5]=((((-1.0)*x8841*x8849))+((sj0*x8845))+(((-1.0)*sj0*sj2*x8844))+(((-1.0)*x8846*x8849))+(((-1.0)*r12*x8848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8850=((1.0)*gconst36);
CheckValue<IkReal> x8851 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x8850))+(((-1.0)*cj0*gconst35*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8851.valid){
continue;
}
CheckValue<IkReal> x8852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8850))+((gconst35*r01)))),-1);
if(!x8852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8851.value)+(((1.5707963267949)*(x8852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8853=IKcos(j4);
IkReal x8854=IKsin(j4);
IkReal x8855=(gconst36*r01);
IkReal x8856=(gconst35*r10);
IkReal x8857=(gconst35*r20);
IkReal x8858=(gconst36*r21);
IkReal x8859=((1.0)*sj1);
IkReal x8860=(cj1*cj2);
IkReal x8861=(gconst36*r11);
IkReal x8862=(gconst35*r00);
IkReal x8863=((1.0)*x8853);
IkReal x8864=((1.0)*x8854);
evalcond[0]=((((-1.0)*x8857*x8863))+((r22*x8854))+(((-1.0)*x8858*x8863)));
evalcond[1]=(cj0+(((-1.0)*x8861*x8863))+(((-1.0)*x8856*x8863))+((r12*x8854)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8855*x8863))+((r02*x8854))+(((-1.0)*x8862*x8863)));
evalcond[3]=((((-1.0)*cj2*x8859))+(((-1.0)*x8857*x8864))+(((-1.0)*r22*x8863))+(((-1.0)*cj1*sj2))+(((-1.0)*x8858*x8864)));
evalcond[4]=((((-1.0)*cj0*sj2*x8859))+(((-1.0)*x8855*x8864))+((cj0*x8860))+(((-1.0)*x8862*x8864))+(((-1.0)*r02*x8863)));
evalcond[5]=((((-1.0)*sj0*sj2*x8859))+((sj0*x8860))+(((-1.0)*x8861*x8864))+(((-1.0)*r12*x8863))+(((-1.0)*x8856*x8864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8865=((-1.0)*r21);
CheckValue<IkReal> x8868 = IKatan2WithCheck(IkReal(r20),IkReal(x8865),IKFAST_ATAN2_MAGTHRESH);
if(!x8868.valid){
continue;
}
IkReal x8866=((-1.0)*(x8868.value));
IkReal x8867=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8866;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst34=x8866;
IkReal gconst35=((-1.0)*r20*x8867);
IkReal gconst36=(x8865*x8867);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8869=((-1.0)*r21);
CheckValue<IkReal> x8872 = IKatan2WithCheck(IkReal(r20),IkReal(x8869),IKFAST_ATAN2_MAGTHRESH);
if(!x8872.valid){
continue;
}
IkReal x8870=((-1.0)*(x8872.value));
IkReal x8871=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8870;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst34=x8870;
IkReal gconst35=((-1.0)*r20*x8871);
IkReal gconst36=(x8869*x8871);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8873=((-1.0)*r21);
CheckValue<IkReal> x8876 = IKatan2WithCheck(IkReal(r20),IkReal(x8873),IKFAST_ATAN2_MAGTHRESH);
if(!x8876.valid){
continue;
}
IkReal x8874=((-1.0)*(x8876.value));
IkReal x8875=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8874;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst34=x8874;
IkReal gconst35=((-1.0)*r20*x8875);
IkReal gconst36=(x8873*x8875);
IkReal x8877=r22*r22;
CheckValue<IkReal> x8880=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8877))),-1);
if(!x8880.valid){
continue;
}
IkReal x8878=x8880.value;
IkReal x8879=(x8877+((x8878*(r21*r21*r21*r21)))+(((2.0)*x8878*(r20*r20)*(r21*r21)))+((x8878*(r20*r20*r20*r20))));
j4eval[0]=x8879;
j4eval[1]=IKsign(x8879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8881=((-1.0)*r21);
CheckValue<IkReal> x8884 = IKatan2WithCheck(IkReal(r20),IkReal(x8881),IKFAST_ATAN2_MAGTHRESH);
if(!x8884.valid){
continue;
}
IkReal x8882=((-1.0)*(x8884.value));
IkReal x8883=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8882;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8882;
IkReal gconst35=((-1.0)*r20*x8883);
IkReal gconst36=(x8881*x8883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8885=((-1.0)*r21);
CheckValue<IkReal> x8888 = IKatan2WithCheck(IkReal(r20),IkReal(x8885),IKFAST_ATAN2_MAGTHRESH);
if(!x8888.valid){
continue;
}
IkReal x8886=((-1.0)*(x8888.value));
IkReal x8887=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8886;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8886;
IkReal gconst35=((-1.0)*r20*x8887);
IkReal gconst36=(x8885*x8887);
IkReal x8889=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8893=IKPowWithIntegerCheck(x8889,-1);
if(!x8893.valid){
continue;
}
IkReal x8890=x8893.value;
IkReal x8891=((1.0)*x8890);
IkReal x8892=((((-2.0)*r10*r11*r20*r21*x8890))+(((-1.0)*x8891*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8891*(r10*r10)*(r20*r20))));
j4eval[0]=x8892;
j4eval[1]=r12;
j4eval[2]=x8889;
j4eval[3]=IKsign(x8892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8894=((-1.0)*r21);
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal(r20),IkReal(x8894),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
IkReal x8895=((-1.0)*(x8897.value));
IkReal x8896=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8895;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8895;
IkReal gconst35=((-1.0)*r20*x8896);
IkReal gconst36=(x8894*x8896);
IkReal x8898=r22*r22;
CheckValue<IkReal> x8904=IKPowWithIntegerCheck(((-1.0)+x8898),-1);
if(!x8904.valid){
continue;
}
IkReal x8899=x8904.value;
IkReal x8900=((1.0)*cj1*r12*sj2);
IkReal x8901=((1.0)*cj2*r12*sj1);
if((((1.0)+(((-1.0)*x8898)))) < -0.00001)
continue;
IkReal x8902=IKsqrt(((1.0)+(((-1.0)*x8898))));
IkReal x8903=(r22*x8899*x8902);
j4eval[0]=((IKabs(((((-1.0)*x8900*x8903))+(((-1.0)*x8901*x8903)))))+(IKabs(((((-1.0)*x8900))+(((-1.0)*x8901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8905=(cj1*sj2);
IkReal x8906=((1.0)*r12);
IkReal x8907=(gconst35*r10);
IkReal x8908=(cj2*sj1);
IkReal x8909=(gconst36*r11);
CheckValue<IkReal> x8910 = IKatan2WithCheck(IkReal(((((-1.0)*x8906*x8908))+(((-1.0)*x8905*x8906)))),IkReal((((x8905*x8909))+((x8905*x8907))+((x8908*x8909))+((x8907*x8908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8910.valid){
continue;
}
CheckValue<IkReal> x8911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r01))+((gconst36*r00)))),-1);
if(!x8911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8910.value)+(((1.5707963267949)*(x8911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8912=IKsin(j4);
IkReal x8913=IKcos(j4);
IkReal x8914=((1.0)*sj2);
IkReal x8915=(gconst35*r10);
IkReal x8916=(gconst36*r21);
IkReal x8917=(gconst36*r01);
IkReal x8918=(gconst36*r11);
IkReal x8919=((1.0)*x8913);
IkReal x8920=(gconst35*x8912);
evalcond[0]=(((r12*x8913))+((x8912*x8918))+((x8912*x8915)));
evalcond[1]=((((-1.0)*x8916*x8919))+((r22*x8912))+(((-1.0)*gconst35*r20*x8919)));
evalcond[2]=((((-1.0)*gconst35*r00*x8919))+((r02*x8912))+(((-1.0)*x8917*x8919)));
evalcond[3]=((1.0)+(((-1.0)*x8918*x8919))+(((-1.0)*x8915*x8919))+((r12*x8912)));
evalcond[4]=(((r02*x8913))+(((-1.0)*sj1*x8914))+((cj1*cj2))+((x8912*x8917))+((r00*x8920)));
evalcond[5]=(((r20*x8920))+((r22*x8913))+(((-1.0)*cj2*sj1))+((x8912*x8916))+(((-1.0)*cj1*x8914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8921=(gconst36*r11);
IkReal x8922=(gconst35*r10);
CheckValue<IkReal> x8923=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-2.0)*x8921*x8922))+(((-1.0)*(x8922*x8922)))+(((-1.0)*(x8921*x8921))))),-1);
if(!x8923.valid){
continue;
}
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8921))+(((-1.0)*x8922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8923.value)))+(x8924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8925=IKsin(j4);
IkReal x8926=IKcos(j4);
IkReal x8927=((1.0)*sj2);
IkReal x8928=(gconst35*r10);
IkReal x8929=(gconst36*r21);
IkReal x8930=(gconst36*r01);
IkReal x8931=(gconst36*r11);
IkReal x8932=((1.0)*x8926);
IkReal x8933=(gconst35*x8925);
evalcond[0]=(((x8925*x8928))+((x8925*x8931))+((r12*x8926)));
evalcond[1]=(((r22*x8925))+(((-1.0)*x8929*x8932))+(((-1.0)*gconst35*r20*x8932)));
evalcond[2]=(((r02*x8925))+(((-1.0)*gconst35*r00*x8932))+(((-1.0)*x8930*x8932)));
evalcond[3]=((1.0)+(((-1.0)*x8928*x8932))+((r12*x8925))+(((-1.0)*x8931*x8932)));
evalcond[4]=(((x8925*x8930))+((r02*x8926))+(((-1.0)*sj1*x8927))+((cj1*cj2))+((r00*x8933)));
evalcond[5]=(((x8925*x8929))+((r22*x8926))+(((-1.0)*cj2*sj1))+((r20*x8933))+(((-1.0)*cj1*x8927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8934=((1.0)*gconst36);
CheckValue<IkReal> x8935=IKPowWithIntegerCheck(IKsign((((gconst35*r01))+(((-1.0)*r00*x8934)))),-1);
if(!x8935.valid){
continue;
}
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r20))+(((-1.0)*r21*x8934)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8935.value)))+(x8936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8937=IKsin(j4);
IkReal x8938=IKcos(j4);
IkReal x8939=((1.0)*sj2);
IkReal x8940=(gconst35*r10);
IkReal x8941=(gconst36*r21);
IkReal x8942=(gconst36*r01);
IkReal x8943=(gconst36*r11);
IkReal x8944=((1.0)*x8938);
IkReal x8945=(gconst35*x8937);
evalcond[0]=(((r12*x8938))+((x8937*x8943))+((x8937*x8940)));
evalcond[1]=((((-1.0)*gconst35*r20*x8944))+(((-1.0)*x8941*x8944))+((r22*x8937)));
evalcond[2]=((((-1.0)*x8942*x8944))+(((-1.0)*gconst35*r00*x8944))+((r02*x8937)));
evalcond[3]=((1.0)+((r12*x8937))+(((-1.0)*x8940*x8944))+(((-1.0)*x8943*x8944)));
evalcond[4]=(((x8937*x8942))+((r00*x8945))+((cj1*cj2))+((r02*x8938))+(((-1.0)*sj1*x8939)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x8937*x8941))+((r20*x8945))+(((-1.0)*cj1*x8939))+((r22*x8938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8946=((-1.0)*r21);
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(r20),IkReal(x8946),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8947=((-1.0)*(x8949.value));
IkReal x8948=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8947;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8947;
IkReal gconst35=((-1.0)*r20*x8948);
IkReal gconst36=(x8946*x8948);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8950=((-1.0)*r21);
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(r20),IkReal(x8950),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8951=((-1.0)*(x8953.value));
IkReal x8952=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8951;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8951;
IkReal gconst35=((-1.0)*r20*x8952);
IkReal gconst36=(x8950*x8952);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8954=((-1.0)*r21);
CheckValue<IkReal> x8957 = IKatan2WithCheck(IkReal(r20),IkReal(x8954),IKFAST_ATAN2_MAGTHRESH);
if(!x8957.valid){
continue;
}
IkReal x8955=((-1.0)*(x8957.value));
IkReal x8956=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x8955;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8955;
IkReal gconst35=((-1.0)*r20*x8956);
IkReal gconst36=(x8954*x8956);
IkReal x8958=r22*r22;
CheckValue<IkReal> x8964=IKPowWithIntegerCheck(((-1.0)+x8958),-1);
if(!x8964.valid){
continue;
}
IkReal x8959=x8964.value;
IkReal x8960=((1.0)*cj1*r12*sj2);
IkReal x8961=((1.0)*cj2*r12*sj1);
if((((1.0)+(((-1.0)*x8958)))) < -0.00001)
continue;
IkReal x8962=IKsqrt(((1.0)+(((-1.0)*x8958))));
IkReal x8963=(r22*x8959*x8962);
j4eval[0]=((IKabs(((((-1.0)*x8961*x8963))+(((-1.0)*x8960*x8963)))))+(IKabs(((((-1.0)*x8960))+(((-1.0)*x8961))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8965=(cj1*sj2);
IkReal x8966=((1.0)*r12);
IkReal x8967=(gconst35*r10);
IkReal x8968=(cj2*sj1);
IkReal x8969=(gconst36*r11);
CheckValue<IkReal> x8970 = IKatan2WithCheck(IkReal(((((-1.0)*x8966*x8968))+(((-1.0)*x8965*x8966)))),IkReal((((x8968*x8969))+((x8967*x8968))+((x8965*x8969))+((x8965*x8967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8970.valid){
continue;
}
CheckValue<IkReal> x8971=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r01))+((gconst36*r00)))),-1);
if(!x8971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8970.value)+(((1.5707963267949)*(x8971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8972=IKsin(j4);
IkReal x8973=IKcos(j4);
IkReal x8974=((1.0)*cj1);
IkReal x8975=(gconst35*r10);
IkReal x8976=(gconst36*r21);
IkReal x8977=(gconst36*r01);
IkReal x8978=(gconst36*r11);
IkReal x8979=((1.0)*x8973);
IkReal x8980=(gconst35*x8972);
evalcond[0]=(((x8972*x8975))+((x8972*x8978))+((r12*x8973)));
evalcond[1]=((((-1.0)*gconst35*r20*x8979))+(((-1.0)*x8976*x8979))+((r22*x8972)));
evalcond[2]=((((-1.0)*x8977*x8979))+(((-1.0)*gconst35*r00*x8979))+((r02*x8972)));
evalcond[3]=((-1.0)+(((-1.0)*x8978*x8979))+((r12*x8972))+(((-1.0)*x8975*x8979)));
evalcond[4]=(((r00*x8980))+((x8972*x8977))+(((-1.0)*cj2*x8974))+((sj1*sj2))+((r02*x8973)));
evalcond[5]=(((x8972*x8976))+(((-1.0)*cj2*sj1))+((r20*x8980))+((r22*x8973))+(((-1.0)*sj2*x8974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8981=(gconst36*r11);
IkReal x8982=(gconst35*r10);
CheckValue<IkReal> x8983 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8982))+(((-1.0)*x8981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8983.valid){
continue;
}
CheckValue<IkReal> x8984=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x8981*x8982))+(x8981*x8981)+(x8982*x8982))),-1);
if(!x8984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8983.value)+(((1.5707963267949)*(x8984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8985=IKsin(j4);
IkReal x8986=IKcos(j4);
IkReal x8987=((1.0)*cj1);
IkReal x8988=(gconst35*r10);
IkReal x8989=(gconst36*r21);
IkReal x8990=(gconst36*r01);
IkReal x8991=(gconst36*r11);
IkReal x8992=((1.0)*x8986);
IkReal x8993=(gconst35*x8985);
evalcond[0]=(((x8985*x8991))+((x8985*x8988))+((r12*x8986)));
evalcond[1]=((((-1.0)*gconst35*r20*x8992))+((r22*x8985))+(((-1.0)*x8989*x8992)));
evalcond[2]=((((-1.0)*x8990*x8992))+((r02*x8985))+(((-1.0)*gconst35*r00*x8992)));
evalcond[3]=((-1.0)+(((-1.0)*x8991*x8992))+((r12*x8985))+(((-1.0)*x8988*x8992)));
evalcond[4]=(((x8985*x8990))+((r02*x8986))+((sj1*sj2))+((r00*x8993))+(((-1.0)*cj2*x8987)));
evalcond[5]=(((r22*x8986))+(((-1.0)*sj2*x8987))+((r20*x8993))+(((-1.0)*cj2*sj1))+((x8985*x8989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8994=((1.0)*gconst35);
CheckValue<IkReal> x8995=IKPowWithIntegerCheck(IKsign((((gconst36*r00))+(((-1.0)*r01*x8994)))),-1);
if(!x8995.valid){
continue;
}
CheckValue<IkReal> x8996 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r21))+(((-1.0)*r20*x8994)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8995.value)))+(x8996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8997=IKsin(j4);
IkReal x8998=IKcos(j4);
IkReal x8999=((1.0)*cj1);
IkReal x9000=(gconst35*r10);
IkReal x9001=(gconst36*r21);
IkReal x9002=(gconst36*r01);
IkReal x9003=(gconst36*r11);
IkReal x9004=((1.0)*x8998);
IkReal x9005=(gconst35*x8997);
evalcond[0]=(((r12*x8998))+((x8997*x9000))+((x8997*x9003)));
evalcond[1]=((((-1.0)*gconst35*r20*x9004))+(((-1.0)*x9001*x9004))+((r22*x8997)));
evalcond[2]=((((-1.0)*gconst35*r00*x9004))+(((-1.0)*x9002*x9004))+((r02*x8997)));
evalcond[3]=((-1.0)+((r12*x8997))+(((-1.0)*x9003*x9004))+(((-1.0)*x9000*x9004)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x8999))+((x8997*x9002))+((r02*x8998))+((r00*x9005)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x9005))+(((-1.0)*sj2*x8999))+((x8997*x9001))+((r22*x8998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9006=((-1.0)*r21);
CheckValue<IkReal> x9009 = IKatan2WithCheck(IkReal(r20),IkReal(x9006),IKFAST_ATAN2_MAGTHRESH);
if(!x9009.valid){
continue;
}
IkReal x9007=((-1.0)*(x9009.value));
IkReal x9008=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9007;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x9007;
IkReal gconst35=((-1.0)*r20*x9008);
IkReal gconst36=(x9006*x9008);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9010=((-1.0)*r21);
CheckValue<IkReal> x9013 = IKatan2WithCheck(IkReal(r20),IkReal(x9010),IKFAST_ATAN2_MAGTHRESH);
if(!x9013.valid){
continue;
}
IkReal x9011=((-1.0)*(x9013.value));
IkReal x9012=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9011;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x9011;
IkReal gconst35=((-1.0)*r20*x9012);
IkReal gconst36=(x9010*x9012);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9014=((-1.0)*r21);
CheckValue<IkReal> x9017 = IKatan2WithCheck(IkReal(r20),IkReal(x9014),IKFAST_ATAN2_MAGTHRESH);
if(!x9017.valid){
continue;
}
IkReal x9015=((-1.0)*(x9017.value));
IkReal x9016=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9015;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x9015;
IkReal gconst35=((-1.0)*r20*x9016);
IkReal gconst36=(x9014*x9016);
IkReal x9018=r22*r22;
IkReal x9019=((1.0)*r02);
IkReal x9020=(cj1*sj2);
IkReal x9021=(cj2*sj1);
CheckValue<IkReal> x9025=IKPowWithIntegerCheck(((-1.0)+x9018),-1);
if(!x9025.valid){
continue;
}
IkReal x9022=x9025.value;
if((((1.0)+(((-1.0)*x9018)))) < -0.00001)
continue;
IkReal x9023=IKsqrt(((1.0)+(((-1.0)*x9018))));
IkReal x9024=(r22*x9022*x9023);
j4eval[0]=((IKabs(((((-1.0)*x9019*x9021))+(((-1.0)*x9019*x9020)))))+(IKabs(((((-1.0)*x9019*x9021*x9024))+(((-1.0)*x9019*x9020*x9024))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9026=(gconst36*r01);
IkReal x9027=(cj1*sj2);
IkReal x9028=(cj2*sj1);
IkReal x9029=((1.0)*r02);
IkReal x9030=(gconst35*r00);
CheckValue<IkReal> x9031 = IKatan2WithCheck(IkReal(((((-1.0)*x9027*x9029))+(((-1.0)*x9028*x9029)))),IkReal((((x9027*x9030))+((x9026*x9027))+((x9026*x9028))+((x9028*x9030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9031.valid){
continue;
}
CheckValue<IkReal> x9032=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst36*r10))+((gconst35*r11)))),-1);
if(!x9032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9031.value)+(((1.5707963267949)*(x9032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9033=IKsin(j4);
IkReal x9034=IKcos(j4);
IkReal x9035=((1.0)*sj2);
IkReal x9036=(gconst35*r10);
IkReal x9037=(gconst36*r21);
IkReal x9038=(gconst36*r01);
IkReal x9039=(gconst36*r11);
IkReal x9040=((1.0)*x9034);
IkReal x9041=(gconst35*x9033);
evalcond[0]=(((r00*x9041))+((r02*x9034))+((x9033*x9038)));
evalcond[1]=((((-1.0)*x9037*x9040))+((r22*x9033))+(((-1.0)*gconst35*r20*x9040)));
evalcond[2]=((((-1.0)*x9039*x9040))+(((-1.0)*x9036*x9040))+((r12*x9033)));
evalcond[3]=((-1.0)+(((-1.0)*x9038*x9040))+(((-1.0)*gconst35*r00*x9040))+((r02*x9033)));
evalcond[4]=((((-1.0)*sj1*x9035))+((x9033*x9039))+((x9033*x9036))+((cj1*cj2))+((r12*x9034)));
evalcond[5]=(((r22*x9034))+(((-1.0)*cj2*sj1))+((r20*x9041))+(((-1.0)*cj1*x9035))+((x9033*x9037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9042=(gconst36*r01);
IkReal x9043=(gconst35*r00);
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9043))+(((-1.0)*x9042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
CheckValue<IkReal> x9045=IKPowWithIntegerCheck(IKsign(((x9043*x9043)+(x9042*x9042)+(((2.0)*x9042*x9043))+(r02*r02))),-1);
if(!x9045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9044.value)+(((1.5707963267949)*(x9045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9046=IKsin(j4);
IkReal x9047=IKcos(j4);
IkReal x9048=((1.0)*sj2);
IkReal x9049=(gconst35*r10);
IkReal x9050=(gconst36*r21);
IkReal x9051=(gconst36*r01);
IkReal x9052=(gconst36*r11);
IkReal x9053=((1.0)*x9047);
IkReal x9054=(gconst35*x9046);
evalcond[0]=(((r00*x9054))+((x9046*x9051))+((r02*x9047)));
evalcond[1]=((((-1.0)*gconst35*r20*x9053))+(((-1.0)*x9050*x9053))+((r22*x9046)));
evalcond[2]=((((-1.0)*x9049*x9053))+((r12*x9046))+(((-1.0)*x9052*x9053)));
evalcond[3]=((-1.0)+(((-1.0)*gconst35*r00*x9053))+((r02*x9046))+(((-1.0)*x9051*x9053)));
evalcond[4]=(((r12*x9047))+((x9046*x9052))+(((-1.0)*sj1*x9048))+((x9046*x9049))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x9054))+((x9046*x9050))+(((-1.0)*cj1*x9048))+((r22*x9047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9055=((1.0)*gconst36);
CheckValue<IkReal> x9056 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r20))+(((-1.0)*r21*x9055)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9056.valid){
continue;
}
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+(((-1.0)*r10*x9055)))),-1);
if(!x9057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9056.value)+(((1.5707963267949)*(x9057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9058=IKsin(j4);
IkReal x9059=IKcos(j4);
IkReal x9060=((1.0)*sj2);
IkReal x9061=(gconst35*r10);
IkReal x9062=(gconst36*r21);
IkReal x9063=(gconst36*r01);
IkReal x9064=(gconst36*r11);
IkReal x9065=((1.0)*x9059);
IkReal x9066=(gconst35*x9058);
evalcond[0]=(((r00*x9066))+((x9058*x9063))+((r02*x9059)));
evalcond[1]=((((-1.0)*gconst35*r20*x9065))+(((-1.0)*x9062*x9065))+((r22*x9058)));
evalcond[2]=((((-1.0)*x9064*x9065))+((r12*x9058))+(((-1.0)*x9061*x9065)));
evalcond[3]=((-1.0)+(((-1.0)*gconst35*r00*x9065))+(((-1.0)*x9063*x9065))+((r02*x9058)));
evalcond[4]=(((x9058*x9061))+((x9058*x9064))+(((-1.0)*sj1*x9060))+((r12*x9059))+((cj1*cj2)));
evalcond[5]=(((x9058*x9062))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9060))+((r22*x9059))+((r20*x9066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9067=((-1.0)*r21);
CheckValue<IkReal> x9070 = IKatan2WithCheck(IkReal(r20),IkReal(x9067),IKFAST_ATAN2_MAGTHRESH);
if(!x9070.valid){
continue;
}
IkReal x9068=((-1.0)*(x9070.value));
IkReal x9069=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9068;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x9068;
IkReal gconst35=((-1.0)*r20*x9069);
IkReal gconst36=(x9067*x9069);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9071=((-1.0)*r21);
CheckValue<IkReal> x9074 = IKatan2WithCheck(IkReal(r20),IkReal(x9071),IKFAST_ATAN2_MAGTHRESH);
if(!x9074.valid){
continue;
}
IkReal x9072=((-1.0)*(x9074.value));
IkReal x9073=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9072;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x9072;
IkReal gconst35=((-1.0)*r20*x9073);
IkReal gconst36=(x9071*x9073);
IkReal x9075=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9079=IKPowWithIntegerCheck(x9075,-1);
if(!x9079.valid){
continue;
}
IkReal x9076=x9079.value;
IkReal x9077=((1.0)*x9076);
IkReal x9078=((((-2.0)*r00*r01*r20*r21*x9076))+(((-1.0)*(r02*r02)))+(((-1.0)*x9077*(r01*r01)*(r21*r21)))+(((-1.0)*x9077*(r00*r00)*(r20*r20))));
j4eval[0]=x9078;
j4eval[1]=r02;
j4eval[2]=x9075;
j4eval[3]=IKsign(x9078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9080=((-1.0)*r21);
CheckValue<IkReal> x9083 = IKatan2WithCheck(IkReal(r20),IkReal(x9080),IKFAST_ATAN2_MAGTHRESH);
if(!x9083.valid){
continue;
}
IkReal x9081=((-1.0)*(x9083.value));
IkReal x9082=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9081;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x9081;
IkReal gconst35=((-1.0)*r20*x9082);
IkReal gconst36=(x9080*x9082);
IkReal x9084=r22*r22;
IkReal x9085=((1.0)*r02);
IkReal x9086=(cj1*sj2);
IkReal x9087=(cj2*sj1);
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(((-1.0)+x9084),-1);
if(!x9091.valid){
continue;
}
IkReal x9088=x9091.value;
if((((1.0)+(((-1.0)*x9084)))) < -0.00001)
continue;
IkReal x9089=IKsqrt(((1.0)+(((-1.0)*x9084))));
IkReal x9090=(r22*x9088*x9089);
j4eval[0]=((IKabs(((((-1.0)*x9085*x9086))+(((-1.0)*x9085*x9087)))))+(IKabs(((((-1.0)*x9085*x9087*x9090))+(((-1.0)*x9085*x9086*x9090))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9092=(gconst36*r01);
IkReal x9093=(cj1*sj2);
IkReal x9094=(cj2*sj1);
IkReal x9095=((1.0)*r02);
IkReal x9096=(gconst35*r00);
CheckValue<IkReal> x9097 = IKatan2WithCheck(IkReal(((((-1.0)*x9094*x9095))+(((-1.0)*x9093*x9095)))),IkReal((((x9094*x9096))+((x9092*x9093))+((x9092*x9094))+((x9093*x9096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9097.valid){
continue;
}
CheckValue<IkReal> x9098=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst36*r10))+((gconst35*r11)))),-1);
if(!x9098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9097.value)+(((1.5707963267949)*(x9098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9099=IKsin(j4);
IkReal x9100=IKcos(j4);
IkReal x9101=((1.0)*cj1);
IkReal x9102=(gconst35*r10);
IkReal x9103=(gconst36*r21);
IkReal x9104=(gconst36*r01);
IkReal x9105=(gconst36*r11);
IkReal x9106=((1.0)*x9100);
IkReal x9107=(gconst35*x9099);
evalcond[0]=(((r02*x9100))+((x9099*x9104))+((r00*x9107)));
evalcond[1]=((((-1.0)*gconst35*r20*x9106))+(((-1.0)*x9103*x9106))+((r22*x9099)));
evalcond[2]=(((r12*x9099))+(((-1.0)*x9102*x9106))+(((-1.0)*x9105*x9106)));
evalcond[3]=((1.0)+(((-1.0)*gconst35*r00*x9106))+((r02*x9099))+(((-1.0)*x9104*x9106)));
evalcond[4]=((((-1.0)*cj2*x9101))+((sj1*sj2))+((r12*x9100))+((x9099*x9102))+((x9099*x9105)));
evalcond[5]=((((-1.0)*sj2*x9101))+(((-1.0)*cj2*sj1))+((r22*x9100))+((x9099*x9103))+((r20*x9107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9108=(gconst36*r01);
IkReal x9109=(gconst35*r00);
CheckValue<IkReal> x9110=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9109*x9109)))+(((-1.0)*(r02*r02)))+(((-2.0)*x9108*x9109))+(((-1.0)*(x9108*x9108))))),-1);
if(!x9110.valid){
continue;
}
CheckValue<IkReal> x9111 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9109))+(((-1.0)*x9108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9110.value)))+(x9111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9112=IKsin(j4);
IkReal x9113=IKcos(j4);
IkReal x9114=((1.0)*cj1);
IkReal x9115=(gconst35*r10);
IkReal x9116=(gconst36*r21);
IkReal x9117=(gconst36*r01);
IkReal x9118=(gconst36*r11);
IkReal x9119=((1.0)*x9113);
IkReal x9120=(gconst35*x9112);
evalcond[0]=(((x9112*x9117))+((r00*x9120))+((r02*x9113)));
evalcond[1]=((((-1.0)*x9116*x9119))+((r22*x9112))+(((-1.0)*gconst35*r20*x9119)));
evalcond[2]=(((r12*x9112))+(((-1.0)*x9115*x9119))+(((-1.0)*x9118*x9119)));
evalcond[3]=((1.0)+(((-1.0)*gconst35*r00*x9119))+(((-1.0)*x9117*x9119))+((r02*x9112)));
evalcond[4]=(((r12*x9113))+((x9112*x9118))+((x9112*x9115))+((sj1*sj2))+(((-1.0)*cj2*x9114)));
evalcond[5]=(((x9112*x9116))+(((-1.0)*cj2*sj1))+((r20*x9120))+(((-1.0)*sj2*x9114))+((r22*x9113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9121=((1.0)*gconst35);
CheckValue<IkReal> x9122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9121))+((gconst36*r10)))),-1);
if(!x9122.valid){
continue;
}
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9121))+(((-1.0)*gconst36*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9122.value)))+(x9123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9124=IKsin(j4);
IkReal x9125=IKcos(j4);
IkReal x9126=((1.0)*cj1);
IkReal x9127=(gconst35*r10);
IkReal x9128=(gconst36*r21);
IkReal x9129=(gconst36*r01);
IkReal x9130=(gconst36*r11);
IkReal x9131=((1.0)*x9125);
IkReal x9132=(gconst35*x9124);
evalcond[0]=(((r02*x9125))+((x9124*x9129))+((r00*x9132)));
evalcond[1]=(((r22*x9124))+(((-1.0)*x9128*x9131))+(((-1.0)*gconst35*r20*x9131)));
evalcond[2]=((((-1.0)*x9127*x9131))+(((-1.0)*x9130*x9131))+((r12*x9124)));
evalcond[3]=((1.0)+((r02*x9124))+(((-1.0)*gconst35*r00*x9131))+(((-1.0)*x9129*x9131)));
evalcond[4]=(((sj1*sj2))+((x9124*x9127))+(((-1.0)*cj2*x9126))+((x9124*x9130))+((r12*x9125)));
evalcond[5]=(((r20*x9132))+((r22*x9125))+(((-1.0)*cj2*sj1))+((x9124*x9128))+(((-1.0)*sj2*x9126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9133=((-1.0)*r21);
IkReal x9134=((-1.0)*px);
CheckValue<IkReal> x9136 = IKatan2WithCheck(IkReal(r20),IkReal(x9133),IKFAST_ATAN2_MAGTHRESH);
if(!x9136.valid){
continue;
}
IkReal x9135=((-1.0)*(x9136.value));
sj5=gconst35;
cj5=gconst36;
j5=x9135;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9134);
rxp1_1=(px*r21);
rxp1_2=(r11*x9134);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9135;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x9133;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9137=((-1.0)*r21);
IkReal x9138=((-1.0)*px);
CheckValue<IkReal> x9140 = IKatan2WithCheck(IkReal(r20),IkReal(x9137),IKFAST_ATAN2_MAGTHRESH);
if(!x9140.valid){
continue;
}
IkReal x9139=((-1.0)*(x9140.value));
sj5=gconst35;
cj5=gconst36;
j5=x9139;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9138);
rxp1_1=(px*r21);
rxp1_2=(r11*x9138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9139;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x9137;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9141=((-1.0)*r21);
IkReal x9142=((-1.0)*px);
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal(r20),IkReal(x9141),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
IkReal x9143=((-1.0)*(x9144.value));
sj5=gconst35;
cj5=gconst36;
j5=x9143;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9142);
rxp1_1=(px*r21);
rxp1_2=(r11*x9142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9143;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x9141;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9147=IKPowWithIntegerCheck((((gconst36*r11))+((gconst35*r10))),-1);
if(!x9147.valid){
continue;
}
IkReal x9145=x9147.value;
IkReal x9146=(sj0*x9145);
sj4array[0]=(((sj1*sj2*x9146))+(((-1.0)*cj1*cj2*x9146)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9148=IKcos(j4);
IkReal x9149=IKsin(j4);
IkReal x9150=(gconst36*r21);
IkReal x9151=(gconst35*r20);
IkReal x9152=((1.0)*x9148);
evalcond[0]=(r02*x9148);
evalcond[1]=((((-1.0)*sj0))+((r02*x9149)));
evalcond[2]=((((-1.0)*x9150*x9152))+(((-1.0)*x9151*x9152)));
evalcond[3]=((((-1.0)*gconst36*r11*x9152))+(((-1.0)*gconst35*r10*x9152)));
evalcond[4]=((((-1.0)*cj2*sj1))+((x9149*x9150))+((x9149*x9151))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9154=IKPowWithIntegerCheck((((gconst36*r21))+((gconst35*r20))),-1);
if(!x9154.valid){
continue;
}
IkReal x9153=x9154.value;
sj4array[0]=(((cj1*sj2*x9153))+((cj2*sj1*x9153)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9155=IKcos(j4);
IkReal x9156=IKsin(j4);
IkReal x9157=((1.0)*sj0);
IkReal x9158=(gconst35*r10);
IkReal x9159=(gconst36*r11);
IkReal x9160=((1.0)*x9155);
evalcond[0]=(r02*x9155);
evalcond[1]=(((r02*x9156))+(((-1.0)*x9157)));
evalcond[2]=((((-1.0)*gconst36*r21*x9160))+(((-1.0)*gconst35*r20*x9160)));
evalcond[3]=((((-1.0)*x9159*x9160))+(((-1.0)*x9158*x9160)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x9157))+((x9156*x9159))+((x9156*x9158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9161=IKPowWithIntegerCheck(r02,-1);
if(!x9161.valid){
continue;
}
sj4array[0]=(sj0*(x9161.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9162=IKcos(j4);
IkReal x9163=IKsin(j4);
IkReal x9164=(gconst35*r10);
IkReal x9165=((1.0)*sj2);
IkReal x9166=(gconst36*r21);
IkReal x9167=(gconst35*r20);
IkReal x9168=(gconst36*r11);
IkReal x9169=((1.0)*x9162);
evalcond[0]=(r02*x9162);
evalcond[1]=((((-1.0)*x9167*x9169))+(((-1.0)*x9166*x9169)));
evalcond[2]=((((-1.0)*x9168*x9169))+(((-1.0)*x9164*x9169)));
evalcond[3]=((((-1.0)*cj1*x9165))+((x9163*x9166))+((x9163*x9167))+(((-1.0)*cj2*sj1)));
evalcond[4]=(((cj1*cj2*sj0))+((x9163*x9168))+((x9163*x9164))+(((-1.0)*sj0*sj1*x9165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9170=(gconst36*r21);
IkReal x9171=(cj1*sj2);
IkReal x9172=(gconst35*r20);
IkReal x9173=(cj2*sj1);
CheckValue<IkReal> x9174=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9170*x9170)+(x9172*x9172)+(((2.0)*x9170*x9172)))),-1);
if(!x9174.valid){
continue;
}
CheckValue<IkReal> x9175 = IKatan2WithCheck(IkReal((((x9170*x9173))+((x9170*x9171))+((x9172*x9173))+((x9171*x9172)))),IkReal((((r22*x9173))+((r22*x9171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9174.value)))+(x9175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9176=IKcos(j4);
IkReal x9177=IKsin(j4);
IkReal x9178=((1.0)*sj2);
IkReal x9179=(gconst35*r10);
IkReal x9180=(gconst36*r21);
IkReal x9181=(gconst36*r01);
IkReal x9182=(gconst36*r11);
IkReal x9183=(gconst35*r20);
IkReal x9184=(cj1*cj2);
IkReal x9185=(gconst35*r00);
IkReal x9186=((1.0)*x9176);
evalcond[0]=((((-1.0)*x9183*x9186))+((r22*x9177))+(((-1.0)*x9180*x9186)));
evalcond[1]=(cj0+(((-1.0)*x9182*x9186))+(((-1.0)*x9179*x9186))+((r12*x9177)));
evalcond[2]=(((r02*x9177))+(((-1.0)*sj0))+(((-1.0)*x9185*x9186))+(((-1.0)*x9181*x9186)));
evalcond[3]=((((-1.0)*cj2*sj1))+((x9177*x9180))+((x9177*x9183))+(((-1.0)*cj1*x9178))+((r22*x9176)));
evalcond[4]=(((r02*x9176))+((cj0*x9184))+((x9177*x9181))+((x9177*x9185))+(((-1.0)*cj0*sj1*x9178)));
evalcond[5]=(((x9177*x9179))+(((-1.0)*sj0*sj1*x9178))+((sj0*x9184))+((x9177*x9182))+((r12*x9176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9187=((1.0)*sj0);
CheckValue<IkReal> x9188=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst36*r10))+((gconst35*r11)))),-1);
if(!x9188.valid){
continue;
}
CheckValue<IkReal> x9189 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r21*x9187))+(((-1.0)*gconst35*r20*x9187)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x9189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9188.value)))+(x9189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9190=IKcos(j4);
IkReal x9191=IKsin(j4);
IkReal x9192=((1.0)*sj2);
IkReal x9193=(gconst35*r10);
IkReal x9194=(gconst36*r21);
IkReal x9195=(gconst36*r01);
IkReal x9196=(gconst36*r11);
IkReal x9197=(gconst35*r20);
IkReal x9198=(cj1*cj2);
IkReal x9199=(gconst35*r00);
IkReal x9200=((1.0)*x9190);
evalcond[0]=((((-1.0)*x9194*x9200))+(((-1.0)*x9197*x9200))+((r22*x9191)));
evalcond[1]=(cj0+((r12*x9191))+(((-1.0)*x9196*x9200))+(((-1.0)*x9193*x9200)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9199*x9200))+((r02*x9191))+(((-1.0)*x9195*x9200)));
evalcond[3]=((((-1.0)*cj1*x9192))+((r22*x9190))+(((-1.0)*cj2*sj1))+((x9191*x9197))+((x9191*x9194)));
evalcond[4]=((((-1.0)*cj0*sj1*x9192))+((r02*x9190))+((cj0*x9198))+((x9191*x9199))+((x9191*x9195)));
evalcond[5]=(((sj0*x9198))+(((-1.0)*sj0*sj1*x9192))+((r12*x9190))+((x9191*x9196))+((x9191*x9193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9201=((1.0)*gconst36);
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x9201))+(((-1.0)*cj0*gconst35*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
CheckValue<IkReal> x9203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9201))+((gconst35*r01)))),-1);
if(!x9203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9202.value)+(((1.5707963267949)*(x9203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9204=IKcos(j4);
IkReal x9205=IKsin(j4);
IkReal x9206=((1.0)*sj2);
IkReal x9207=(gconst35*r10);
IkReal x9208=(gconst36*r21);
IkReal x9209=(gconst36*r01);
IkReal x9210=(gconst36*r11);
IkReal x9211=(gconst35*r20);
IkReal x9212=(cj1*cj2);
IkReal x9213=(gconst35*r00);
IkReal x9214=((1.0)*x9204);
evalcond[0]=((((-1.0)*x9211*x9214))+(((-1.0)*x9208*x9214))+((r22*x9205)));
evalcond[1]=(cj0+(((-1.0)*x9210*x9214))+((r12*x9205))+(((-1.0)*x9207*x9214)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9213*x9214))+((r02*x9205))+(((-1.0)*x9209*x9214)));
evalcond[3]=(((x9205*x9208))+((r22*x9204))+((x9205*x9211))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9206)));
evalcond[4]=(((x9205*x9209))+(((-1.0)*cj0*sj1*x9206))+((x9205*x9213))+((r02*x9204))+((cj0*x9212)));
evalcond[5]=(((x9205*x9207))+((x9205*x9210))+((sj0*x9212))+((r12*x9204))+(((-1.0)*sj0*sj1*x9206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9215=((-1.0)*r21);
CheckValue<IkReal> x9218 = IKatan2WithCheck(IkReal(r20),IkReal(x9215),IKFAST_ATAN2_MAGTHRESH);
if(!x9218.valid){
continue;
}
IkReal x9216=((-1.0)*(x9218.value));
IkReal x9217=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9216;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x9216;
IkReal gconst35=((-1.0)*r20*x9217);
IkReal gconst36=(x9215*x9217);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9219=gconst35*gconst35;
IkReal x9220=gconst36*gconst36;
IkReal x9221=(r01*r11);
IkReal x9222=(r00*r10);
IkReal x9223=(gconst35*r11);
IkReal x9224=(cj3*gconst36);
IkReal x9225=((1.0)*sj3);
IkReal x9226=(r01*r10);
IkReal x9227=(gconst35*gconst36*sj3);
CheckValue<IkReal> x9228 = IKatan2WithCheck(IkReal((((sj3*x9220*x9226))+((x9222*x9227))+(((-1.0)*gconst35*gconst36*x9221*x9225))+(((-1.0)*r00*r11*x9219*x9225)))),IkReal((((gconst36*r02*r10*sj3))+(((-1.0)*r02*x9223*x9225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9228.valid){
continue;
}
CheckValue<IkReal> x9229=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((cj3*x9219*x9222))+((gconst35*x9224*x9226))+((r00*x9223*x9224))+((cj3*x9220*x9221)))),-1);
if(!x9229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9228.value)+(((1.5707963267949)*(x9229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9230=IKcos(j4);
IkReal x9231=IKsin(j4);
IkReal x9232=((1.0)*cj1);
IkReal x9233=(gconst35*r10);
IkReal x9234=((1.0)*sj3);
IkReal x9235=(gconst36*r20);
IkReal x9236=(cj3*gconst35);
IkReal x9237=(sj1*sj2);
IkReal x9238=(gconst36*r21);
IkReal x9239=(gconst35*sj3);
IkReal x9240=(gconst36*r01);
IkReal x9241=((1.0)*cj3);
IkReal x9242=(gconst36*r00);
IkReal x9243=(gconst36*r10);
IkReal x9244=(gconst36*r11);
IkReal x9245=(sj2*x9232);
IkReal x9246=((1.0)*cj2*sj1);
IkReal x9247=((1.0)*x9230);
IkReal x9248=(cj3*x9231);
IkReal x9249=(r20*x9231);
IkReal x9250=(cj3*x9230);
IkReal x9251=(r00*x9231);
IkReal x9252=(x9245+x9246);
evalcond[0]=((((-1.0)*gconst35*r20*x9247))+((r22*x9231))+(((-1.0)*x9238*x9247)));
evalcond[1]=(((r02*x9231))+(((-1.0)*gconst35*r00*x9247))+(((-1.0)*x9240*x9247)));
evalcond[2]=((1.0)+(((-1.0)*x9244*x9247))+(((-1.0)*x9233*x9247))+((r12*x9231)));
evalcond[3]=(((x9244*x9248))+((x9233*x9248))+((r12*x9250))+((r11*x9239))+(((-1.0)*x9234*x9243)));
evalcond[4]=((((-1.0)*x9241*x9243))+(((-1.0)*x9231*x9233*x9234))+(((-1.0)*r12*x9230*x9234))+(((-1.0)*x9231*x9234*x9244))+((r11*x9236)));
evalcond[5]=(((x9238*x9248))+x9237+((x9236*x9249))+((r22*x9250))+((r21*x9239))+(((-1.0)*cj2*x9232))+(((-1.0)*x9234*x9235)));
evalcond[6]=(((x9236*x9251))+((r02*x9250))+(((-1.0)*x9252))+((r01*x9239))+(((-1.0)*x9234*x9242))+((x9240*x9248)));
evalcond[7]=((((-1.0)*x9241*x9242))+(((-1.0)*gconst35*x9234*x9251))+(((-1.0)*x9231*x9234*x9240))+((cj1*cj2))+((r01*x9236))+(((-1.0)*r02*x9230*x9234))+(((-1.0)*x9237)));
evalcond[8]=((((-1.0)*x9235*x9241))+(((-1.0)*gconst35*x9234*x9249))+((r21*x9236))+(((-1.0)*x9252))+(((-1.0)*x9231*x9234*x9238))+(((-1.0)*r22*x9230*x9234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9253=((1.0)*gconst36);
CheckValue<IkReal> x9254 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r20))+(((-1.0)*r21*x9253)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9254.valid){
continue;
}
CheckValue<IkReal> x9255=IKPowWithIntegerCheck(IKsign((((gconst35*r01))+(((-1.0)*r00*x9253)))),-1);
if(!x9255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9254.value)+(((1.5707963267949)*(x9255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9256=IKcos(j4);
IkReal x9257=IKsin(j4);
IkReal x9258=((1.0)*cj1);
IkReal x9259=(gconst35*r10);
IkReal x9260=((1.0)*sj3);
IkReal x9261=(gconst36*r20);
IkReal x9262=(cj3*gconst35);
IkReal x9263=(sj1*sj2);
IkReal x9264=(gconst36*r21);
IkReal x9265=(gconst35*sj3);
IkReal x9266=(gconst36*r01);
IkReal x9267=((1.0)*cj3);
IkReal x9268=(gconst36*r00);
IkReal x9269=(gconst36*r10);
IkReal x9270=(gconst36*r11);
IkReal x9271=(sj2*x9258);
IkReal x9272=((1.0)*cj2*sj1);
IkReal x9273=((1.0)*x9256);
IkReal x9274=(cj3*x9257);
IkReal x9275=(r20*x9257);
IkReal x9276=(cj3*x9256);
IkReal x9277=(r00*x9257);
IkReal x9278=(x9271+x9272);
evalcond[0]=(((r22*x9257))+(((-1.0)*x9264*x9273))+(((-1.0)*gconst35*r20*x9273)));
evalcond[1]=(((r02*x9257))+(((-1.0)*x9266*x9273))+(((-1.0)*gconst35*r00*x9273)));
evalcond[2]=((1.0)+(((-1.0)*x9259*x9273))+((r12*x9257))+(((-1.0)*x9270*x9273)));
evalcond[3]=(((r12*x9276))+((x9259*x9274))+(((-1.0)*x9260*x9269))+((x9270*x9274))+((r11*x9265)));
evalcond[4]=((((-1.0)*r12*x9256*x9260))+(((-1.0)*x9257*x9260*x9270))+(((-1.0)*x9257*x9259*x9260))+(((-1.0)*x9267*x9269))+((r11*x9262)));
evalcond[5]=((((-1.0)*x9260*x9261))+x9263+((x9264*x9274))+((r21*x9265))+(((-1.0)*cj2*x9258))+((x9262*x9275))+((r22*x9276)));
evalcond[6]=(((r02*x9276))+(((-1.0)*x9260*x9268))+(((-1.0)*x9278))+((r01*x9265))+((x9266*x9274))+((x9262*x9277)));
evalcond[7]=((((-1.0)*r02*x9256*x9260))+(((-1.0)*x9257*x9260*x9266))+(((-1.0)*x9267*x9268))+((r01*x9262))+(((-1.0)*gconst35*x9260*x9277))+(((-1.0)*x9263))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x9257*x9260*x9264))+(((-1.0)*x9278))+(((-1.0)*x9261*x9267))+(((-1.0)*r22*x9256*x9260))+(((-1.0)*gconst35*x9260*x9275))+((r21*x9262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9279=((-1.0)*r21);
CheckValue<IkReal> x9282 = IKatan2WithCheck(IkReal(r20),IkReal(x9279),IKFAST_ATAN2_MAGTHRESH);
if(!x9282.valid){
continue;
}
IkReal x9280=((-1.0)*(x9282.value));
IkReal x9281=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9280;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x9280;
IkReal gconst35=((-1.0)*r20*x9281);
IkReal gconst36=(x9279*x9281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9283=gconst35*gconst35;
IkReal x9284=gconst36*gconst36;
IkReal x9285=(r01*r11);
IkReal x9286=(r00*r10);
IkReal x9287=(gconst35*r11);
IkReal x9288=(cj3*gconst36);
IkReal x9289=((1.0)*sj3);
IkReal x9290=(r01*r10);
IkReal x9291=(gconst35*gconst36*sj3);
CheckValue<IkReal> x9292=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((gconst35*x9288*x9290))+((cj3*x9284*x9285))+((r00*x9287*x9288))+((cj3*x9283*x9286)))),-1);
if(!x9292.valid){
continue;
}
CheckValue<IkReal> x9293 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*gconst36*x9285*x9289))+(((-1.0)*r00*r11*x9283*x9289))+((x9286*x9291))+((sj3*x9284*x9290)))),IkReal(((((-1.0)*r02*x9287*x9289))+((gconst36*r02*r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9292.value)))+(x9293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9294=IKcos(j4);
IkReal x9295=IKsin(j4);
IkReal x9296=(sj1*sj2);
IkReal x9297=((1.0)*cj1);
IkReal x9298=(gconst35*r10);
IkReal x9299=((1.0)*sj3);
IkReal x9300=(gconst36*r20);
IkReal x9301=(cj3*gconst35);
IkReal x9302=(gconst36*r21);
IkReal x9303=(gconst35*sj3);
IkReal x9304=(gconst36*r01);
IkReal x9305=(cj2*sj1);
IkReal x9306=((1.0)*cj3);
IkReal x9307=(gconst36*r00);
IkReal x9308=(gconst36*r10);
IkReal x9309=(gconst36*r11);
IkReal x9310=(cj2*x9297);
IkReal x9311=((1.0)*x9294);
IkReal x9312=(cj3*x9295);
IkReal x9313=(r20*x9295);
IkReal x9314=(cj3*x9294);
IkReal x9315=(r00*x9295);
evalcond[0]=(((r22*x9295))+(((-1.0)*x9302*x9311))+(((-1.0)*gconst35*r20*x9311)));
evalcond[1]=((((-1.0)*gconst35*r00*x9311))+((r02*x9295))+(((-1.0)*x9304*x9311)));
evalcond[2]=((-1.0)+(((-1.0)*x9309*x9311))+(((-1.0)*x9298*x9311))+((r12*x9295)));
evalcond[3]=(((x9309*x9312))+(((-1.0)*x9299*x9308))+((x9298*x9312))+((r12*x9314))+((r11*x9303)));
evalcond[4]=((((-1.0)*x9306*x9308))+(((-1.0)*x9295*x9299*x9309))+(((-1.0)*r12*x9294*x9299))+(((-1.0)*x9295*x9298*x9299))+((r11*x9301)));
evalcond[5]=(((r02*x9314))+x9305+((x9301*x9315))+((cj1*sj2))+((r01*x9303))+((x9304*x9312))+(((-1.0)*x9299*x9307)));
evalcond[6]=(((r22*x9314))+((x9301*x9313))+((r21*x9303))+x9296+(((-1.0)*x9299*x9300))+(((-1.0)*x9310))+((x9302*x9312)));
evalcond[7]=((((-1.0)*x9306*x9307))+(((-1.0)*gconst35*x9299*x9315))+x9296+(((-1.0)*x9295*x9299*x9304))+((r01*x9301))+(((-1.0)*x9310))+(((-1.0)*r02*x9294*x9299)));
evalcond[8]=((((-1.0)*sj2*x9297))+(((-1.0)*x9300*x9306))+((r21*x9301))+(((-1.0)*gconst35*x9299*x9313))+(((-1.0)*x9295*x9299*x9302))+(((-1.0)*x9305))+(((-1.0)*r22*x9294*x9299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9316=((1.0)*gconst35);
CheckValue<IkReal> x9317=IKPowWithIntegerCheck(IKsign((((gconst36*r00))+(((-1.0)*r01*x9316)))),-1);
if(!x9317.valid){
continue;
}
CheckValue<IkReal> x9318 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9316))+(((-1.0)*gconst36*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9317.value)))+(x9318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9319=IKcos(j4);
IkReal x9320=IKsin(j4);
IkReal x9321=(sj1*sj2);
IkReal x9322=((1.0)*cj1);
IkReal x9323=(gconst35*r10);
IkReal x9324=((1.0)*sj3);
IkReal x9325=(gconst36*r20);
IkReal x9326=(cj3*gconst35);
IkReal x9327=(gconst36*r21);
IkReal x9328=(gconst35*sj3);
IkReal x9329=(gconst36*r01);
IkReal x9330=(cj2*sj1);
IkReal x9331=((1.0)*cj3);
IkReal x9332=(gconst36*r00);
IkReal x9333=(gconst36*r10);
IkReal x9334=(gconst36*r11);
IkReal x9335=(cj2*x9322);
IkReal x9336=((1.0)*x9319);
IkReal x9337=(cj3*x9320);
IkReal x9338=(r20*x9320);
IkReal x9339=(cj3*x9319);
IkReal x9340=(r00*x9320);
evalcond[0]=((((-1.0)*x9327*x9336))+(((-1.0)*gconst35*r20*x9336))+((r22*x9320)));
evalcond[1]=((((-1.0)*x9329*x9336))+((r02*x9320))+(((-1.0)*gconst35*r00*x9336)));
evalcond[2]=((-1.0)+((r12*x9320))+(((-1.0)*x9334*x9336))+(((-1.0)*x9323*x9336)));
evalcond[3]=((((-1.0)*x9324*x9333))+((r11*x9328))+((r12*x9339))+((x9334*x9337))+((x9323*x9337)));
evalcond[4]=(((r11*x9326))+(((-1.0)*x9320*x9323*x9324))+(((-1.0)*x9320*x9324*x9334))+(((-1.0)*r12*x9319*x9324))+(((-1.0)*x9331*x9333)));
evalcond[5]=((((-1.0)*x9324*x9332))+((x9329*x9337))+x9330+((cj1*sj2))+((r01*x9328))+((r02*x9339))+((x9326*x9340)));
evalcond[6]=(((x9327*x9337))+((x9326*x9338))+x9321+(((-1.0)*x9324*x9325))+((r22*x9339))+(((-1.0)*x9335))+((r21*x9328)));
evalcond[7]=(x9321+((r01*x9326))+(((-1.0)*gconst35*x9324*x9340))+(((-1.0)*r02*x9319*x9324))+(((-1.0)*x9320*x9324*x9329))+(((-1.0)*x9331*x9332))+(((-1.0)*x9335)));
evalcond[8]=((((-1.0)*sj2*x9322))+(((-1.0)*gconst35*x9324*x9338))+(((-1.0)*r22*x9319*x9324))+(((-1.0)*x9325*x9331))+(((-1.0)*x9330))+(((-1.0)*x9320*x9324*x9327))+((r21*x9326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9341=((-1.0)*r21);
CheckValue<IkReal> x9344 = IKatan2WithCheck(IkReal(r20),IkReal(x9341),IKFAST_ATAN2_MAGTHRESH);
if(!x9344.valid){
continue;
}
IkReal x9342=((-1.0)*(x9344.value));
IkReal x9343=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9342;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x9342;
IkReal gconst35=((-1.0)*r20*x9343);
IkReal gconst36=(x9341*x9343);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9345=gconst35*gconst35;
IkReal x9346=gconst36*gconst36;
IkReal x9347=((1.0)*r01);
IkReal x9348=(r00*r10);
IkReal x9349=(r12*sj3);
IkReal x9350=(cj3*r11);
IkReal x9351=(gconst35*gconst36);
IkReal x9352=(sj3*x9351);
CheckValue<IkReal> x9353 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj3*x9345*x9347))+((r00*r11*sj3*x9346))+(((-1.0)*r11*x9347*x9352))+((x9348*x9352)))),IkReal((((gconst36*r00*x9349))+(((-1.0)*gconst35*x9347*x9349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9353.valid){
continue;
}
CheckValue<IkReal> x9354=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r01*x9346*x9350))+((cj3*r01*r10*x9351))+((cj3*x9345*x9348))+((r00*x9350*x9351)))),-1);
if(!x9354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9353.value)+(((1.5707963267949)*(x9354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9355=IKcos(j4);
IkReal x9356=IKsin(j4);
IkReal x9357=((1.0)*gconst36);
IkReal x9358=(cj3*gconst35);
IkReal x9359=(gconst35*sj3);
IkReal x9360=((1.0)*cj2);
IkReal x9361=((1.0)*sj2);
IkReal x9362=(gconst35*r20);
IkReal x9363=(gconst35*r00);
IkReal x9364=(cj1*x9361);
IkReal x9365=(sj1*x9360);
IkReal x9366=((1.0)*gconst35*r10);
IkReal x9367=(sj3*x9356);
IkReal x9368=(r22*x9355);
IkReal x9369=((1.0)*x9355);
IkReal x9370=(cj3*x9355);
IkReal x9371=(cj3*gconst36*x9356);
IkReal x9372=(x9364+x9365);
evalcond[0]=((((-1.0)*x9362*x9369))+(((-1.0)*r21*x9355*x9357))+((r22*x9356)));
evalcond[1]=((((-1.0)*x9355*x9366))+((r12*x9356))+(((-1.0)*r11*x9355*x9357)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x9355*x9357))+((r02*x9356))+(((-1.0)*x9363*x9369)));
evalcond[3]=(((r02*x9370))+((r01*x9359))+(((-1.0)*r00*sj3*x9357))+((r01*x9371))+((r00*x9356*x9358)));
evalcond[4]=((((-1.0)*cj3*r00*x9357))+((r01*x9358))+(((-1.0)*r00*x9356*x9359))+(((-1.0)*r01*x9357*x9367))+(((-1.0)*r02*sj3*x9369)));
evalcond[5]=((((-1.0)*cj1*x9360))+(((-1.0)*r20*sj3*x9357))+((r21*x9371))+((cj3*x9368))+((sj1*sj2))+((r21*x9359))+((r20*x9356*x9358)));
evalcond[6]=(((r10*x9356*x9358))+((r11*x9359))+((r11*x9371))+(((-1.0)*x9372))+(((-1.0)*r10*sj3*x9357))+((r12*x9370)));
evalcond[7]=(((r11*x9358))+(((-1.0)*sj1*x9361))+(((-1.0)*r12*sj3*x9369))+(((-1.0)*cj3*r10*x9357))+((cj1*cj2))+(((-1.0)*r10*x9356*x9359))+(((-1.0)*r11*x9357*x9367)));
evalcond[8]=((((-1.0)*r21*x9357*x9367))+(((-1.0)*cj3*r20*x9357))+(((-1.0)*r20*x9356*x9359))+(((-1.0)*x9372))+((r21*x9358))+(((-1.0)*sj3*x9368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9373=((1.0)*gconst36);
CheckValue<IkReal> x9374=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+(((-1.0)*r10*x9373)))),-1);
if(!x9374.valid){
continue;
}
CheckValue<IkReal> x9375 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r20))+(((-1.0)*r21*x9373)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9374.value)))+(x9375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9376=IKcos(j4);
IkReal x9377=IKsin(j4);
IkReal x9378=((1.0)*gconst36);
IkReal x9379=(cj3*gconst35);
IkReal x9380=(gconst35*sj3);
IkReal x9381=((1.0)*cj2);
IkReal x9382=((1.0)*sj2);
IkReal x9383=(gconst35*r20);
IkReal x9384=(gconst35*r00);
IkReal x9385=(cj1*x9382);
IkReal x9386=(sj1*x9381);
IkReal x9387=((1.0)*gconst35*r10);
IkReal x9388=(sj3*x9377);
IkReal x9389=(r22*x9376);
IkReal x9390=((1.0)*x9376);
IkReal x9391=(cj3*x9376);
IkReal x9392=(cj3*gconst36*x9377);
IkReal x9393=(x9385+x9386);
evalcond[0]=((((-1.0)*x9383*x9390))+((r22*x9377))+(((-1.0)*r21*x9376*x9378)));
evalcond[1]=((((-1.0)*x9376*x9387))+(((-1.0)*r11*x9376*x9378))+((r12*x9377)));
evalcond[2]=((-1.0)+((r02*x9377))+(((-1.0)*r01*x9376*x9378))+(((-1.0)*x9384*x9390)));
evalcond[3]=(((r01*x9392))+(((-1.0)*r00*sj3*x9378))+((r02*x9391))+((r01*x9380))+((r00*x9377*x9379)));
evalcond[4]=((((-1.0)*cj3*r00*x9378))+(((-1.0)*r02*sj3*x9390))+(((-1.0)*r00*x9377*x9380))+(((-1.0)*r01*x9378*x9388))+((r01*x9379)));
evalcond[5]=(((cj3*x9389))+((r20*x9377*x9379))+((r21*x9380))+(((-1.0)*cj1*x9381))+(((-1.0)*r20*sj3*x9378))+((sj1*sj2))+((r21*x9392)));
evalcond[6]=(((r12*x9391))+((r11*x9392))+((r11*x9380))+((r10*x9377*x9379))+(((-1.0)*x9393))+(((-1.0)*r10*sj3*x9378)));
evalcond[7]=((((-1.0)*cj3*r10*x9378))+((r11*x9379))+(((-1.0)*sj1*x9382))+(((-1.0)*r10*x9377*x9380))+((cj1*cj2))+(((-1.0)*r12*sj3*x9390))+(((-1.0)*r11*x9378*x9388)));
evalcond[8]=((((-1.0)*r20*x9377*x9380))+((r21*x9379))+(((-1.0)*cj3*r20*x9378))+(((-1.0)*r21*x9378*x9388))+(((-1.0)*sj3*x9389))+(((-1.0)*x9393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9394=((-1.0)*r21);
CheckValue<IkReal> x9397 = IKatan2WithCheck(IkReal(r20),IkReal(x9394),IKFAST_ATAN2_MAGTHRESH);
if(!x9397.valid){
continue;
}
IkReal x9395=((-1.0)*(x9397.value));
IkReal x9396=x8482;
sj5=gconst35;
cj5=gconst36;
j5=x9395;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x9395;
IkReal gconst35=((-1.0)*r20*x9396);
IkReal gconst36=(x9394*x9396);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9398=gconst35*gconst35;
IkReal x9399=gconst36*gconst36;
IkReal x9400=((1.0)*r01);
IkReal x9401=(r00*r10);
IkReal x9402=(r12*sj3);
IkReal x9403=(cj3*r11);
IkReal x9404=(gconst35*gconst36);
IkReal x9405=(sj3*x9404);
CheckValue<IkReal> x9406 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9400*x9405))+(((-1.0)*r10*sj3*x9398*x9400))+((x9401*x9405))+((r00*r11*sj3*x9399)))),IkReal((((gconst36*r00*x9402))+(((-1.0)*gconst35*x9400*x9402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9406.valid){
continue;
}
CheckValue<IkReal> x9407=IKPowWithIntegerCheck(IKsign((((cj3*r01*r10*x9404))+((cj3*r02*r12))+((r00*x9403*x9404))+((cj3*x9398*x9401))+((r01*x9399*x9403)))),-1);
if(!x9407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9406.value)+(((1.5707963267949)*(x9407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9408=IKcos(j4);
IkReal x9409=IKsin(j4);
IkReal x9410=(sj1*sj2);
IkReal x9411=((1.0)*cj1);
IkReal x9412=(gconst35*r10);
IkReal x9413=((1.0)*gconst36);
IkReal x9414=(r20*sj3);
IkReal x9415=(cj3*gconst35);
IkReal x9416=(gconst36*r21);
IkReal x9417=(gconst35*sj3);
IkReal x9418=(gconst36*r01);
IkReal x9419=(cj2*sj1);
IkReal x9420=(gconst36*r11);
IkReal x9421=(cj2*x9411);
IkReal x9422=((1.0)*x9408);
IkReal x9423=(cj3*x9409);
IkReal x9424=(cj3*x9408);
IkReal x9425=(sj3*x9409);
IkReal x9426=(r00*x9409);
evalcond[0]=(((r22*x9409))+(((-1.0)*r21*x9408*x9413))+(((-1.0)*gconst35*r20*x9422)));
evalcond[1]=(((r12*x9409))+(((-1.0)*x9412*x9422))+(((-1.0)*r11*x9408*x9413)));
evalcond[2]=((1.0)+(((-1.0)*gconst35*r00*x9422))+(((-1.0)*r01*x9408*x9413))+((r02*x9409)));
evalcond[3]=(((x9418*x9423))+((r01*x9417))+((x9415*x9426))+((r02*x9424))+(((-1.0)*r00*sj3*x9413)));
evalcond[4]=((((-1.0)*cj3*r00*x9413))+((r01*x9415))+(((-1.0)*r01*x9413*x9425))+(((-1.0)*x9417*x9426))+(((-1.0)*r02*sj3*x9422)));
evalcond[5]=(((r12*x9424))+((cj1*sj2))+((x9420*x9423))+((r11*x9417))+(((-1.0)*r10*sj3*x9413))+x9419+((x9412*x9423)));
evalcond[6]=(((r21*x9417))+((x9416*x9423))+x9410+((r20*x9409*x9415))+(((-1.0)*x9421))+(((-1.0)*x9413*x9414))+((r22*x9424)));
evalcond[7]=((((-1.0)*r12*sj3*x9422))+(((-1.0)*x9412*x9425))+((r11*x9415))+x9410+(((-1.0)*x9421))+(((-1.0)*r11*x9413*x9425))+(((-1.0)*cj3*r10*x9413)));
evalcond[8]=((((-1.0)*cj3*r20*x9413))+(((-1.0)*r22*sj3*x9422))+((r21*x9415))+(((-1.0)*gconst35*x9409*x9414))+(((-1.0)*r21*x9413*x9425))+(((-1.0)*sj2*x9411))+(((-1.0)*x9419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9427=((1.0)*gconst35);
CheckValue<IkReal> x9428 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r21))+(((-1.0)*r20*x9427)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9428.valid){
continue;
}
CheckValue<IkReal> x9429=IKPowWithIntegerCheck(IKsign((((gconst36*r10))+(((-1.0)*r11*x9427)))),-1);
if(!x9429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9428.value)+(((1.5707963267949)*(x9429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9430=IKcos(j4);
IkReal x9431=IKsin(j4);
IkReal x9432=(sj1*sj2);
IkReal x9433=((1.0)*cj1);
IkReal x9434=(gconst35*r10);
IkReal x9435=((1.0)*gconst36);
IkReal x9436=(r20*sj3);
IkReal x9437=(cj3*gconst35);
IkReal x9438=(gconst36*r21);
IkReal x9439=(gconst35*sj3);
IkReal x9440=(gconst36*r01);
IkReal x9441=(cj2*sj1);
IkReal x9442=(gconst36*r11);
IkReal x9443=(cj2*x9433);
IkReal x9444=((1.0)*x9430);
IkReal x9445=(cj3*x9431);
IkReal x9446=(cj3*x9430);
IkReal x9447=(sj3*x9431);
IkReal x9448=(r00*x9431);
evalcond[0]=(((r22*x9431))+(((-1.0)*r21*x9430*x9435))+(((-1.0)*gconst35*r20*x9444)));
evalcond[1]=((((-1.0)*x9434*x9444))+((r12*x9431))+(((-1.0)*r11*x9430*x9435)));
evalcond[2]=((1.0)+(((-1.0)*gconst35*r00*x9444))+((r02*x9431))+(((-1.0)*r01*x9430*x9435)));
evalcond[3]=(((x9437*x9448))+((x9440*x9445))+(((-1.0)*r00*sj3*x9435))+((r01*x9439))+((r02*x9446)));
evalcond[4]=((((-1.0)*r02*sj3*x9444))+(((-1.0)*x9439*x9448))+(((-1.0)*cj3*r00*x9435))+((r01*x9437))+(((-1.0)*r01*x9435*x9447)));
evalcond[5]=(((r11*x9439))+((cj1*sj2))+(((-1.0)*r10*sj3*x9435))+((x9434*x9445))+((r12*x9446))+x9441+((x9442*x9445)));
evalcond[6]=(((r22*x9446))+(((-1.0)*x9443))+((r21*x9439))+(((-1.0)*x9435*x9436))+x9432+((x9438*x9445))+((r20*x9431*x9437)));
evalcond[7]=(((r11*x9437))+(((-1.0)*r11*x9435*x9447))+(((-1.0)*cj3*r10*x9435))+(((-1.0)*x9434*x9447))+(((-1.0)*r12*sj3*x9444))+(((-1.0)*x9443))+x9432);
evalcond[8]=((((-1.0)*sj2*x9433))+(((-1.0)*r22*sj3*x9444))+(((-1.0)*x9441))+(((-1.0)*gconst35*x9431*x9436))+((r21*x9437))+(((-1.0)*cj3*r20*x9435))+(((-1.0)*r21*x9435*x9447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9449=((-1.0)*r21);
IkReal x9450=((-1.0)*px);
CheckValue<IkReal> x9452 = IKatan2WithCheck(IkReal(r20),IkReal(x9449),IKFAST_ATAN2_MAGTHRESH);
if(!x9452.valid){
continue;
}
IkReal x9451=((-1.0)*(x9452.value));
sj5=gconst35;
cj5=gconst36;
j5=x9451;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9450);
rxp1_1=(px*r21);
rxp1_2=(r11*x9450);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9451;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x9449;
j4eval[0]=r02;
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9453=((-1.0)*r21);
IkReal x9454=((-1.0)*px);
CheckValue<IkReal> x9456 = IKatan2WithCheck(IkReal(r20),IkReal(x9453),IKFAST_ATAN2_MAGTHRESH);
if(!x9456.valid){
continue;
}
IkReal x9455=((-1.0)*(x9456.value));
sj5=gconst35;
cj5=gconst36;
j5=x9455;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9454);
rxp1_1=(px*r21);
rxp1_2=(r11*x9454);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9455;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x9453;
IkReal x9457=((1.0)*cj3);
j4eval[0]=((((-1.0)*x9457*(r21*r21)))+(((-1.0)*x9457))+((cj3*(r10*r10))));
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9458=((-1.0)*r21);
IkReal x9459=((-1.0)*px);
CheckValue<IkReal> x9461 = IKatan2WithCheck(IkReal(r20),IkReal(x9458),IKFAST_ATAN2_MAGTHRESH);
if(!x9461.valid){
continue;
}
IkReal x9460=((-1.0)*(x9461.value));
sj5=gconst35;
cj5=gconst36;
j5=x9460;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9459);
rxp1_1=(px*r21);
rxp1_2=(r11*x9459);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9460;
IkReal gconst35=((-1.0)*r20);
IkReal gconst36=x9458;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9463=IKPowWithIntegerCheck(r02,-1);
if(!x9463.valid){
continue;
}
IkReal x9462=x9463.value;
CheckValue<IkReal> x9464=IKPowWithIntegerCheck(cj3,-1);
if(!x9464.valid){
continue;
}
if( IKabs((sj0*x9462)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9462*(x9464.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x9462))+IKsqr((x9462*(x9464.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x9462), (x9462*(x9464.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9465=IKcos(j4);
IkReal x9466=IKsin(j4);
IkReal x9467=((1.0)*gconst36);
IkReal x9468=(cj3*gconst35);
IkReal x9469=(sj1*sj2);
IkReal x9470=(gconst35*sj3);
IkReal x9471=((1.0)*cj2);
IkReal x9472=(gconst35*r20);
IkReal x9473=((1.0)*sj0);
IkReal x9474=(cj1*cj2);
IkReal x9475=((1.0)*gconst35*r10);
IkReal x9476=(sj3*x9466);
IkReal x9477=((1.0)*x9465);
IkReal x9478=((1.0)*cj1*sj2);
IkReal x9479=(cj3*gconst36*x9466);
evalcond[0]=((((-1.0)*x9473))+((r02*x9466)));
evalcond[1]=((((-1.0)*r21*x9465*x9467))+(((-1.0)*x9472*x9477)));
evalcond[2]=(cj0+(((-1.0)*r11*x9465*x9467))+(((-1.0)*x9465*x9475)));
evalcond[3]=(((cj3*r02*x9465))+(((-1.0)*cj0*x9478))+(((-1.0)*cj0*sj1*x9471)));
evalcond[4]=((((-1.0)*r02*sj3*x9477))+((cj0*x9474))+(((-1.0)*cj0*x9469)));
evalcond[5]=((((-1.0)*cj1*x9471))+((r21*x9479))+((r21*x9470))+(((-1.0)*r20*sj3*x9467))+((r20*x9466*x9468))+x9469);
evalcond[6]=((((-1.0)*x9478))+(((-1.0)*r20*x9466*x9470))+(((-1.0)*cj3*r20*x9467))+((r21*x9468))+(((-1.0)*sj1*x9471))+(((-1.0)*r21*x9467*x9476)));
evalcond[7]=(((r10*x9466*x9468))+(((-1.0)*sj0*sj1*x9471))+(((-1.0)*cj1*sj2*x9473))+((r11*x9470))+((r11*x9479))+(((-1.0)*r10*sj3*x9467)));
evalcond[8]=(((sj0*x9474))+(((-1.0)*cj3*r10*x9467))+(((-1.0)*x9469*x9473))+((r11*x9468))+(((-1.0)*r11*x9467*x9476))+(((-1.0)*r10*x9466*x9470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9480=((1.0)*gconst35);
CheckValue<IkReal> x9481=IKPowWithIntegerCheck((((cj3*gconst36*r21))+((cj3*gconst35*r20))),-1);
if(!x9481.valid){
continue;
}
CheckValue<IkReal> x9482=IKPowWithIntegerCheck(((((-1.0)*gconst36*r11))+(((-1.0)*r10*x9480))),-1);
if(!x9482.valid){
continue;
}
if( IKabs(((x9481.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x9480))+((gconst36*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9482.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9481.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x9480))+((gconst36*r20*sj3))))))+IKsqr(((-1.0)*cj0*(x9482.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9481.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x9480))+((gconst36*r20*sj3))))), ((-1.0)*cj0*(x9482.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9483=IKcos(j4);
IkReal x9484=IKsin(j4);
IkReal x9485=((1.0)*gconst36);
IkReal x9486=(cj3*gconst35);
IkReal x9487=(sj1*sj2);
IkReal x9488=(gconst35*sj3);
IkReal x9489=((1.0)*cj2);
IkReal x9490=(gconst35*r20);
IkReal x9491=((1.0)*sj0);
IkReal x9492=(cj1*cj2);
IkReal x9493=((1.0)*gconst35*r10);
IkReal x9494=(sj3*x9484);
IkReal x9495=((1.0)*x9483);
IkReal x9496=((1.0)*cj1*sj2);
IkReal x9497=(cj3*gconst36*x9484);
evalcond[0]=(((r02*x9484))+(((-1.0)*x9491)));
evalcond[1]=((((-1.0)*r21*x9483*x9485))+(((-1.0)*x9490*x9495)));
evalcond[2]=(cj0+(((-1.0)*x9483*x9493))+(((-1.0)*r11*x9483*x9485)));
evalcond[3]=(((cj3*r02*x9483))+(((-1.0)*cj0*sj1*x9489))+(((-1.0)*cj0*x9496)));
evalcond[4]=(((cj0*x9492))+(((-1.0)*cj0*x9487))+(((-1.0)*r02*sj3*x9495)));
evalcond[5]=(((r21*x9488))+(((-1.0)*r20*sj3*x9485))+((r20*x9484*x9486))+x9487+((r21*x9497))+(((-1.0)*cj1*x9489)));
evalcond[6]=((((-1.0)*r20*x9484*x9488))+((r21*x9486))+(((-1.0)*sj1*x9489))+(((-1.0)*cj3*r20*x9485))+(((-1.0)*r21*x9485*x9494))+(((-1.0)*x9496)));
evalcond[7]=((((-1.0)*r10*sj3*x9485))+((r11*x9488))+(((-1.0)*cj1*sj2*x9491))+((r10*x9484*x9486))+((r11*x9497))+(((-1.0)*sj0*sj1*x9489)));
evalcond[8]=((((-1.0)*cj3*r10*x9485))+((r11*x9486))+((sj0*x9492))+(((-1.0)*x9487*x9491))+(((-1.0)*r10*x9484*x9488))+(((-1.0)*r11*x9485*x9494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9498=IKPowWithIntegerCheck(r02,-1);
if(!x9498.valid){
continue;
}
CheckValue<IkReal> x9499=IKPowWithIntegerCheck(((((-1.0)*gconst35*r10))+(((-1.0)*gconst36*r11))),-1);
if(!x9499.valid){
continue;
}
if( IKabs((sj0*(x9498.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9499.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x9498.value)))+IKsqr(((-1.0)*cj0*(x9499.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x9498.value)), ((-1.0)*cj0*(x9499.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9500=IKcos(j4);
IkReal x9501=IKsin(j4);
IkReal x9502=((1.0)*gconst36);
IkReal x9503=(cj3*gconst35);
IkReal x9504=(sj1*sj2);
IkReal x9505=(gconst35*sj3);
IkReal x9506=((1.0)*cj2);
IkReal x9507=(gconst35*r20);
IkReal x9508=((1.0)*sj0);
IkReal x9509=(cj1*cj2);
IkReal x9510=((1.0)*gconst35*r10);
IkReal x9511=(sj3*x9501);
IkReal x9512=((1.0)*x9500);
IkReal x9513=((1.0)*cj1*sj2);
IkReal x9514=(cj3*gconst36*x9501);
evalcond[0]=(((r02*x9501))+(((-1.0)*x9508)));
evalcond[1]=((((-1.0)*x9507*x9512))+(((-1.0)*r21*x9500*x9502)));
evalcond[2]=(cj0+(((-1.0)*r11*x9500*x9502))+(((-1.0)*x9500*x9510)));
evalcond[3]=(((cj3*r02*x9500))+(((-1.0)*cj0*sj1*x9506))+(((-1.0)*cj0*x9513)));
evalcond[4]=(((cj0*x9509))+(((-1.0)*cj0*x9504))+(((-1.0)*r02*sj3*x9512)));
evalcond[5]=(((r21*x9514))+((r21*x9505))+x9504+(((-1.0)*r20*sj3*x9502))+(((-1.0)*cj1*x9506))+((r20*x9501*x9503)));
evalcond[6]=(((r21*x9503))+(((-1.0)*r20*x9501*x9505))+(((-1.0)*x9513))+(((-1.0)*cj3*r20*x9502))+(((-1.0)*r21*x9502*x9511))+(((-1.0)*sj1*x9506)));
evalcond[7]=((((-1.0)*sj0*sj1*x9506))+(((-1.0)*r10*sj3*x9502))+((r11*x9505))+(((-1.0)*cj1*sj2*x9508))+((r10*x9501*x9503))+((r11*x9514)));
evalcond[8]=((((-1.0)*r11*x9502*x9511))+(((-1.0)*x9504*x9508))+((r11*x9503))+(((-1.0)*r10*x9501*x9505))+((sj0*x9509))+(((-1.0)*cj3*r10*x9502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9515=gconst36*gconst36;
IkReal x9516=r21*r21;
IkReal x9517=gconst35*gconst35;
IkReal x9518=r20*r20;
IkReal x9519=(r22*sj3);
IkReal x9520=((1.0)*gconst35);
IkReal x9521=(gconst36*r20);
IkReal x9522=(gconst36*sj3);
IkReal x9523=(sj1*sj2);
IkReal x9524=((1.0)*r21);
IkReal x9525=(r20*sj3);
IkReal x9526=(cj1*cj2);
CheckValue<IkReal> x9527=IKPowWithIntegerCheck(IKsign((((cj3*x9517*x9518))+(((2.0)*cj3*gconst35*r21*x9521))+((cj3*(r22*r22)))+((cj3*x9515*x9516)))),-1);
if(!x9527.valid){
continue;
}
CheckValue<IkReal> x9528 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9520*x9523))+((r21*x9515*x9525))+(((-1.0)*x9516*x9520*x9522))+((gconst36*r21*x9526))+((gconst35*x9518*x9522))+(((-1.0)*x9517*x9524*x9525))+(((-1.0)*gconst36*x9523*x9524))+((gconst35*r20*x9526)))),IkReal((((x9519*x9521))+(((-1.0)*r21*x9519*x9520))+((r22*x9526))+(((-1.0)*r22*x9523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9527.value)))+(x9528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9529=IKcos(j4);
IkReal x9530=IKsin(j4);
IkReal x9531=((1.0)*gconst36);
IkReal x9532=(cj3*gconst35);
IkReal x9533=(sj1*sj2);
IkReal x9534=((1.0)*sj0);
IkReal x9535=(gconst35*sj3);
IkReal x9536=((1.0)*cj2);
IkReal x9537=(gconst35*r20);
IkReal x9538=(gconst35*r00);
IkReal x9539=(cj1*cj2);
IkReal x9540=((1.0)*gconst35*r10);
IkReal x9541=(sj3*x9530);
IkReal x9542=((1.0)*x9529);
IkReal x9543=(cj3*x9529);
IkReal x9544=((1.0)*cj1*sj2);
IkReal x9545=(cj3*gconst36*x9530);
evalcond[0]=((((-1.0)*x9537*x9542))+((r22*x9530))+(((-1.0)*r21*x9529*x9531)));
evalcond[1]=(cj0+(((-1.0)*r11*x9529*x9531))+((r12*x9530))+(((-1.0)*x9529*x9540)));
evalcond[2]=(((r02*x9530))+(((-1.0)*x9534))+(((-1.0)*x9538*x9542))+(((-1.0)*r01*x9529*x9531)));
evalcond[3]=(((r22*x9543))+((r21*x9545))+x9533+(((-1.0)*r20*sj3*x9531))+((r20*x9530*x9532))+(((-1.0)*cj1*x9536))+((r21*x9535)));
evalcond[4]=((((-1.0)*cj0*x9544))+(((-1.0)*cj0*sj1*x9536))+((r02*x9543))+((r00*x9530*x9532))+((r01*x9545))+((r01*x9535))+(((-1.0)*r00*sj3*x9531)));
evalcond[5]=(((r12*x9543))+(((-1.0)*r10*sj3*x9531))+((r11*x9535))+((r11*x9545))+(((-1.0)*cj2*sj1*x9534))+(((-1.0)*cj1*sj2*x9534))+((r10*x9530*x9532)));
evalcond[6]=((((-1.0)*r20*x9530*x9535))+(((-1.0)*cj3*r20*x9531))+(((-1.0)*r22*sj3*x9542))+(((-1.0)*r21*x9531*x9541))+(((-1.0)*sj1*x9536))+((r21*x9532))+(((-1.0)*x9544)));
evalcond[7]=((((-1.0)*r02*sj3*x9542))+(((-1.0)*r01*x9531*x9541))+(((-1.0)*cj3*r00*x9531))+((cj0*x9539))+(((-1.0)*r00*x9530*x9535))+((r01*x9532))+(((-1.0)*cj0*x9533)));
evalcond[8]=((((-1.0)*cj3*r10*x9531))+((r11*x9532))+(((-1.0)*r10*x9530*x9535))+(((-1.0)*x9533*x9534))+((sj0*x9539))+(((-1.0)*r11*x9531*x9541))+(((-1.0)*r12*sj3*x9542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9546=((1.0)*sj0);
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r21*x9546))+(((-1.0)*gconst35*r20*x9546)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
CheckValue<IkReal> x9548=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst36*r10))+((gconst35*r11)))),-1);
if(!x9548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9547.value)+(((1.5707963267949)*(x9548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9549=IKcos(j4);
IkReal x9550=IKsin(j4);
IkReal x9551=((1.0)*gconst36);
IkReal x9552=(cj3*gconst35);
IkReal x9553=(sj1*sj2);
IkReal x9554=((1.0)*sj0);
IkReal x9555=(gconst35*sj3);
IkReal x9556=((1.0)*cj2);
IkReal x9557=(gconst35*r20);
IkReal x9558=(gconst35*r00);
IkReal x9559=(cj1*cj2);
IkReal x9560=((1.0)*gconst35*r10);
IkReal x9561=(sj3*x9550);
IkReal x9562=((1.0)*x9549);
IkReal x9563=(cj3*x9549);
IkReal x9564=((1.0)*cj1*sj2);
IkReal x9565=(cj3*gconst36*x9550);
evalcond[0]=((((-1.0)*x9557*x9562))+(((-1.0)*r21*x9549*x9551))+((r22*x9550)));
evalcond[1]=(cj0+((r12*x9550))+(((-1.0)*r11*x9549*x9551))+(((-1.0)*x9549*x9560)));
evalcond[2]=(((r02*x9550))+(((-1.0)*x9558*x9562))+(((-1.0)*x9554))+(((-1.0)*r01*x9549*x9551)));
evalcond[3]=(((r21*x9565))+((r22*x9563))+((r20*x9550*x9552))+x9553+(((-1.0)*cj1*x9556))+((r21*x9555))+(((-1.0)*r20*sj3*x9551)));
evalcond[4]=((((-1.0)*r00*sj3*x9551))+((r01*x9565))+(((-1.0)*cj0*x9564))+((r01*x9555))+((r02*x9563))+(((-1.0)*cj0*sj1*x9556))+((r00*x9550*x9552)));
evalcond[5]=(((r11*x9555))+((r10*x9550*x9552))+((r12*x9563))+((r11*x9565))+(((-1.0)*r10*sj3*x9551))+(((-1.0)*cj1*sj2*x9554))+(((-1.0)*cj2*sj1*x9554)));
evalcond[6]=((((-1.0)*r22*sj3*x9562))+(((-1.0)*x9564))+(((-1.0)*cj3*r20*x9551))+(((-1.0)*r20*x9550*x9555))+(((-1.0)*r21*x9551*x9561))+((r21*x9552))+(((-1.0)*sj1*x9556)));
evalcond[7]=((((-1.0)*r02*sj3*x9562))+(((-1.0)*cj0*x9553))+(((-1.0)*cj3*r00*x9551))+(((-1.0)*r01*x9551*x9561))+((r01*x9552))+((cj0*x9559))+(((-1.0)*r00*x9550*x9555)));
evalcond[8]=(((r11*x9552))+((sj0*x9559))+(((-1.0)*r11*x9551*x9561))+(((-1.0)*r10*x9550*x9555))+(((-1.0)*x9553*x9554))+(((-1.0)*cj3*r10*x9551))+(((-1.0)*r12*sj3*x9562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9566=((1.0)*gconst36);
CheckValue<IkReal> x9567 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x9566))+(((-1.0)*cj0*gconst35*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9567.valid){
continue;
}
CheckValue<IkReal> x9568=IKPowWithIntegerCheck(IKsign((((gconst35*r01))+(((-1.0)*r00*x9566)))),-1);
if(!x9568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9567.value)+(((1.5707963267949)*(x9568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9569=IKcos(j4);
IkReal x9570=IKsin(j4);
IkReal x9571=((1.0)*gconst36);
IkReal x9572=(cj3*gconst35);
IkReal x9573=(sj1*sj2);
IkReal x9574=((1.0)*sj0);
IkReal x9575=(gconst35*sj3);
IkReal x9576=((1.0)*cj2);
IkReal x9577=(gconst35*r20);
IkReal x9578=(gconst35*r00);
IkReal x9579=(cj1*cj2);
IkReal x9580=((1.0)*gconst35*r10);
IkReal x9581=(sj3*x9570);
IkReal x9582=((1.0)*x9569);
IkReal x9583=(cj3*x9569);
IkReal x9584=((1.0)*cj1*sj2);
IkReal x9585=(cj3*gconst36*x9570);
evalcond[0]=((((-1.0)*r21*x9569*x9571))+((r22*x9570))+(((-1.0)*x9577*x9582)));
evalcond[1]=(cj0+((r12*x9570))+(((-1.0)*x9569*x9580))+(((-1.0)*r11*x9569*x9571)));
evalcond[2]=((((-1.0)*x9574))+((r02*x9570))+(((-1.0)*r01*x9569*x9571))+(((-1.0)*x9578*x9582)));
evalcond[3]=((((-1.0)*r20*sj3*x9571))+((r21*x9575))+((r20*x9570*x9572))+((r22*x9583))+(((-1.0)*cj1*x9576))+x9573+((r21*x9585)));
evalcond[4]=(((r00*x9570*x9572))+(((-1.0)*r00*sj3*x9571))+((r01*x9585))+((r01*x9575))+(((-1.0)*cj0*x9584))+(((-1.0)*cj0*sj1*x9576))+((r02*x9583)));
evalcond[5]=(((r11*x9585))+(((-1.0)*cj1*sj2*x9574))+((r11*x9575))+((r10*x9570*x9572))+(((-1.0)*r10*sj3*x9571))+(((-1.0)*cj2*sj1*x9574))+((r12*x9583)));
evalcond[6]=((((-1.0)*r21*x9571*x9581))+((r21*x9572))+(((-1.0)*r22*sj3*x9582))+(((-1.0)*cj3*r20*x9571))+(((-1.0)*sj1*x9576))+(((-1.0)*x9584))+(((-1.0)*r20*x9570*x9575)));
evalcond[7]=(((cj0*x9579))+(((-1.0)*r02*sj3*x9582))+(((-1.0)*r01*x9571*x9581))+((r01*x9572))+(((-1.0)*r00*x9570*x9575))+(((-1.0)*cj0*x9573))+(((-1.0)*cj3*r00*x9571)));
evalcond[8]=((((-1.0)*x9573*x9574))+(((-1.0)*r12*sj3*x9582))+((r11*x9572))+(((-1.0)*r11*x9571*x9581))+((sj0*x9579))+(((-1.0)*r10*x9570*x9575))+(((-1.0)*cj3*r10*x9571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9588 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9588)==0){
continue;
}
IkReal x9586=pow(x9588,-0.5);
IkReal x9587=((1.0)*x9586);
CheckValue<IkReal> x9589 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9589.valid){
continue;
}
IkReal gconst37=((3.14159265358979)+(((-1.0)*(x9589.value))));
IkReal gconst38=(r20*x9587);
IkReal gconst39=(r21*x9587);
CheckValue<IkReal> x9590 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9590.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9590.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9594 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9594.valid){
continue;
}
IkReal x9591=((1.0)*(x9594.value));
IkReal x9592=x9586;
IkReal x9593=((1.0)*x9592);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9591)));
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9591)));
IkReal gconst38=(r20*x9593);
IkReal gconst39=(r21*x9593);
IkReal x9595=r22*r22;
IkReal x9596=((1.0)*x9595);
CheckValue<IkReal> x9600=IKPowWithIntegerCheck(((-1.0)+x9595),-1);
if(!x9600.valid){
continue;
}
IkReal x9597=x9600.value;
if((((1.0)+(((-1.0)*x9596)))) < -0.00001)
continue;
IkReal x9598=IKsqrt(((1.0)+(((-1.0)*x9596))));
IkReal x9599=(cj0*x9597*x9598);
j4eval[0]=((IKabs(((((-1.0)*x9596*x9599))+x9599)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9604 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9604.valid){
continue;
}
IkReal x9601=((1.0)*(x9604.value));
IkReal x9602=x9586;
IkReal x9603=((1.0)*x9602);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9601)));
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9601)));
IkReal gconst38=(r20*x9603);
IkReal gconst39=(r21*x9603);
IkReal x9605=r22*r22;
IkReal x9606=((1.0)*x9605);
CheckValue<IkReal> x9610=IKPowWithIntegerCheck(((-1.0)+x9605),-1);
if(!x9610.valid){
continue;
}
IkReal x9607=x9610.value;
if((((1.0)+(((-1.0)*x9606)))) < -0.00001)
continue;
IkReal x9608=IKsqrt(((1.0)+(((-1.0)*x9606))));
IkReal x9609=(sj0*x9607*x9608);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9606*x9609))+x9609))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9614 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9614.valid){
continue;
}
IkReal x9611=((1.0)*(x9614.value));
IkReal x9612=x9586;
IkReal x9613=((1.0)*x9612);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9611)));
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9611)));
IkReal gconst38=(r20*x9613);
IkReal gconst39=(r21*x9613);
IkReal x9615=r22*r22;
IkReal x9616=((1.0)*r12*sj0);
IkReal x9617=((1.0)*cj0*r02);
CheckValue<IkReal> x9621=IKPowWithIntegerCheck(((-1.0)+x9615),-1);
if(!x9621.valid){
continue;
}
IkReal x9618=x9621.value;
if((((1.0)+(((-1.0)*x9615)))) < -0.00001)
continue;
IkReal x9619=IKsqrt(((1.0)+(((-1.0)*x9615))));
IkReal x9620=(r22*x9618*x9619);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x9617))+(((-1.0)*x9616)))))+(IKabs(((((-1.0)*x9617*x9620))+(((-1.0)*x9616*x9620))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9625 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9625.valid){
continue;
}
IkReal x9622=((1.0)*(x9625.value));
IkReal x9623=x9586;
IkReal x9624=((1.0)*x9623);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9622)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9622)));
IkReal gconst38=(r20*x9624);
IkReal gconst39=(r21*x9624);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9629 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9629.valid){
continue;
}
IkReal x9626=((1.0)*(x9629.value));
IkReal x9627=x9586;
IkReal x9628=((1.0)*x9627);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9626)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9626)));
IkReal gconst38=(r20*x9628);
IkReal gconst39=(r21*x9628);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9633 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9633.valid){
continue;
}
IkReal x9630=((1.0)*(x9633.value));
IkReal x9631=x9586;
IkReal x9632=((1.0)*x9631);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9630)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9630)));
IkReal gconst38=(r20*x9632);
IkReal gconst39=(r21*x9632);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9637 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9637.valid){
continue;
}
IkReal x9634=((1.0)*(x9637.value));
IkReal x9635=x9586;
IkReal x9636=((1.0)*x9635);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9634)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9634)));
IkReal gconst38=(r20*x9636);
IkReal gconst39=(r21*x9636);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9641 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9641.valid){
continue;
}
IkReal x9638=((1.0)*(x9641.value));
IkReal x9639=x9586;
IkReal x9640=((1.0)*x9639);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9638)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9638)));
IkReal gconst38=(r20*x9640);
IkReal gconst39=(r21*x9640);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9645 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9645.valid){
continue;
}
IkReal x9642=((1.0)*(x9645.value));
IkReal x9643=x9586;
IkReal x9644=((1.0)*x9643);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9642)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9642)));
IkReal gconst38=(r20*x9644);
IkReal gconst39=(r21*x9644);
IkReal x9646=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9650=IKPowWithIntegerCheck(x9646,-1);
if(!x9650.valid){
continue;
}
IkReal x9647=x9650.value;
IkReal x9648=((1.0)*x9647);
IkReal x9649=((((-1.0)*x9648*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9647))+(((-1.0)*x9648*(r11*r11)*(r21*r21))));
j4eval[0]=x9649;
j4eval[1]=IKsign(x9649);
j4eval[2]=r12;
j4eval[3]=x9646;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9651=(gconst38*r10);
IkReal x9652=(gconst39*r11);
CheckValue<IkReal> x9653 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9652))+(((-1.0)*x9651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9653.valid){
continue;
}
CheckValue<IkReal> x9654=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9651*x9651)))+(((-2.0)*x9651*x9652))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9652*x9652))))),-1);
if(!x9654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9653.value)+(((1.5707963267949)*(x9654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9655=IKcos(j4);
IkReal x9656=IKsin(j4);
IkReal x9657=(gconst38*r20);
IkReal x9658=(gconst38*r10);
IkReal x9659=((1.0)*sj1);
IkReal x9660=(gconst39*r21);
IkReal x9661=(gconst38*r00);
IkReal x9662=(gconst39*r01);
IkReal x9663=(gconst39*r11);
IkReal x9664=((1.0)*x9655);
IkReal x9665=((1.0)*x9656);
evalcond[0]=((((-1.0)*x9660*x9664))+(((-1.0)*x9657*x9664))+((r22*x9656)));
evalcond[1]=((((-1.0)*x9661*x9664))+(((-1.0)*x9662*x9664))+((r02*x9656)));
evalcond[2]=((1.0)+(((-1.0)*x9663*x9664))+((r12*x9656))+(((-1.0)*x9658*x9664)));
evalcond[3]=((((-1.0)*x9663*x9665))+(((-1.0)*x9658*x9665))+(((-1.0)*r12*x9664)));
evalcond[4]=((((-1.0)*x9661*x9665))+(((-1.0)*sj2*x9659))+(((-1.0)*x9662*x9665))+((cj1*cj2))+(((-1.0)*r02*x9664)));
evalcond[5]=((((-1.0)*cj2*x9659))+(((-1.0)*x9660*x9665))+(((-1.0)*cj1*sj2))+(((-1.0)*x9657*x9665))+(((-1.0)*r22*x9664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9666=((1.0)*gconst38);
CheckValue<IkReal> x9667 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9666))+(((-1.0)*gconst39*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9667.valid){
continue;
}
CheckValue<IkReal> x9668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9666))+((gconst39*r20)))),-1);
if(!x9668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9667.value)+(((1.5707963267949)*(x9668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9669=IKcos(j4);
IkReal x9670=IKsin(j4);
IkReal x9671=(gconst38*r20);
IkReal x9672=(gconst38*r10);
IkReal x9673=((1.0)*sj1);
IkReal x9674=(gconst39*r21);
IkReal x9675=(gconst38*r00);
IkReal x9676=(gconst39*r01);
IkReal x9677=(gconst39*r11);
IkReal x9678=((1.0)*x9669);
IkReal x9679=((1.0)*x9670);
evalcond[0]=((((-1.0)*x9674*x9678))+(((-1.0)*x9671*x9678))+((r22*x9670)));
evalcond[1]=(((r02*x9670))+(((-1.0)*x9676*x9678))+(((-1.0)*x9675*x9678)));
evalcond[2]=((1.0)+((r12*x9670))+(((-1.0)*x9677*x9678))+(((-1.0)*x9672*x9678)));
evalcond[3]=((((-1.0)*x9677*x9679))+(((-1.0)*r12*x9678))+(((-1.0)*x9672*x9679)));
evalcond[4]=((((-1.0)*sj2*x9673))+(((-1.0)*r02*x9678))+((cj1*cj2))+(((-1.0)*x9676*x9679))+(((-1.0)*x9675*x9679)));
evalcond[5]=((((-1.0)*cj2*x9673))+(((-1.0)*x9674*x9679))+(((-1.0)*cj1*sj2))+(((-1.0)*x9671*x9679))+(((-1.0)*r22*x9678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9680=((1.0)*gconst39);
CheckValue<IkReal> x9681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9680))+((gconst38*r01)))),-1);
if(!x9681.valid){
continue;
}
CheckValue<IkReal> x9682 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9680))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9681.value)))+(x9682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9683=IKcos(j4);
IkReal x9684=IKsin(j4);
IkReal x9685=(gconst38*r20);
IkReal x9686=(gconst38*r10);
IkReal x9687=((1.0)*sj1);
IkReal x9688=(gconst39*r21);
IkReal x9689=(gconst38*r00);
IkReal x9690=(gconst39*r01);
IkReal x9691=(gconst39*r11);
IkReal x9692=((1.0)*x9683);
IkReal x9693=((1.0)*x9684);
evalcond[0]=((((-1.0)*x9685*x9692))+((r22*x9684))+(((-1.0)*x9688*x9692)));
evalcond[1]=((((-1.0)*x9690*x9692))+((r02*x9684))+(((-1.0)*x9689*x9692)));
evalcond[2]=((1.0)+(((-1.0)*x9691*x9692))+((r12*x9684))+(((-1.0)*x9686*x9692)));
evalcond[3]=((((-1.0)*r12*x9692))+(((-1.0)*x9691*x9693))+(((-1.0)*x9686*x9693)));
evalcond[4]=((((-1.0)*x9690*x9693))+(((-1.0)*r02*x9692))+(((-1.0)*sj2*x9687))+((cj1*cj2))+(((-1.0)*x9689*x9693)));
evalcond[5]=((((-1.0)*x9685*x9693))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9692))+(((-1.0)*x9688*x9693))+(((-1.0)*cj2*x9687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9697 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9697.valid){
continue;
}
IkReal x9694=((1.0)*(x9697.value));
IkReal x9695=x9586;
IkReal x9696=((1.0)*x9695);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9694)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9694)));
IkReal gconst38=(r20*x9696);
IkReal gconst39=(r21*x9696);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9701 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9701.valid){
continue;
}
IkReal x9698=((1.0)*(x9701.value));
IkReal x9699=x9586;
IkReal x9700=((1.0)*x9699);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9698)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9698)));
IkReal gconst38=(r20*x9700);
IkReal gconst39=(r21*x9700);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9705 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9705.valid){
continue;
}
IkReal x9702=((1.0)*(x9705.value));
IkReal x9703=x9586;
IkReal x9704=((1.0)*x9703);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9702)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9702)));
IkReal gconst38=(r20*x9704);
IkReal gconst39=(r21*x9704);
IkReal x9706=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9710=IKPowWithIntegerCheck(x9706,-1);
if(!x9710.valid){
continue;
}
IkReal x9707=x9710.value;
IkReal x9708=((1.0)*x9707);
IkReal x9709=((((-1.0)*x9708*(r11*r11)*(r21*r21)))+(((-1.0)*x9708*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9707)));
j4eval[0]=x9709;
j4eval[1]=IKsign(x9709);
j4eval[2]=r12;
j4eval[3]=x9706;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9711=(gconst38*r10);
IkReal x9712=(gconst39*r11);
CheckValue<IkReal> x9713=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9711*x9711)))+(((-2.0)*x9711*x9712))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9712*x9712))))),-1);
if(!x9713.valid){
continue;
}
CheckValue<IkReal> x9714 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9712))+(((-1.0)*x9711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9713.value)))+(x9714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9715=IKsin(j4);
IkReal x9716=IKcos(j4);
IkReal x9717=(gconst38*r20);
IkReal x9718=((1.0)*sj1);
IkReal x9719=(gconst39*r21);
IkReal x9720=(gconst38*r10);
IkReal x9721=(gconst38*r00);
IkReal x9722=(gconst39*r01);
IkReal x9723=(gconst39*r11);
IkReal x9724=((1.0)*x9716);
evalcond[0]=(((r12*x9716))+((x9715*x9723))+((x9715*x9720)));
evalcond[1]=(((r22*x9715))+(((-1.0)*x9717*x9724))+(((-1.0)*x9719*x9724)));
evalcond[2]=((((-1.0)*x9722*x9724))+((r02*x9715))+(((-1.0)*x9721*x9724)));
evalcond[3]=((1.0)+((r12*x9715))+(((-1.0)*x9723*x9724))+(((-1.0)*x9720*x9724)));
evalcond[4]=(((x9715*x9721))+((x9715*x9722))+((r02*x9716))+(((-1.0)*sj2*x9718))+((cj1*cj2)));
evalcond[5]=(((r22*x9716))+(((-1.0)*cj2*x9718))+(((-1.0)*cj1*sj2))+((x9715*x9719))+((x9715*x9717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9725=((1.0)*gconst38);
CheckValue<IkReal> x9726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9725))+((gconst39*r20)))),-1);
if(!x9726.valid){
continue;
}
CheckValue<IkReal> x9727 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9725))+(((-1.0)*gconst39*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9726.value)))+(x9727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9728=IKsin(j4);
IkReal x9729=IKcos(j4);
IkReal x9730=(gconst38*r20);
IkReal x9731=((1.0)*sj1);
IkReal x9732=(gconst39*r21);
IkReal x9733=(gconst38*r10);
IkReal x9734=(gconst38*r00);
IkReal x9735=(gconst39*r01);
IkReal x9736=(gconst39*r11);
IkReal x9737=((1.0)*x9729);
evalcond[0]=(((x9728*x9733))+((x9728*x9736))+((r12*x9729)));
evalcond[1]=((((-1.0)*x9730*x9737))+(((-1.0)*x9732*x9737))+((r22*x9728)));
evalcond[2]=(((r02*x9728))+(((-1.0)*x9734*x9737))+(((-1.0)*x9735*x9737)));
evalcond[3]=((1.0)+(((-1.0)*x9733*x9737))+((r12*x9728))+(((-1.0)*x9736*x9737)));
evalcond[4]=(((r02*x9729))+((x9728*x9735))+((x9728*x9734))+(((-1.0)*sj2*x9731))+((cj1*cj2)));
evalcond[5]=(((x9728*x9732))+((x9728*x9730))+(((-1.0)*cj1*sj2))+((r22*x9729))+(((-1.0)*cj2*x9731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9738=((1.0)*gconst39);
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9738))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
CheckValue<IkReal> x9740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9738))+((gconst38*r01)))),-1);
if(!x9740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9739.value)+(((1.5707963267949)*(x9740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9741=IKsin(j4);
IkReal x9742=IKcos(j4);
IkReal x9743=(gconst38*r20);
IkReal x9744=((1.0)*sj1);
IkReal x9745=(gconst39*r21);
IkReal x9746=(gconst38*r10);
IkReal x9747=(gconst38*r00);
IkReal x9748=(gconst39*r01);
IkReal x9749=(gconst39*r11);
IkReal x9750=((1.0)*x9742);
evalcond[0]=(((x9741*x9749))+((x9741*x9746))+((r12*x9742)));
evalcond[1]=(((r22*x9741))+(((-1.0)*x9743*x9750))+(((-1.0)*x9745*x9750)));
evalcond[2]=((((-1.0)*x9747*x9750))+((r02*x9741))+(((-1.0)*x9748*x9750)));
evalcond[3]=((1.0)+(((-1.0)*x9746*x9750))+(((-1.0)*x9749*x9750))+((r12*x9741)));
evalcond[4]=(((r02*x9742))+(((-1.0)*sj2*x9744))+((x9741*x9748))+((x9741*x9747))+((cj1*cj2)));
evalcond[5]=(((r22*x9742))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9744))+((x9741*x9743))+((x9741*x9745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9754 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9754.valid){
continue;
}
IkReal x9751=((1.0)*(x9754.value));
IkReal x9752=x9586;
IkReal x9753=((1.0)*x9752);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9751)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9751)));
IkReal gconst38=(r20*x9753);
IkReal gconst39=(r21*x9753);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9755=((1.0)*(x9758.value));
IkReal x9756=x9586;
IkReal x9757=((1.0)*x9756);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9755)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9755)));
IkReal gconst38=(r20*x9757);
IkReal gconst39=(r21*x9757);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
IkReal x9759=((1.0)*(x9762.value));
IkReal x9760=x9586;
IkReal x9761=((1.0)*x9760);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9759)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9759)));
IkReal gconst38=(r20*x9761);
IkReal gconst39=(r21*x9761);
IkReal x9763=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9767=IKPowWithIntegerCheck(x9763,-1);
if(!x9767.valid){
continue;
}
IkReal x9764=x9767.value;
IkReal x9765=((1.0)*x9764);
IkReal x9766=((((-2.0)*r10*r11*r20*r21*x9764))+(((-1.0)*x9765*(r10*r10)*(r20*r20)))+(((-1.0)*x9765*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x9766;
j4eval[1]=IKsign(x9766);
j4eval[2]=r12;
j4eval[3]=x9763;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9768=(gconst38*r10);
IkReal x9769=(gconst39*r11);
CheckValue<IkReal> x9770=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9768*x9768)))+(((-2.0)*x9768*x9769))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9769*x9769))))),-1);
if(!x9770.valid){
continue;
}
CheckValue<IkReal> x9771 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9768))+(((-1.0)*x9769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9770.value)))+(x9771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9772=IKsin(j4);
IkReal x9773=IKcos(j4);
IkReal x9774=(gconst38*r20);
IkReal x9775=((1.0)*cj2);
IkReal x9776=(gconst39*r21);
IkReal x9777=(gconst38*r10);
IkReal x9778=(gconst38*r00);
IkReal x9779=(gconst39*r01);
IkReal x9780=(gconst39*r11);
IkReal x9781=((1.0)*x9773);
evalcond[0]=(((r12*x9773))+((x9772*x9777))+((x9772*x9780)));
evalcond[1]=(((r22*x9772))+(((-1.0)*x9774*x9781))+(((-1.0)*x9776*x9781)));
evalcond[2]=(((r02*x9772))+(((-1.0)*x9778*x9781))+(((-1.0)*x9779*x9781)));
evalcond[3]=((1.0)+((r12*x9772))+(((-1.0)*x9777*x9781))+(((-1.0)*x9780*x9781)));
evalcond[4]=(((x9772*x9774))+((x9772*x9776))+((r22*x9773))+((sj1*sj2))+(((-1.0)*cj1*x9775)));
evalcond[5]=(((x9772*x9779))+((x9772*x9778))+(((-1.0)*cj1*sj2))+((r02*x9773))+(((-1.0)*sj1*x9775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9782=((1.0)*gconst38);
CheckValue<IkReal> x9783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9782))+((gconst39*r20)))),-1);
if(!x9783.valid){
continue;
}
CheckValue<IkReal> x9784 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r01))+(((-1.0)*r00*x9782)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9783.value)))+(x9784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9785=IKsin(j4);
IkReal x9786=IKcos(j4);
IkReal x9787=(gconst38*r20);
IkReal x9788=((1.0)*cj2);
IkReal x9789=(gconst39*r21);
IkReal x9790=(gconst38*r10);
IkReal x9791=(gconst38*r00);
IkReal x9792=(gconst39*r01);
IkReal x9793=(gconst39*r11);
IkReal x9794=((1.0)*x9786);
evalcond[0]=(((x9785*x9793))+((x9785*x9790))+((r12*x9786)));
evalcond[1]=((((-1.0)*x9789*x9794))+((r22*x9785))+(((-1.0)*x9787*x9794)));
evalcond[2]=((((-1.0)*x9792*x9794))+(((-1.0)*x9791*x9794))+((r02*x9785)));
evalcond[3]=((1.0)+(((-1.0)*x9790*x9794))+(((-1.0)*x9793*x9794))+((r12*x9785)));
evalcond[4]=(((x9785*x9789))+((x9785*x9787))+((r22*x9786))+((sj1*sj2))+(((-1.0)*cj1*x9788)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9788))+((r02*x9786))+((x9785*x9791))+((x9785*x9792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9795=((1.0)*gconst39);
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r20))+(((-1.0)*r21*x9795)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
CheckValue<IkReal> x9797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9795))+((gconst38*r01)))),-1);
if(!x9797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9796.value)+(((1.5707963267949)*(x9797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9798=IKsin(j4);
IkReal x9799=IKcos(j4);
IkReal x9800=(gconst38*r20);
IkReal x9801=((1.0)*cj2);
IkReal x9802=(gconst39*r21);
IkReal x9803=(gconst38*r10);
IkReal x9804=(gconst38*r00);
IkReal x9805=(gconst39*r01);
IkReal x9806=(gconst39*r11);
IkReal x9807=((1.0)*x9799);
evalcond[0]=(((x9798*x9803))+((x9798*x9806))+((r12*x9799)));
evalcond[1]=((((-1.0)*x9800*x9807))+((r22*x9798))+(((-1.0)*x9802*x9807)));
evalcond[2]=(((r02*x9798))+(((-1.0)*x9804*x9807))+(((-1.0)*x9805*x9807)));
evalcond[3]=((1.0)+((r12*x9798))+(((-1.0)*x9806*x9807))+(((-1.0)*x9803*x9807)));
evalcond[4]=((((-1.0)*cj1*x9801))+((x9798*x9802))+((x9798*x9800))+((sj1*sj2))+((r22*x9799)));
evalcond[5]=(((r02*x9799))+((x9798*x9804))+((x9798*x9805))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9811 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9811.valid){
continue;
}
IkReal x9808=((1.0)*(x9811.value));
IkReal x9809=x9586;
IkReal x9810=((1.0)*x9809);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9808)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9808)));
IkReal gconst38=(r20*x9810);
IkReal gconst39=(r21*x9810);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9815 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9815.valid){
continue;
}
IkReal x9812=((1.0)*(x9815.value));
IkReal x9813=x9586;
IkReal x9814=((1.0)*x9813);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9812)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9812)));
IkReal gconst38=(r20*x9814);
IkReal gconst39=(r21*x9814);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9819 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9819.valid){
continue;
}
IkReal x9816=((1.0)*(x9819.value));
IkReal x9817=x9586;
IkReal x9818=((1.0)*x9817);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9816)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9816)));
IkReal gconst38=(r20*x9818);
IkReal gconst39=(r21*x9818);
IkReal x9820=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(x9820,-1);
if(!x9824.valid){
continue;
}
IkReal x9821=x9824.value;
IkReal x9822=((1.0)*x9821);
IkReal x9823=((((-1.0)*x9822*(r11*r11)*(r21*r21)))+(((-1.0)*x9822*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9821)));
j4eval[0]=x9823;
j4eval[1]=IKsign(x9823);
j4eval[2]=r12;
j4eval[3]=x9820;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9825=(gconst38*r10);
IkReal x9826=(gconst39*r11);
CheckValue<IkReal> x9827 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9826))+(((-1.0)*x9825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9827.valid){
continue;
}
CheckValue<IkReal> x9828=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9825*x9826))+(((-1.0)*(x9826*x9826)))+(((-1.0)*(x9825*x9825)))+(((-1.0)*(r12*r12))))),-1);
if(!x9828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9827.value)+(((1.5707963267949)*(x9828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9829=IKcos(j4);
IkReal x9830=IKsin(j4);
IkReal x9831=(gconst38*r20);
IkReal x9832=(gconst38*r10);
IkReal x9833=((1.0)*cj2);
IkReal x9834=(gconst39*r21);
IkReal x9835=(gconst38*r00);
IkReal x9836=(gconst39*r01);
IkReal x9837=(gconst39*r11);
IkReal x9838=((1.0)*x9829);
IkReal x9839=((1.0)*x9830);
evalcond[0]=((((-1.0)*x9834*x9838))+((r22*x9830))+(((-1.0)*x9831*x9838)));
evalcond[1]=((((-1.0)*x9836*x9838))+((r02*x9830))+(((-1.0)*x9835*x9838)));
evalcond[2]=((1.0)+(((-1.0)*x9832*x9838))+(((-1.0)*x9837*x9838))+((r12*x9830)));
evalcond[3]=((((-1.0)*x9832*x9839))+(((-1.0)*x9837*x9839))+(((-1.0)*r12*x9838)));
evalcond[4]=((((-1.0)*cj1*x9833))+(((-1.0)*x9834*x9839))+(((-1.0)*r22*x9838))+((sj1*sj2))+(((-1.0)*x9831*x9839)));
evalcond[5]=((((-1.0)*x9836*x9839))+(((-1.0)*r02*x9838))+(((-1.0)*cj1*sj2))+(((-1.0)*x9835*x9839))+(((-1.0)*sj1*x9833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9840=((1.0)*gconst38);
CheckValue<IkReal> x9841=IKPowWithIntegerCheck(IKsign((((gconst39*r20))+(((-1.0)*r21*x9840)))),-1);
if(!x9841.valid){
continue;
}
CheckValue<IkReal> x9842 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r01))+(((-1.0)*r00*x9840)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9841.value)))+(x9842.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9843=IKcos(j4);
IkReal x9844=IKsin(j4);
IkReal x9845=(gconst38*r20);
IkReal x9846=(gconst38*r10);
IkReal x9847=((1.0)*cj2);
IkReal x9848=(gconst39*r21);
IkReal x9849=(gconst38*r00);
IkReal x9850=(gconst39*r01);
IkReal x9851=(gconst39*r11);
IkReal x9852=((1.0)*x9843);
IkReal x9853=((1.0)*x9844);
evalcond[0]=((((-1.0)*x9848*x9852))+(((-1.0)*x9845*x9852))+((r22*x9844)));
evalcond[1]=(((r02*x9844))+(((-1.0)*x9850*x9852))+(((-1.0)*x9849*x9852)));
evalcond[2]=((1.0)+(((-1.0)*x9851*x9852))+(((-1.0)*x9846*x9852))+((r12*x9844)));
evalcond[3]=((((-1.0)*x9851*x9853))+(((-1.0)*x9846*x9853))+(((-1.0)*r12*x9852)));
evalcond[4]=((((-1.0)*x9848*x9853))+(((-1.0)*cj1*x9847))+(((-1.0)*x9845*x9853))+((sj1*sj2))+(((-1.0)*r22*x9852)));
evalcond[5]=((((-1.0)*r02*x9852))+(((-1.0)*x9850*x9853))+(((-1.0)*sj1*x9847))+(((-1.0)*cj1*sj2))+(((-1.0)*x9849*x9853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9854=((1.0)*gconst39);
CheckValue<IkReal> x9855 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r20))+(((-1.0)*r21*x9854)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9855.valid){
continue;
}
CheckValue<IkReal> x9856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9854))+((gconst38*r01)))),-1);
if(!x9856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9855.value)+(((1.5707963267949)*(x9856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9857=IKcos(j4);
IkReal x9858=IKsin(j4);
IkReal x9859=(gconst38*r20);
IkReal x9860=(gconst38*r10);
IkReal x9861=((1.0)*cj2);
IkReal x9862=(gconst39*r21);
IkReal x9863=(gconst38*r00);
IkReal x9864=(gconst39*r01);
IkReal x9865=(gconst39*r11);
IkReal x9866=((1.0)*x9857);
IkReal x9867=((1.0)*x9858);
evalcond[0]=((((-1.0)*x9859*x9866))+((r22*x9858))+(((-1.0)*x9862*x9866)));
evalcond[1]=(((r02*x9858))+(((-1.0)*x9863*x9866))+(((-1.0)*x9864*x9866)));
evalcond[2]=((1.0)+(((-1.0)*x9860*x9866))+((r12*x9858))+(((-1.0)*x9865*x9866)));
evalcond[3]=((((-1.0)*r12*x9866))+(((-1.0)*x9860*x9867))+(((-1.0)*x9865*x9867)));
evalcond[4]=((((-1.0)*cj1*x9861))+(((-1.0)*r22*x9866))+(((-1.0)*x9859*x9867))+((sj1*sj2))+(((-1.0)*x9862*x9867)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x9863*x9867))+(((-1.0)*sj1*x9861))+(((-1.0)*x9864*x9867))+(((-1.0)*r02*x9866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9868=((-1.0)*px);
CheckValue<IkReal> x9870 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9870.valid){
continue;
}
IkReal x9869=((1.0)*(x9870.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9869)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9868);
rxp1_1=(px*r21);
rxp1_2=(r11*x9868);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9869)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x9871=((1.0)*cj3);
IkReal x9872=(r10*r20);
IkReal x9873=(r11*r21);
j4eval[0]=(((x9871*x9873))+((x9871*x9872)));
j4eval[1]=((((-1.0)*x9872))+(((-1.0)*x9873)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9874=((-1.0)*px);
CheckValue<IkReal> x9876 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9876.valid){
continue;
}
IkReal x9875=((1.0)*(x9876.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9875)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9874);
rxp1_1=(px*r21);
rxp1_2=(r11*x9874);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9875)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x9877=((1.0)*sj3);
IkReal x9878=(r11*r21);
IkReal x9879=(r10*r20);
j4eval[0]=((((-1.0)*x9877*x9879))+(((-1.0)*x9877*x9878)));
j4eval[1]=((((-1.0)*x9879))+(((-1.0)*x9878)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9880=((-1.0)*px);
CheckValue<IkReal> x9882 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9882.valid){
continue;
}
IkReal x9881=((1.0)*(x9882.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9881)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9880);
rxp1_1=(px*r21);
rxp1_2=(r11*x9880);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9881)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x9883=((1.0)*cj3);
j4eval[0]=(((r11*r21*x9883))+((r10*r20*x9883)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9884=IKPowWithIntegerCheck((((cj3*gconst39*r11))+((cj3*gconst38*r10))),-1);
if(!x9884.valid){
continue;
}
CheckValue<IkReal> x9885=IKPowWithIntegerCheck(cj3,-1);
if(!x9885.valid){
continue;
}
CheckValue<IkReal> x9886=IKPowWithIntegerCheck(r02,-1);
if(!x9886.valid){
continue;
}
if( IKabs(((x9884.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9885.value)*(x9886.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9884.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3))))))+IKsqr(((x9885.value)*(x9886.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9884.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3))))), ((x9885.value)*(x9886.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9887=IKcos(j4);
IkReal x9888=IKsin(j4);
IkReal x9889=(gconst38*r21);
IkReal x9890=(gconst38*r20);
IkReal x9891=(sj1*sj2);
IkReal x9892=(gconst38*r10);
IkReal x9893=(gconst39*r21);
IkReal x9894=((1.0)*cj2);
IkReal x9895=((1.0)*gconst39);
IkReal x9896=(gconst38*r11);
IkReal x9897=(gconst39*r11);
IkReal x9898=((1.0)*cj1*sj2);
IkReal x9899=(sj1*x9894);
IkReal x9900=((1.0)*x9887);
IkReal x9901=(cj3*x9888);
IkReal x9902=((1.0)*sj3*x9888);
IkReal x9903=(x9898+x9899);
evalcond[0]=(r02*x9888);
evalcond[1]=((((-1.0)*x9893*x9900))+(((-1.0)*x9890*x9900)));
evalcond[2]=((((-1.0)*x9903))+((cj3*r02*x9887)));
evalcond[3]=((((-1.0)*x9891))+((cj1*cj2))+(((-1.0)*r02*sj3*x9900)));
evalcond[4]=((1.0)+(((-1.0)*x9892*x9900))+(((-1.0)*r11*x9887*x9895)));
evalcond[5]=(((x9892*x9901))+((sj3*x9896))+((x9897*x9901))+(((-1.0)*r10*sj3*x9895)));
evalcond[6]=((((-1.0)*x9892*x9902))+((cj3*x9896))+(((-1.0)*cj3*r10*x9895))+(((-1.0)*r11*sj3*x9888*x9895)));
evalcond[7]=(((x9893*x9901))+(((-1.0)*cj1*x9894))+(((-1.0)*r20*sj3*x9895))+((sj3*x9889))+x9891+((x9890*x9901)));
evalcond[8]=((((-1.0)*x9893*x9902))+((cj3*x9889))+(((-1.0)*cj3*r20*x9895))+(((-1.0)*x9903))+(((-1.0)*x9890*x9902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9904=((1.0)*gconst39*r11);
IkReal x9905=((1.0)*gconst38*r10);
CheckValue<IkReal> x9906=IKPowWithIntegerCheck(((((-1.0)*sj3*x9905))+(((-1.0)*sj3*x9904))),-1);
if(!x9906.valid){
continue;
}
CheckValue<IkReal> x9907=IKPowWithIntegerCheck(((((-1.0)*x9905))+(((-1.0)*x9904))),-1);
if(!x9907.valid){
continue;
}
if( IKabs(((x9906.value)*(((((-1.0)*cj3*gconst38*r11))+((cj3*gconst39*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9907.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9906.value)*(((((-1.0)*cj3*gconst38*r11))+((cj3*gconst39*r10))))))+IKsqr(((-1.0)*(x9907.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9906.value)*(((((-1.0)*cj3*gconst38*r11))+((cj3*gconst39*r10))))), ((-1.0)*(x9907.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9908=IKcos(j4);
IkReal x9909=IKsin(j4);
IkReal x9910=(gconst38*r21);
IkReal x9911=(gconst38*r20);
IkReal x9912=(sj1*sj2);
IkReal x9913=(gconst38*r10);
IkReal x9914=(gconst39*r21);
IkReal x9915=((1.0)*cj2);
IkReal x9916=((1.0)*gconst39);
IkReal x9917=(gconst38*r11);
IkReal x9918=(gconst39*r11);
IkReal x9919=((1.0)*cj1*sj2);
IkReal x9920=(sj1*x9915);
IkReal x9921=((1.0)*x9908);
IkReal x9922=(cj3*x9909);
IkReal x9923=((1.0)*sj3*x9909);
IkReal x9924=(x9919+x9920);
evalcond[0]=(r02*x9909);
evalcond[1]=((((-1.0)*x9914*x9921))+(((-1.0)*x9911*x9921)));
evalcond[2]=(((cj3*r02*x9908))+(((-1.0)*x9924)));
evalcond[3]=((((-1.0)*x9912))+((cj1*cj2))+(((-1.0)*r02*sj3*x9921)));
evalcond[4]=((1.0)+(((-1.0)*x9913*x9921))+(((-1.0)*r11*x9908*x9916)));
evalcond[5]=(((sj3*x9917))+(((-1.0)*r10*sj3*x9916))+((x9918*x9922))+((x9913*x9922)));
evalcond[6]=(((cj3*x9917))+(((-1.0)*cj3*r10*x9916))+(((-1.0)*x9913*x9923))+(((-1.0)*r11*sj3*x9909*x9916)));
evalcond[7]=((((-1.0)*cj1*x9915))+((sj3*x9910))+(((-1.0)*r20*sj3*x9916))+((x9911*x9922))+((x9914*x9922))+x9912);
evalcond[8]=(((cj3*x9910))+(((-1.0)*cj3*r20*x9916))+(((-1.0)*x9924))+(((-1.0)*x9914*x9923))+(((-1.0)*x9911*x9923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9925=(gconst38*r10);
IkReal x9926=((1.0)*r11);
CheckValue<IkReal> x9927=IKPowWithIntegerCheck((((cj3*x9925))+((cj3*gconst39*r11))),-1);
if(!x9927.valid){
continue;
}
CheckValue<IkReal> x9928=IKPowWithIntegerCheck(((((-1.0)*x9925))+(((-1.0)*gconst39*x9926))),-1);
if(!x9928.valid){
continue;
}
if( IKabs(((x9927.value)*((((gconst39*r10*sj3))+(((-1.0)*gconst38*sj3*x9926)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9928.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9927.value)*((((gconst39*r10*sj3))+(((-1.0)*gconst38*sj3*x9926))))))+IKsqr(((-1.0)*(x9928.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9927.value)*((((gconst39*r10*sj3))+(((-1.0)*gconst38*sj3*x9926))))), ((-1.0)*(x9928.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9929=IKcos(j4);
IkReal x9930=IKsin(j4);
IkReal x9931=(gconst38*r21);
IkReal x9932=(gconst38*r20);
IkReal x9933=(sj1*sj2);
IkReal x9934=(gconst38*r10);
IkReal x9935=(gconst39*r21);
IkReal x9936=((1.0)*cj2);
IkReal x9937=((1.0)*gconst39);
IkReal x9938=(gconst38*r11);
IkReal x9939=(gconst39*r11);
IkReal x9940=((1.0)*cj1*sj2);
IkReal x9941=(sj1*x9936);
IkReal x9942=((1.0)*x9929);
IkReal x9943=(cj3*x9930);
IkReal x9944=((1.0)*sj3*x9930);
IkReal x9945=(x9940+x9941);
evalcond[0]=(r02*x9930);
evalcond[1]=((((-1.0)*x9935*x9942))+(((-1.0)*x9932*x9942)));
evalcond[2]=(((cj3*r02*x9929))+(((-1.0)*x9945)));
evalcond[3]=((((-1.0)*x9933))+(((-1.0)*r02*sj3*x9942))+((cj1*cj2)));
evalcond[4]=((1.0)+(((-1.0)*x9934*x9942))+(((-1.0)*r11*x9929*x9937)));
evalcond[5]=((((-1.0)*r10*sj3*x9937))+((x9934*x9943))+((sj3*x9938))+((x9939*x9943)));
evalcond[6]=(((cj3*x9938))+(((-1.0)*r11*sj3*x9930*x9937))+(((-1.0)*x9934*x9944))+(((-1.0)*cj3*r10*x9937)));
evalcond[7]=((((-1.0)*cj1*x9936))+((x9932*x9943))+(((-1.0)*r20*sj3*x9937))+((x9935*x9943))+((sj3*x9931))+x9933);
evalcond[8]=((((-1.0)*cj3*r20*x9937))+((cj3*x9931))+(((-1.0)*x9935*x9944))+(((-1.0)*x9932*x9944))+(((-1.0)*x9945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9946=gconst39*gconst39;
IkReal x9947=gconst38*gconst38;
IkReal x9948=(r10*r20);
IkReal x9949=(r10*sj3);
IkReal x9950=((1.0)*r11);
IkReal x9951=(r21*x9946);
IkReal x9952=(gconst38*gconst39*sj3);
IkReal x9953=(cj3*gconst38*gconst39);
CheckValue<IkReal> x9954 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj3*x9947*x9950))+((x9948*x9952))+((x9949*x9951))+(((-1.0)*r21*x9950*x9952)))),IkReal(((((-1.0)*gconst38*r22*sj3*x9950))+((gconst39*r22*x9949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9954.valid){
continue;
}
CheckValue<IkReal> x9955=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*x9947*x9948))+((r11*r20*x9953))+((cj3*r11*x9951))+((r10*r21*x9953)))),-1);
if(!x9955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9954.value)+(((1.5707963267949)*(x9955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9956=IKcos(j4);
IkReal x9957=IKsin(j4);
IkReal x9958=(gconst38*sj3);
IkReal x9959=(gconst38*r20);
IkReal x9960=((1.0)*r00);
IkReal x9961=(sj1*sj2);
IkReal x9962=(cj3*gconst38);
IkReal x9963=(gconst39*r21);
IkReal x9964=(gconst39*r01);
IkReal x9965=((1.0)*cj2);
IkReal x9966=(gconst39*sj3);
IkReal x9967=((1.0)*r20);
IkReal x9968=(cj3*gconst39);
IkReal x9969=((1.0)*r10);
IkReal x9970=(gconst39*r11);
IkReal x9971=((1.0)*cj1*sj2);
IkReal x9972=(sj1*x9965);
IkReal x9973=((1.0)*x9956);
IkReal x9974=(cj3*x9957);
IkReal x9975=(r10*x9957);
IkReal x9976=(cj3*x9956);
IkReal x9977=((1.0)*sj3*x9957);
IkReal x9978=(x9972+x9971);
evalcond[0]=((((-1.0)*x9959*x9973))+(((-1.0)*x9963*x9973))+((r22*x9957)));
evalcond[1]=(((r02*x9957))+(((-1.0)*gconst38*x9956*x9960))+(((-1.0)*x9964*x9973)));
evalcond[2]=((1.0)+(((-1.0)*x9970*x9973))+((r12*x9957))+(((-1.0)*gconst38*x9956*x9969)));
evalcond[3]=(((r11*x9958))+(((-1.0)*x9966*x9969))+((r12*x9976))+((x9962*x9975))+((r11*x9957*x9968)));
evalcond[4]=((((-1.0)*r12*sj3*x9973))+(((-1.0)*x9968*x9969))+(((-1.0)*x9957*x9958*x9969))+(((-1.0)*r11*x9957*x9966))+((r11*x9962)));
evalcond[5]=(((r22*x9976))+(((-1.0)*cj1*x9965))+(((-1.0)*x9966*x9967))+((x9963*x9974))+((x9959*x9974))+x9961+((r21*x9958)));
evalcond[6]=((((-1.0)*x9960*x9966))+((r00*x9957*x9962))+((r02*x9976))+((x9964*x9974))+(((-1.0)*x9978))+((r01*x9958)));
evalcond[7]=((((-1.0)*x9960*x9968))+((r01*x9962))+(((-1.0)*x9957*x9958*x9960))+(((-1.0)*r02*sj3*x9973))+((cj1*cj2))+(((-1.0)*x9964*x9977))+(((-1.0)*x9961)));
evalcond[8]=(((r21*x9962))+(((-1.0)*x9967*x9968))+(((-1.0)*x9957*x9958*x9967))+(((-1.0)*x9963*x9977))+(((-1.0)*x9978))+(((-1.0)*r22*sj3*x9973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9979=((1.0)*gconst38);
CheckValue<IkReal> x9980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9979))+((gconst39*r20)))),-1);
if(!x9980.valid){
continue;
}
CheckValue<IkReal> x9981 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r01))+(((-1.0)*r00*x9979)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9980.value)))+(x9981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9982=IKcos(j4);
IkReal x9983=IKsin(j4);
IkReal x9984=(gconst38*sj3);
IkReal x9985=(gconst38*r20);
IkReal x9986=((1.0)*r00);
IkReal x9987=(sj1*sj2);
IkReal x9988=(cj3*gconst38);
IkReal x9989=(gconst39*r21);
IkReal x9990=(gconst39*r01);
IkReal x9991=((1.0)*cj2);
IkReal x9992=(gconst39*sj3);
IkReal x9993=((1.0)*r20);
IkReal x9994=(cj3*gconst39);
IkReal x9995=((1.0)*r10);
IkReal x9996=(gconst39*r11);
IkReal x9997=((1.0)*cj1*sj2);
IkReal x9998=(sj1*x9991);
IkReal x9999=((1.0)*x9982);
IkReal x10000=(cj3*x9983);
IkReal x10001=(r10*x9983);
IkReal x10002=(cj3*x9982);
IkReal x10003=((1.0)*sj3*x9983);
IkReal x10004=(x9998+x9997);
evalcond[0]=(((r22*x9983))+(((-1.0)*x9989*x9999))+(((-1.0)*x9985*x9999)));
evalcond[1]=((((-1.0)*x9990*x9999))+(((-1.0)*gconst38*x9982*x9986))+((r02*x9983)));
evalcond[2]=((1.0)+(((-1.0)*gconst38*x9982*x9995))+((r12*x9983))+(((-1.0)*x9996*x9999)));
evalcond[3]=(((r11*x9983*x9994))+((r11*x9984))+((r12*x10002))+(((-1.0)*x9992*x9995))+((x10001*x9988)));
evalcond[4]=((((-1.0)*r11*x9983*x9992))+((r11*x9988))+(((-1.0)*x9994*x9995))+(((-1.0)*x9983*x9984*x9995))+(((-1.0)*r12*sj3*x9999)));
evalcond[5]=((((-1.0)*cj1*x9991))+((r22*x10002))+(((-1.0)*x9992*x9993))+((r21*x9984))+((x10000*x9989))+((x10000*x9985))+x9987);
evalcond[6]=(((r00*x9983*x9988))+((r02*x10002))+((r01*x9984))+((x10000*x9990))+(((-1.0)*x9986*x9992))+(((-1.0)*x10004)));
evalcond[7]=(((r01*x9988))+(((-1.0)*x10003*x9990))+(((-1.0)*r02*sj3*x9999))+(((-1.0)*x9986*x9994))+(((-1.0)*x9983*x9984*x9986))+(((-1.0)*x9987))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x10003*x9989))+(((-1.0)*r22*sj3*x9999))+(((-1.0)*x9993*x9994))+((r21*x9988))+(((-1.0)*x9983*x9984*x9993))+(((-1.0)*x10004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10005=((1.0)*gconst39);
CheckValue<IkReal> x10006 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10005))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10006.valid){
continue;
}
CheckValue<IkReal> x10007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10005))+((gconst38*r01)))),-1);
if(!x10007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10006.value)+(((1.5707963267949)*(x10007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10008=IKcos(j4);
IkReal x10009=IKsin(j4);
IkReal x10010=(gconst38*sj3);
IkReal x10011=(gconst38*r20);
IkReal x10012=((1.0)*r00);
IkReal x10013=(sj1*sj2);
IkReal x10014=(cj3*gconst38);
IkReal x10015=(gconst39*r21);
IkReal x10016=(gconst39*r01);
IkReal x10017=((1.0)*cj2);
IkReal x10018=(gconst39*sj3);
IkReal x10019=((1.0)*r20);
IkReal x10020=(cj3*gconst39);
IkReal x10021=((1.0)*r10);
IkReal x10022=(gconst39*r11);
IkReal x10023=((1.0)*cj1*sj2);
IkReal x10024=(sj1*x10017);
IkReal x10025=((1.0)*x10008);
IkReal x10026=(cj3*x10009);
IkReal x10027=(r10*x10009);
IkReal x10028=(cj3*x10008);
IkReal x10029=((1.0)*sj3*x10009);
IkReal x10030=(x10024+x10023);
evalcond[0]=(((r22*x10009))+(((-1.0)*x10011*x10025))+(((-1.0)*x10015*x10025)));
evalcond[1]=(((r02*x10009))+(((-1.0)*x10016*x10025))+(((-1.0)*gconst38*x10008*x10012)));
evalcond[2]=((1.0)+((r12*x10009))+(((-1.0)*gconst38*x10008*x10021))+(((-1.0)*x10022*x10025)));
evalcond[3]=((((-1.0)*x10018*x10021))+((r11*x10010))+((r11*x10009*x10020))+((r12*x10028))+((x10014*x10027)));
evalcond[4]=((((-1.0)*x10009*x10010*x10021))+((r11*x10014))+(((-1.0)*r12*sj3*x10025))+(((-1.0)*x10020*x10021))+(((-1.0)*r11*x10009*x10018)));
evalcond[5]=((((-1.0)*x10018*x10019))+((r21*x10010))+x10013+((x10011*x10026))+((r22*x10028))+(((-1.0)*cj1*x10017))+((x10015*x10026)));
evalcond[6]=((((-1.0)*x10012*x10018))+((x10016*x10026))+((r01*x10010))+(((-1.0)*x10030))+((r02*x10028))+((r00*x10009*x10014)));
evalcond[7]=((((-1.0)*x10016*x10029))+(((-1.0)*x10013))+(((-1.0)*r02*sj3*x10025))+((r01*x10014))+((cj1*cj2))+(((-1.0)*x10009*x10010*x10012))+(((-1.0)*x10012*x10020)));
evalcond[8]=(((r21*x10014))+(((-1.0)*r22*sj3*x10025))+(((-1.0)*x10019*x10020))+(((-1.0)*x10030))+(((-1.0)*x10009*x10010*x10019))+(((-1.0)*x10015*x10029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10034 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10034.valid){
continue;
}
IkReal x10031=((1.0)*(x10034.value));
IkReal x10032=x9586;
IkReal x10033=((1.0)*x10032);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10031)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10031)));
IkReal gconst38=(r20*x10033);
IkReal gconst39=(r21*x10033);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10038 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10038.valid){
continue;
}
IkReal x10035=((1.0)*(x10038.value));
IkReal x10036=x9586;
IkReal x10037=((1.0)*x10036);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10035)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10035)));
IkReal gconst38=(r20*x10037);
IkReal gconst39=(r21*x10037);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10042 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10042.valid){
continue;
}
IkReal x10039=((1.0)*(x10042.value));
IkReal x10040=x9586;
IkReal x10041=((1.0)*x10040);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10039)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10039)));
IkReal gconst38=(r20*x10041);
IkReal gconst39=(r21*x10041);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10046 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10046.valid){
continue;
}
IkReal x10043=((1.0)*(x10046.value));
IkReal x10044=x9586;
IkReal x10045=((1.0)*x10044);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10043)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10043)));
IkReal gconst38=(r20*x10045);
IkReal gconst39=(r21*x10045);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10050 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10050.valid){
continue;
}
IkReal x10047=((1.0)*(x10050.value));
IkReal x10048=x9586;
IkReal x10049=((1.0)*x10048);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10047)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10047)));
IkReal gconst38=(r20*x10049);
IkReal gconst39=(r21*x10049);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10054 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10054.valid){
continue;
}
IkReal x10051=((1.0)*(x10054.value));
IkReal x10052=x9586;
IkReal x10053=((1.0)*x10052);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10051)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10051)));
IkReal gconst38=(r20*x10053);
IkReal gconst39=(r21*x10053);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10055=(gconst38*r10);
IkReal x10056=(gconst39*r11);
CheckValue<IkReal> x10057=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x10055*x10056))+(x10056*x10056)+(x10055*x10055))),-1);
if(!x10057.valid){
continue;
}
CheckValue<IkReal> x10058 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10055))+(((-1.0)*x10056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10057.value)))+(x10058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10059=IKcos(j4);
IkReal x10060=IKsin(j4);
IkReal x10061=(gconst38*r20);
IkReal x10062=(gconst38*r10);
IkReal x10063=((1.0)*cj2);
IkReal x10064=(gconst39*r21);
IkReal x10065=(gconst38*r00);
IkReal x10066=(gconst39*r01);
IkReal x10067=(gconst39*r11);
IkReal x10068=((1.0)*x10059);
IkReal x10069=((1.0)*x10060);
evalcond[0]=((((-1.0)*x10064*x10068))+((r22*x10060))+(((-1.0)*x10061*x10068)));
evalcond[1]=((((-1.0)*x10066*x10068))+((r02*x10060))+(((-1.0)*x10065*x10068)));
evalcond[2]=((-1.0)+((r12*x10060))+(((-1.0)*x10067*x10068))+(((-1.0)*x10062*x10068)));
evalcond[3]=((((-1.0)*x10067*x10069))+(((-1.0)*x10062*x10069))+(((-1.0)*r12*x10068)));
evalcond[4]=((((-1.0)*x10066*x10069))+((sj1*sj2))+(((-1.0)*cj1*x10063))+(((-1.0)*r02*x10068))+(((-1.0)*x10065*x10069)));
evalcond[5]=((((-1.0)*x10064*x10069))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10063))+(((-1.0)*x10061*x10069))+(((-1.0)*r22*x10068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10070=((1.0)*gconst39);
CheckValue<IkReal> x10071 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10070)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10071.valid){
continue;
}
CheckValue<IkReal> x10072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10070))+((gconst38*r21)))),-1);
if(!x10072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10071.value)+(((1.5707963267949)*(x10072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10073=IKcos(j4);
IkReal x10074=IKsin(j4);
IkReal x10075=(gconst38*r20);
IkReal x10076=(gconst38*r10);
IkReal x10077=((1.0)*cj2);
IkReal x10078=(gconst39*r21);
IkReal x10079=(gconst38*r00);
IkReal x10080=(gconst39*r01);
IkReal x10081=(gconst39*r11);
IkReal x10082=((1.0)*x10073);
IkReal x10083=((1.0)*x10074);
evalcond[0]=((((-1.0)*x10078*x10082))+((r22*x10074))+(((-1.0)*x10075*x10082)));
evalcond[1]=((((-1.0)*x10080*x10082))+(((-1.0)*x10079*x10082))+((r02*x10074)));
evalcond[2]=((-1.0)+((r12*x10074))+(((-1.0)*x10081*x10082))+(((-1.0)*x10076*x10082)));
evalcond[3]=((((-1.0)*x10081*x10083))+(((-1.0)*x10076*x10083))+(((-1.0)*r12*x10082)));
evalcond[4]=((((-1.0)*x10080*x10083))+((sj1*sj2))+(((-1.0)*x10079*x10083))+(((-1.0)*cj1*x10077))+(((-1.0)*r02*x10082)));
evalcond[5]=((((-1.0)*x10078*x10083))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10077))+(((-1.0)*x10075*x10083))+(((-1.0)*r22*x10082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10084=((1.0)*gconst38);
CheckValue<IkReal> x10085 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10084))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10085.valid){
continue;
}
CheckValue<IkReal> x10086=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10084))+((gconst39*r00)))),-1);
if(!x10086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10085.value)+(((1.5707963267949)*(x10086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10087=IKcos(j4);
IkReal x10088=IKsin(j4);
IkReal x10089=(gconst38*r20);
IkReal x10090=(gconst38*r10);
IkReal x10091=((1.0)*cj2);
IkReal x10092=(gconst39*r21);
IkReal x10093=(gconst38*r00);
IkReal x10094=(gconst39*r01);
IkReal x10095=(gconst39*r11);
IkReal x10096=((1.0)*x10087);
IkReal x10097=((1.0)*x10088);
evalcond[0]=((((-1.0)*x10092*x10096))+((r22*x10088))+(((-1.0)*x10089*x10096)));
evalcond[1]=((((-1.0)*x10093*x10096))+((r02*x10088))+(((-1.0)*x10094*x10096)));
evalcond[2]=((-1.0)+(((-1.0)*x10095*x10096))+(((-1.0)*x10090*x10096))+((r12*x10088)));
evalcond[3]=((((-1.0)*x10095*x10097))+(((-1.0)*r12*x10096))+(((-1.0)*x10090*x10097)));
evalcond[4]=((((-1.0)*cj1*x10091))+((sj1*sj2))+(((-1.0)*r02*x10096))+(((-1.0)*x10093*x10097))+(((-1.0)*x10094*x10097)));
evalcond[5]=((((-1.0)*x10092*x10097))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10091))+(((-1.0)*x10089*x10097))+(((-1.0)*r22*x10096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10101 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10101.valid){
continue;
}
IkReal x10098=((1.0)*(x10101.value));
IkReal x10099=x9586;
IkReal x10100=((1.0)*x10099);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10098)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10098)));
IkReal gconst38=(r20*x10100);
IkReal gconst39=(r21*x10100);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10105 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10105.valid){
continue;
}
IkReal x10102=((1.0)*(x10105.value));
IkReal x10103=x9586;
IkReal x10104=((1.0)*x10103);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10102)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10102)));
IkReal gconst38=(r20*x10104);
IkReal gconst39=(r21*x10104);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10109 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10109.valid){
continue;
}
IkReal x10106=((1.0)*(x10109.value));
IkReal x10107=x9586;
IkReal x10108=((1.0)*x10107);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10106)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10106)));
IkReal gconst38=(r20*x10108);
IkReal gconst39=(r21*x10108);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10110=(gconst38*r10);
IkReal x10111=(gconst39*r11);
CheckValue<IkReal> x10112=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x10110*x10111))+(x10111*x10111)+(x10110*x10110))),-1);
if(!x10112.valid){
continue;
}
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10110))+(((-1.0)*x10111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10112.value)))+(x10113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10114=IKsin(j4);
IkReal x10115=IKcos(j4);
IkReal x10116=(gconst38*r20);
IkReal x10117=((1.0)*cj2);
IkReal x10118=(gconst39*r21);
IkReal x10119=(gconst38*r10);
IkReal x10120=(gconst38*r00);
IkReal x10121=(gconst39*r01);
IkReal x10122=(gconst39*r11);
IkReal x10123=((1.0)*x10115);
evalcond[0]=(((x10114*x10122))+((r12*x10115))+((x10114*x10119)));
evalcond[1]=((((-1.0)*x10116*x10123))+((r22*x10114))+(((-1.0)*x10118*x10123)));
evalcond[2]=((((-1.0)*x10120*x10123))+(((-1.0)*x10121*x10123))+((r02*x10114)));
evalcond[3]=((-1.0)+((r12*x10114))+(((-1.0)*x10122*x10123))+(((-1.0)*x10119*x10123)));
evalcond[4]=(((x10114*x10121))+((x10114*x10120))+((sj1*sj2))+((r02*x10115))+(((-1.0)*cj1*x10117)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x10114*x10118))+((x10114*x10116))+(((-1.0)*sj1*x10117))+((r22*x10115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10124=((1.0)*gconst39);
CheckValue<IkReal> x10125=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10124))+((gconst38*r21)))),-1);
if(!x10125.valid){
continue;
}
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10124)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10125.value)))+(x10126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10127=IKsin(j4);
IkReal x10128=IKcos(j4);
IkReal x10129=(gconst38*r20);
IkReal x10130=((1.0)*cj2);
IkReal x10131=(gconst39*r21);
IkReal x10132=(gconst38*r10);
IkReal x10133=(gconst38*r00);
IkReal x10134=(gconst39*r01);
IkReal x10135=(gconst39*r11);
IkReal x10136=((1.0)*x10128);
evalcond[0]=(((x10127*x10135))+((x10127*x10132))+((r12*x10128)));
evalcond[1]=((((-1.0)*x10131*x10136))+(((-1.0)*x10129*x10136))+((r22*x10127)));
evalcond[2]=(((r02*x10127))+(((-1.0)*x10134*x10136))+(((-1.0)*x10133*x10136)));
evalcond[3]=((-1.0)+(((-1.0)*x10132*x10136))+(((-1.0)*x10135*x10136))+((r12*x10127)));
evalcond[4]=((((-1.0)*cj1*x10130))+((sj1*sj2))+((r02*x10128))+((x10127*x10134))+((x10127*x10133)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x10127*x10129))+((x10127*x10131))+(((-1.0)*sj1*x10130))+((r22*x10128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10137=((1.0)*gconst38);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10137))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
CheckValue<IkReal> x10139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10137))+((gconst39*r00)))),-1);
if(!x10139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10138.value)+(((1.5707963267949)*(x10139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10140=IKsin(j4);
IkReal x10141=IKcos(j4);
IkReal x10142=(gconst38*r20);
IkReal x10143=((1.0)*cj2);
IkReal x10144=(gconst39*r21);
IkReal x10145=(gconst38*r10);
IkReal x10146=(gconst38*r00);
IkReal x10147=(gconst39*r01);
IkReal x10148=(gconst39*r11);
IkReal x10149=((1.0)*x10141);
evalcond[0]=(((r12*x10141))+((x10140*x10145))+((x10140*x10148)));
evalcond[1]=((((-1.0)*x10142*x10149))+(((-1.0)*x10144*x10149))+((r22*x10140)));
evalcond[2]=(((r02*x10140))+(((-1.0)*x10147*x10149))+(((-1.0)*x10146*x10149)));
evalcond[3]=((-1.0)+((r12*x10140))+(((-1.0)*x10148*x10149))+(((-1.0)*x10145*x10149)));
evalcond[4]=((((-1.0)*cj1*x10143))+((r02*x10141))+((sj1*sj2))+((x10140*x10146))+((x10140*x10147)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10143))+((r22*x10141))+((x10140*x10142))+((x10140*x10144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal x10150=((1.0)*(x10153.value));
IkReal x10151=x9586;
IkReal x10152=((1.0)*x10151);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10150)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10150)));
IkReal gconst38=(r20*x10152);
IkReal gconst39=(r21*x10152);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10154=((1.0)*(x10157.value));
IkReal x10155=x9586;
IkReal x10156=((1.0)*x10155);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10154)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10154)));
IkReal gconst38=(r20*x10156);
IkReal gconst39=(r21*x10156);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
IkReal x10158=((1.0)*(x10161.value));
IkReal x10159=x9586;
IkReal x10160=((1.0)*x10159);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10158)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10158)));
IkReal gconst38=(r20*x10160);
IkReal gconst39=(r21*x10160);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10162=(gconst38*r10);
IkReal x10163=(gconst39*r11);
CheckValue<IkReal> x10164=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10163*x10163)+(((2.0)*x10162*x10163))+(x10162*x10162))),-1);
if(!x10164.valid){
continue;
}
CheckValue<IkReal> x10165 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10163))+(((-1.0)*x10162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10164.value)))+(x10165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10166=IKsin(j4);
IkReal x10167=IKcos(j4);
IkReal x10168=(gconst38*r20);
IkReal x10169=(gconst39*r21);
IkReal x10170=(gconst38*r10);
IkReal x10171=(gconst38*r00);
IkReal x10172=(gconst39*r01);
IkReal x10173=(gconst39*r11);
IkReal x10174=((1.0)*x10167);
evalcond[0]=(((x10166*x10170))+((x10166*x10173))+((r12*x10167)));
evalcond[1]=((((-1.0)*x10169*x10174))+((r22*x10166))+(((-1.0)*x10168*x10174)));
evalcond[2]=((((-1.0)*x10172*x10174))+((r02*x10166))+(((-1.0)*x10171*x10174)));
evalcond[3]=((-1.0)+((r12*x10166))+(((-1.0)*x10173*x10174))+(((-1.0)*x10170*x10174)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10166*x10171))+((x10166*x10172))+((r02*x10167)));
evalcond[5]=(((r22*x10167))+((x10166*x10168))+((x10166*x10169))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10175=((1.0)*gconst39);
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10175))+((gconst38*r21)))),-1);
if(!x10176.valid){
continue;
}
CheckValue<IkReal> x10177 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10175)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10176.value)))+(x10177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10178=IKsin(j4);
IkReal x10179=IKcos(j4);
IkReal x10180=(gconst38*r20);
IkReal x10181=(gconst39*r21);
IkReal x10182=(gconst38*r10);
IkReal x10183=(gconst38*r00);
IkReal x10184=(gconst39*r01);
IkReal x10185=(gconst39*r11);
IkReal x10186=((1.0)*x10179);
evalcond[0]=(((x10178*x10185))+((x10178*x10182))+((r12*x10179)));
evalcond[1]=(((r22*x10178))+(((-1.0)*x10181*x10186))+(((-1.0)*x10180*x10186)));
evalcond[2]=(((r02*x10178))+(((-1.0)*x10183*x10186))+(((-1.0)*x10184*x10186)));
evalcond[3]=((-1.0)+((r12*x10178))+(((-1.0)*x10182*x10186))+(((-1.0)*x10185*x10186)));
evalcond[4]=(((cj2*sj1))+((x10178*x10184))+((x10178*x10183))+((r02*x10179))+((cj1*sj2)));
evalcond[5]=(((x10178*x10181))+((x10178*x10180))+(((-1.0)*cj1*cj2))+((r22*x10179))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10187=((1.0)*gconst38);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10187))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
CheckValue<IkReal> x10189=IKPowWithIntegerCheck(IKsign((((gconst39*r00))+(((-1.0)*r01*x10187)))),-1);
if(!x10189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10188.value)+(((1.5707963267949)*(x10189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10190=IKsin(j4);
IkReal x10191=IKcos(j4);
IkReal x10192=(gconst38*r20);
IkReal x10193=(gconst39*r21);
IkReal x10194=(gconst38*r10);
IkReal x10195=(gconst38*r00);
IkReal x10196=(gconst39*r01);
IkReal x10197=(gconst39*r11);
IkReal x10198=((1.0)*x10191);
evalcond[0]=(((r12*x10191))+((x10190*x10197))+((x10190*x10194)));
evalcond[1]=(((r22*x10190))+(((-1.0)*x10193*x10198))+(((-1.0)*x10192*x10198)));
evalcond[2]=(((r02*x10190))+(((-1.0)*x10195*x10198))+(((-1.0)*x10196*x10198)));
evalcond[3]=((-1.0)+((r12*x10190))+(((-1.0)*x10194*x10198))+(((-1.0)*x10197*x10198)));
evalcond[4]=(((r02*x10191))+((cj2*sj1))+((cj1*sj2))+((x10190*x10196))+((x10190*x10195)));
evalcond[5]=(((r22*x10191))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10190*x10193))+((x10190*x10192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10202 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10202.valid){
continue;
}
IkReal x10199=((1.0)*(x10202.value));
IkReal x10200=x9586;
IkReal x10201=((1.0)*x10200);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10199)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10199)));
IkReal gconst38=(r20*x10201);
IkReal gconst39=(r21*x10201);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10206 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10206.valid){
continue;
}
IkReal x10203=((1.0)*(x10206.value));
IkReal x10204=x9586;
IkReal x10205=((1.0)*x10204);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10203)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10203)));
IkReal gconst38=(r20*x10205);
IkReal gconst39=(r21*x10205);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
IkReal x10207=((1.0)*(x10210.value));
IkReal x10208=x9586;
IkReal x10209=((1.0)*x10208);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10207)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10207)));
IkReal gconst38=(r20*x10209);
IkReal gconst39=(r21*x10209);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10211=(gconst38*r10);
IkReal x10212=(gconst39*r11);
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10212))+(((-1.0)*x10211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
CheckValue<IkReal> x10214=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10211*x10211)+(x10212*x10212)+(((2.0)*x10211*x10212)))),-1);
if(!x10214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10213.value)+(((1.5707963267949)*(x10214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10215=IKcos(j4);
IkReal x10216=IKsin(j4);
IkReal x10217=(gconst38*r20);
IkReal x10218=(gconst38*r10);
IkReal x10219=(gconst39*r21);
IkReal x10220=(gconst38*r00);
IkReal x10221=(gconst39*r01);
IkReal x10222=(gconst39*r11);
IkReal x10223=((1.0)*x10215);
IkReal x10224=((1.0)*x10216);
evalcond[0]=((((-1.0)*x10217*x10223))+(((-1.0)*x10219*x10223))+((r22*x10216)));
evalcond[1]=((((-1.0)*x10220*x10223))+(((-1.0)*x10221*x10223))+((r02*x10216)));
evalcond[2]=((-1.0)+(((-1.0)*x10222*x10223))+((r12*x10216))+(((-1.0)*x10218*x10223)));
evalcond[3]=((((-1.0)*x10222*x10224))+(((-1.0)*r12*x10223))+(((-1.0)*x10218*x10224)));
evalcond[4]=((((-1.0)*x10220*x10224))+((cj2*sj1))+(((-1.0)*r02*x10223))+((cj1*sj2))+(((-1.0)*x10221*x10224)));
evalcond[5]=((((-1.0)*x10217*x10224))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10219*x10224))+(((-1.0)*r22*x10223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10225=((1.0)*gconst39);
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10225)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10225))+((gconst38*r21)))),-1);
if(!x10227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10226.value)+(((1.5707963267949)*(x10227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10228=IKcos(j4);
IkReal x10229=IKsin(j4);
IkReal x10230=(gconst38*r20);
IkReal x10231=(gconst38*r10);
IkReal x10232=(gconst39*r21);
IkReal x10233=(gconst38*r00);
IkReal x10234=(gconst39*r01);
IkReal x10235=(gconst39*r11);
IkReal x10236=((1.0)*x10228);
IkReal x10237=((1.0)*x10229);
evalcond[0]=((((-1.0)*x10230*x10236))+((r22*x10229))+(((-1.0)*x10232*x10236)));
evalcond[1]=((((-1.0)*x10234*x10236))+(((-1.0)*x10233*x10236))+((r02*x10229)));
evalcond[2]=((-1.0)+((r12*x10229))+(((-1.0)*x10235*x10236))+(((-1.0)*x10231*x10236)));
evalcond[3]=((((-1.0)*x10235*x10237))+(((-1.0)*r12*x10236))+(((-1.0)*x10231*x10237)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10234*x10237))+(((-1.0)*x10233*x10237))+((cj1*sj2))+(((-1.0)*r02*x10236)));
evalcond[5]=((((-1.0)*x10230*x10237))+(((-1.0)*x10232*x10237))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10238=((1.0)*gconst38);
CheckValue<IkReal> x10239 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r21))+(((-1.0)*r20*x10238)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10239.valid){
continue;
}
CheckValue<IkReal> x10240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10238))+((gconst39*r00)))),-1);
if(!x10240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10239.value)+(((1.5707963267949)*(x10240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10241=IKcos(j4);
IkReal x10242=IKsin(j4);
IkReal x10243=(gconst38*r20);
IkReal x10244=(gconst38*r10);
IkReal x10245=(gconst39*r21);
IkReal x10246=(gconst38*r00);
IkReal x10247=(gconst39*r01);
IkReal x10248=(gconst39*r11);
IkReal x10249=((1.0)*x10241);
IkReal x10250=((1.0)*x10242);
evalcond[0]=(((r22*x10242))+(((-1.0)*x10245*x10249))+(((-1.0)*x10243*x10249)));
evalcond[1]=((((-1.0)*x10247*x10249))+((r02*x10242))+(((-1.0)*x10246*x10249)));
evalcond[2]=((-1.0)+(((-1.0)*x10248*x10249))+(((-1.0)*x10244*x10249))+((r12*x10242)));
evalcond[3]=((((-1.0)*x10248*x10250))+(((-1.0)*r12*x10249))+(((-1.0)*x10244*x10250)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10247*x10250))+((cj1*sj2))+(((-1.0)*x10246*x10250))+(((-1.0)*r02*x10249)));
evalcond[5]=((((-1.0)*x10243*x10250))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10245*x10250))+(((-1.0)*r22*x10249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10251=((-1.0)*px);
CheckValue<IkReal> x10253 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10253.valid){
continue;
}
IkReal x10252=((1.0)*(x10253.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10252)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10251);
rxp1_1=(px*r21);
rxp1_2=(r11*x10251);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10252)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x10254=((1.0)*cj3);
IkReal x10255=(r10*r20);
IkReal x10256=(r11*r21);
j4eval[0]=(((x10254*x10255))+((x10254*x10256)));
j4eval[1]=((((-1.0)*x10256))+(((-1.0)*x10255)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10257=((-1.0)*px);
CheckValue<IkReal> x10259 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10259.valid){
continue;
}
IkReal x10258=((1.0)*(x10259.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10258)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10257);
rxp1_1=(px*r21);
rxp1_2=(r11*x10257);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10258)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x10260=((1.0)*cj3);
j4eval[0]=(((r10*r20*x10260))+((r11*r21*x10260)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10261=((-1.0)*px);
CheckValue<IkReal> x10263 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10263.valid){
continue;
}
IkReal x10262=((1.0)*(x10263.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10262)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10261);
rxp1_1=(px*r21);
rxp1_2=(r11*x10261);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10262)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x10264=((1.0)*cj3);
j4eval[0]=(((r10*r20*x10264))+((r11*r21*x10264)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10265=IKPowWithIntegerCheck((((cj3*gconst39*r11))+((cj3*gconst38*r10))),-1);
if(!x10265.valid){
continue;
}
CheckValue<IkReal> x10266=IKPowWithIntegerCheck(cj3,-1);
if(!x10266.valid){
continue;
}
CheckValue<IkReal> x10267=IKPowWithIntegerCheck(r02,-1);
if(!x10267.valid){
continue;
}
if( IKabs(((x10265.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10266.value)*(x10267.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10265.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3))))))+IKsqr(((x10266.value)*(x10267.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10265.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3))))), ((x10266.value)*(x10267.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10268=IKcos(j4);
IkReal x10269=IKsin(j4);
IkReal x10270=(sj1*sj2);
IkReal x10271=(gconst38*r21);
IkReal x10272=(gconst38*r20);
IkReal x10273=((1.0)*cj2);
IkReal x10274=(gconst38*r10);
IkReal x10275=(gconst39*r21);
IkReal x10276=(cj1*sj2);
IkReal x10277=((1.0)*gconst39);
IkReal x10278=(gconst38*r11);
IkReal x10279=(gconst39*r11);
IkReal x10280=(cj1*x10273);
IkReal x10281=((1.0)*x10268);
IkReal x10282=(cj3*x10269);
IkReal x10283=((1.0)*sj3*x10269);
evalcond[0]=(r02*x10269);
evalcond[1]=(((cj2*sj1))+x10276+((cj3*r02*x10268)));
evalcond[2]=((((-1.0)*x10275*x10281))+(((-1.0)*x10272*x10281)));
evalcond[3]=((((-1.0)*r02*sj3*x10281))+x10270+(((-1.0)*x10280)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x10268*x10277))+(((-1.0)*x10274*x10281)));
evalcond[5]=(((x10274*x10282))+(((-1.0)*r10*sj3*x10277))+((x10279*x10282))+((sj3*x10278)));
evalcond[6]=((((-1.0)*r11*sj3*x10269*x10277))+((cj3*x10278))+(((-1.0)*cj3*r10*x10277))+(((-1.0)*x10274*x10283)));
evalcond[7]=(((x10272*x10282))+(((-1.0)*r20*sj3*x10277))+((x10275*x10282))+x10270+((sj3*x10271))+(((-1.0)*x10280)));
evalcond[8]=((((-1.0)*x10275*x10283))+((cj3*x10271))+(((-1.0)*sj1*x10273))+(((-1.0)*x10272*x10283))+(((-1.0)*x10276))+(((-1.0)*cj3*r20*x10277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10284=IKPowWithIntegerCheck((((cj3*gconst39*r11))+((cj3*gconst38*r10))),-1);
if(!x10284.valid){
continue;
}
CheckValue<IkReal> x10285=IKPowWithIntegerCheck(r02,-1);
if(!x10285.valid){
continue;
}
CheckValue<IkReal> x10286=IKPowWithIntegerCheck(sj3,-1);
if(!x10286.valid){
continue;
}
if( IKabs(((x10284.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10285.value)*(x10286.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10284.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3))))))+IKsqr(((x10285.value)*(x10286.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10284.value)*(((((-1.0)*gconst38*r11*sj3))+((gconst39*r10*sj3))))), ((x10285.value)*(x10286.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10287=IKcos(j4);
IkReal x10288=IKsin(j4);
IkReal x10289=(sj1*sj2);
IkReal x10290=(gconst38*r21);
IkReal x10291=(gconst38*r20);
IkReal x10292=((1.0)*cj2);
IkReal x10293=(gconst38*r10);
IkReal x10294=(gconst39*r21);
IkReal x10295=(cj1*sj2);
IkReal x10296=((1.0)*gconst39);
IkReal x10297=(gconst38*r11);
IkReal x10298=(gconst39*r11);
IkReal x10299=(cj1*x10292);
IkReal x10300=((1.0)*x10287);
IkReal x10301=(cj3*x10288);
IkReal x10302=((1.0)*sj3*x10288);
evalcond[0]=(r02*x10288);
evalcond[1]=(((cj2*sj1))+x10295+((cj3*r02*x10287)));
evalcond[2]=((((-1.0)*x10294*x10300))+(((-1.0)*x10291*x10300)));
evalcond[3]=((((-1.0)*r02*sj3*x10300))+x10289+(((-1.0)*x10299)));
evalcond[4]=((-1.0)+(((-1.0)*x10293*x10300))+(((-1.0)*r11*x10287*x10296)));
evalcond[5]=((((-1.0)*r10*sj3*x10296))+((x10298*x10301))+((sj3*x10297))+((x10293*x10301)));
evalcond[6]=((((-1.0)*x10293*x10302))+(((-1.0)*r11*sj3*x10288*x10296))+((cj3*x10297))+(((-1.0)*cj3*r10*x10296)));
evalcond[7]=(((x10291*x10301))+((x10294*x10301))+x10289+(((-1.0)*r20*sj3*x10296))+((sj3*x10290))+(((-1.0)*x10299)));
evalcond[8]=((((-1.0)*cj3*r20*x10296))+(((-1.0)*sj1*x10292))+(((-1.0)*x10294*x10302))+((cj3*x10290))+(((-1.0)*x10295))+(((-1.0)*x10291*x10302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10303=(gconst38*r10);
IkReal x10304=((1.0)*r11);
CheckValue<IkReal> x10305=IKPowWithIntegerCheck((((cj3*x10303))+((cj3*gconst39*r11))),-1);
if(!x10305.valid){
continue;
}
CheckValue<IkReal> x10306=IKPowWithIntegerCheck(((((-1.0)*x10303))+(((-1.0)*gconst39*x10304))),-1);
if(!x10306.valid){
continue;
}
if( IKabs(((x10305.value)*(((((-1.0)*gconst38*sj3*x10304))+((gconst39*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10306.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10305.value)*(((((-1.0)*gconst38*sj3*x10304))+((gconst39*r10*sj3))))))+IKsqr(x10306.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10305.value)*(((((-1.0)*gconst38*sj3*x10304))+((gconst39*r10*sj3))))), x10306.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10307=IKcos(j4);
IkReal x10308=IKsin(j4);
IkReal x10309=(sj1*sj2);
IkReal x10310=(gconst38*r21);
IkReal x10311=(gconst38*r20);
IkReal x10312=((1.0)*cj2);
IkReal x10313=(gconst38*r10);
IkReal x10314=(gconst39*r21);
IkReal x10315=(cj1*sj2);
IkReal x10316=((1.0)*gconst39);
IkReal x10317=(gconst38*r11);
IkReal x10318=(gconst39*r11);
IkReal x10319=(cj1*x10312);
IkReal x10320=((1.0)*x10307);
IkReal x10321=(cj3*x10308);
IkReal x10322=((1.0)*sj3*x10308);
evalcond[0]=(r02*x10308);
evalcond[1]=(((cj2*sj1))+((cj3*r02*x10307))+x10315);
evalcond[2]=((((-1.0)*x10314*x10320))+(((-1.0)*x10311*x10320)));
evalcond[3]=((((-1.0)*x10319))+(((-1.0)*r02*sj3*x10320))+x10309);
evalcond[4]=((-1.0)+(((-1.0)*r11*x10307*x10316))+(((-1.0)*x10313*x10320)));
evalcond[5]=(((x10313*x10321))+((x10318*x10321))+(((-1.0)*r10*sj3*x10316))+((sj3*x10317)));
evalcond[6]=((((-1.0)*r11*sj3*x10308*x10316))+(((-1.0)*cj3*r10*x10316))+((cj3*x10317))+(((-1.0)*x10313*x10322)));
evalcond[7]=((((-1.0)*x10319))+((x10311*x10321))+(((-1.0)*r20*sj3*x10316))+((x10314*x10321))+((sj3*x10310))+x10309);
evalcond[8]=((((-1.0)*x10314*x10322))+(((-1.0)*cj3*r20*x10316))+(((-1.0)*x10315))+(((-1.0)*sj1*x10312))+(((-1.0)*x10311*x10322))+((cj3*x10310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10323=gconst39*gconst39;
IkReal x10324=gconst38*gconst38;
IkReal x10325=(r10*r20);
IkReal x10326=(r10*sj3);
IkReal x10327=((1.0)*r11);
IkReal x10328=(r21*x10323);
IkReal x10329=(gconst38*gconst39*sj3);
IkReal x10330=(cj3*gconst38*gconst39);
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal((((x10325*x10329))+(((-1.0)*r20*sj3*x10324*x10327))+((x10326*x10328))+(((-1.0)*r21*x10327*x10329)))),IkReal(((((-1.0)*gconst38*r22*sj3*x10327))+((gconst39*r22*x10326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*x10324*x10325))+((cj3*r11*x10328))+((r11*r20*x10330))+((r10*r21*x10330)))),-1);
if(!x10332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10331.value)+(((1.5707963267949)*(x10332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10333=IKcos(j4);
IkReal x10334=IKsin(j4);
IkReal x10335=(sj1*sj2);
IkReal x10336=(gconst38*sj3);
IkReal x10337=(gconst38*r20);
IkReal x10338=((1.0)*r00);
IkReal x10339=(cj3*gconst38);
IkReal x10340=(gconst39*r21);
IkReal x10341=(gconst39*r01);
IkReal x10342=((1.0)*cj2);
IkReal x10343=(cj1*sj2);
IkReal x10344=(gconst39*sj3);
IkReal x10345=((1.0)*r20);
IkReal x10346=(cj3*gconst39);
IkReal x10347=((1.0)*r10);
IkReal x10348=(gconst39*r11);
IkReal x10349=(cj1*x10342);
IkReal x10350=((1.0)*x10333);
IkReal x10351=(cj3*x10334);
IkReal x10352=(r10*x10334);
IkReal x10353=(cj3*x10333);
IkReal x10354=((1.0)*sj3*x10334);
evalcond[0]=(((r22*x10334))+(((-1.0)*x10340*x10350))+(((-1.0)*x10337*x10350)));
evalcond[1]=(((r02*x10334))+(((-1.0)*x10341*x10350))+(((-1.0)*gconst38*x10333*x10338)));
evalcond[2]=((-1.0)+(((-1.0)*gconst38*x10333*x10347))+((r12*x10334))+(((-1.0)*x10348*x10350)));
evalcond[3]=(((r11*x10334*x10346))+(((-1.0)*x10344*x10347))+((x10339*x10352))+((r11*x10336))+((r12*x10353)));
evalcond[4]=((((-1.0)*r12*sj3*x10350))+(((-1.0)*x10334*x10336*x10347))+(((-1.0)*x10346*x10347))+(((-1.0)*r11*x10334*x10344))+((r11*x10339)));
evalcond[5]=((((-1.0)*x10338*x10344))+((cj2*sj1))+((x10341*x10351))+((r01*x10336))+((r00*x10334*x10339))+x10343+((r02*x10353)));
evalcond[6]=(((x10340*x10351))+(((-1.0)*x10349))+((x10337*x10351))+(((-1.0)*x10344*x10345))+((r21*x10336))+((r22*x10353))+x10335);
evalcond[7]=((((-1.0)*x10338*x10346))+(((-1.0)*x10349))+((r01*x10339))+(((-1.0)*x10341*x10354))+x10335+(((-1.0)*r02*sj3*x10350))+(((-1.0)*x10334*x10336*x10338)));
evalcond[8]=((((-1.0)*x10340*x10354))+(((-1.0)*x10334*x10336*x10345))+(((-1.0)*sj1*x10342))+((r21*x10339))+(((-1.0)*x10343))+(((-1.0)*r22*sj3*x10350))+(((-1.0)*x10345*x10346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10355=((1.0)*gconst39);
CheckValue<IkReal> x10356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10355))+((gconst38*r21)))),-1);
if(!x10356.valid){
continue;
}
CheckValue<IkReal> x10357 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10355)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10356.value)))+(x10357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10358=IKcos(j4);
IkReal x10359=IKsin(j4);
IkReal x10360=(sj1*sj2);
IkReal x10361=(gconst38*sj3);
IkReal x10362=(gconst38*r20);
IkReal x10363=((1.0)*r00);
IkReal x10364=(cj3*gconst38);
IkReal x10365=(gconst39*r21);
IkReal x10366=(gconst39*r01);
IkReal x10367=((1.0)*cj2);
IkReal x10368=(cj1*sj2);
IkReal x10369=(gconst39*sj3);
IkReal x10370=((1.0)*r20);
IkReal x10371=(cj3*gconst39);
IkReal x10372=((1.0)*r10);
IkReal x10373=(gconst39*r11);
IkReal x10374=(cj1*x10367);
IkReal x10375=((1.0)*x10358);
IkReal x10376=(cj3*x10359);
IkReal x10377=(r10*x10359);
IkReal x10378=(cj3*x10358);
IkReal x10379=((1.0)*sj3*x10359);
evalcond[0]=(((r22*x10359))+(((-1.0)*x10362*x10375))+(((-1.0)*x10365*x10375)));
evalcond[1]=((((-1.0)*gconst38*x10358*x10363))+(((-1.0)*x10366*x10375))+((r02*x10359)));
evalcond[2]=((-1.0)+(((-1.0)*gconst38*x10358*x10372))+(((-1.0)*x10373*x10375))+((r12*x10359)));
evalcond[3]=(((x10364*x10377))+(((-1.0)*x10369*x10372))+((r11*x10359*x10371))+((r11*x10361))+((r12*x10378)));
evalcond[4]=((((-1.0)*r12*sj3*x10375))+(((-1.0)*r11*x10359*x10369))+((r11*x10364))+(((-1.0)*x10371*x10372))+(((-1.0)*x10359*x10361*x10372)));
evalcond[5]=(((cj2*sj1))+((r01*x10361))+((r02*x10378))+((x10366*x10376))+(((-1.0)*x10363*x10369))+x10368+((r00*x10359*x10364)));
evalcond[6]=(((r21*x10361))+((r22*x10378))+(((-1.0)*x10369*x10370))+((x10365*x10376))+((x10362*x10376))+x10360+(((-1.0)*x10374)));
evalcond[7]=(((r01*x10364))+(((-1.0)*r02*sj3*x10375))+x10360+(((-1.0)*x10363*x10371))+(((-1.0)*x10366*x10379))+(((-1.0)*x10374))+(((-1.0)*x10359*x10361*x10363)));
evalcond[8]=(((r21*x10364))+(((-1.0)*r22*sj3*x10375))+(((-1.0)*x10368))+(((-1.0)*x10365*x10379))+(((-1.0)*x10359*x10361*x10370))+(((-1.0)*sj1*x10367))+(((-1.0)*x10370*x10371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10380=((1.0)*gconst38);
CheckValue<IkReal> x10381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10380))+((gconst39*r00)))),-1);
if(!x10381.valid){
continue;
}
CheckValue<IkReal> x10382 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10380))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10381.value)))+(x10382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10383=IKcos(j4);
IkReal x10384=IKsin(j4);
IkReal x10385=(sj1*sj2);
IkReal x10386=(gconst38*sj3);
IkReal x10387=(gconst38*r20);
IkReal x10388=((1.0)*r00);
IkReal x10389=(cj3*gconst38);
IkReal x10390=(gconst39*r21);
IkReal x10391=(gconst39*r01);
IkReal x10392=((1.0)*cj2);
IkReal x10393=(cj1*sj2);
IkReal x10394=(gconst39*sj3);
IkReal x10395=((1.0)*r20);
IkReal x10396=(cj3*gconst39);
IkReal x10397=((1.0)*r10);
IkReal x10398=(gconst39*r11);
IkReal x10399=(cj1*x10392);
IkReal x10400=((1.0)*x10383);
IkReal x10401=(cj3*x10384);
IkReal x10402=(r10*x10384);
IkReal x10403=(cj3*x10383);
IkReal x10404=((1.0)*sj3*x10384);
evalcond[0]=((((-1.0)*x10390*x10400))+((r22*x10384))+(((-1.0)*x10387*x10400)));
evalcond[1]=((((-1.0)*x10391*x10400))+(((-1.0)*gconst38*x10383*x10388))+((r02*x10384)));
evalcond[2]=((-1.0)+(((-1.0)*gconst38*x10383*x10397))+((r12*x10384))+(((-1.0)*x10398*x10400)));
evalcond[3]=(((r11*x10386))+((x10389*x10402))+((r12*x10403))+((r11*x10384*x10396))+(((-1.0)*x10394*x10397)));
evalcond[4]=((((-1.0)*x10396*x10397))+(((-1.0)*r11*x10384*x10394))+((r11*x10389))+(((-1.0)*x10384*x10386*x10397))+(((-1.0)*r12*sj3*x10400)));
evalcond[5]=(((x10391*x10401))+((cj2*sj1))+((r00*x10384*x10389))+((r02*x10403))+x10393+(((-1.0)*x10388*x10394))+((r01*x10386)));
evalcond[6]=(((x10390*x10401))+(((-1.0)*x10399))+((r22*x10403))+((r21*x10386))+((x10387*x10401))+x10385+(((-1.0)*x10394*x10395)));
evalcond[7]=((((-1.0)*x10399))+(((-1.0)*x10391*x10404))+x10385+(((-1.0)*x10388*x10396))+((r01*x10389))+(((-1.0)*r02*sj3*x10400))+(((-1.0)*x10384*x10386*x10388)));
evalcond[8]=(((r21*x10389))+(((-1.0)*r22*sj3*x10400))+(((-1.0)*x10390*x10404))+(((-1.0)*x10384*x10386*x10395))+(((-1.0)*x10395*x10396))+(((-1.0)*x10393))+(((-1.0)*sj1*x10392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10408 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10408.valid){
continue;
}
IkReal x10405=((1.0)*(x10408.value));
IkReal x10406=x9586;
IkReal x10407=((1.0)*x10406);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10405)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10405)));
IkReal gconst38=(r20*x10407);
IkReal gconst39=(r21*x10407);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10412 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10412.valid){
continue;
}
IkReal x10409=((1.0)*(x10412.value));
IkReal x10410=x9586;
IkReal x10411=((1.0)*x10410);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10409)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10409)));
IkReal gconst38=(r20*x10411);
IkReal gconst39=(r21*x10411);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
IkReal x10413=((1.0)*(x10416.value));
IkReal x10414=x9586;
IkReal x10415=((1.0)*x10414);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10413)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10413)));
IkReal gconst38=(r20*x10415);
IkReal gconst39=(r21*x10415);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10420 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10420.valid){
continue;
}
IkReal x10417=((1.0)*(x10420.value));
IkReal x10418=x9586;
IkReal x10419=((1.0)*x10418);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10417)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10417)));
IkReal gconst38=(r20*x10419);
IkReal gconst39=(r21*x10419);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10424 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10424.valid){
continue;
}
IkReal x10421=((1.0)*(x10424.value));
IkReal x10422=x9586;
IkReal x10423=((1.0)*x10422);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10421)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10421)));
IkReal gconst38=(r20*x10423);
IkReal gconst39=(r21*x10423);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10428 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10428.valid){
continue;
}
IkReal x10425=((1.0)*(x10428.value));
IkReal x10426=x9586;
IkReal x10427=((1.0)*x10426);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10425)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10425)));
IkReal gconst38=(r20*x10427);
IkReal gconst39=(r21*x10427);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10429=(gconst39*r01);
IkReal x10430=(gconst38*r00);
CheckValue<IkReal> x10431 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10430))+(((-1.0)*x10429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10431.valid){
continue;
}
CheckValue<IkReal> x10432=IKPowWithIntegerCheck(IKsign(((x10430*x10430)+(((2.0)*x10429*x10430))+(x10429*x10429)+(r02*r02))),-1);
if(!x10432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10431.value)+(((1.5707963267949)*(x10432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10433=IKcos(j4);
IkReal x10434=IKsin(j4);
IkReal x10435=(gconst38*r20);
IkReal x10436=(gconst38*r10);
IkReal x10437=((1.0)*sj1);
IkReal x10438=(gconst39*r21);
IkReal x10439=(gconst38*r00);
IkReal x10440=(gconst39*r01);
IkReal x10441=(gconst39*r11);
IkReal x10442=((1.0)*x10433);
IkReal x10443=((1.0)*x10434);
evalcond[0]=((((-1.0)*x10438*x10442))+((r22*x10434))+(((-1.0)*x10435*x10442)));
evalcond[1]=((((-1.0)*x10441*x10442))+(((-1.0)*x10436*x10442))+((r12*x10434)));
evalcond[2]=((-1.0)+(((-1.0)*x10440*x10442))+((r02*x10434))+(((-1.0)*x10439*x10442)));
evalcond[3]=((((-1.0)*x10440*x10443))+(((-1.0)*r02*x10442))+(((-1.0)*x10439*x10443)));
evalcond[4]=((((-1.0)*x10441*x10443))+(((-1.0)*r12*x10442))+(((-1.0)*x10436*x10443))+(((-1.0)*sj2*x10437))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x10438*x10443))+(((-1.0)*cj2*x10437))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10442))+(((-1.0)*x10435*x10443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10444=((1.0)*gconst38);
CheckValue<IkReal> x10445 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10444))+(((-1.0)*gconst39*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10445.valid){
continue;
}
CheckValue<IkReal> x10446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10444))+((gconst39*r20)))),-1);
if(!x10446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10445.value)+(((1.5707963267949)*(x10446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10447=IKcos(j4);
IkReal x10448=IKsin(j4);
IkReal x10449=(gconst38*r20);
IkReal x10450=(gconst38*r10);
IkReal x10451=((1.0)*sj1);
IkReal x10452=(gconst39*r21);
IkReal x10453=(gconst38*r00);
IkReal x10454=(gconst39*r01);
IkReal x10455=(gconst39*r11);
IkReal x10456=((1.0)*x10447);
IkReal x10457=((1.0)*x10448);
evalcond[0]=(((r22*x10448))+(((-1.0)*x10449*x10456))+(((-1.0)*x10452*x10456)));
evalcond[1]=((((-1.0)*x10455*x10456))+((r12*x10448))+(((-1.0)*x10450*x10456)));
evalcond[2]=((-1.0)+((r02*x10448))+(((-1.0)*x10453*x10456))+(((-1.0)*x10454*x10456)));
evalcond[3]=((((-1.0)*r02*x10456))+(((-1.0)*x10453*x10457))+(((-1.0)*x10454*x10457)));
evalcond[4]=((((-1.0)*x10455*x10457))+(((-1.0)*sj2*x10451))+(((-1.0)*x10450*x10457))+((cj1*cj2))+(((-1.0)*r12*x10456)));
evalcond[5]=((((-1.0)*x10449*x10457))+(((-1.0)*r22*x10456))+(((-1.0)*cj1*sj2))+(((-1.0)*x10452*x10457))+(((-1.0)*cj2*x10451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10458=((1.0)*gconst39);
CheckValue<IkReal> x10459 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10458))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10459.valid){
continue;
}
CheckValue<IkReal> x10460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10458))+((gconst38*r11)))),-1);
if(!x10460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10459.value)+(((1.5707963267949)*(x10460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10461=IKcos(j4);
IkReal x10462=IKsin(j4);
IkReal x10463=(gconst38*r20);
IkReal x10464=(gconst38*r10);
IkReal x10465=((1.0)*sj1);
IkReal x10466=(gconst39*r21);
IkReal x10467=(gconst38*r00);
IkReal x10468=(gconst39*r01);
IkReal x10469=(gconst39*r11);
IkReal x10470=((1.0)*x10461);
IkReal x10471=((1.0)*x10462);
evalcond[0]=((((-1.0)*x10466*x10470))+(((-1.0)*x10463*x10470))+((r22*x10462)));
evalcond[1]=(((r12*x10462))+(((-1.0)*x10464*x10470))+(((-1.0)*x10469*x10470)));
evalcond[2]=((-1.0)+(((-1.0)*x10467*x10470))+(((-1.0)*x10468*x10470))+((r02*x10462)));
evalcond[3]=((((-1.0)*r02*x10470))+(((-1.0)*x10467*x10471))+(((-1.0)*x10468*x10471)));
evalcond[4]=((((-1.0)*x10464*x10471))+((cj1*cj2))+(((-1.0)*sj2*x10465))+(((-1.0)*x10469*x10471))+(((-1.0)*r12*x10470)));
evalcond[5]=((((-1.0)*x10466*x10471))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10470))+(((-1.0)*x10463*x10471))+(((-1.0)*cj2*x10465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10475 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10475.valid){
continue;
}
IkReal x10472=((1.0)*(x10475.value));
IkReal x10473=x9586;
IkReal x10474=((1.0)*x10473);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10472)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10472)));
IkReal gconst38=(r20*x10474);
IkReal gconst39=(r21*x10474);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10479 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10479.valid){
continue;
}
IkReal x10476=((1.0)*(x10479.value));
IkReal x10477=x9586;
IkReal x10478=((1.0)*x10477);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10476)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10476)));
IkReal gconst38=(r20*x10478);
IkReal gconst39=(r21*x10478);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
IkReal x10480=((1.0)*(x10483.value));
IkReal x10481=x9586;
IkReal x10482=((1.0)*x10481);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10480)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10480)));
IkReal gconst38=(r20*x10482);
IkReal gconst39=(r21*x10482);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10484=(gconst39*r01);
IkReal x10485=(gconst38*r00);
CheckValue<IkReal> x10486=IKPowWithIntegerCheck(IKsign(((x10485*x10485)+(x10484*x10484)+(((2.0)*x10484*x10485))+(r02*r02))),-1);
if(!x10486.valid){
continue;
}
CheckValue<IkReal> x10487 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10485))+(((-1.0)*x10484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10486.value)))+(x10487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10488=IKsin(j4);
IkReal x10489=IKcos(j4);
IkReal x10490=(gconst38*r20);
IkReal x10491=((1.0)*sj1);
IkReal x10492=(gconst39*r21);
IkReal x10493=(gconst38*r10);
IkReal x10494=(gconst38*r00);
IkReal x10495=(gconst39*r01);
IkReal x10496=(gconst39*r11);
IkReal x10497=((1.0)*x10489);
evalcond[0]=(((r02*x10489))+((x10488*x10495))+((x10488*x10494)));
evalcond[1]=((((-1.0)*x10490*x10497))+((r22*x10488))+(((-1.0)*x10492*x10497)));
evalcond[2]=(((r12*x10488))+(((-1.0)*x10493*x10497))+(((-1.0)*x10496*x10497)));
evalcond[3]=((-1.0)+(((-1.0)*x10495*x10497))+(((-1.0)*x10494*x10497))+((r02*x10488)));
evalcond[4]=(((r12*x10489))+((cj1*cj2))+((x10488*x10496))+((x10488*x10493))+(((-1.0)*sj2*x10491)));
evalcond[5]=(((r22*x10489))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10491))+((x10488*x10492))+((x10488*x10490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10498=((1.0)*gconst38);
CheckValue<IkReal> x10499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10498))+((gconst39*r20)))),-1);
if(!x10499.valid){
continue;
}
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r11))+(((-1.0)*r10*x10498)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10499.value)))+(x10500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10501=IKsin(j4);
IkReal x10502=IKcos(j4);
IkReal x10503=(gconst38*r20);
IkReal x10504=((1.0)*sj1);
IkReal x10505=(gconst39*r21);
IkReal x10506=(gconst38*r10);
IkReal x10507=(gconst38*r00);
IkReal x10508=(gconst39*r01);
IkReal x10509=(gconst39*r11);
IkReal x10510=((1.0)*x10502);
evalcond[0]=(((r02*x10502))+((x10501*x10508))+((x10501*x10507)));
evalcond[1]=((((-1.0)*x10503*x10510))+(((-1.0)*x10505*x10510))+((r22*x10501)));
evalcond[2]=((((-1.0)*x10509*x10510))+((r12*x10501))+(((-1.0)*x10506*x10510)));
evalcond[3]=((-1.0)+(((-1.0)*x10508*x10510))+((r02*x10501))+(((-1.0)*x10507*x10510)));
evalcond[4]=((((-1.0)*sj2*x10504))+((cj1*cj2))+((x10501*x10509))+((x10501*x10506))+((r12*x10502)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10504))+((r22*x10502))+((x10501*x10505))+((x10501*x10503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10511=((1.0)*gconst39);
CheckValue<IkReal> x10512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10511))+((gconst38*r11)))),-1);
if(!x10512.valid){
continue;
}
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10511))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10512.value)))+(x10513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10514=IKsin(j4);
IkReal x10515=IKcos(j4);
IkReal x10516=(gconst38*r20);
IkReal x10517=((1.0)*sj1);
IkReal x10518=(gconst39*r21);
IkReal x10519=(gconst38*r10);
IkReal x10520=(gconst38*r00);
IkReal x10521=(gconst39*r01);
IkReal x10522=(gconst39*r11);
IkReal x10523=((1.0)*x10515);
evalcond[0]=(((x10514*x10521))+((x10514*x10520))+((r02*x10515)));
evalcond[1]=((((-1.0)*x10518*x10523))+((r22*x10514))+(((-1.0)*x10516*x10523)));
evalcond[2]=(((r12*x10514))+(((-1.0)*x10522*x10523))+(((-1.0)*x10519*x10523)));
evalcond[3]=((-1.0)+(((-1.0)*x10520*x10523))+(((-1.0)*x10521*x10523))+((r02*x10514)));
evalcond[4]=(((r12*x10515))+((x10514*x10519))+((cj1*cj2))+((x10514*x10522))+(((-1.0)*sj2*x10517)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10517))+((x10514*x10518))+((x10514*x10516))+((r22*x10515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10527 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10527.valid){
continue;
}
IkReal x10524=((1.0)*(x10527.value));
IkReal x10525=x9586;
IkReal x10526=((1.0)*x10525);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10524)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10524)));
IkReal gconst38=(r20*x10526);
IkReal gconst39=(r21*x10526);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
IkReal x10528=((1.0)*(x10531.value));
IkReal x10529=x9586;
IkReal x10530=((1.0)*x10529);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10528)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10528)));
IkReal gconst38=(r20*x10530);
IkReal gconst39=(r21*x10530);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10535 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10535.valid){
continue;
}
IkReal x10532=((1.0)*(x10535.value));
IkReal x10533=x9586;
IkReal x10534=((1.0)*x10533);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10532)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10532)));
IkReal gconst38=(r20*x10534);
IkReal gconst39=(r21*x10534);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10536=(gconst39*r01);
IkReal x10537=(gconst38*r00);
CheckValue<IkReal> x10538=IKPowWithIntegerCheck(IKsign(((((2.0)*x10536*x10537))+(x10537*x10537)+(x10536*x10536)+(r02*r02))),-1);
if(!x10538.valid){
continue;
}
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10536))+(((-1.0)*x10537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10538.value)))+(x10539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10540=IKsin(j4);
IkReal x10541=IKcos(j4);
IkReal x10542=(gconst38*r20);
IkReal x10543=((1.0)*cj2);
IkReal x10544=(gconst39*r21);
IkReal x10545=(gconst38*r10);
IkReal x10546=(gconst38*r00);
IkReal x10547=(gconst39*r01);
IkReal x10548=(gconst39*r11);
IkReal x10549=((1.0)*x10541);
evalcond[0]=(((x10540*x10547))+((x10540*x10546))+((r02*x10541)));
evalcond[1]=((((-1.0)*x10544*x10549))+(((-1.0)*x10542*x10549))+((r22*x10540)));
evalcond[2]=(((r12*x10540))+(((-1.0)*x10545*x10549))+(((-1.0)*x10548*x10549)));
evalcond[3]=((-1.0)+(((-1.0)*x10547*x10549))+(((-1.0)*x10546*x10549))+((r02*x10540)));
evalcond[4]=(((x10540*x10542))+((x10540*x10544))+(((-1.0)*cj1*x10543))+((r22*x10541))+((sj1*sj2)));
evalcond[5]=(((x10540*x10545))+((x10540*x10548))+((r12*x10541))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10550=((1.0)*gconst38);
CheckValue<IkReal> x10551 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r11))+(((-1.0)*r10*x10550)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10551.valid){
continue;
}
CheckValue<IkReal> x10552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10550))+((gconst39*r20)))),-1);
if(!x10552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10551.value)+(((1.5707963267949)*(x10552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10553=IKsin(j4);
IkReal x10554=IKcos(j4);
IkReal x10555=(gconst38*r20);
IkReal x10556=((1.0)*cj2);
IkReal x10557=(gconst39*r21);
IkReal x10558=(gconst38*r10);
IkReal x10559=(gconst38*r00);
IkReal x10560=(gconst39*r01);
IkReal x10561=(gconst39*r11);
IkReal x10562=((1.0)*x10554);
evalcond[0]=(((r02*x10554))+((x10553*x10560))+((x10553*x10559)));
evalcond[1]=((((-1.0)*x10555*x10562))+((r22*x10553))+(((-1.0)*x10557*x10562)));
evalcond[2]=((((-1.0)*x10561*x10562))+(((-1.0)*x10558*x10562))+((r12*x10553)));
evalcond[3]=((-1.0)+((r02*x10553))+(((-1.0)*x10560*x10562))+(((-1.0)*x10559*x10562)));
evalcond[4]=(((r22*x10554))+(((-1.0)*cj1*x10556))+((sj1*sj2))+((x10553*x10557))+((x10553*x10555)));
evalcond[5]=((((-1.0)*sj1*x10556))+((x10553*x10561))+(((-1.0)*cj1*sj2))+((r12*x10554))+((x10553*x10558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10563=((1.0)*gconst39);
CheckValue<IkReal> x10564 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10563))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10564.valid){
continue;
}
CheckValue<IkReal> x10565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10563))+((gconst38*r11)))),-1);
if(!x10565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10564.value)+(((1.5707963267949)*(x10565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10566=IKsin(j4);
IkReal x10567=IKcos(j4);
IkReal x10568=(gconst38*r20);
IkReal x10569=((1.0)*cj2);
IkReal x10570=(gconst39*r21);
IkReal x10571=(gconst38*r10);
IkReal x10572=(gconst38*r00);
IkReal x10573=(gconst39*r01);
IkReal x10574=(gconst39*r11);
IkReal x10575=((1.0)*x10567);
evalcond[0]=(((x10566*x10572))+((x10566*x10573))+((r02*x10567)));
evalcond[1]=((((-1.0)*x10568*x10575))+((r22*x10566))+(((-1.0)*x10570*x10575)));
evalcond[2]=((((-1.0)*x10571*x10575))+(((-1.0)*x10574*x10575))+((r12*x10566)));
evalcond[3]=((-1.0)+(((-1.0)*x10573*x10575))+((r02*x10566))+(((-1.0)*x10572*x10575)));
evalcond[4]=(((x10566*x10568))+((x10566*x10570))+((sj1*sj2))+((r22*x10567))+(((-1.0)*cj1*x10569)));
evalcond[5]=((((-1.0)*sj1*x10569))+((x10566*x10574))+((x10566*x10571))+(((-1.0)*cj1*sj2))+((r12*x10567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
IkReal x10576=((1.0)*(x10579.value));
IkReal x10577=x9586;
IkReal x10578=((1.0)*x10577);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10576)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10576)));
IkReal gconst38=(r20*x10578);
IkReal gconst39=(r21*x10578);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10583 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10583.valid){
continue;
}
IkReal x10580=((1.0)*(x10583.value));
IkReal x10581=x9586;
IkReal x10582=((1.0)*x10581);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10580)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10580)));
IkReal gconst38=(r20*x10582);
IkReal gconst39=(r21*x10582);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10587 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10587.valid){
continue;
}
IkReal x10584=((1.0)*(x10587.value));
IkReal x10585=x9586;
IkReal x10586=((1.0)*x10585);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10584)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10584)));
IkReal gconst38=(r20*x10586);
IkReal gconst39=(r21*x10586);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10588=(gconst39*r01);
IkReal x10589=(gconst38*r00);
CheckValue<IkReal> x10590=IKPowWithIntegerCheck(IKsign(((x10588*x10588)+(x10589*x10589)+(r02*r02)+(((2.0)*x10588*x10589)))),-1);
if(!x10590.valid){
continue;
}
CheckValue<IkReal> x10591 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10589))+(((-1.0)*x10588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10590.value)))+(x10591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10592=IKcos(j4);
IkReal x10593=IKsin(j4);
IkReal x10594=(gconst38*r20);
IkReal x10595=(gconst38*r10);
IkReal x10596=((1.0)*cj2);
IkReal x10597=(gconst39*r21);
IkReal x10598=(gconst38*r00);
IkReal x10599=(gconst39*r01);
IkReal x10600=(gconst39*r11);
IkReal x10601=((1.0)*x10592);
IkReal x10602=((1.0)*x10593);
evalcond[0]=((((-1.0)*x10594*x10601))+((r22*x10593))+(((-1.0)*x10597*x10601)));
evalcond[1]=((((-1.0)*x10600*x10601))+((r12*x10593))+(((-1.0)*x10595*x10601)));
evalcond[2]=((-1.0)+(((-1.0)*x10598*x10601))+(((-1.0)*x10599*x10601))+((r02*x10593)));
evalcond[3]=((((-1.0)*x10598*x10602))+(((-1.0)*r02*x10601))+(((-1.0)*x10599*x10602)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10594*x10602))+(((-1.0)*cj1*x10596))+(((-1.0)*r22*x10601))+(((-1.0)*x10597*x10602)));
evalcond[5]=((((-1.0)*x10600*x10602))+(((-1.0)*r12*x10601))+(((-1.0)*x10595*x10602))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10603=((1.0)*gconst38);
CheckValue<IkReal> x10604 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r11))+(((-1.0)*r10*x10603)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10604.valid){
continue;
}
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10603))+((gconst39*r20)))),-1);
if(!x10605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10604.value)+(((1.5707963267949)*(x10605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10606=IKcos(j4);
IkReal x10607=IKsin(j4);
IkReal x10608=(gconst38*r20);
IkReal x10609=(gconst38*r10);
IkReal x10610=((1.0)*cj2);
IkReal x10611=(gconst39*r21);
IkReal x10612=(gconst38*r00);
IkReal x10613=(gconst39*r01);
IkReal x10614=(gconst39*r11);
IkReal x10615=((1.0)*x10606);
IkReal x10616=((1.0)*x10607);
evalcond[0]=((((-1.0)*x10611*x10615))+((r22*x10607))+(((-1.0)*x10608*x10615)));
evalcond[1]=((((-1.0)*x10609*x10615))+((r12*x10607))+(((-1.0)*x10614*x10615)));
evalcond[2]=((-1.0)+((r02*x10607))+(((-1.0)*x10613*x10615))+(((-1.0)*x10612*x10615)));
evalcond[3]=((((-1.0)*r02*x10615))+(((-1.0)*x10613*x10616))+(((-1.0)*x10612*x10616)));
evalcond[4]=((((-1.0)*x10611*x10616))+((sj1*sj2))+(((-1.0)*r22*x10615))+(((-1.0)*cj1*x10610))+(((-1.0)*x10608*x10616)));
evalcond[5]=((((-1.0)*x10609*x10616))+(((-1.0)*x10614*x10616))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x10615))+(((-1.0)*sj1*x10610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10617=((1.0)*gconst39);
CheckValue<IkReal> x10618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10617))+((gconst38*r11)))),-1);
if(!x10618.valid){
continue;
}
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10617))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10618.value)))+(x10619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10620=IKcos(j4);
IkReal x10621=IKsin(j4);
IkReal x10622=(gconst38*r20);
IkReal x10623=(gconst38*r10);
IkReal x10624=((1.0)*cj2);
IkReal x10625=(gconst39*r21);
IkReal x10626=(gconst38*r00);
IkReal x10627=(gconst39*r01);
IkReal x10628=(gconst39*r11);
IkReal x10629=((1.0)*x10620);
IkReal x10630=((1.0)*x10621);
evalcond[0]=((((-1.0)*x10625*x10629))+((r22*x10621))+(((-1.0)*x10622*x10629)));
evalcond[1]=((((-1.0)*x10623*x10629))+(((-1.0)*x10628*x10629))+((r12*x10621)));
evalcond[2]=((-1.0)+(((-1.0)*x10626*x10629))+(((-1.0)*x10627*x10629))+((r02*x10621)));
evalcond[3]=((((-1.0)*r02*x10629))+(((-1.0)*x10627*x10630))+(((-1.0)*x10626*x10630)));
evalcond[4]=((((-1.0)*x10625*x10630))+((sj1*sj2))+(((-1.0)*r22*x10629))+(((-1.0)*x10622*x10630))+(((-1.0)*cj1*x10624)));
evalcond[5]=((((-1.0)*sj1*x10624))+(((-1.0)*x10623*x10630))+(((-1.0)*x10628*x10630))+(((-1.0)*r12*x10629))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10631=((-1.0)*r21);
CheckValue<IkReal> x10633 = IKatan2WithCheck(IkReal(r20),IkReal(x10631),IKFAST_ATAN2_MAGTHRESH);
if(!x10633.valid){
continue;
}
IkReal x10632=((1.0)*(x10633.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10632)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x10631);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10632)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x10634=((1.0)*r01*r21);
IkReal x10635=((1.0)*r00*r20);
j4eval[0]=(((cj3*x10635))+((cj3*x10634)));
j4eval[1]=((((-1.0)*x10634))+(((-1.0)*x10635)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10636=((-1.0)*r21);
CheckValue<IkReal> x10638 = IKatan2WithCheck(IkReal(r20),IkReal(x10636),IKFAST_ATAN2_MAGTHRESH);
if(!x10638.valid){
continue;
}
IkReal x10637=((1.0)*(x10638.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10637)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x10636);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10637)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x10639=((1.0)*r01*r21);
IkReal x10640=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*sj3*x10640))+(((-1.0)*sj3*x10639)));
j4eval[1]=((((-1.0)*x10640))+(((-1.0)*x10639)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10641=((-1.0)*r21);
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(r20),IkReal(x10641),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
IkReal x10642=((1.0)*(x10643.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10642)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x10641);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10642)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x10644=((1.0)*cj3);
j4eval[0]=(((r00*r20*x10644))+((r01*r21*x10644)));
j4eval[1]=cj3;
j4eval[2]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10645=IKPowWithIntegerCheck((((cj3*gconst38*r00))+((cj3*gconst39*r01))),-1);
if(!x10645.valid){
continue;
}
CheckValue<IkReal> x10646=IKPowWithIntegerCheck(cj3,-1);
if(!x10646.valid){
continue;
}
CheckValue<IkReal> x10647=IKPowWithIntegerCheck(r12,-1);
if(!x10647.valid){
continue;
}
if( IKabs(((x10645.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10646.value)*(x10647.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10645.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3))))))+IKsqr(((x10646.value)*(x10647.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10645.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3))))), ((x10646.value)*(x10647.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10648=IKcos(j4);
IkReal x10649=IKsin(j4);
IkReal x10650=(gconst38*sj3);
IkReal x10651=(gconst38*r20);
IkReal x10652=((1.0)*r00);
IkReal x10653=(sj1*sj2);
IkReal x10654=(cj3*gconst38);
IkReal x10655=(gconst39*r01);
IkReal x10656=(gconst39*r21);
IkReal x10657=((1.0)*cj2);
IkReal x10658=(gconst39*sj3);
IkReal x10659=((1.0)*r20);
IkReal x10660=(cj3*gconst39);
IkReal x10661=((1.0)*cj1*sj2);
IkReal x10662=(sj1*x10657);
IkReal x10663=((1.0)*x10648);
IkReal x10664=(cj3*x10649);
IkReal x10665=((1.0)*sj3*x10649);
IkReal x10666=(x10662+x10661);
evalcond[0]=(r12*x10649);
evalcond[1]=((((-1.0)*x10651*x10663))+(((-1.0)*x10656*x10663)));
evalcond[2]=((((-1.0)*x10666))+((cj3*r12*x10648)));
evalcond[3]=((((-1.0)*x10653))+(((-1.0)*r12*sj3*x10663))+((cj1*cj2)));
evalcond[4]=((-1.0)+(((-1.0)*x10655*x10663))+(((-1.0)*gconst38*x10648*x10652)));
evalcond[5]=(((r00*x10649*x10654))+((x10655*x10664))+(((-1.0)*x10652*x10658))+((r01*x10650)));
evalcond[6]=((((-1.0)*x10655*x10665))+((r01*x10654))+(((-1.0)*x10649*x10650*x10652))+(((-1.0)*x10652*x10660)));
evalcond[7]=(((x10651*x10664))+(((-1.0)*x10658*x10659))+((r21*x10650))+x10653+((x10656*x10664))+(((-1.0)*cj1*x10657)));
evalcond[8]=((((-1.0)*x10659*x10660))+((r21*x10654))+(((-1.0)*x10666))+(((-1.0)*x10656*x10665))+(((-1.0)*x10649*x10650*x10659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10667=((1.0)*r01);
IkReal x10668=((1.0)*gconst38*r00);
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(((((-1.0)*gconst39*sj3*x10667))+(((-1.0)*sj3*x10668))),-1);
if(!x10669.valid){
continue;
}
CheckValue<IkReal> x10670=IKPowWithIntegerCheck(((((-1.0)*x10668))+(((-1.0)*gconst39*x10667))),-1);
if(!x10670.valid){
continue;
}
if( IKabs(((x10669.value)*(((((-1.0)*cj3*gconst38*x10667))+((cj3*gconst39*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10670.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10669.value)*(((((-1.0)*cj3*gconst38*x10667))+((cj3*gconst39*r00))))))+IKsqr(x10670.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10669.value)*(((((-1.0)*cj3*gconst38*x10667))+((cj3*gconst39*r00))))), x10670.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10671=IKcos(j4);
IkReal x10672=IKsin(j4);
IkReal x10673=(gconst38*sj3);
IkReal x10674=(gconst38*r20);
IkReal x10675=((1.0)*r00);
IkReal x10676=(sj1*sj2);
IkReal x10677=(cj3*gconst38);
IkReal x10678=(gconst39*r01);
IkReal x10679=(gconst39*r21);
IkReal x10680=((1.0)*cj2);
IkReal x10681=(gconst39*sj3);
IkReal x10682=((1.0)*r20);
IkReal x10683=(cj3*gconst39);
IkReal x10684=((1.0)*cj1*sj2);
IkReal x10685=(sj1*x10680);
IkReal x10686=((1.0)*x10671);
IkReal x10687=(cj3*x10672);
IkReal x10688=((1.0)*sj3*x10672);
IkReal x10689=(x10684+x10685);
evalcond[0]=(r12*x10672);
evalcond[1]=((((-1.0)*x10679*x10686))+(((-1.0)*x10674*x10686)));
evalcond[2]=((((-1.0)*x10689))+((cj3*r12*x10671)));
evalcond[3]=((((-1.0)*r12*sj3*x10686))+(((-1.0)*x10676))+((cj1*cj2)));
evalcond[4]=((-1.0)+(((-1.0)*x10678*x10686))+(((-1.0)*gconst38*x10671*x10675)));
evalcond[5]=((((-1.0)*x10675*x10681))+((r01*x10673))+((x10678*x10687))+((r00*x10672*x10677)));
evalcond[6]=((((-1.0)*x10678*x10688))+(((-1.0)*x10675*x10683))+((r01*x10677))+(((-1.0)*x10672*x10673*x10675)));
evalcond[7]=(((x10674*x10687))+(((-1.0)*cj1*x10680))+((x10679*x10687))+((r21*x10673))+x10676+(((-1.0)*x10681*x10682)));
evalcond[8]=((((-1.0)*x10679*x10688))+(((-1.0)*x10682*x10683))+(((-1.0)*x10689))+((r21*x10677))+(((-1.0)*x10672*x10673*x10682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10690=((1.0)*r01);
IkReal x10691=(gconst38*r00);
CheckValue<IkReal> x10692=IKPowWithIntegerCheck((((cj3*x10691))+((cj3*gconst39*r01))),-1);
if(!x10692.valid){
continue;
}
CheckValue<IkReal> x10693=IKPowWithIntegerCheck(((((-1.0)*gconst39*x10690))+(((-1.0)*x10691))),-1);
if(!x10693.valid){
continue;
}
if( IKabs(((x10692.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*sj3*x10690)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10693.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10692.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*sj3*x10690))))))+IKsqr(x10693.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10692.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*sj3*x10690))))), x10693.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10694=IKcos(j4);
IkReal x10695=IKsin(j4);
IkReal x10696=(gconst38*sj3);
IkReal x10697=(gconst38*r20);
IkReal x10698=((1.0)*r00);
IkReal x10699=(sj1*sj2);
IkReal x10700=(cj3*gconst38);
IkReal x10701=(gconst39*r01);
IkReal x10702=(gconst39*r21);
IkReal x10703=((1.0)*cj2);
IkReal x10704=(gconst39*sj3);
IkReal x10705=((1.0)*r20);
IkReal x10706=(cj3*gconst39);
IkReal x10707=((1.0)*cj1*sj2);
IkReal x10708=(sj1*x10703);
IkReal x10709=((1.0)*x10694);
IkReal x10710=(cj3*x10695);
IkReal x10711=((1.0)*sj3*x10695);
IkReal x10712=(x10708+x10707);
evalcond[0]=(r12*x10695);
evalcond[1]=((((-1.0)*x10702*x10709))+(((-1.0)*x10697*x10709)));
evalcond[2]=(((cj3*r12*x10694))+(((-1.0)*x10712)));
evalcond[3]=((((-1.0)*r12*sj3*x10709))+(((-1.0)*x10699))+((cj1*cj2)));
evalcond[4]=((-1.0)+(((-1.0)*gconst38*x10694*x10698))+(((-1.0)*x10701*x10709)));
evalcond[5]=(((r00*x10695*x10700))+((x10701*x10710))+(((-1.0)*x10698*x10704))+((r01*x10696)));
evalcond[6]=(((r01*x10700))+(((-1.0)*x10698*x10706))+(((-1.0)*x10695*x10696*x10698))+(((-1.0)*x10701*x10711)));
evalcond[7]=(((x10697*x10710))+((r21*x10696))+(((-1.0)*x10704*x10705))+((x10702*x10710))+(((-1.0)*cj1*x10703))+x10699);
evalcond[8]=((((-1.0)*x10705*x10706))+(((-1.0)*x10712))+(((-1.0)*x10702*x10711))+(((-1.0)*x10695*x10696*x10705))+((r21*x10700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10713=gconst38*gconst38;
IkReal x10714=gconst39*gconst39;
IkReal x10715=(gconst38*gconst39);
IkReal x10716=(cj3*r00);
IkReal x10717=(cj3*r01);
IkReal x10718=(r00*sj3);
IkReal x10719=((1.0)*r01*sj3);
IkReal x10720=(r20*x10713);
IkReal x10721=(r21*x10714);
CheckValue<IkReal> x10722 = IKatan2WithCheck(IkReal((((x10718*x10721))+((r20*x10715*x10718))+(((-1.0)*x10719*x10720))+(((-1.0)*r21*x10715*x10719)))),IkReal(((((-1.0)*gconst38*r22*x10719))+((gconst39*r22*x10718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10722.valid){
continue;
}
CheckValue<IkReal> x10723=IKPowWithIntegerCheck(IKsign((((x10717*x10721))+((x10716*x10720))+((r21*x10715*x10716))+((r20*x10715*x10717))+((cj3*r02*r22)))),-1);
if(!x10723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10722.value)+(((1.5707963267949)*(x10723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10724=IKcos(j4);
IkReal x10725=IKsin(j4);
IkReal x10726=(gconst38*sj3);
IkReal x10727=(gconst38*r20);
IkReal x10728=((1.0)*r00);
IkReal x10729=(sj1*sj2);
IkReal x10730=(cj3*gconst38);
IkReal x10731=(gconst39*r21);
IkReal x10732=(gconst39*r01);
IkReal x10733=((1.0)*cj2);
IkReal x10734=(gconst39*sj3);
IkReal x10735=((1.0)*r20);
IkReal x10736=(cj3*gconst39);
IkReal x10737=((1.0)*r10);
IkReal x10738=(gconst39*r11);
IkReal x10739=((1.0)*cj1*sj2);
IkReal x10740=(sj1*x10733);
IkReal x10741=((1.0)*x10724);
IkReal x10742=(cj3*x10725);
IkReal x10743=(r10*x10725);
IkReal x10744=(cj3*x10724);
IkReal x10745=((1.0)*sj3*x10725);
IkReal x10746=(x10740+x10739);
evalcond[0]=(((r22*x10725))+(((-1.0)*x10731*x10741))+(((-1.0)*x10727*x10741)));
evalcond[1]=((((-1.0)*x10738*x10741))+(((-1.0)*gconst38*x10724*x10737))+((r12*x10725)));
evalcond[2]=((-1.0)+((r02*x10725))+(((-1.0)*x10732*x10741))+(((-1.0)*gconst38*x10724*x10728)));
evalcond[3]=(((r00*x10725*x10730))+((x10732*x10742))+((r02*x10744))+(((-1.0)*x10728*x10734))+((r01*x10726)));
evalcond[4]=((((-1.0)*x10725*x10726*x10728))+(((-1.0)*r02*sj3*x10741))+(((-1.0)*x10732*x10745))+(((-1.0)*x10728*x10736))+((r01*x10730)));
evalcond[5]=((((-1.0)*x10734*x10735))+((x10731*x10742))+((r21*x10726))+((r22*x10744))+(((-1.0)*cj1*x10733))+x10729+((x10727*x10742)));
evalcond[6]=((((-1.0)*x10734*x10737))+((x10730*x10743))+((r11*x10725*x10736))+(((-1.0)*x10746))+((r12*x10744))+((r11*x10726)));
evalcond[7]=((((-1.0)*r11*x10725*x10734))+(((-1.0)*x10725*x10726*x10737))+(((-1.0)*x10729))+((cj1*cj2))+(((-1.0)*x10736*x10737))+((r11*x10730))+(((-1.0)*r12*sj3*x10741)));
evalcond[8]=((((-1.0)*x10735*x10736))+(((-1.0)*x10731*x10745))+(((-1.0)*x10725*x10726*x10735))+((r21*x10730))+(((-1.0)*x10746))+(((-1.0)*r22*sj3*x10741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10747=((1.0)*gconst38);
CheckValue<IkReal> x10748 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r11))+(((-1.0)*r10*x10747)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10748.valid){
continue;
}
CheckValue<IkReal> x10749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10747))+((gconst39*r20)))),-1);
if(!x10749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10748.value)+(((1.5707963267949)*(x10749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10750=IKcos(j4);
IkReal x10751=IKsin(j4);
IkReal x10752=(gconst38*sj3);
IkReal x10753=(gconst38*r20);
IkReal x10754=((1.0)*r00);
IkReal x10755=(sj1*sj2);
IkReal x10756=(cj3*gconst38);
IkReal x10757=(gconst39*r21);
IkReal x10758=(gconst39*r01);
IkReal x10759=((1.0)*cj2);
IkReal x10760=(gconst39*sj3);
IkReal x10761=((1.0)*r20);
IkReal x10762=(cj3*gconst39);
IkReal x10763=((1.0)*r10);
IkReal x10764=(gconst39*r11);
IkReal x10765=((1.0)*cj1*sj2);
IkReal x10766=(sj1*x10759);
IkReal x10767=((1.0)*x10750);
IkReal x10768=(cj3*x10751);
IkReal x10769=(r10*x10751);
IkReal x10770=(cj3*x10750);
IkReal x10771=((1.0)*sj3*x10751);
IkReal x10772=(x10766+x10765);
evalcond[0]=((((-1.0)*x10757*x10767))+(((-1.0)*x10753*x10767))+((r22*x10751)));
evalcond[1]=((((-1.0)*x10764*x10767))+((r12*x10751))+(((-1.0)*gconst38*x10750*x10763)));
evalcond[2]=((-1.0)+((r02*x10751))+(((-1.0)*gconst38*x10750*x10754))+(((-1.0)*x10758*x10767)));
evalcond[3]=((((-1.0)*x10754*x10760))+((r00*x10751*x10756))+((x10758*x10768))+((r02*x10770))+((r01*x10752)));
evalcond[4]=((((-1.0)*x10754*x10762))+(((-1.0)*r02*sj3*x10767))+(((-1.0)*x10758*x10771))+(((-1.0)*x10751*x10752*x10754))+((r01*x10756)));
evalcond[5]=(((r22*x10770))+(((-1.0)*cj1*x10759))+((x10757*x10768))+(((-1.0)*x10760*x10761))+x10755+((x10753*x10768))+((r21*x10752)));
evalcond[6]=(((r12*x10770))+(((-1.0)*x10772))+((r11*x10752))+(((-1.0)*x10760*x10763))+((r11*x10751*x10762))+((x10756*x10769)));
evalcond[7]=((((-1.0)*x10762*x10763))+(((-1.0)*x10751*x10752*x10763))+(((-1.0)*r11*x10751*x10760))+((r11*x10756))+(((-1.0)*r12*sj3*x10767))+((cj1*cj2))+(((-1.0)*x10755)));
evalcond[8]=((((-1.0)*x10751*x10752*x10761))+(((-1.0)*x10757*x10771))+(((-1.0)*x10772))+(((-1.0)*x10761*x10762))+(((-1.0)*r22*sj3*x10767))+((r21*x10756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10773=((1.0)*gconst39);
CheckValue<IkReal> x10774 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10773))+(((-1.0)*gconst38*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10774.valid){
continue;
}
CheckValue<IkReal> x10775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10773))+((gconst38*r11)))),-1);
if(!x10775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10774.value)+(((1.5707963267949)*(x10775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10776=IKcos(j4);
IkReal x10777=IKsin(j4);
IkReal x10778=(gconst38*sj3);
IkReal x10779=(gconst38*r20);
IkReal x10780=((1.0)*r00);
IkReal x10781=(sj1*sj2);
IkReal x10782=(cj3*gconst38);
IkReal x10783=(gconst39*r21);
IkReal x10784=(gconst39*r01);
IkReal x10785=((1.0)*cj2);
IkReal x10786=(gconst39*sj3);
IkReal x10787=((1.0)*r20);
IkReal x10788=(cj3*gconst39);
IkReal x10789=((1.0)*r10);
IkReal x10790=(gconst39*r11);
IkReal x10791=((1.0)*cj1*sj2);
IkReal x10792=(sj1*x10785);
IkReal x10793=((1.0)*x10776);
IkReal x10794=(cj3*x10777);
IkReal x10795=(r10*x10777);
IkReal x10796=(cj3*x10776);
IkReal x10797=((1.0)*sj3*x10777);
IkReal x10798=(x10792+x10791);
evalcond[0]=((((-1.0)*x10779*x10793))+((r22*x10777))+(((-1.0)*x10783*x10793)));
evalcond[1]=(((r12*x10777))+(((-1.0)*gconst38*x10776*x10789))+(((-1.0)*x10790*x10793)));
evalcond[2]=((-1.0)+(((-1.0)*gconst38*x10776*x10780))+(((-1.0)*x10784*x10793))+((r02*x10777)));
evalcond[3]=((((-1.0)*x10780*x10786))+((r02*x10796))+((x10784*x10794))+((r01*x10778))+((r00*x10777*x10782)));
evalcond[4]=((((-1.0)*x10780*x10788))+(((-1.0)*r02*sj3*x10793))+(((-1.0)*x10784*x10797))+((r01*x10782))+(((-1.0)*x10777*x10778*x10780)));
evalcond[5]=((((-1.0)*cj1*x10785))+((x10779*x10794))+((x10783*x10794))+((r21*x10778))+(((-1.0)*x10786*x10787))+x10781+((r22*x10796)));
evalcond[6]=(((r11*x10778))+((r12*x10796))+((r11*x10777*x10788))+((x10782*x10795))+(((-1.0)*x10798))+(((-1.0)*x10786*x10789)));
evalcond[7]=(((r11*x10782))+(((-1.0)*r11*x10777*x10786))+(((-1.0)*x10781))+(((-1.0)*x10777*x10778*x10789))+((cj1*cj2))+(((-1.0)*r12*sj3*x10793))+(((-1.0)*x10788*x10789)));
evalcond[8]=(((r21*x10782))+(((-1.0)*x10787*x10788))+(((-1.0)*r22*sj3*x10793))+(((-1.0)*x10798))+(((-1.0)*x10777*x10778*x10787))+(((-1.0)*x10783*x10797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10802 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10802.valid){
continue;
}
IkReal x10799=((1.0)*(x10802.value));
IkReal x10800=x9586;
IkReal x10801=((1.0)*x10800);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10799)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10799)));
IkReal gconst38=(r20*x10801);
IkReal gconst39=(r21*x10801);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10806 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10806.valid){
continue;
}
IkReal x10803=((1.0)*(x10806.value));
IkReal x10804=x9586;
IkReal x10805=((1.0)*x10804);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10803)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10803)));
IkReal gconst38=(r20*x10805);
IkReal gconst39=(r21*x10805);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
IkReal x10807=((1.0)*(x10810.value));
IkReal x10808=x9586;
IkReal x10809=((1.0)*x10808);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10807)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10807)));
IkReal gconst38=(r20*x10809);
IkReal gconst39=(r21*x10809);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10814 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10814.valid){
continue;
}
IkReal x10811=((1.0)*(x10814.value));
IkReal x10812=x9586;
IkReal x10813=((1.0)*x10812);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10811)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10811)));
IkReal gconst38=(r20*x10813);
IkReal gconst39=(r21*x10813);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10818 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10818.valid){
continue;
}
IkReal x10815=((1.0)*(x10818.value));
IkReal x10816=x9586;
IkReal x10817=((1.0)*x10816);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10815)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10815)));
IkReal gconst38=(r20*x10817);
IkReal gconst39=(r21*x10817);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
IkReal x10819=((1.0)*(x10822.value));
IkReal x10820=x9586;
IkReal x10821=((1.0)*x10820);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10819)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10819)));
IkReal gconst38=(r20*x10821);
IkReal gconst39=(r21*x10821);
IkReal x10823=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10827=IKPowWithIntegerCheck(x10823,-1);
if(!x10827.valid){
continue;
}
IkReal x10824=x10827.value;
IkReal x10825=((1.0)*x10824);
IkReal x10826=((((-2.0)*r00*r01*r20*r21*x10824))+(((-1.0)*(r02*r02)))+(((-1.0)*x10825*(r00*r00)*(r20*r20)))+(((-1.0)*x10825*(r01*r01)*(r21*r21))));
j4eval[0]=x10826;
j4eval[1]=IKsign(x10826);
j4eval[2]=r02;
j4eval[3]=x10823;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10828=(gconst39*r01);
IkReal x10829=(gconst38*r00);
CheckValue<IkReal> x10830=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10829*x10829)))+(((-1.0)*(r02*r02)))+(((-2.0)*x10828*x10829))+(((-1.0)*(x10828*x10828))))),-1);
if(!x10830.valid){
continue;
}
CheckValue<IkReal> x10831 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10828))+(((-1.0)*x10829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10830.value)))+(x10831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10832=IKcos(j4);
IkReal x10833=IKsin(j4);
IkReal x10834=(gconst38*r20);
IkReal x10835=(gconst38*r10);
IkReal x10836=((1.0)*cj2);
IkReal x10837=(gconst39*r21);
IkReal x10838=(gconst38*r00);
IkReal x10839=(gconst39*r01);
IkReal x10840=(gconst39*r11);
IkReal x10841=((1.0)*x10832);
IkReal x10842=((1.0)*x10833);
evalcond[0]=(((r22*x10833))+(((-1.0)*x10834*x10841))+(((-1.0)*x10837*x10841)));
evalcond[1]=((((-1.0)*x10835*x10841))+(((-1.0)*x10840*x10841))+((r12*x10833)));
evalcond[2]=((1.0)+(((-1.0)*x10839*x10841))+((r02*x10833))+(((-1.0)*x10838*x10841)));
evalcond[3]=((((-1.0)*r02*x10841))+(((-1.0)*x10839*x10842))+(((-1.0)*x10838*x10842)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x10841))+(((-1.0)*x10835*x10842))+(((-1.0)*x10840*x10842))+(((-1.0)*cj1*x10836)));
evalcond[5]=((((-1.0)*r22*x10841))+(((-1.0)*cj1*sj2))+(((-1.0)*x10834*x10842))+(((-1.0)*x10837*x10842))+(((-1.0)*sj1*x10836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10843=((1.0)*gconst39);
CheckValue<IkReal> x10844 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x10843)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10844.valid){
continue;
}
CheckValue<IkReal> x10845=IKPowWithIntegerCheck(IKsign((((gconst38*r21))+(((-1.0)*r20*x10843)))),-1);
if(!x10845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10844.value)+(((1.5707963267949)*(x10845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10846=IKcos(j4);
IkReal x10847=IKsin(j4);
IkReal x10848=(gconst38*r20);
IkReal x10849=(gconst38*r10);
IkReal x10850=((1.0)*cj2);
IkReal x10851=(gconst39*r21);
IkReal x10852=(gconst38*r00);
IkReal x10853=(gconst39*r01);
IkReal x10854=(gconst39*r11);
IkReal x10855=((1.0)*x10846);
IkReal x10856=((1.0)*x10847);
evalcond[0]=((((-1.0)*x10848*x10855))+((r22*x10847))+(((-1.0)*x10851*x10855)));
evalcond[1]=((((-1.0)*x10849*x10855))+(((-1.0)*x10854*x10855))+((r12*x10847)));
evalcond[2]=((1.0)+(((-1.0)*x10852*x10855))+((r02*x10847))+(((-1.0)*x10853*x10855)));
evalcond[3]=((((-1.0)*x10852*x10856))+(((-1.0)*x10853*x10856))+(((-1.0)*r02*x10855)));
evalcond[4]=((((-1.0)*x10849*x10856))+(((-1.0)*r12*x10855))+((sj1*sj2))+(((-1.0)*x10854*x10856))+(((-1.0)*cj1*x10850)));
evalcond[5]=((((-1.0)*x10848*x10856))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10850))+(((-1.0)*r22*x10855))+(((-1.0)*x10851*x10856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10857=((1.0)*gconst38);
CheckValue<IkReal> x10858 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10857))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10858.valid){
continue;
}
CheckValue<IkReal> x10859=IKPowWithIntegerCheck(IKsign((((gconst39*r10))+(((-1.0)*r11*x10857)))),-1);
if(!x10859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10858.value)+(((1.5707963267949)*(x10859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10860=IKcos(j4);
IkReal x10861=IKsin(j4);
IkReal x10862=(gconst38*r20);
IkReal x10863=(gconst38*r10);
IkReal x10864=((1.0)*cj2);
IkReal x10865=(gconst39*r21);
IkReal x10866=(gconst38*r00);
IkReal x10867=(gconst39*r01);
IkReal x10868=(gconst39*r11);
IkReal x10869=((1.0)*x10860);
IkReal x10870=((1.0)*x10861);
evalcond[0]=((((-1.0)*x10865*x10869))+(((-1.0)*x10862*x10869))+((r22*x10861)));
evalcond[1]=((((-1.0)*x10868*x10869))+(((-1.0)*x10863*x10869))+((r12*x10861)));
evalcond[2]=((1.0)+(((-1.0)*x10866*x10869))+(((-1.0)*x10867*x10869))+((r02*x10861)));
evalcond[3]=((((-1.0)*x10866*x10870))+(((-1.0)*x10867*x10870))+(((-1.0)*r02*x10869)));
evalcond[4]=((((-1.0)*r12*x10869))+(((-1.0)*x10863*x10870))+(((-1.0)*x10868*x10870))+((sj1*sj2))+(((-1.0)*cj1*x10864)));
evalcond[5]=((((-1.0)*r22*x10869))+(((-1.0)*x10862*x10870))+(((-1.0)*x10865*x10870))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10874 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10874.valid){
continue;
}
IkReal x10871=((1.0)*(x10874.value));
IkReal x10872=x9586;
IkReal x10873=((1.0)*x10872);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10871)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10871)));
IkReal gconst38=(r20*x10873);
IkReal gconst39=(r21*x10873);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10878 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10878.valid){
continue;
}
IkReal x10875=((1.0)*(x10878.value));
IkReal x10876=x9586;
IkReal x10877=((1.0)*x10876);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10875)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10875)));
IkReal gconst38=(r20*x10877);
IkReal gconst39=(r21*x10877);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
IkReal x10879=((1.0)*(x10882.value));
IkReal x10880=x9586;
IkReal x10881=((1.0)*x10880);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10879)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10879)));
IkReal gconst38=(r20*x10881);
IkReal gconst39=(r21*x10881);
IkReal x10883=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10887=IKPowWithIntegerCheck(x10883,-1);
if(!x10887.valid){
continue;
}
IkReal x10884=x10887.value;
IkReal x10885=((1.0)*x10884);
IkReal x10886=((((-1.0)*(r02*r02)))+(((-1.0)*x10885*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10884))+(((-1.0)*x10885*(r01*r01)*(r21*r21))));
j4eval[0]=x10886;
j4eval[1]=IKsign(x10886);
j4eval[2]=r02;
j4eval[3]=x10883;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10888=(gconst39*r01);
IkReal x10889=(gconst38*r00);
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10888))+(((-1.0)*x10889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
CheckValue<IkReal> x10891=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10888*x10889))+(((-1.0)*(x10889*x10889)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10888*x10888))))),-1);
if(!x10891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10890.value)+(((1.5707963267949)*(x10891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10892=IKsin(j4);
IkReal x10893=IKcos(j4);
IkReal x10894=(gconst38*r20);
IkReal x10895=((1.0)*cj2);
IkReal x10896=(gconst39*r21);
IkReal x10897=(gconst38*r10);
IkReal x10898=(gconst38*r00);
IkReal x10899=(gconst39*r01);
IkReal x10900=(gconst39*r11);
IkReal x10901=((1.0)*x10893);
evalcond[0]=(((x10892*x10898))+((x10892*x10899))+((r02*x10893)));
evalcond[1]=(((r22*x10892))+(((-1.0)*x10894*x10901))+(((-1.0)*x10896*x10901)));
evalcond[2]=((((-1.0)*x10900*x10901))+((r12*x10892))+(((-1.0)*x10897*x10901)));
evalcond[3]=((1.0)+((r02*x10892))+(((-1.0)*x10899*x10901))+(((-1.0)*x10898*x10901)));
evalcond[4]=(((x10892*x10900))+(((-1.0)*cj1*x10895))+((sj1*sj2))+((x10892*x10897))+((r12*x10893)));
evalcond[5]=((((-1.0)*sj1*x10895))+(((-1.0)*cj1*sj2))+((r22*x10893))+((x10892*x10894))+((x10892*x10896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10902=((1.0)*gconst39);
CheckValue<IkReal> x10903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10902))+((gconst38*r21)))),-1);
if(!x10903.valid){
continue;
}
CheckValue<IkReal> x10904 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x10902)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10903.value)))+(x10904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10905=IKsin(j4);
IkReal x10906=IKcos(j4);
IkReal x10907=(gconst38*r20);
IkReal x10908=((1.0)*cj2);
IkReal x10909=(gconst39*r21);
IkReal x10910=(gconst38*r10);
IkReal x10911=(gconst38*r00);
IkReal x10912=(gconst39*r01);
IkReal x10913=(gconst39*r11);
IkReal x10914=((1.0)*x10906);
evalcond[0]=(((x10905*x10911))+((x10905*x10912))+((r02*x10906)));
evalcond[1]=(((r22*x10905))+(((-1.0)*x10907*x10914))+(((-1.0)*x10909*x10914)));
evalcond[2]=(((r12*x10905))+(((-1.0)*x10910*x10914))+(((-1.0)*x10913*x10914)));
evalcond[3]=((1.0)+(((-1.0)*x10911*x10914))+(((-1.0)*x10912*x10914))+((r02*x10905)));
evalcond[4]=(((r12*x10906))+(((-1.0)*cj1*x10908))+((sj1*sj2))+((x10905*x10910))+((x10905*x10913)));
evalcond[5]=(((r22*x10906))+(((-1.0)*cj1*sj2))+((x10905*x10909))+((x10905*x10907))+(((-1.0)*sj1*x10908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10915=((1.0)*gconst38);
CheckValue<IkReal> x10916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10915))+((gconst39*r10)))),-1);
if(!x10916.valid){
continue;
}
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10915))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10916.value)))+(x10917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10918=IKsin(j4);
IkReal x10919=IKcos(j4);
IkReal x10920=(gconst38*r20);
IkReal x10921=((1.0)*cj2);
IkReal x10922=(gconst39*r21);
IkReal x10923=(gconst38*r10);
IkReal x10924=(gconst38*r00);
IkReal x10925=(gconst39*r01);
IkReal x10926=(gconst39*r11);
IkReal x10927=((1.0)*x10919);
evalcond[0]=(((r02*x10919))+((x10918*x10924))+((x10918*x10925)));
evalcond[1]=((((-1.0)*x10920*x10927))+((r22*x10918))+(((-1.0)*x10922*x10927)));
evalcond[2]=(((r12*x10918))+(((-1.0)*x10923*x10927))+(((-1.0)*x10926*x10927)));
evalcond[3]=((1.0)+((r02*x10918))+(((-1.0)*x10924*x10927))+(((-1.0)*x10925*x10927)));
evalcond[4]=((((-1.0)*cj1*x10921))+((sj1*sj2))+((r12*x10919))+((x10918*x10926))+((x10918*x10923)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x10919))+((x10918*x10922))+((x10918*x10920))+(((-1.0)*sj1*x10921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10931 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10931.valid){
continue;
}
IkReal x10928=((1.0)*(x10931.value));
IkReal x10929=x9586;
IkReal x10930=((1.0)*x10929);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10928)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10928)));
IkReal gconst38=(r20*x10930);
IkReal gconst39=(r21*x10930);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10935 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10935.valid){
continue;
}
IkReal x10932=((1.0)*(x10935.value));
IkReal x10933=x9586;
IkReal x10934=((1.0)*x10933);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10932)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10932)));
IkReal gconst38=(r20*x10934);
IkReal gconst39=(r21*x10934);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
IkReal x10936=((1.0)*(x10939.value));
IkReal x10937=x9586;
IkReal x10938=((1.0)*x10937);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10936)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10936)));
IkReal gconst38=(r20*x10938);
IkReal gconst39=(r21*x10938);
IkReal x10940=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10944=IKPowWithIntegerCheck(x10940,-1);
if(!x10944.valid){
continue;
}
IkReal x10941=x10944.value;
IkReal x10942=((1.0)*x10941);
IkReal x10943=((((-1.0)*x10942*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10941))+(((-1.0)*x10942*(r00*r00)*(r20*r20))));
j4eval[0]=x10943;
j4eval[1]=IKsign(x10943);
j4eval[2]=r02;
j4eval[3]=x10940;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10945=(gconst39*r01);
IkReal x10946=(gconst38*r00);
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10945))+(((-1.0)*x10946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
CheckValue<IkReal> x10948=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10945*x10945)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10946*x10946)))+(((-2.0)*x10945*x10946)))),-1);
if(!x10948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10947.value)+(((1.5707963267949)*(x10948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10949=IKsin(j4);
IkReal x10950=IKcos(j4);
IkReal x10951=(gconst38*r20);
IkReal x10952=(gconst39*r21);
IkReal x10953=(gconst38*r10);
IkReal x10954=(gconst38*r00);
IkReal x10955=(gconst39*r01);
IkReal x10956=(gconst39*r11);
IkReal x10957=((1.0)*x10950);
evalcond[0]=(((r02*x10950))+((x10949*x10955))+((x10949*x10954)));
evalcond[1]=((((-1.0)*x10951*x10957))+(((-1.0)*x10952*x10957))+((r22*x10949)));
evalcond[2]=(((r12*x10949))+(((-1.0)*x10953*x10957))+(((-1.0)*x10956*x10957)));
evalcond[3]=((1.0)+((r02*x10949))+(((-1.0)*x10955*x10957))+(((-1.0)*x10954*x10957)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10949*x10956))+((x10949*x10953))+((r12*x10950)));
evalcond[5]=(((r22*x10950))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10949*x10952))+((x10949*x10951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10958=((1.0)*gconst39);
CheckValue<IkReal> x10959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10958))+((gconst38*r21)))),-1);
if(!x10959.valid){
continue;
}
CheckValue<IkReal> x10960 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x10958)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10959.value)))+(x10960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10961=IKsin(j4);
IkReal x10962=IKcos(j4);
IkReal x10963=(gconst38*r20);
IkReal x10964=(gconst39*r21);
IkReal x10965=(gconst38*r10);
IkReal x10966=(gconst38*r00);
IkReal x10967=(gconst39*r01);
IkReal x10968=(gconst39*r11);
IkReal x10969=((1.0)*x10962);
evalcond[0]=(((r02*x10962))+((x10961*x10966))+((x10961*x10967)));
evalcond[1]=((((-1.0)*x10963*x10969))+((r22*x10961))+(((-1.0)*x10964*x10969)));
evalcond[2]=((((-1.0)*x10968*x10969))+((r12*x10961))+(((-1.0)*x10965*x10969)));
evalcond[3]=((1.0)+((r02*x10961))+(((-1.0)*x10966*x10969))+(((-1.0)*x10967*x10969)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10961*x10968))+((x10961*x10965))+((r12*x10962)));
evalcond[5]=(((r22*x10962))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10961*x10963))+((x10961*x10964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10970=((1.0)*gconst38);
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10970))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
CheckValue<IkReal> x10972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10970))+((gconst39*r10)))),-1);
if(!x10972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10971.value)+(((1.5707963267949)*(x10972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10973=IKsin(j4);
IkReal x10974=IKcos(j4);
IkReal x10975=(gconst38*r20);
IkReal x10976=(gconst39*r21);
IkReal x10977=(gconst38*r10);
IkReal x10978=(gconst38*r00);
IkReal x10979=(gconst39*r01);
IkReal x10980=(gconst39*r11);
IkReal x10981=((1.0)*x10974);
evalcond[0]=(((r02*x10974))+((x10973*x10979))+((x10973*x10978)));
evalcond[1]=((((-1.0)*x10975*x10981))+((r22*x10973))+(((-1.0)*x10976*x10981)));
evalcond[2]=((((-1.0)*x10977*x10981))+(((-1.0)*x10980*x10981))+((r12*x10973)));
evalcond[3]=((1.0)+((r02*x10973))+(((-1.0)*x10979*x10981))+(((-1.0)*x10978*x10981)));
evalcond[4]=(((cj2*sj1))+((x10973*x10980))+((cj1*sj2))+((x10973*x10977))+((r12*x10974)));
evalcond[5]=(((r22*x10974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10973*x10975))+((x10973*x10976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10985 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10985.valid){
continue;
}
IkReal x10982=((1.0)*(x10985.value));
IkReal x10983=x9586;
IkReal x10984=((1.0)*x10983);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10982)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10982)));
IkReal gconst38=(r20*x10984);
IkReal gconst39=(r21*x10984);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10989 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10989.valid){
continue;
}
IkReal x10986=((1.0)*(x10989.value));
IkReal x10987=x9586;
IkReal x10988=((1.0)*x10987);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10986)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10986)));
IkReal gconst38=(r20*x10988);
IkReal gconst39=(r21*x10988);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10993 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10993.valid){
continue;
}
IkReal x10990=((1.0)*(x10993.value));
IkReal x10991=x9586;
IkReal x10992=((1.0)*x10991);
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10990)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10990)));
IkReal gconst38=(r20*x10992);
IkReal gconst39=(r21*x10992);
IkReal x10994=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10998=IKPowWithIntegerCheck(x10994,-1);
if(!x10998.valid){
continue;
}
IkReal x10995=x10998.value;
IkReal x10996=((1.0)*x10995);
IkReal x10997=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10995))+(((-1.0)*x10996*(r00*r00)*(r20*r20)))+(((-1.0)*x10996*(r01*r01)*(r21*r21))));
j4eval[0]=x10997;
j4eval[1]=IKsign(x10997);
j4eval[2]=r02;
j4eval[3]=x10994;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10999=(gconst39*r01);
IkReal x11000=(gconst38*r00);
CheckValue<IkReal> x11001 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10999))+(((-1.0)*x11000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11001.valid){
continue;
}
CheckValue<IkReal> x11002=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10999*x11000))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10999*x10999)))+(((-1.0)*(x11000*x11000))))),-1);
if(!x11002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11001.value)+(((1.5707963267949)*(x11002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11003=IKcos(j4);
IkReal x11004=IKsin(j4);
IkReal x11005=(gconst38*r20);
IkReal x11006=(gconst38*r10);
IkReal x11007=(gconst39*r21);
IkReal x11008=(gconst38*r00);
IkReal x11009=(gconst39*r01);
IkReal x11010=(gconst39*r11);
IkReal x11011=((1.0)*x11003);
IkReal x11012=((1.0)*x11004);
evalcond[0]=((((-1.0)*x11005*x11011))+(((-1.0)*x11007*x11011))+((r22*x11004)));
evalcond[1]=((((-1.0)*x11006*x11011))+(((-1.0)*x11010*x11011))+((r12*x11004)));
evalcond[2]=((1.0)+((r02*x11004))+(((-1.0)*x11009*x11011))+(((-1.0)*x11008*x11011)));
evalcond[3]=((((-1.0)*r02*x11011))+(((-1.0)*x11009*x11012))+(((-1.0)*x11008*x11012)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11006*x11012))+((cj1*sj2))+(((-1.0)*x11010*x11012))+(((-1.0)*r12*x11011)));
evalcond[5]=((((-1.0)*r22*x11011))+(((-1.0)*x11005*x11012))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11007*x11012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11013=((1.0)*gconst39);
CheckValue<IkReal> x11014=IKPowWithIntegerCheck(IKsign((((gconst38*r21))+(((-1.0)*r20*x11013)))),-1);
if(!x11014.valid){
continue;
}
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x11013)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11014.value)))+(x11015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11016=IKcos(j4);
IkReal x11017=IKsin(j4);
IkReal x11018=(gconst38*r20);
IkReal x11019=(gconst38*r10);
IkReal x11020=(gconst39*r21);
IkReal x11021=(gconst38*r00);
IkReal x11022=(gconst39*r01);
IkReal x11023=(gconst39*r11);
IkReal x11024=((1.0)*x11016);
IkReal x11025=((1.0)*x11017);
evalcond[0]=((((-1.0)*x11018*x11024))+((r22*x11017))+(((-1.0)*x11020*x11024)));
evalcond[1]=((((-1.0)*x11023*x11024))+((r12*x11017))+(((-1.0)*x11019*x11024)));
evalcond[2]=((1.0)+(((-1.0)*x11021*x11024))+(((-1.0)*x11022*x11024))+((r02*x11017)));
evalcond[3]=((((-1.0)*r02*x11024))+(((-1.0)*x11021*x11025))+(((-1.0)*x11022*x11025)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11023*x11025))+(((-1.0)*r12*x11024))+(((-1.0)*x11019*x11025)));
evalcond[5]=((((-1.0)*x11018*x11025))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11024))+(((-1.0)*x11020*x11025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11026=((1.0)*gconst38);
CheckValue<IkReal> x11027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11026))+((gconst39*r10)))),-1);
if(!x11027.valid){
continue;
}
CheckValue<IkReal> x11028 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11026))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11027.value)))+(x11028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11029=IKcos(j4);
IkReal x11030=IKsin(j4);
IkReal x11031=(gconst38*r20);
IkReal x11032=(gconst38*r10);
IkReal x11033=(gconst39*r21);
IkReal x11034=(gconst38*r00);
IkReal x11035=(gconst39*r01);
IkReal x11036=(gconst39*r11);
IkReal x11037=((1.0)*x11029);
IkReal x11038=((1.0)*x11030);
evalcond[0]=((((-1.0)*x11031*x11037))+(((-1.0)*x11033*x11037))+((r22*x11030)));
evalcond[1]=((((-1.0)*x11036*x11037))+((r12*x11030))+(((-1.0)*x11032*x11037)));
evalcond[2]=((1.0)+(((-1.0)*x11034*x11037))+(((-1.0)*x11035*x11037))+((r02*x11030)));
evalcond[3]=((((-1.0)*x11034*x11038))+(((-1.0)*r02*x11037))+(((-1.0)*x11035*x11038)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11036*x11038))+(((-1.0)*x11032*x11038))+(((-1.0)*r12*x11037)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11031*x11038))+(((-1.0)*r22*x11037))+(((-1.0)*x11033*x11038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11039=((-1.0)*r21);
CheckValue<IkReal> x11041 = IKatan2WithCheck(IkReal(r20),IkReal(x11039),IKFAST_ATAN2_MAGTHRESH);
if(!x11041.valid){
continue;
}
IkReal x11040=((1.0)*(x11041.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11040)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11039);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11040)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x11042=((1.0)*r01*r21);
IkReal x11043=((1.0)*r00*r20);
j4eval[0]=(((cj3*x11042))+((cj3*x11043)));
j4eval[1]=((((-1.0)*x11042))+(((-1.0)*x11043)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11044=((-1.0)*r21);
CheckValue<IkReal> x11046 = IKatan2WithCheck(IkReal(r20),IkReal(x11044),IKFAST_ATAN2_MAGTHRESH);
if(!x11046.valid){
continue;
}
IkReal x11045=((1.0)*(x11046.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11045)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11044);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11045)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x11047=((1.0)*cj3);
j4eval[0]=(((r00*r20*x11047))+((r01*r21*x11047)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11048=((-1.0)*r21);
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal(r20),IkReal(x11048),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
IkReal x11049=((1.0)*(x11050.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11049)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11048);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11049)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x11051=((1.0)*cj3);
j4eval[0]=(((r00*r20*x11051))+((r01*r21*x11051)));
j4eval[1]=cj3;
j4eval[2]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11052=IKPowWithIntegerCheck((((cj3*gconst38*r00))+((cj3*gconst39*r01))),-1);
if(!x11052.valid){
continue;
}
CheckValue<IkReal> x11053=IKPowWithIntegerCheck(cj3,-1);
if(!x11053.valid){
continue;
}
CheckValue<IkReal> x11054=IKPowWithIntegerCheck(r12,-1);
if(!x11054.valid){
continue;
}
if( IKabs(((x11052.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11053.value)*(x11054.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11052.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3))))))+IKsqr(((x11053.value)*(x11054.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11052.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3))))), ((x11053.value)*(x11054.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11055=IKcos(j4);
IkReal x11056=IKsin(j4);
IkReal x11057=(sj1*sj2);
IkReal x11058=(gconst38*sj3);
IkReal x11059=(gconst38*r20);
IkReal x11060=((1.0)*r00);
IkReal x11061=(cj3*gconst38);
IkReal x11062=((1.0)*cj2);
IkReal x11063=(gconst39*r01);
IkReal x11064=(gconst39*r21);
IkReal x11065=(cj1*sj2);
IkReal x11066=(gconst39*sj3);
IkReal x11067=((1.0)*r20);
IkReal x11068=(cj3*gconst39);
IkReal x11069=(cj1*x11062);
IkReal x11070=((1.0)*x11055);
IkReal x11071=(cj3*x11056);
IkReal x11072=((1.0)*sj3*x11056);
evalcond[0]=(r12*x11056);
evalcond[1]=(((cj2*sj1))+x11065+((cj3*r12*x11055)));
evalcond[2]=((((-1.0)*x11059*x11070))+(((-1.0)*x11064*x11070)));
evalcond[3]=((((-1.0)*x11069))+(((-1.0)*r12*sj3*x11070))+x11057);
evalcond[4]=((1.0)+(((-1.0)*gconst38*x11055*x11060))+(((-1.0)*x11063*x11070)));
evalcond[5]=(((r00*x11056*x11061))+(((-1.0)*x11060*x11066))+((r01*x11058))+((x11063*x11071)));
evalcond[6]=((((-1.0)*x11060*x11068))+(((-1.0)*x11056*x11058*x11060))+(((-1.0)*x11063*x11072))+((r01*x11061)));
evalcond[7]=((((-1.0)*x11069))+x11057+((x11059*x11071))+((x11064*x11071))+(((-1.0)*x11066*x11067))+((r21*x11058)));
evalcond[8]=((((-1.0)*x11064*x11072))+(((-1.0)*x11067*x11068))+(((-1.0)*x11056*x11058*x11067))+(((-1.0)*sj1*x11062))+((r21*x11061))+(((-1.0)*x11065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11073=IKPowWithIntegerCheck((((cj3*gconst38*r00))+((cj3*gconst39*r01))),-1);
if(!x11073.valid){
continue;
}
CheckValue<IkReal> x11074=IKPowWithIntegerCheck(r12,-1);
if(!x11074.valid){
continue;
}
CheckValue<IkReal> x11075=IKPowWithIntegerCheck(sj3,-1);
if(!x11075.valid){
continue;
}
if( IKabs(((x11073.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11074.value)*(x11075.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11073.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3))))))+IKsqr(((x11074.value)*(x11075.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11073.value)*((((gconst39*r00*sj3))+(((-1.0)*gconst38*r01*sj3))))), ((x11074.value)*(x11075.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11076=IKcos(j4);
IkReal x11077=IKsin(j4);
IkReal x11078=(sj1*sj2);
IkReal x11079=(gconst38*sj3);
IkReal x11080=(gconst38*r20);
IkReal x11081=((1.0)*r00);
IkReal x11082=(cj3*gconst38);
IkReal x11083=((1.0)*cj2);
IkReal x11084=(gconst39*r01);
IkReal x11085=(gconst39*r21);
IkReal x11086=(cj1*sj2);
IkReal x11087=(gconst39*sj3);
IkReal x11088=((1.0)*r20);
IkReal x11089=(cj3*gconst39);
IkReal x11090=(cj1*x11083);
IkReal x11091=((1.0)*x11076);
IkReal x11092=(cj3*x11077);
IkReal x11093=((1.0)*sj3*x11077);
evalcond[0]=(r12*x11077);
evalcond[1]=(((cj3*r12*x11076))+((cj2*sj1))+x11086);
evalcond[2]=((((-1.0)*x11080*x11091))+(((-1.0)*x11085*x11091)));
evalcond[3]=((((-1.0)*r12*sj3*x11091))+(((-1.0)*x11090))+x11078);
evalcond[4]=((1.0)+(((-1.0)*gconst38*x11076*x11081))+(((-1.0)*x11084*x11091)));
evalcond[5]=((((-1.0)*x11081*x11087))+((r00*x11077*x11082))+((x11084*x11092))+((r01*x11079)));
evalcond[6]=((((-1.0)*x11081*x11089))+(((-1.0)*x11077*x11079*x11081))+((r01*x11082))+(((-1.0)*x11084*x11093)));
evalcond[7]=(((r21*x11079))+(((-1.0)*x11090))+x11078+(((-1.0)*x11087*x11088))+((x11085*x11092))+((x11080*x11092)));
evalcond[8]=((((-1.0)*sj1*x11083))+(((-1.0)*x11086))+(((-1.0)*x11077*x11079*x11088))+((r21*x11082))+(((-1.0)*x11085*x11093))+(((-1.0)*x11088*x11089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11094=((1.0)*r01);
IkReal x11095=(gconst38*r00);
CheckValue<IkReal> x11096=IKPowWithIntegerCheck((((cj3*gconst39*r01))+((cj3*x11095))),-1);
if(!x11096.valid){
continue;
}
CheckValue<IkReal> x11097=IKPowWithIntegerCheck(((((-1.0)*x11095))+(((-1.0)*gconst39*x11094))),-1);
if(!x11097.valid){
continue;
}
if( IKabs(((x11096.value)*(((((-1.0)*gconst38*sj3*x11094))+((gconst39*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11097.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11096.value)*(((((-1.0)*gconst38*sj3*x11094))+((gconst39*r00*sj3))))))+IKsqr(((-1.0)*(x11097.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11096.value)*(((((-1.0)*gconst38*sj3*x11094))+((gconst39*r00*sj3))))), ((-1.0)*(x11097.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11098=IKcos(j4);
IkReal x11099=IKsin(j4);
IkReal x11100=(sj1*sj2);
IkReal x11101=(gconst38*sj3);
IkReal x11102=(gconst38*r20);
IkReal x11103=((1.0)*r00);
IkReal x11104=(cj3*gconst38);
IkReal x11105=((1.0)*cj2);
IkReal x11106=(gconst39*r01);
IkReal x11107=(gconst39*r21);
IkReal x11108=(cj1*sj2);
IkReal x11109=(gconst39*sj3);
IkReal x11110=((1.0)*r20);
IkReal x11111=(cj3*gconst39);
IkReal x11112=(cj1*x11105);
IkReal x11113=((1.0)*x11098);
IkReal x11114=(cj3*x11099);
IkReal x11115=((1.0)*sj3*x11099);
evalcond[0]=(r12*x11099);
evalcond[1]=(((cj2*sj1))+x11108+((cj3*r12*x11098)));
evalcond[2]=((((-1.0)*x11102*x11113))+(((-1.0)*x11107*x11113)));
evalcond[3]=((((-1.0)*r12*sj3*x11113))+x11100+(((-1.0)*x11112)));
evalcond[4]=((1.0)+(((-1.0)*gconst38*x11098*x11103))+(((-1.0)*x11106*x11113)));
evalcond[5]=(((x11106*x11114))+(((-1.0)*x11103*x11109))+((r00*x11099*x11104))+((r01*x11101)));
evalcond[6]=((((-1.0)*x11103*x11111))+(((-1.0)*x11099*x11101*x11103))+((r01*x11104))+(((-1.0)*x11106*x11115)));
evalcond[7]=(((x11102*x11114))+((x11107*x11114))+x11100+((r21*x11101))+(((-1.0)*x11112))+(((-1.0)*x11109*x11110)));
evalcond[8]=((((-1.0)*x11108))+(((-1.0)*x11099*x11101*x11110))+(((-1.0)*x11107*x11115))+(((-1.0)*x11110*x11111))+((r21*x11104))+(((-1.0)*sj1*x11105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11116=gconst38*gconst38;
IkReal x11117=gconst39*gconst39;
IkReal x11118=(gconst38*gconst39);
IkReal x11119=(cj3*r00);
IkReal x11120=(cj3*r01);
IkReal x11121=(r00*sj3);
IkReal x11122=((1.0)*r01*sj3);
IkReal x11123=(r20*x11116);
IkReal x11124=(r21*x11117);
CheckValue<IkReal> x11125=IKPowWithIntegerCheck(IKsign((((r21*x11118*x11119))+((x11120*x11124))+((r20*x11118*x11120))+((cj3*r02*r22))+((x11119*x11123)))),-1);
if(!x11125.valid){
continue;
}
CheckValue<IkReal> x11126 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x11118*x11122))+((x11121*x11124))+(((-1.0)*x11122*x11123))+((r20*x11118*x11121)))),IkReal(((((-1.0)*gconst38*r22*x11122))+((gconst39*r22*x11121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11125.value)))+(x11126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11127=IKcos(j4);
IkReal x11128=IKsin(j4);
IkReal x11129=(sj1*sj2);
IkReal x11130=(gconst38*sj3);
IkReal x11131=(gconst38*r20);
IkReal x11132=((1.0)*r00);
IkReal x11133=(cj3*gconst38);
IkReal x11134=(gconst39*r21);
IkReal x11135=(gconst39*r01);
IkReal x11136=((1.0)*cj2);
IkReal x11137=(cj1*sj2);
IkReal x11138=(gconst39*sj3);
IkReal x11139=((1.0)*r20);
IkReal x11140=(cj3*gconst39);
IkReal x11141=((1.0)*r10);
IkReal x11142=(gconst39*r11);
IkReal x11143=(cj1*x11136);
IkReal x11144=((1.0)*x11127);
IkReal x11145=(cj3*x11128);
IkReal x11146=(r10*x11128);
IkReal x11147=(cj3*x11127);
IkReal x11148=((1.0)*sj3*x11128);
evalcond[0]=((((-1.0)*x11131*x11144))+((r22*x11128))+(((-1.0)*x11134*x11144)));
evalcond[1]=((((-1.0)*gconst38*x11127*x11141))+(((-1.0)*x11142*x11144))+((r12*x11128)));
evalcond[2]=((1.0)+(((-1.0)*x11135*x11144))+((r02*x11128))+(((-1.0)*gconst38*x11127*x11132)));
evalcond[3]=(((x11135*x11145))+(((-1.0)*x11132*x11138))+((r02*x11147))+((r01*x11130))+((r00*x11128*x11133)));
evalcond[4]=((((-1.0)*x11128*x11130*x11132))+(((-1.0)*x11135*x11148))+(((-1.0)*x11132*x11140))+(((-1.0)*r02*sj3*x11144))+((r01*x11133)));
evalcond[5]=(((cj2*sj1))+((x11133*x11146))+x11137+((r12*x11147))+((r11*x11130))+(((-1.0)*x11138*x11141))+((r11*x11128*x11140)));
evalcond[6]=(((x11134*x11145))+((r22*x11147))+((r21*x11130))+x11129+((x11131*x11145))+(((-1.0)*x11138*x11139))+(((-1.0)*x11143)));
evalcond[7]=((((-1.0)*x11140*x11141))+(((-1.0)*r11*x11128*x11138))+x11129+(((-1.0)*r12*sj3*x11144))+((r11*x11133))+(((-1.0)*x11143))+(((-1.0)*x11128*x11130*x11141)));
evalcond[8]=((((-1.0)*x11137))+(((-1.0)*x11128*x11130*x11139))+(((-1.0)*x11139*x11140))+((r21*x11133))+(((-1.0)*sj1*x11136))+(((-1.0)*r22*sj3*x11144))+(((-1.0)*x11134*x11148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11149=((1.0)*gconst39);
CheckValue<IkReal> x11150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11149))+((gconst38*r21)))),-1);
if(!x11150.valid){
continue;
}
CheckValue<IkReal> x11151 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x11149)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11150.value)))+(x11151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11152=IKcos(j4);
IkReal x11153=IKsin(j4);
IkReal x11154=(sj1*sj2);
IkReal x11155=(gconst38*sj3);
IkReal x11156=(gconst38*r20);
IkReal x11157=((1.0)*r00);
IkReal x11158=(cj3*gconst38);
IkReal x11159=(gconst39*r21);
IkReal x11160=(gconst39*r01);
IkReal x11161=((1.0)*cj2);
IkReal x11162=(cj1*sj2);
IkReal x11163=(gconst39*sj3);
IkReal x11164=((1.0)*r20);
IkReal x11165=(cj3*gconst39);
IkReal x11166=((1.0)*r10);
IkReal x11167=(gconst39*r11);
IkReal x11168=(cj1*x11161);
IkReal x11169=((1.0)*x11152);
IkReal x11170=(cj3*x11153);
IkReal x11171=(r10*x11153);
IkReal x11172=(cj3*x11152);
IkReal x11173=((1.0)*sj3*x11153);
evalcond[0]=(((r22*x11153))+(((-1.0)*x11156*x11169))+(((-1.0)*x11159*x11169)));
evalcond[1]=((((-1.0)*x11167*x11169))+(((-1.0)*gconst38*x11152*x11166))+((r12*x11153)));
evalcond[2]=((1.0)+((r02*x11153))+(((-1.0)*x11160*x11169))+(((-1.0)*gconst38*x11152*x11157)));
evalcond[3]=((((-1.0)*x11157*x11163))+((r01*x11155))+((x11160*x11170))+((r00*x11153*x11158))+((r02*x11172)));
evalcond[4]=((((-1.0)*x11157*x11165))+((r01*x11158))+(((-1.0)*r02*sj3*x11169))+(((-1.0)*x11153*x11155*x11157))+(((-1.0)*x11160*x11173)));
evalcond[5]=((((-1.0)*x11163*x11166))+((cj2*sj1))+((x11158*x11171))+((r12*x11172))+((r11*x11155))+((r11*x11153*x11165))+x11162);
evalcond[6]=((((-1.0)*x11163*x11164))+((r21*x11155))+(((-1.0)*x11168))+x11154+((x11159*x11170))+((x11156*x11170))+((r22*x11172)));
evalcond[7]=((((-1.0)*x11168))+((r11*x11158))+(((-1.0)*r11*x11153*x11163))+x11154+(((-1.0)*r12*sj3*x11169))+(((-1.0)*x11165*x11166))+(((-1.0)*x11153*x11155*x11166)));
evalcond[8]=((((-1.0)*sj1*x11161))+((r21*x11158))+(((-1.0)*x11162))+(((-1.0)*x11159*x11173))+(((-1.0)*x11153*x11155*x11164))+(((-1.0)*x11164*x11165))+(((-1.0)*r22*sj3*x11169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11174=((1.0)*gconst38);
CheckValue<IkReal> x11175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11174))+((gconst39*r10)))),-1);
if(!x11175.valid){
continue;
}
CheckValue<IkReal> x11176 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11174))+(((-1.0)*gconst39*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11175.value)))+(x11176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11177=IKcos(j4);
IkReal x11178=IKsin(j4);
IkReal x11179=(sj1*sj2);
IkReal x11180=(gconst38*sj3);
IkReal x11181=(gconst38*r20);
IkReal x11182=((1.0)*r00);
IkReal x11183=(cj3*gconst38);
IkReal x11184=(gconst39*r21);
IkReal x11185=(gconst39*r01);
IkReal x11186=((1.0)*cj2);
IkReal x11187=(cj1*sj2);
IkReal x11188=(gconst39*sj3);
IkReal x11189=((1.0)*r20);
IkReal x11190=(cj3*gconst39);
IkReal x11191=((1.0)*r10);
IkReal x11192=(gconst39*r11);
IkReal x11193=(cj1*x11186);
IkReal x11194=((1.0)*x11177);
IkReal x11195=(cj3*x11178);
IkReal x11196=(r10*x11178);
IkReal x11197=(cj3*x11177);
IkReal x11198=((1.0)*sj3*x11178);
evalcond[0]=((((-1.0)*x11181*x11194))+(((-1.0)*x11184*x11194))+((r22*x11178)));
evalcond[1]=((((-1.0)*gconst38*x11177*x11191))+((r12*x11178))+(((-1.0)*x11192*x11194)));
evalcond[2]=((1.0)+(((-1.0)*gconst38*x11177*x11182))+(((-1.0)*x11185*x11194))+((r02*x11178)));
evalcond[3]=((((-1.0)*x11182*x11188))+((r01*x11180))+((x11185*x11195))+((r00*x11178*x11183))+((r02*x11197)));
evalcond[4]=((((-1.0)*x11185*x11198))+(((-1.0)*x11182*x11190))+((r01*x11183))+(((-1.0)*r02*sj3*x11194))+(((-1.0)*x11178*x11180*x11182)));
evalcond[5]=(((cj2*sj1))+((r11*x11180))+((x11183*x11196))+((r12*x11197))+(((-1.0)*x11188*x11191))+x11187+((r11*x11178*x11190)));
evalcond[6]=((((-1.0)*x11193))+((r22*x11197))+((x11181*x11195))+x11179+((x11184*x11195))+(((-1.0)*x11188*x11189))+((r21*x11180)));
evalcond[7]=(((r11*x11183))+(((-1.0)*x11193))+(((-1.0)*x11178*x11180*x11191))+x11179+(((-1.0)*r11*x11178*x11188))+(((-1.0)*x11190*x11191))+(((-1.0)*r12*sj3*x11194)));
evalcond[8]=((((-1.0)*sj1*x11186))+(((-1.0)*r22*sj3*x11194))+(((-1.0)*x11184*x11198))+(((-1.0)*x11189*x11190))+(((-1.0)*x11178*x11180*x11189))+(((-1.0)*x11187))+((r21*x11183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11199=((-1.0)*px);
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
IkReal x11200=((1.0)*(x11201.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11200)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11199);
rxp1_1=(px*r21);
rxp1_2=(r11*x11199);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11200)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11202=((-1.0)*px);
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11203=((1.0)*(x11204.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11203)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11202);
rxp1_1=(px*r21);
rxp1_2=(r11*x11202);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11203)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
IkReal x11205=((1.0)*cj3);
j4eval[0]=(x11205+((x11205*(r21*r21)))+(((-1.0)*x11205*(r10*r10))));
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11206=((-1.0)*px);
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
IkReal x11207=((1.0)*(x11208.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11207)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11206);
rxp1_1=(px*r21);
rxp1_2=(r11*x11206);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11207)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11209=((-1.0)*px);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11210=((1.0)*(x11211.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11210)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11209);
rxp1_1=(px*r21);
rxp1_2=(r11*x11209);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11210)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11212=((-1.0)*px);
CheckValue<IkReal> x11214 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11214.valid){
continue;
}
IkReal x11213=((1.0)*(x11214.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11213)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11212);
rxp1_1=(px*r21);
rxp1_2=(r11*x11212);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11213)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11215=((-1.0)*px);
CheckValue<IkReal> x11217 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11217.valid){
continue;
}
IkReal x11216=((1.0)*(x11217.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11216)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11215);
rxp1_1=(px*r21);
rxp1_2=(r11*x11215);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11216)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11220=IKPowWithIntegerCheck(((((-1.0)*gconst39*r11))+(((-1.0)*gconst38*r10))),-1);
if(!x11220.valid){
continue;
}
IkReal x11218=x11220.value;
IkReal x11219=(sj0*x11218);
sj4array[0]=(((sj1*sj2*x11219))+(((-1.0)*cj1*cj2*x11219)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11221=IKcos(j4);
IkReal x11222=IKsin(j4);
IkReal x11223=((1.0)*gconst38*r20);
IkReal x11224=((1.0)*gconst39*r21);
IkReal x11225=((1.0)*x11221);
evalcond[0]=((-1.0)*r02*x11221);
evalcond[1]=((((-1.0)*sj0))+((r02*x11222)));
evalcond[2]=((((-1.0)*x11221*x11223))+(((-1.0)*x11221*x11224)));
evalcond[3]=((((-1.0)*gconst38*r10*x11225))+(((-1.0)*gconst39*r11*x11225)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x11222*x11224))+(((-1.0)*x11222*x11223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11227=IKPowWithIntegerCheck(((((-1.0)*gconst39*r21))+(((-1.0)*gconst38*r20))),-1);
if(!x11227.valid){
continue;
}
IkReal x11226=x11227.value;
sj4array[0]=(((cj1*sj2*x11226))+((cj2*sj1*x11226)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11228=IKcos(j4);
IkReal x11229=IKsin(j4);
IkReal x11230=((1.0)*sj0);
IkReal x11231=((1.0)*gconst38);
IkReal x11232=((1.0)*gconst39);
evalcond[0]=((-1.0)*r02*x11228);
evalcond[1]=((((-1.0)*x11230))+((r02*x11229)));
evalcond[2]=((((-1.0)*r20*x11228*x11231))+(((-1.0)*r21*x11228*x11232)));
evalcond[3]=((((-1.0)*r10*x11228*x11231))+(((-1.0)*r11*x11228*x11232)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x11229*x11232))+(((-1.0)*sj1*sj2*x11230))+(((-1.0)*r10*x11229*x11231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11233=IKPowWithIntegerCheck(r02,-1);
if(!x11233.valid){
continue;
}
sj4array[0]=(sj0*(x11233.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11234=IKcos(j4);
IkReal x11235=IKsin(j4);
IkReal x11236=((1.0)*gconst38);
IkReal x11237=((1.0)*sj2);
IkReal x11238=((1.0)*gconst39*x11235);
IkReal x11239=((1.0)*gconst39*x11234);
evalcond[0]=((-1.0)*r02*x11234);
evalcond[1]=((((-1.0)*r20*x11234*x11236))+(((-1.0)*r21*x11239)));
evalcond[2]=((((-1.0)*r10*x11234*x11236))+(((-1.0)*r11*x11239)));
evalcond[3]=((((-1.0)*r20*x11235*x11236))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x11237))+(((-1.0)*r21*x11238)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x11235*x11236))+(((-1.0)*sj0*sj1*x11237))+(((-1.0)*r11*x11238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11240=((-1.0)*px);
CheckValue<IkReal> x11242 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11242.valid){
continue;
}
IkReal x11241=((1.0)*(x11242.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11241)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11240);
rxp1_1=(px*r21);
rxp1_2=(r11*x11240);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11241)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11243=((-1.0)*px);
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
IkReal x11244=((1.0)*(x11245.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11244)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11243);
rxp1_1=(px*r21);
rxp1_2=(r11*x11243);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11244)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11246=((-1.0)*px);
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
IkReal x11247=((1.0)*(x11248.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x11247)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11246);
rxp1_1=(px*r21);
rxp1_2=(r11*x11246);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x11247)));
IkReal gconst38=((1.0)*r20);
IkReal gconst39=((1.0)*r21);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11251=IKPowWithIntegerCheck((((gconst39*r11))+((gconst38*r10))),-1);
if(!x11251.valid){
continue;
}
IkReal x11249=x11251.value;
IkReal x11250=(sj0*x11249);
sj4array[0]=((((-1.0)*cj1*cj2*x11250))+((sj1*sj2*x11250)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11252=IKcos(j4);
IkReal x11253=IKsin(j4);
IkReal x11254=(gconst38*r20);
IkReal x11255=(gconst39*r21);
IkReal x11256=((1.0)*x11252);
evalcond[0]=(r02*x11252);
evalcond[1]=((((-1.0)*sj0))+((r02*x11253)));
evalcond[2]=((((-1.0)*x11255*x11256))+(((-1.0)*x11254*x11256)));
evalcond[3]=((((-1.0)*gconst38*r10*x11256))+(((-1.0)*gconst39*r11*x11256)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x11253*x11254))+((x11253*x11255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11258=IKPowWithIntegerCheck((((gconst39*r21))+((gconst38*r20))),-1);
if(!x11258.valid){
continue;
}
IkReal x11257=x11258.value;
sj4array[0]=(((cj1*sj2*x11257))+((cj2*sj1*x11257)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11259=IKcos(j4);
IkReal x11260=IKsin(j4);
IkReal x11261=((1.0)*sj0);
IkReal x11262=(gconst39*r11);
IkReal x11263=((1.0)*x11259);
IkReal x11264=(gconst38*x11263);
evalcond[0]=(r02*x11259);
evalcond[1]=((((-1.0)*x11261))+((r02*x11260)));
evalcond[2]=((((-1.0)*gconst39*r21*x11263))+(((-1.0)*r20*x11264)));
evalcond[3]=((((-1.0)*r10*x11264))+(((-1.0)*x11262*x11263)));
evalcond[4]=(((cj1*cj2*sj0))+((x11260*x11262))+(((-1.0)*sj1*sj2*x11261))+((gconst38*r10*x11260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11265=IKPowWithIntegerCheck(r02,-1);
if(!x11265.valid){
continue;
}
sj4array[0]=(sj0*(x11265.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11266=IKcos(j4);
IkReal x11267=IKsin(j4);
IkReal x11268=(gconst38*r20);
IkReal x11269=((1.0)*sj2);
IkReal x11270=(gconst38*r10);
IkReal x11271=((1.0)*x11266);
IkReal x11272=(gconst39*x11267);
evalcond[0]=(r02*x11266);
evalcond[1]=((((-1.0)*x11268*x11271))+(((-1.0)*gconst39*r21*x11271)));
evalcond[2]=((((-1.0)*gconst39*r11*x11271))+(((-1.0)*x11270*x11271)));
evalcond[3]=(((x11267*x11268))+(((-1.0)*cj2*sj1))+((r21*x11272))+(((-1.0)*cj1*x11269)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x11269))+((x11267*x11270))+((r11*x11272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(r02,-1);
if(!x11274.valid){
continue;
}
IkReal x11273=x11274.value;
CheckValue<IkReal> x11275=IKPowWithIntegerCheck(cj3,-1);
if(!x11275.valid){
continue;
}
if( IKabs((sj0*x11273)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11273*(x11275.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x11273))+IKsqr((x11273*(x11275.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x11273), (x11273*(x11275.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11276=IKcos(j4);
IkReal x11277=IKsin(j4);
IkReal x11278=(gconst38*r21);
IkReal x11279=(gconst38*r20);
IkReal x11280=(sj1*sj2);
IkReal x11281=((1.0)*sj3);
IkReal x11282=(gconst38*r10);
IkReal x11283=(cj1*cj2);
IkReal x11284=(gconst39*r21);
IkReal x11285=(gconst39*r20);
IkReal x11286=((1.0)*cj3);
IkReal x11287=(gconst39*r10);
IkReal x11288=((1.0)*sj0);
IkReal x11289=(gconst38*r11);
IkReal x11290=(gconst39*r11);
IkReal x11291=((1.0)*x11276);
IkReal x11292=(cj3*x11277);
IkReal x11293=((1.0)*cj2*sj1);
IkReal x11294=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x11288))+((r02*x11277)));
evalcond[1]=((((-1.0)*x11284*x11291))+(((-1.0)*x11279*x11291)));
evalcond[2]=((((-1.0)*x11282*x11291))+cj0+(((-1.0)*x11290*x11291)));
evalcond[3]=((((-1.0)*cj0*x11294))+(((-1.0)*cj0*x11293))+((cj3*r02*x11276)));
evalcond[4]=(((cj0*x11283))+(((-1.0)*cj0*x11280))+(((-1.0)*r02*x11276*x11281)));
evalcond[5]=(((sj3*x11278))+x11280+(((-1.0)*x11283))+(((-1.0)*x11281*x11285))+((x11279*x11292))+((x11284*x11292)));
evalcond[6]=((((-1.0)*x11277*x11281*x11284))+((cj3*x11278))+(((-1.0)*x11294))+(((-1.0)*x11293))+(((-1.0)*x11277*x11279*x11281))+(((-1.0)*x11285*x11286)));
evalcond[7]=(((sj3*x11289))+((x11290*x11292))+(((-1.0)*x11281*x11287))+(((-1.0)*cj1*sj2*x11288))+(((-1.0)*cj2*sj1*x11288))+((x11282*x11292)));
evalcond[8]=((((-1.0)*x11277*x11281*x11290))+(((-1.0)*x11277*x11281*x11282))+(((-1.0)*x11286*x11287))+((cj3*x11289))+((sj0*x11283))+(((-1.0)*x11280*x11288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11295=((1.0)*gconst38);
CheckValue<IkReal> x11296=IKPowWithIntegerCheck((((cj3*gconst38*r20))+((cj3*gconst39*r21))),-1);
if(!x11296.valid){
continue;
}
CheckValue<IkReal> x11297=IKPowWithIntegerCheck(((((-1.0)*r10*x11295))+(((-1.0)*gconst39*r11))),-1);
if(!x11297.valid){
continue;
}
if( IKabs(((x11296.value)*((((gconst39*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x11295)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11297.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11296.value)*((((gconst39*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x11295))))))+IKsqr(((-1.0)*cj0*(x11297.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11296.value)*((((gconst39*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x11295))))), ((-1.0)*cj0*(x11297.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11298=IKcos(j4);
IkReal x11299=IKsin(j4);
IkReal x11300=(gconst38*r21);
IkReal x11301=(gconst38*r20);
IkReal x11302=(sj1*sj2);
IkReal x11303=((1.0)*sj3);
IkReal x11304=(gconst38*r10);
IkReal x11305=(cj1*cj2);
IkReal x11306=(gconst39*r21);
IkReal x11307=(gconst39*r20);
IkReal x11308=((1.0)*cj3);
IkReal x11309=(gconst39*r10);
IkReal x11310=((1.0)*sj0);
IkReal x11311=(gconst38*r11);
IkReal x11312=(gconst39*r11);
IkReal x11313=((1.0)*x11298);
IkReal x11314=(cj3*x11299);
IkReal x11315=((1.0)*cj2*sj1);
IkReal x11316=((1.0)*cj1*sj2);
evalcond[0]=(((r02*x11299))+(((-1.0)*x11310)));
evalcond[1]=((((-1.0)*x11306*x11313))+(((-1.0)*x11301*x11313)));
evalcond[2]=((((-1.0)*x11304*x11313))+cj0+(((-1.0)*x11312*x11313)));
evalcond[3]=(((cj3*r02*x11298))+(((-1.0)*cj0*x11316))+(((-1.0)*cj0*x11315)));
evalcond[4]=((((-1.0)*cj0*x11302))+(((-1.0)*r02*x11298*x11303))+((cj0*x11305)));
evalcond[5]=(((sj3*x11300))+((x11301*x11314))+x11302+(((-1.0)*x11303*x11307))+((x11306*x11314))+(((-1.0)*x11305)));
evalcond[6]=((((-1.0)*x11307*x11308))+(((-1.0)*x11299*x11301*x11303))+(((-1.0)*x11299*x11303*x11306))+((cj3*x11300))+(((-1.0)*x11315))+(((-1.0)*x11316)));
evalcond[7]=(((x11304*x11314))+(((-1.0)*x11303*x11309))+(((-1.0)*cj1*sj2*x11310))+((sj3*x11311))+(((-1.0)*cj2*sj1*x11310))+((x11312*x11314)));
evalcond[8]=((((-1.0)*x11302*x11310))+((cj3*x11311))+((sj0*x11305))+(((-1.0)*x11299*x11303*x11312))+(((-1.0)*x11299*x11303*x11304))+(((-1.0)*x11308*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(r02,-1);
if(!x11317.valid){
continue;
}
CheckValue<IkReal> x11318=IKPowWithIntegerCheck(((((-1.0)*gconst39*r11))+(((-1.0)*gconst38*r10))),-1);
if(!x11318.valid){
continue;
}
if( IKabs((sj0*(x11317.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11318.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x11317.value)))+IKsqr(((-1.0)*cj0*(x11318.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x11317.value)), ((-1.0)*cj0*(x11318.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11319=IKcos(j4);
IkReal x11320=IKsin(j4);
IkReal x11321=(gconst38*r21);
IkReal x11322=(gconst38*r20);
IkReal x11323=(sj1*sj2);
IkReal x11324=((1.0)*sj3);
IkReal x11325=(gconst38*r10);
IkReal x11326=(cj1*cj2);
IkReal x11327=(gconst39*r21);
IkReal x11328=(gconst39*r20);
IkReal x11329=((1.0)*cj3);
IkReal x11330=(gconst39*r10);
IkReal x11331=((1.0)*sj0);
IkReal x11332=(gconst38*r11);
IkReal x11333=(gconst39*r11);
IkReal x11334=((1.0)*x11319);
IkReal x11335=(cj3*x11320);
IkReal x11336=((1.0)*cj2*sj1);
IkReal x11337=((1.0)*cj1*sj2);
evalcond[0]=(((r02*x11320))+(((-1.0)*x11331)));
evalcond[1]=((((-1.0)*x11322*x11334))+(((-1.0)*x11327*x11334)));
evalcond[2]=((((-1.0)*x11333*x11334))+(((-1.0)*x11325*x11334))+cj0);
evalcond[3]=(((cj3*r02*x11319))+(((-1.0)*cj0*x11337))+(((-1.0)*cj0*x11336)));
evalcond[4]=((((-1.0)*r02*x11319*x11324))+((cj0*x11326))+(((-1.0)*cj0*x11323)));
evalcond[5]=(((x11327*x11335))+((x11322*x11335))+x11323+((sj3*x11321))+(((-1.0)*x11326))+(((-1.0)*x11324*x11328)));
evalcond[6]=((((-1.0)*x11328*x11329))+((cj3*x11321))+(((-1.0)*x11336))+(((-1.0)*x11337))+(((-1.0)*x11320*x11324*x11327))+(((-1.0)*x11320*x11322*x11324)));
evalcond[7]=((((-1.0)*cj1*sj2*x11331))+(((-1.0)*x11324*x11330))+((sj3*x11332))+(((-1.0)*cj2*sj1*x11331))+((x11333*x11335))+((x11325*x11335)));
evalcond[8]=((((-1.0)*x11323*x11331))+((sj0*x11326))+(((-1.0)*x11320*x11324*x11325))+((cj3*x11332))+(((-1.0)*x11329*x11330))+(((-1.0)*x11320*x11324*x11333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11338=((1.0)*sj0);
IkReal x11339=((1.0)*cj0);
CheckValue<IkReal> x11340 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r00*x11339))+(((-1.0)*gconst39*r11*x11338))+(((-1.0)*gconst38*r10*x11338))+(((-1.0)*gconst39*r01*x11339)))),IkReal(((((-1.0)*r12*x11338))+(((-1.0)*r02*x11339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11340.valid){
continue;
}
CheckValue<IkReal> x11341=IKPowWithIntegerCheck(IKsign((((gconst39*r20))+(((-1.0)*gconst38*r21)))),-1);
if(!x11341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11340.value)+(((1.5707963267949)*(x11341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11342=IKcos(j4);
IkReal x11343=IKsin(j4);
IkReal x11344=(gconst38*sj3);
IkReal x11345=(gconst38*r20);
IkReal x11346=((1.0)*r00);
IkReal x11347=(sj1*sj2);
IkReal x11348=(cj3*gconst38);
IkReal x11349=(cj1*cj2);
IkReal x11350=(gconst39*r01);
IkReal x11351=((1.0)*cj0);
IkReal x11352=(gconst39*r21);
IkReal x11353=(cj2*sj1);
IkReal x11354=(cj1*sj2);
IkReal x11355=(gconst39*sj3);
IkReal x11356=((1.0)*r20);
IkReal x11357=(cj3*gconst39);
IkReal x11358=((1.0)*r10);
IkReal x11359=((1.0)*sj0);
IkReal x11360=(gconst39*r11);
IkReal x11361=((1.0)*x11342);
IkReal x11362=(cj3*x11343);
IkReal x11363=(r10*x11343);
IkReal x11364=(cj3*x11342);
IkReal x11365=((1.0)*sj3*x11343);
evalcond[0]=((((-1.0)*x11345*x11361))+(((-1.0)*x11352*x11361))+((r22*x11343)));
evalcond[1]=(cj0+((r12*x11343))+(((-1.0)*x11360*x11361))+(((-1.0)*gconst38*x11342*x11358)));
evalcond[2]=((((-1.0)*x11359))+(((-1.0)*x11350*x11361))+(((-1.0)*gconst38*x11342*x11346))+((r02*x11343)));
evalcond[3]=(x11347+((x11345*x11362))+((r22*x11364))+(((-1.0)*x11349))+(((-1.0)*x11355*x11356))+((r21*x11344))+((x11352*x11362)));
evalcond[4]=(((r00*x11343*x11348))+(((-1.0)*x11351*x11353))+(((-1.0)*x11351*x11354))+((x11350*x11362))+(((-1.0)*x11346*x11355))+((r02*x11364))+((r01*x11344)));
evalcond[5]=((((-1.0)*x11353*x11359))+((r11*x11344))+((r11*x11343*x11357))+((x11348*x11363))+((r12*x11364))+(((-1.0)*x11355*x11358))+(((-1.0)*x11354*x11359)));
evalcond[6]=((((-1.0)*r22*sj3*x11361))+(((-1.0)*x11352*x11365))+(((-1.0)*x11353))+(((-1.0)*x11354))+(((-1.0)*x11343*x11344*x11356))+((r21*x11348))+(((-1.0)*x11356*x11357)));
evalcond[7]=((((-1.0)*r02*sj3*x11361))+(((-1.0)*x11346*x11357))+(((-1.0)*x11343*x11344*x11346))+((cj0*x11349))+(((-1.0)*x11347*x11351))+((r01*x11348))+(((-1.0)*x11350*x11365)));
evalcond[8]=(((r11*x11348))+(((-1.0)*r12*sj3*x11361))+(((-1.0)*r11*x11343*x11355))+(((-1.0)*x11347*x11359))+((sj0*x11349))+(((-1.0)*x11343*x11344*x11358))+(((-1.0)*x11357*x11358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11366=((1.0)*sj0);
CheckValue<IkReal> x11367 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r21*x11366))+(((-1.0)*gconst38*r20*x11366)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11367.valid){
continue;
}
CheckValue<IkReal> x11368=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst39*r10))+((gconst38*r11)))),-1);
if(!x11368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11367.value)+(((1.5707963267949)*(x11368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11369=IKcos(j4);
IkReal x11370=IKsin(j4);
IkReal x11371=(gconst38*sj3);
IkReal x11372=(gconst38*r20);
IkReal x11373=((1.0)*r00);
IkReal x11374=(sj1*sj2);
IkReal x11375=(cj3*gconst38);
IkReal x11376=(cj1*cj2);
IkReal x11377=(gconst39*r01);
IkReal x11378=((1.0)*cj0);
IkReal x11379=(gconst39*r21);
IkReal x11380=(cj2*sj1);
IkReal x11381=(cj1*sj2);
IkReal x11382=(gconst39*sj3);
IkReal x11383=((1.0)*r20);
IkReal x11384=(cj3*gconst39);
IkReal x11385=((1.0)*r10);
IkReal x11386=((1.0)*sj0);
IkReal x11387=(gconst39*r11);
IkReal x11388=((1.0)*x11369);
IkReal x11389=(cj3*x11370);
IkReal x11390=(r10*x11370);
IkReal x11391=(cj3*x11369);
IkReal x11392=((1.0)*sj3*x11370);
evalcond[0]=((((-1.0)*x11372*x11388))+(((-1.0)*x11379*x11388))+((r22*x11370)));
evalcond[1]=(cj0+(((-1.0)*gconst38*x11369*x11385))+((r12*x11370))+(((-1.0)*x11387*x11388)));
evalcond[2]=((((-1.0)*x11386))+((r02*x11370))+(((-1.0)*gconst38*x11369*x11373))+(((-1.0)*x11377*x11388)));
evalcond[3]=((((-1.0)*x11376))+((r21*x11371))+(((-1.0)*x11382*x11383))+((x11379*x11389))+x11374+((r22*x11391))+((x11372*x11389)));
evalcond[4]=(((r02*x11391))+((r01*x11371))+(((-1.0)*x11373*x11382))+(((-1.0)*x11378*x11381))+(((-1.0)*x11378*x11380))+((r00*x11370*x11375))+((x11377*x11389)));
evalcond[5]=((((-1.0)*x11381*x11386))+(((-1.0)*x11380*x11386))+(((-1.0)*x11382*x11385))+((r12*x11391))+((r11*x11371))+((x11375*x11390))+((r11*x11370*x11384)));
evalcond[6]=((((-1.0)*x11383*x11384))+((r21*x11375))+(((-1.0)*x11379*x11392))+(((-1.0)*x11370*x11371*x11383))+(((-1.0)*r22*sj3*x11388))+(((-1.0)*x11380))+(((-1.0)*x11381)));
evalcond[7]=((((-1.0)*x11377*x11392))+(((-1.0)*x11370*x11371*x11373))+((r01*x11375))+(((-1.0)*x11374*x11378))+(((-1.0)*x11373*x11384))+(((-1.0)*r02*sj3*x11388))+((cj0*x11376)));
evalcond[8]=(((sj0*x11376))+(((-1.0)*r11*x11370*x11382))+(((-1.0)*x11374*x11386))+(((-1.0)*r12*sj3*x11388))+(((-1.0)*x11384*x11385))+((r11*x11375))+(((-1.0)*x11370*x11371*x11385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11393=((1.0)*cj0);
CheckValue<IkReal> x11394=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst39*r00))+((gconst38*r01)))),-1);
if(!x11394.valid){
continue;
}
CheckValue<IkReal> x11395 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r21*x11393))+(((-1.0)*gconst38*r20*x11393)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11394.value)))+(x11395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11396=IKcos(j4);
IkReal x11397=IKsin(j4);
IkReal x11398=(gconst38*sj3);
IkReal x11399=(gconst38*r20);
IkReal x11400=((1.0)*r00);
IkReal x11401=(sj1*sj2);
IkReal x11402=(cj3*gconst38);
IkReal x11403=(cj1*cj2);
IkReal x11404=(gconst39*r01);
IkReal x11405=((1.0)*cj0);
IkReal x11406=(gconst39*r21);
IkReal x11407=(cj2*sj1);
IkReal x11408=(cj1*sj2);
IkReal x11409=(gconst39*sj3);
IkReal x11410=((1.0)*r20);
IkReal x11411=(cj3*gconst39);
IkReal x11412=((1.0)*r10);
IkReal x11413=((1.0)*sj0);
IkReal x11414=(gconst39*r11);
IkReal x11415=((1.0)*x11396);
IkReal x11416=(cj3*x11397);
IkReal x11417=(r10*x11397);
IkReal x11418=(cj3*x11396);
IkReal x11419=((1.0)*sj3*x11397);
evalcond[0]=((((-1.0)*x11406*x11415))+(((-1.0)*x11399*x11415))+((r22*x11397)));
evalcond[1]=(cj0+(((-1.0)*x11414*x11415))+((r12*x11397))+(((-1.0)*gconst38*x11396*x11412)));
evalcond[2]=(((r02*x11397))+(((-1.0)*x11404*x11415))+(((-1.0)*gconst38*x11396*x11400))+(((-1.0)*x11413)));
evalcond[3]=(x11401+((r22*x11418))+((x11399*x11416))+((r21*x11398))+(((-1.0)*x11403))+(((-1.0)*x11409*x11410))+((x11406*x11416)));
evalcond[4]=(((x11404*x11416))+((r01*x11398))+(((-1.0)*x11405*x11408))+(((-1.0)*x11405*x11407))+((r00*x11397*x11402))+(((-1.0)*x11400*x11409))+((r02*x11418)));
evalcond[5]=(((x11402*x11417))+(((-1.0)*x11407*x11413))+(((-1.0)*x11408*x11413))+((r11*x11397*x11411))+((r12*x11418))+((r11*x11398))+(((-1.0)*x11409*x11412)));
evalcond[6]=((((-1.0)*r22*sj3*x11415))+(((-1.0)*x11410*x11411))+((r21*x11402))+(((-1.0)*x11406*x11419))+(((-1.0)*x11408))+(((-1.0)*x11407))+(((-1.0)*x11397*x11398*x11410)));
evalcond[7]=((((-1.0)*r02*sj3*x11415))+(((-1.0)*x11404*x11419))+(((-1.0)*x11400*x11411))+((cj0*x11403))+(((-1.0)*x11397*x11398*x11400))+(((-1.0)*x11401*x11405))+((r01*x11402)));
evalcond[8]=(((r11*x11402))+(((-1.0)*r12*sj3*x11415))+(((-1.0)*x11411*x11412))+((sj0*x11403))+(((-1.0)*x11401*x11413))+(((-1.0)*x11397*x11398*x11412))+(((-1.0)*r11*x11397*x11409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11421 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11421)==0){
continue;
}
IkReal x11420=pow(x11421,-0.5);
CheckValue<IkReal> x11422 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11422.valid){
continue;
}
IkReal gconst40=((-1.0)*(x11422.value));
IkReal gconst41=(r10*x11420);
IkReal gconst42=(r11*x11420);
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11423.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11426 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11426.valid){
continue;
}
IkReal x11424=((-1.0)*(x11426.value));
IkReal x11425=x11420;
sj5=gconst41;
cj5=gconst42;
j5=x11424;
IkReal gconst40=x11424;
IkReal gconst41=(r10*x11425);
IkReal gconst42=(r11*x11425);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11427=((1.0)*cj0);
IkReal x11428=((1.0)*sj0);
CheckValue<IkReal> x11429=IKPowWithIntegerCheck(IKsign((((gconst42*r20))+(((-1.0)*gconst41*r21)))),-1);
if(!x11429.valid){
continue;
}
CheckValue<IkReal> x11430 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r10*x11428))+(((-1.0)*gconst41*r00*x11427))+(((-1.0)*gconst42*r01*x11427))+(((-1.0)*gconst42*r11*x11428)))),IkReal(((((-1.0)*r02*x11427))+(((-1.0)*r12*x11428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11429.value)))+(x11430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11431=IKcos(j4);
IkReal x11432=IKsin(j4);
IkReal x11433=((1.0)*cj1);
IkReal x11434=((1.0)*sj3);
IkReal x11435=(cj3*gconst41);
IkReal x11436=(sj1*sj2);
IkReal x11437=(gconst41*sj3);
IkReal x11438=(cj3*gconst42);
IkReal x11439=((1.0)*r00);
IkReal x11440=(gconst41*r10);
IkReal x11441=(cj2*sj0);
IkReal x11442=((1.0)*sj1);
IkReal x11443=(gconst41*r20);
IkReal x11444=(cj0*cj2);
IkReal x11445=((1.0)*sj0);
IkReal x11446=(r02*x11431);
IkReal x11447=(r21*x11432);
IkReal x11448=((1.0)*x11431);
IkReal x11449=(r22*x11431);
IkReal x11450=(r00*x11432);
IkReal x11451=(r12*x11431);
IkReal x11452=(r11*x11432);
IkReal x11453=(gconst42*r01*x11432);
evalcond[0]=((((-1.0)*gconst42*r21*x11448))+((r22*x11432))+(((-1.0)*x11443*x11448)));
evalcond[1]=((((-1.0)*x11440*x11448))+cj0+(((-1.0)*gconst42*r11*x11448))+((r12*x11432)));
evalcond[2]=(((r02*x11432))+(((-1.0)*gconst42*r01*x11448))+(((-1.0)*x11445))+(((-1.0)*gconst41*x11431*x11439)));
evalcond[3]=(((cj3*x11449))+x11436+((x11438*x11447))+(((-1.0)*gconst42*r20*x11434))+((r20*x11432*x11435))+((r21*x11437))+(((-1.0)*cj2*x11433)));
evalcond[4]=(((cj3*x11446))+(((-1.0)*gconst42*r00*x11434))+((r01*x11432*x11438))+((x11435*x11450))+((r01*x11437))+(((-1.0)*x11442*x11444))+(((-1.0)*cj0*sj2*x11433)));
evalcond[5]=((((-1.0)*gconst42*r10*x11434))+(((-1.0)*x11441*x11442))+((cj3*x11451))+((x11438*x11452))+((r11*x11437))+((r10*x11432*x11435))+(((-1.0)*sj0*sj2*x11433)));
evalcond[6]=((((-1.0)*x11432*x11434*x11443))+(((-1.0)*gconst42*x11434*x11447))+(((-1.0)*r20*x11438))+(((-1.0)*cj2*x11442))+((r21*x11435))+(((-1.0)*x11434*x11449))+(((-1.0)*sj2*x11433)));
evalcond[7]=((((-1.0)*x11438*x11439))+((cj1*x11444))+(((-1.0)*x11434*x11453))+(((-1.0)*gconst41*x11434*x11450))+(((-1.0)*cj0*x11436))+((r01*x11435))+(((-1.0)*x11434*x11446)));
evalcond[8]=((((-1.0)*x11432*x11434*x11440))+((cj1*x11441))+(((-1.0)*x11434*x11451))+(((-1.0)*gconst42*x11434*x11452))+((r11*x11435))+(((-1.0)*r10*x11438))+(((-1.0)*x11436*x11445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11454=((1.0)*cj0);
CheckValue<IkReal> x11455 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r20*x11454))+(((-1.0)*gconst42*r21*x11454)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11455.valid){
continue;
}
CheckValue<IkReal> x11456=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+(((-1.0)*gconst42*r00)))),-1);
if(!x11456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11455.value)+(((1.5707963267949)*(x11456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11457=IKcos(j4);
IkReal x11458=IKsin(j4);
IkReal x11459=((1.0)*cj1);
IkReal x11460=((1.0)*sj3);
IkReal x11461=(cj3*gconst41);
IkReal x11462=(sj1*sj2);
IkReal x11463=(gconst41*sj3);
IkReal x11464=(cj3*gconst42);
IkReal x11465=((1.0)*r00);
IkReal x11466=(gconst41*r10);
IkReal x11467=(cj2*sj0);
IkReal x11468=((1.0)*sj1);
IkReal x11469=(gconst41*r20);
IkReal x11470=(cj0*cj2);
IkReal x11471=((1.0)*sj0);
IkReal x11472=(r02*x11457);
IkReal x11473=(r21*x11458);
IkReal x11474=((1.0)*x11457);
IkReal x11475=(r22*x11457);
IkReal x11476=(r00*x11458);
IkReal x11477=(r12*x11457);
IkReal x11478=(r11*x11458);
IkReal x11479=(gconst42*r01*x11458);
evalcond[0]=((((-1.0)*gconst42*r21*x11474))+(((-1.0)*x11469*x11474))+((r22*x11458)));
evalcond[1]=(cj0+((r12*x11458))+(((-1.0)*gconst42*r11*x11474))+(((-1.0)*x11466*x11474)));
evalcond[2]=(((r02*x11458))+(((-1.0)*gconst42*r01*x11474))+(((-1.0)*x11471))+(((-1.0)*gconst41*x11457*x11465)));
evalcond[3]=(((cj3*x11475))+(((-1.0)*gconst42*r20*x11460))+x11462+((r20*x11458*x11461))+((x11464*x11473))+(((-1.0)*cj2*x11459))+((r21*x11463)));
evalcond[4]=(((cj3*x11472))+((r01*x11463))+(((-1.0)*gconst42*r00*x11460))+(((-1.0)*x11468*x11470))+(((-1.0)*cj0*sj2*x11459))+((x11461*x11476))+((r01*x11458*x11464)));
evalcond[5]=(((cj3*x11477))+((r11*x11463))+((r10*x11458*x11461))+(((-1.0)*gconst42*r10*x11460))+(((-1.0)*sj0*sj2*x11459))+(((-1.0)*x11467*x11468))+((x11464*x11478)));
evalcond[6]=((((-1.0)*gconst42*x11460*x11473))+(((-1.0)*sj2*x11459))+(((-1.0)*cj2*x11468))+(((-1.0)*x11458*x11460*x11469))+(((-1.0)*x11460*x11475))+(((-1.0)*r20*x11464))+((r21*x11461)));
evalcond[7]=((((-1.0)*x11464*x11465))+((r01*x11461))+((cj1*x11470))+(((-1.0)*x11460*x11472))+(((-1.0)*x11460*x11479))+(((-1.0)*cj0*x11462))+(((-1.0)*gconst41*x11460*x11476)));
evalcond[8]=((((-1.0)*gconst42*x11460*x11478))+(((-1.0)*r10*x11464))+((r11*x11461))+((cj1*x11467))+(((-1.0)*x11462*x11471))+(((-1.0)*x11458*x11460*x11466))+(((-1.0)*x11460*x11477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11482 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11482)==0){
continue;
}
IkReal x11480=pow(x11482,-0.5);
IkReal x11481=((-1.0)*x11480);
CheckValue<IkReal> x11483 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11483.valid){
continue;
}
IkReal gconst43=((3.14159265358979)+(((-1.0)*(x11483.value))));
IkReal gconst44=(r10*x11481);
IkReal gconst45=(r11*x11481);
CheckValue<IkReal> x11484 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11484.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11484.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11488 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11488.valid){
continue;
}
IkReal x11485=((1.0)*(x11488.value));
IkReal x11486=x11480;
IkReal x11487=((-1.0)*x11486);
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11485)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11485)));
IkReal gconst44=(r10*x11487);
IkReal gconst45=(r11*x11487);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x11492 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11492.valid){
continue;
}
IkReal x11489=((1.0)*(x11492.value));
IkReal x11490=x11480;
IkReal x11491=((-1.0)*x11490);
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11489)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11489)));
IkReal gconst44=(r10*x11491);
IkReal gconst45=(r11*x11491);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11496 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11496.valid){
continue;
}
IkReal x11493=((1.0)*(x11496.value));
IkReal x11494=x11480;
IkReal x11495=((-1.0)*x11494);
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11493)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11493)));
IkReal gconst44=(r10*x11495);
IkReal gconst45=(r11*x11495);
IkReal x11497=r12*r12;
IkReal x11498=((1.0)*sj0);
IkReal x11499=(cj0*r02);
IkReal x11500=x11480;
j4eval[0]=((IKabs((((r12*x11499*x11500))+(((-1.0)*x11498*x11500))+((sj0*x11497*x11500)))))+(IKabs(((((-1.0)*r12*x11498))+(((-1.0)*x11499))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x11501=(sj1*sj2);
IkReal x11502=((2.0)*cj3);
IkReal x11503=(cj3*r22);
IkReal x11504=(gconst44*r21*sj3);
IkReal x11505=((1.0)*cj1*cj2);
IkReal x11506=((1.0)*gconst45*r20*sj3);
IkReal x11507=(x11504+x11501);
IkReal x11508=(x11505+x11506);
op[0]=((((-1.0)*x11508))+x11507+(((-1.0)*x11503)));
op[1]=(((gconst44*r20*x11502))+((gconst45*r21*x11502)));
op[2]=((((-1.0)*x11508))+x11507+x11503);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x11509=(gconst45*r11);
IkReal x11510=(gconst44*r10);
op[0]=((-1.0)+x11509+x11510);
op[1]=((2.0)*r12);
op[2]=((-1.0)+(((-1.0)*x11510))+(((-1.0)*x11509)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11514 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11514.valid){
continue;
}
IkReal x11511=((1.0)*(x11514.value));
IkReal x11512=x11480;
IkReal x11513=((-1.0)*x11512);
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11511)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11511)));
IkReal gconst44=(r10*x11513);
IkReal gconst45=(r11*x11513);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11518 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11518.valid){
continue;
}
IkReal x11515=((1.0)*(x11518.value));
IkReal x11516=x11480;
IkReal x11517=((-1.0)*x11516);
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11515)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11515)));
IkReal gconst44=(r10*x11517);
IkReal gconst45=(r11*x11517);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11519=gconst45*gconst45;
IkReal x11520=gconst44*gconst44;
IkReal x11521=(gconst45*r00);
IkReal x11522=(r22*sj3);
IkReal x11523=(cj3*r21);
IkReal x11524=(r21*sj3);
IkReal x11525=((1.0)*r01);
IkReal x11526=(gconst44*r20);
IkReal x11527=(r20*x11520);
CheckValue<IkReal> x11528 = IKatan2WithCheck(IkReal((((r00*x11519*x11524))+((sj3*x11521*x11526))+(((-1.0)*sj3*x11525*x11527))+(((-1.0)*gconst44*gconst45*x11524*x11525)))),IkReal((((x11521*x11522))+(((-1.0)*gconst44*x11522*x11525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11528.valid){
continue;
}
CheckValue<IkReal> x11529=IKPowWithIntegerCheck(IKsign((((cj3*r00*x11527))+((cj3*gconst45*r01*x11526))+((r01*x11519*x11523))+((cj3*r02*r22))+((gconst44*x11521*x11523)))),-1);
if(!x11529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11528.value)+(((1.5707963267949)*(x11529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11530=IKcos(j4);
IkReal x11531=IKsin(j4);
IkReal x11532=(cj1*cj2);
IkReal x11533=(gconst44*r00);
IkReal x11534=(cj3*gconst44);
IkReal x11535=(sj1*sj2);
IkReal x11536=(gconst45*r11);
IkReal x11537=((1.0)*sj3);
IkReal x11538=(gconst44*sj3);
IkReal x11539=(cj3*gconst45);
IkReal x11540=((1.0)*cj1*sj2);
IkReal x11541=((1.0)*cj2*sj1);
IkReal x11542=(gconst45*x11537);
IkReal x11543=((1.0)*x11530);
IkReal x11544=(r20*x11531);
IkReal x11545=(cj3*x11530);
IkReal x11546=((1.0)*x11539);
IkReal x11547=(r01*x11531);
IkReal x11548=(r21*x11531);
IkReal x11549=(r10*x11531);
IkReal x11550=(cj3*x11531);
IkReal x11551=(x11540+x11541);
evalcond[0]=(((r22*x11531))+(((-1.0)*gconst45*r21*x11543))+(((-1.0)*gconst44*r20*x11543)));
evalcond[1]=((((-1.0)*gconst44*r10*x11543))+((r12*x11531))+(((-1.0)*x11536*x11543)));
evalcond[2]=((-1.0)+(((-1.0)*x11533*x11543))+(((-1.0)*gconst45*r01*x11543))+((r02*x11531)));
evalcond[3]=((((-1.0)*r00*x11542))+((x11539*x11547))+((r01*x11538))+((x11533*x11550))+((r02*x11545)));
evalcond[4]=((((-1.0)*r00*x11546))+((r01*x11534))+(((-1.0)*x11542*x11547))+(((-1.0)*r02*x11530*x11537))+(((-1.0)*x11531*x11533*x11537)));
evalcond[5]=(x11535+((x11539*x11548))+((r21*x11538))+(((-1.0)*r20*x11542))+((r22*x11545))+(((-1.0)*x11532))+((x11534*x11544)));
evalcond[6]=((((-1.0)*x11551))+((r11*x11538))+((x11536*x11550))+((r12*x11545))+(((-1.0)*r10*x11542))+((x11534*x11549)));
evalcond[7]=((((-1.0)*r12*x11530*x11537))+x11532+((r11*x11534))+(((-1.0)*x11531*x11536*x11537))+(((-1.0)*r10*x11546))+(((-1.0)*x11535))+(((-1.0)*gconst44*x11537*x11549)));
evalcond[8]=((((-1.0)*x11551))+((r21*x11534))+(((-1.0)*r20*x11546))+(((-1.0)*r22*x11530*x11537))+(((-1.0)*x11542*x11548))+(((-1.0)*gconst44*x11537*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11552=((1.0)*gconst44);
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x11552))+(((-1.0)*gconst45*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
CheckValue<IkReal> x11554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11552))+((gconst45*r20)))),-1);
if(!x11554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11553.value)+(((1.5707963267949)*(x11554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11555=IKcos(j4);
IkReal x11556=IKsin(j4);
IkReal x11557=(cj1*cj2);
IkReal x11558=(gconst44*r00);
IkReal x11559=(cj3*gconst44);
IkReal x11560=(sj1*sj2);
IkReal x11561=(gconst45*r11);
IkReal x11562=((1.0)*sj3);
IkReal x11563=(gconst44*sj3);
IkReal x11564=(cj3*gconst45);
IkReal x11565=((1.0)*cj1*sj2);
IkReal x11566=((1.0)*cj2*sj1);
IkReal x11567=(gconst45*x11562);
IkReal x11568=((1.0)*x11555);
IkReal x11569=(r20*x11556);
IkReal x11570=(cj3*x11555);
IkReal x11571=((1.0)*x11564);
IkReal x11572=(r01*x11556);
IkReal x11573=(r21*x11556);
IkReal x11574=(r10*x11556);
IkReal x11575=(cj3*x11556);
IkReal x11576=(x11566+x11565);
evalcond[0]=(((r22*x11556))+(((-1.0)*gconst44*r20*x11568))+(((-1.0)*gconst45*r21*x11568)));
evalcond[1]=(((r12*x11556))+(((-1.0)*x11561*x11568))+(((-1.0)*gconst44*r10*x11568)));
evalcond[2]=((-1.0)+((r02*x11556))+(((-1.0)*x11558*x11568))+(((-1.0)*gconst45*r01*x11568)));
evalcond[3]=(((x11564*x11572))+(((-1.0)*r00*x11567))+((r01*x11563))+((r02*x11570))+((x11558*x11575)));
evalcond[4]=((((-1.0)*r00*x11571))+(((-1.0)*x11556*x11558*x11562))+(((-1.0)*x11567*x11572))+((r01*x11559))+(((-1.0)*r02*x11555*x11562)));
evalcond[5]=(((x11564*x11573))+x11560+(((-1.0)*r20*x11567))+((r21*x11563))+((r22*x11570))+((x11559*x11569))+(((-1.0)*x11557)));
evalcond[6]=(((x11559*x11574))+((x11561*x11575))+((r12*x11570))+((r11*x11563))+(((-1.0)*x11576))+(((-1.0)*r10*x11567)));
evalcond[7]=(((r11*x11559))+(((-1.0)*gconst44*x11562*x11574))+x11557+(((-1.0)*x11556*x11561*x11562))+(((-1.0)*x11560))+(((-1.0)*r10*x11571))+(((-1.0)*r12*x11555*x11562)));
evalcond[8]=((((-1.0)*r22*x11555*x11562))+((r21*x11559))+(((-1.0)*gconst44*x11562*x11569))+(((-1.0)*r20*x11571))+(((-1.0)*x11567*x11573))+(((-1.0)*x11576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11577=((1.0)*gconst45);
CheckValue<IkReal> x11578=IKPowWithIntegerCheck(IKsign((((gconst44*r11))+(((-1.0)*r10*x11577)))),-1);
if(!x11578.valid){
continue;
}
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x11577))+(((-1.0)*gconst44*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11578.value)))+(x11579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11580=IKcos(j4);
IkReal x11581=IKsin(j4);
IkReal x11582=(cj1*cj2);
IkReal x11583=(gconst44*r00);
IkReal x11584=(cj3*gconst44);
IkReal x11585=(sj1*sj2);
IkReal x11586=(gconst45*r11);
IkReal x11587=((1.0)*sj3);
IkReal x11588=(gconst44*sj3);
IkReal x11589=(cj3*gconst45);
IkReal x11590=((1.0)*cj1*sj2);
IkReal x11591=((1.0)*cj2*sj1);
IkReal x11592=(gconst45*x11587);
IkReal x11593=((1.0)*x11580);
IkReal x11594=(r20*x11581);
IkReal x11595=(cj3*x11580);
IkReal x11596=((1.0)*x11589);
IkReal x11597=(r01*x11581);
IkReal x11598=(r21*x11581);
IkReal x11599=(r10*x11581);
IkReal x11600=(cj3*x11581);
IkReal x11601=(x11591+x11590);
evalcond[0]=(((r22*x11581))+(((-1.0)*gconst44*r20*x11593))+(((-1.0)*gconst45*r21*x11593)));
evalcond[1]=((((-1.0)*x11586*x11593))+((r12*x11581))+(((-1.0)*gconst44*r10*x11593)));
evalcond[2]=((-1.0)+((r02*x11581))+(((-1.0)*x11583*x11593))+(((-1.0)*gconst45*r01*x11593)));
evalcond[3]=(((x11589*x11597))+((r01*x11588))+(((-1.0)*r00*x11592))+((r02*x11595))+((x11583*x11600)));
evalcond[4]=(((r01*x11584))+(((-1.0)*r00*x11596))+(((-1.0)*x11581*x11583*x11587))+(((-1.0)*r02*x11580*x11587))+(((-1.0)*x11592*x11597)));
evalcond[5]=(((x11589*x11598))+x11585+(((-1.0)*x11582))+((r21*x11588))+(((-1.0)*r20*x11592))+((r22*x11595))+((x11584*x11594)));
evalcond[6]=((((-1.0)*x11601))+((x11586*x11600))+((r12*x11595))+(((-1.0)*r10*x11592))+((x11584*x11599))+((r11*x11588)));
evalcond[7]=(x11582+(((-1.0)*x11585))+(((-1.0)*x11581*x11586*x11587))+(((-1.0)*gconst44*x11587*x11599))+(((-1.0)*r12*x11580*x11587))+(((-1.0)*r10*x11596))+((r11*x11584)));
evalcond[8]=((((-1.0)*r22*x11580*x11587))+(((-1.0)*gconst44*x11587*x11594))+(((-1.0)*x11601))+((r21*x11584))+(((-1.0)*r20*x11596))+(((-1.0)*x11592*x11598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11605 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11605.valid){
continue;
}
IkReal x11602=((1.0)*(x11605.value));
IkReal x11603=x11480;
IkReal x11604=((-1.0)*x11603);
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11602)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11602)));
IkReal gconst44=(r10*x11604);
IkReal gconst45=(r11*x11604);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11609 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11609.valid){
continue;
}
IkReal x11606=((1.0)*(x11609.value));
IkReal x11607=x11480;
IkReal x11608=((-1.0)*x11607);
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11606)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11606)));
IkReal gconst44=(r10*x11608);
IkReal gconst45=(r11*x11608);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11610=gconst45*gconst45;
IkReal x11611=gconst44*gconst44;
IkReal x11612=(gconst45*r00);
IkReal x11613=(r22*sj3);
IkReal x11614=(cj3*r21);
IkReal x11615=(r21*sj3);
IkReal x11616=((1.0)*r01);
IkReal x11617=(gconst44*r20);
IkReal x11618=(r20*x11611);
CheckValue<IkReal> x11619=IKPowWithIntegerCheck(IKsign((((cj3*r00*x11618))+((r01*x11610*x11614))+((cj3*r02*r22))+((cj3*gconst45*r01*x11617))+((gconst44*x11612*x11614)))),-1);
if(!x11619.valid){
continue;
}
CheckValue<IkReal> x11620 = IKatan2WithCheck(IkReal((((r00*x11610*x11615))+((sj3*x11612*x11617))+(((-1.0)*gconst44*gconst45*x11615*x11616))+(((-1.0)*sj3*x11616*x11618)))),IkReal((((x11612*x11613))+(((-1.0)*gconst44*x11613*x11616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11619.value)))+(x11620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11621=IKcos(j4);
IkReal x11622=IKsin(j4);
IkReal x11623=(sj1*sj2);
IkReal x11624=(gconst44*r00);
IkReal x11625=(cj3*gconst44);
IkReal x11626=(gconst45*r11);
IkReal x11627=((1.0)*cj2);
IkReal x11628=((1.0)*sj3);
IkReal x11629=(gconst45*r01);
IkReal x11630=(gconst44*sj3);
IkReal x11631=(gconst45*r21);
IkReal x11632=(cj1*sj2);
IkReal x11633=(cj1*x11627);
IkReal x11634=(gconst45*x11628);
IkReal x11635=((1.0)*x11621);
IkReal x11636=(r20*x11622);
IkReal x11637=(cj3*x11622);
IkReal x11638=(cj3*x11621);
IkReal x11639=((1.0)*cj3*gconst45);
IkReal x11640=(r10*x11622);
evalcond[0]=((((-1.0)*x11631*x11635))+(((-1.0)*gconst44*r20*x11635))+((r22*x11622)));
evalcond[1]=(((r12*x11622))+(((-1.0)*gconst44*r10*x11635))+(((-1.0)*x11626*x11635)));
evalcond[2]=((1.0)+((r02*x11622))+(((-1.0)*x11624*x11635))+(((-1.0)*x11629*x11635)));
evalcond[3]=(((x11629*x11637))+((r02*x11638))+(((-1.0)*r00*x11634))+((r01*x11630))+((x11624*x11637)));
evalcond[4]=((((-1.0)*x11622*x11628*x11629))+(((-1.0)*r00*x11639))+((r01*x11625))+(((-1.0)*r02*x11621*x11628))+(((-1.0)*x11622*x11624*x11628)));
evalcond[5]=(((r11*x11630))+((cj2*sj1))+x11632+((x11625*x11640))+((r12*x11638))+(((-1.0)*r10*x11634))+((x11626*x11637)));
evalcond[6]=((((-1.0)*x11633))+x11623+((x11625*x11636))+((r22*x11638))+((r21*x11630))+((x11631*x11637))+(((-1.0)*r20*x11634)));
evalcond[7]=((((-1.0)*x11633))+x11623+((r11*x11625))+(((-1.0)*x11622*x11626*x11628))+(((-1.0)*r10*x11639))+(((-1.0)*gconst44*x11628*x11640))+(((-1.0)*r12*x11621*x11628)));
evalcond[8]=((((-1.0)*r22*x11621*x11628))+(((-1.0)*sj1*x11627))+(((-1.0)*x11632))+((r21*x11625))+(((-1.0)*x11622*x11628*x11631))+(((-1.0)*r20*x11639))+(((-1.0)*gconst44*x11628*x11636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11641=((1.0)*gconst45);
CheckValue<IkReal> x11642 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x11641))+(((-1.0)*gconst44*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11642.valid){
continue;
}
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(IKsign((((gconst44*r21))+(((-1.0)*r20*x11641)))),-1);
if(!x11643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11642.value)+(((1.5707963267949)*(x11643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11644=IKcos(j4);
IkReal x11645=IKsin(j4);
IkReal x11646=(sj1*sj2);
IkReal x11647=(gconst44*r00);
IkReal x11648=(cj3*gconst44);
IkReal x11649=(gconst45*r11);
IkReal x11650=((1.0)*cj2);
IkReal x11651=((1.0)*sj3);
IkReal x11652=(gconst45*r01);
IkReal x11653=(gconst44*sj3);
IkReal x11654=(gconst45*r21);
IkReal x11655=(cj1*sj2);
IkReal x11656=(cj1*x11650);
IkReal x11657=(gconst45*x11651);
IkReal x11658=((1.0)*x11644);
IkReal x11659=(r20*x11645);
IkReal x11660=(cj3*x11645);
IkReal x11661=(cj3*x11644);
IkReal x11662=((1.0)*cj3*gconst45);
IkReal x11663=(r10*x11645);
evalcond[0]=(((r22*x11645))+(((-1.0)*gconst44*r20*x11658))+(((-1.0)*x11654*x11658)));
evalcond[1]=(((r12*x11645))+(((-1.0)*gconst44*r10*x11658))+(((-1.0)*x11649*x11658)));
evalcond[2]=((1.0)+(((-1.0)*x11647*x11658))+((r02*x11645))+(((-1.0)*x11652*x11658)));
evalcond[3]=((((-1.0)*r00*x11657))+((r02*x11661))+((r01*x11653))+((x11652*x11660))+((x11647*x11660)));
evalcond[4]=((((-1.0)*r00*x11662))+(((-1.0)*x11645*x11651*x11652))+(((-1.0)*r02*x11644*x11651))+((r01*x11648))+(((-1.0)*x11645*x11647*x11651)));
evalcond[5]=(((cj2*sj1))+((r11*x11653))+x11655+((x11648*x11663))+((x11649*x11660))+(((-1.0)*r10*x11657))+((r12*x11661)));
evalcond[6]=((((-1.0)*x11656))+x11646+((r21*x11653))+((x11648*x11659))+((r22*x11661))+(((-1.0)*r20*x11657))+((x11654*x11660)));
evalcond[7]=((((-1.0)*x11656))+x11646+((r11*x11648))+(((-1.0)*x11645*x11649*x11651))+(((-1.0)*gconst44*x11651*x11663))+(((-1.0)*r12*x11644*x11651))+(((-1.0)*r10*x11662)));
evalcond[8]=((((-1.0)*r20*x11662))+(((-1.0)*x11645*x11651*x11654))+(((-1.0)*x11655))+((r21*x11648))+(((-1.0)*gconst44*x11651*x11659))+(((-1.0)*r22*x11644*x11651))+(((-1.0)*sj1*x11650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11664=((1.0)*gconst44);
CheckValue<IkReal> x11665 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11664))+(((-1.0)*gconst45*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11665.valid){
continue;
}
CheckValue<IkReal> x11666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11664))+((gconst45*r10)))),-1);
if(!x11666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11665.value)+(((1.5707963267949)*(x11666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11667=IKcos(j4);
IkReal x11668=IKsin(j4);
IkReal x11669=(sj1*sj2);
IkReal x11670=(gconst44*r00);
IkReal x11671=(cj3*gconst44);
IkReal x11672=(gconst45*r11);
IkReal x11673=((1.0)*cj2);
IkReal x11674=((1.0)*sj3);
IkReal x11675=(gconst45*r01);
IkReal x11676=(gconst44*sj3);
IkReal x11677=(gconst45*r21);
IkReal x11678=(cj1*sj2);
IkReal x11679=(cj1*x11673);
IkReal x11680=(gconst45*x11674);
IkReal x11681=((1.0)*x11667);
IkReal x11682=(r20*x11668);
IkReal x11683=(cj3*x11668);
IkReal x11684=(cj3*x11667);
IkReal x11685=((1.0)*cj3*gconst45);
IkReal x11686=(r10*x11668);
evalcond[0]=((((-1.0)*gconst44*r20*x11681))+((r22*x11668))+(((-1.0)*x11677*x11681)));
evalcond[1]=((((-1.0)*gconst44*r10*x11681))+(((-1.0)*x11672*x11681))+((r12*x11668)));
evalcond[2]=((1.0)+(((-1.0)*x11675*x11681))+((r02*x11668))+(((-1.0)*x11670*x11681)));
evalcond[3]=(((x11675*x11683))+(((-1.0)*r00*x11680))+((r02*x11684))+((r01*x11676))+((x11670*x11683)));
evalcond[4]=((((-1.0)*r00*x11685))+(((-1.0)*x11668*x11670*x11674))+((r01*x11671))+(((-1.0)*x11668*x11674*x11675))+(((-1.0)*r02*x11667*x11674)));
evalcond[5]=(((cj2*sj1))+x11678+((r12*x11684))+((r11*x11676))+(((-1.0)*r10*x11680))+((x11672*x11683))+((x11671*x11686)));
evalcond[6]=(((x11677*x11683))+x11669+((r22*x11684))+(((-1.0)*r20*x11680))+((r21*x11676))+((x11671*x11682))+(((-1.0)*x11679)));
evalcond[7]=((((-1.0)*x11668*x11672*x11674))+x11669+(((-1.0)*r12*x11667*x11674))+((r11*x11671))+(((-1.0)*r10*x11685))+(((-1.0)*gconst44*x11674*x11686))+(((-1.0)*x11679)));
evalcond[8]=((((-1.0)*r20*x11685))+(((-1.0)*x11668*x11674*x11677))+((r21*x11671))+(((-1.0)*r22*x11667*x11674))+(((-1.0)*sj1*x11673))+(((-1.0)*x11678))+(((-1.0)*gconst44*x11674*x11682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11687=((-1.0)*r10);
IkReal x11688=((-1.0)*r11);
CheckValue<IkReal> x11690 = IKatan2WithCheck(IkReal(x11687),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11690.valid){
continue;
}
IkReal x11689=((1.0)*(x11690.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11689)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11687);
rxp1_1=(px*r21);
rxp1_2=(px*x11688);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11689)));
IkReal gconst44=x11687;
IkReal gconst45=x11688;
j4eval[0]=r02;
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11691=((-1.0)*r10);
IkReal x11692=((-1.0)*r11);
CheckValue<IkReal> x11694 = IKatan2WithCheck(IkReal(x11691),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11694.valid){
continue;
}
IkReal x11693=((1.0)*(x11694.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11693)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11691);
rxp1_1=(px*r21);
rxp1_2=(px*x11692);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11693)));
IkReal gconst44=x11691;
IkReal gconst45=x11692;
IkReal x11695=((1.0)*cj3);
j4eval[0]=((((-1.0)*r10*r20*x11695))+(((-1.0)*r11*r21*x11695)));
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11696=((-1.0)*r10);
IkReal x11697=((-1.0)*r11);
CheckValue<IkReal> x11699 = IKatan2WithCheck(IkReal(x11696),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11699.valid){
continue;
}
IkReal x11698=((1.0)*(x11699.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11698)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11696);
rxp1_1=(px*r21);
rxp1_2=(px*x11697);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11698)));
IkReal gconst44=x11696;
IkReal gconst45=x11697;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11700=((-1.0)*r10);
IkReal x11701=((-1.0)*r11);
CheckValue<IkReal> x11703 = IKatan2WithCheck(IkReal(x11700),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11703.valid){
continue;
}
IkReal x11702=((1.0)*(x11703.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11702)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11700);
rxp1_1=(px*r21);
rxp1_2=(px*x11701);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11702)));
IkReal gconst44=x11700;
IkReal gconst45=x11701;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11704=((-1.0)*r10);
IkReal x11705=((-1.0)*r11);
CheckValue<IkReal> x11707 = IKatan2WithCheck(IkReal(x11704),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11707.valid){
continue;
}
IkReal x11706=((1.0)*(x11707.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11706)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11704);
rxp1_1=(px*r21);
rxp1_2=(px*x11705);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11706)));
IkReal gconst44=x11704;
IkReal gconst45=x11705;
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11708=((-1.0)*r10);
IkReal x11709=((-1.0)*r11);
CheckValue<IkReal> x11711 = IKatan2WithCheck(IkReal(x11708),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11711.valid){
continue;
}
IkReal x11710=((1.0)*(x11711.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11710)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11708);
rxp1_1=(px*r21);
rxp1_2=(px*x11709);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11710)));
IkReal gconst44=x11708;
IkReal gconst45=x11709;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11714=IKPowWithIntegerCheck(((((-1.0)*gconst45*r11))+(((-1.0)*gconst44*r10))),-1);
if(!x11714.valid){
continue;
}
IkReal x11712=x11714.value;
IkReal x11713=(sj0*x11712);
sj4array[0]=((((-1.0)*cj1*cj2*x11713))+((sj1*sj2*x11713)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11715=IKcos(j4);
IkReal x11716=IKsin(j4);
IkReal x11717=((1.0)*gconst45);
IkReal x11718=((1.0)*gconst44*x11715);
evalcond[0]=((-1.0)*r02*x11715);
evalcond[1]=((((-1.0)*sj0))+((r02*x11716)));
evalcond[2]=((((-1.0)*r20*x11718))+(((-1.0)*r21*x11715*x11717)));
evalcond[3]=((((-1.0)*r11*x11715*x11717))+(((-1.0)*r10*x11718)));
evalcond[4]=((((-1.0)*r21*x11716*x11717))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst44*r20*x11716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11720=IKPowWithIntegerCheck(((((-1.0)*gconst45*r21))+(((-1.0)*gconst44*r20))),-1);
if(!x11720.valid){
continue;
}
IkReal x11719=x11720.value;
sj4array[0]=(((cj1*sj2*x11719))+((cj2*sj1*x11719)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11721=IKcos(j4);
IkReal x11722=IKsin(j4);
IkReal x11723=((1.0)*sj0);
IkReal x11724=((1.0)*gconst45*r11);
IkReal x11725=((1.0)*gconst44*x11721);
evalcond[0]=((-1.0)*r02*x11721);
evalcond[1]=((((-1.0)*x11723))+((r02*x11722)));
evalcond[2]=((((-1.0)*r20*x11725))+(((-1.0)*gconst45*r21*x11721)));
evalcond[3]=((((-1.0)*r10*x11725))+(((-1.0)*x11721*x11724)));
evalcond[4]=((((-1.0)*sj1*sj2*x11723))+((cj1*cj2*sj0))+(((-1.0)*gconst44*r10*x11722))+(((-1.0)*x11722*x11724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11726=IKPowWithIntegerCheck(r02,-1);
if(!x11726.valid){
continue;
}
sj4array[0]=(sj0*(x11726.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11727=IKcos(j4);
IkReal x11728=IKsin(j4);
IkReal x11729=(gconst45*r11);
IkReal x11730=(gconst44*r20);
IkReal x11731=((1.0)*sj1);
IkReal x11732=(gconst45*r21);
IkReal x11733=(gconst44*r10);
IkReal x11734=((1.0)*x11728);
IkReal x11735=((1.0)*x11727);
evalcond[0]=((-1.0)*r02*x11727);
evalcond[1]=((((-1.0)*x11730*x11735))+(((-1.0)*x11732*x11735)));
evalcond[2]=((((-1.0)*x11729*x11735))+(((-1.0)*x11733*x11735)));
evalcond[3]=((((-1.0)*cj2*x11731))+(((-1.0)*cj1*sj2))+(((-1.0)*x11730*x11734))+(((-1.0)*x11732*x11734)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x11731))+(((-1.0)*x11729*x11734))+(((-1.0)*x11733*x11734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11736=((-1.0)*r10);
IkReal x11737=((-1.0)*r11);
CheckValue<IkReal> x11739 = IKatan2WithCheck(IkReal(x11736),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11739.valid){
continue;
}
IkReal x11738=((1.0)*(x11739.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11738)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11736);
rxp1_1=(px*r21);
rxp1_2=(px*x11737);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11738)));
IkReal gconst44=x11736;
IkReal gconst45=x11737;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11740=((-1.0)*r10);
IkReal x11741=((-1.0)*r11);
CheckValue<IkReal> x11743 = IKatan2WithCheck(IkReal(x11740),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11743.valid){
continue;
}
IkReal x11742=((1.0)*(x11743.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11742)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11740);
rxp1_1=(px*r21);
rxp1_2=(px*x11741);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11742)));
IkReal gconst44=x11740;
IkReal gconst45=x11741;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11744=((-1.0)*r10);
IkReal x11745=((-1.0)*r11);
CheckValue<IkReal> x11747 = IKatan2WithCheck(IkReal(x11744),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11747.valid){
continue;
}
IkReal x11746=((1.0)*(x11747.value));
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11746)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11744);
rxp1_1=(px*r21);
rxp1_2=(px*x11745);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11746)));
IkReal gconst44=x11744;
IkReal gconst45=x11745;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11750=IKPowWithIntegerCheck((((gconst44*r10))+((gconst45*r11))),-1);
if(!x11750.valid){
continue;
}
IkReal x11748=x11750.value;
IkReal x11749=(sj0*x11748);
sj4array[0]=(((sj1*sj2*x11749))+(((-1.0)*cj1*cj2*x11749)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11751=IKcos(j4);
IkReal x11752=IKsin(j4);
IkReal x11753=(gconst45*r21);
IkReal x11754=((1.0)*x11751);
IkReal x11755=(gconst44*x11754);
evalcond[0]=(r02*x11751);
evalcond[1]=((((-1.0)*sj0))+((r02*x11752)));
evalcond[2]=((((-1.0)*x11753*x11754))+(((-1.0)*r20*x11755)));
evalcond[3]=((((-1.0)*r10*x11755))+(((-1.0)*gconst45*r11*x11754)));
evalcond[4]=(((gconst44*r20*x11752))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x11752*x11753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11757=IKPowWithIntegerCheck((((gconst44*r20))+((gconst45*r21))),-1);
if(!x11757.valid){
continue;
}
IkReal x11756=x11757.value;
sj4array[0]=(((cj2*sj1*x11756))+((cj1*sj2*x11756)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11758=IKcos(j4);
IkReal x11759=IKsin(j4);
IkReal x11760=((1.0)*sj0);
IkReal x11761=(gconst45*r11);
IkReal x11762=((1.0)*x11758);
IkReal x11763=(gconst44*x11762);
evalcond[0]=(r02*x11758);
evalcond[1]=(((r02*x11759))+(((-1.0)*x11760)));
evalcond[2]=((((-1.0)*gconst45*r21*x11762))+(((-1.0)*r20*x11763)));
evalcond[3]=((((-1.0)*r10*x11763))+(((-1.0)*x11761*x11762)));
evalcond[4]=(((x11759*x11761))+((cj1*cj2*sj0))+((gconst44*r10*x11759))+(((-1.0)*sj1*sj2*x11760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11764=IKPowWithIntegerCheck(r02,-1);
if(!x11764.valid){
continue;
}
sj4array[0]=(sj0*(x11764.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11765=IKcos(j4);
IkReal x11766=IKsin(j4);
IkReal x11767=(gconst44*r20);
IkReal x11768=((1.0)*sj1);
IkReal x11769=(gconst44*r10);
IkReal x11770=(gconst45*x11766);
IkReal x11771=((1.0)*x11765);
evalcond[0]=(r02*x11765);
evalcond[1]=((((-1.0)*x11767*x11771))+(((-1.0)*gconst45*r21*x11771)));
evalcond[2]=((((-1.0)*gconst45*r11*x11771))+(((-1.0)*x11769*x11771)));
evalcond[3]=(((x11766*x11767))+(((-1.0)*cj2*x11768))+(((-1.0)*cj1*sj2))+((r21*x11770)));
evalcond[4]=(((cj1*cj2*sj0))+((x11766*x11769))+((r11*x11770))+(((-1.0)*sj0*sj2*x11768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11773=IKPowWithIntegerCheck(r02,-1);
if(!x11773.valid){
continue;
}
IkReal x11772=x11773.value;
CheckValue<IkReal> x11774=IKPowWithIntegerCheck(cj3,-1);
if(!x11774.valid){
continue;
}
if( IKabs((sj0*x11772)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11772*(x11774.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x11772))+IKsqr((x11772*(x11774.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x11772), (x11772*(x11774.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11775=IKcos(j4);
IkReal x11776=IKsin(j4);
IkReal x11777=((1.0)*gconst45);
IkReal x11778=(r20*sj3);
IkReal x11779=(cj1*cj2);
IkReal x11780=(cj3*gconst44);
IkReal x11781=(sj1*sj2);
IkReal x11782=((1.0)*sj3);
IkReal x11783=(r21*sj3);
IkReal x11784=((1.0)*sj0);
IkReal x11785=(r11*sj3);
IkReal x11786=(r02*x11775);
IkReal x11787=((1.0)*cj2*sj1);
IkReal x11788=((1.0)*cj1*sj2);
IkReal x11789=(r10*x11776);
IkReal x11790=(cj3*gconst45*x11776);
IkReal x11791=((1.0)*gconst44*x11775);
evalcond[0]=(((r02*x11776))+(((-1.0)*x11784)));
evalcond[1]=((((-1.0)*r20*x11791))+(((-1.0)*r21*x11775*x11777)));
evalcond[2]=(cj0+(((-1.0)*r10*x11791))+(((-1.0)*r11*x11775*x11777)));
evalcond[3]=(((cj3*x11786))+(((-1.0)*cj0*x11787))+(((-1.0)*cj0*x11788)));
evalcond[4]=((((-1.0)*x11782*x11786))+(((-1.0)*cj0*x11781))+((cj0*x11779)));
evalcond[5]=(((r20*x11776*x11780))+x11781+(((-1.0)*x11779))+(((-1.0)*x11777*x11778))+((r21*x11790))+((gconst44*x11783)));
evalcond[6]=(((r21*x11780))+(((-1.0)*cj3*r20*x11777))+(((-1.0)*x11776*x11777*x11783))+(((-1.0)*gconst44*x11776*x11778))+(((-1.0)*x11787))+(((-1.0)*x11788)));
evalcond[7]=(((x11780*x11789))+((r11*x11790))+(((-1.0)*r10*sj3*x11777))+(((-1.0)*cj2*sj1*x11784))+(((-1.0)*cj1*sj2*x11784))+((gconst44*x11785)));
evalcond[8]=(((r11*x11780))+(((-1.0)*gconst44*x11782*x11789))+((sj0*x11779))+(((-1.0)*x11776*x11777*x11785))+(((-1.0)*x11781*x11784))+(((-1.0)*cj3*r10*x11777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11792=((1.0)*gconst44);
CheckValue<IkReal> x11793=IKPowWithIntegerCheck((((cj3*gconst44*r20))+((cj3*gconst45*r21))),-1);
if(!x11793.valid){
continue;
}
CheckValue<IkReal> x11794=IKPowWithIntegerCheck(((((-1.0)*r10*x11792))+(((-1.0)*gconst45*r11))),-1);
if(!x11794.valid){
continue;
}
if( IKabs(((x11793.value)*((((gconst45*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x11792)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11794.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11793.value)*((((gconst45*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x11792))))))+IKsqr(((-1.0)*cj0*(x11794.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11793.value)*((((gconst45*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x11792))))), ((-1.0)*cj0*(x11794.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11795=IKcos(j4);
IkReal x11796=IKsin(j4);
IkReal x11797=((1.0)*gconst45);
IkReal x11798=(r20*sj3);
IkReal x11799=(cj1*cj2);
IkReal x11800=(cj3*gconst44);
IkReal x11801=(sj1*sj2);
IkReal x11802=((1.0)*sj3);
IkReal x11803=(r21*sj3);
IkReal x11804=((1.0)*sj0);
IkReal x11805=(r11*sj3);
IkReal x11806=(r02*x11795);
IkReal x11807=((1.0)*cj2*sj1);
IkReal x11808=((1.0)*cj1*sj2);
IkReal x11809=(r10*x11796);
IkReal x11810=(cj3*gconst45*x11796);
IkReal x11811=((1.0)*gconst44*x11795);
evalcond[0]=(((r02*x11796))+(((-1.0)*x11804)));
evalcond[1]=((((-1.0)*r20*x11811))+(((-1.0)*r21*x11795*x11797)));
evalcond[2]=(cj0+(((-1.0)*r10*x11811))+(((-1.0)*r11*x11795*x11797)));
evalcond[3]=((((-1.0)*cj0*x11807))+(((-1.0)*cj0*x11808))+((cj3*x11806)));
evalcond[4]=((((-1.0)*x11802*x11806))+(((-1.0)*cj0*x11801))+((cj0*x11799)));
evalcond[5]=(((gconst44*x11803))+((r20*x11796*x11800))+(((-1.0)*x11799))+(((-1.0)*x11797*x11798))+((r21*x11810))+x11801);
evalcond[6]=(((r21*x11800))+(((-1.0)*gconst44*x11796*x11798))+(((-1.0)*cj3*r20*x11797))+(((-1.0)*x11808))+(((-1.0)*x11807))+(((-1.0)*x11796*x11797*x11803)));
evalcond[7]=(((x11800*x11809))+((gconst44*x11805))+(((-1.0)*cj2*sj1*x11804))+(((-1.0)*cj1*sj2*x11804))+(((-1.0)*r10*sj3*x11797))+((r11*x11810)));
evalcond[8]=(((sj0*x11799))+(((-1.0)*cj3*r10*x11797))+((r11*x11800))+(((-1.0)*gconst44*x11802*x11809))+(((-1.0)*x11801*x11804))+(((-1.0)*x11796*x11797*x11805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11812=IKPowWithIntegerCheck(r02,-1);
if(!x11812.valid){
continue;
}
CheckValue<IkReal> x11813=IKPowWithIntegerCheck(((((-1.0)*gconst45*r11))+(((-1.0)*gconst44*r10))),-1);
if(!x11813.valid){
continue;
}
if( IKabs((sj0*(x11812.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x11812.value)))+IKsqr(((-1.0)*cj0*(x11813.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x11812.value)), ((-1.0)*cj0*(x11813.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11814=IKcos(j4);
IkReal x11815=IKsin(j4);
IkReal x11816=((1.0)*gconst45);
IkReal x11817=(r20*sj3);
IkReal x11818=(cj1*cj2);
IkReal x11819=(cj3*gconst44);
IkReal x11820=(sj1*sj2);
IkReal x11821=((1.0)*sj3);
IkReal x11822=(r21*sj3);
IkReal x11823=((1.0)*sj0);
IkReal x11824=(r11*sj3);
IkReal x11825=(r02*x11814);
IkReal x11826=((1.0)*cj2*sj1);
IkReal x11827=((1.0)*cj1*sj2);
IkReal x11828=(r10*x11815);
IkReal x11829=(cj3*gconst45*x11815);
IkReal x11830=((1.0)*gconst44*x11814);
evalcond[0]=(((r02*x11815))+(((-1.0)*x11823)));
evalcond[1]=((((-1.0)*r21*x11814*x11816))+(((-1.0)*r20*x11830)));
evalcond[2]=(cj0+(((-1.0)*r10*x11830))+(((-1.0)*r11*x11814*x11816)));
evalcond[3]=(((cj3*x11825))+(((-1.0)*cj0*x11826))+(((-1.0)*cj0*x11827)));
evalcond[4]=((((-1.0)*x11821*x11825))+((cj0*x11818))+(((-1.0)*cj0*x11820)));
evalcond[5]=((((-1.0)*x11818))+((gconst44*x11822))+(((-1.0)*x11816*x11817))+((r20*x11815*x11819))+((r21*x11829))+x11820);
evalcond[6]=((((-1.0)*cj3*r20*x11816))+((r21*x11819))+(((-1.0)*gconst44*x11815*x11817))+(((-1.0)*x11815*x11816*x11822))+(((-1.0)*x11827))+(((-1.0)*x11826)));
evalcond[7]=((((-1.0)*cj2*sj1*x11823))+((gconst44*x11824))+((x11819*x11828))+(((-1.0)*cj1*sj2*x11823))+((r11*x11829))+(((-1.0)*r10*sj3*x11816)));
evalcond[8]=(((sj0*x11818))+(((-1.0)*x11820*x11823))+(((-1.0)*x11815*x11816*x11824))+(((-1.0)*cj3*r10*x11816))+(((-1.0)*gconst44*x11821*x11828))+((r11*x11819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11831=((-1.0)*r10);
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(x11831),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
IkReal x11832=((1.0)*(x11834.value));
IkReal x11833=x11480;
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x11832)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst43=((3.14159265358979)+(((-1.0)*x11832)));
IkReal gconst44=(x11831*x11833);
IkReal gconst45=((-1.0)*r11*x11833);
IkReal x11835=r12*r12;
IkReal x11836=((1.0)*sj0);
IkReal x11837=(cj0*r02);
IkReal x11838=x11480;
j4eval[0]=((IKabs(((((-1.0)*x11836*x11838))+((sj0*x11835*x11838))+((r12*x11837*x11838)))))+(IKabs(((((-1.0)*r12*x11836))+(((-1.0)*x11837))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11839=(r21*sj3);
IkReal x11840=(cj1*sj2);
IkReal x11841=((1.0)*r12);
IkReal x11842=(cj2*sj1);
IkReal x11843=(gconst44*gconst45);
IkReal x11844=(r20*sj3);
IkReal x11845=(cj3*gconst44*r21);
IkReal x11846=(cj3*gconst45*r20);
CheckValue<IkReal> x11847=IKPowWithIntegerCheck(((((-1.0)*gconst44*x11844))+(((-1.0)*gconst45*x11839))),-1);
if(!x11847.valid){
continue;
}
CheckValue<IkReal> x11848=IKPowWithIntegerCheck((((r11*x11839*(gconst45*gconst45)))+((r10*x11839*x11843))+((r11*x11843*x11844))+((r10*x11844*(gconst44*gconst44)))),-1);
if(!x11848.valid){
continue;
}
if( IKabs(((x11847.value)*(((((-1.0)*x11845))+x11846+x11840+x11842)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11848.value)*((((cj0*gconst45*x11839))+(((-1.0)*x11840*x11841))+(((-1.0)*x11841*x11842))+(((-1.0)*x11841*x11846))+((r12*x11845))+((cj0*gconst44*x11844)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11847.value)*(((((-1.0)*x11845))+x11846+x11840+x11842))))+IKsqr(((x11848.value)*((((cj0*gconst45*x11839))+(((-1.0)*x11840*x11841))+(((-1.0)*x11841*x11842))+(((-1.0)*x11841*x11846))+((r12*x11845))+((cj0*gconst44*x11844))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11847.value)*(((((-1.0)*x11845))+x11846+x11840+x11842))), ((x11848.value)*((((cj0*gconst45*x11839))+(((-1.0)*x11840*x11841))+(((-1.0)*x11841*x11842))+(((-1.0)*x11841*x11846))+((r12*x11845))+((cj0*gconst44*x11844))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11849=IKcos(j4);
IkReal x11850=IKsin(j4);
IkReal x11851=(gconst44*r00);
IkReal x11852=(cj1*cj2);
IkReal x11853=(cj3*gconst44);
IkReal x11854=(sj1*sj2);
IkReal x11855=((1.0)*sj0);
IkReal x11856=(gconst45*r11);
IkReal x11857=(cj2*sj1);
IkReal x11858=(gconst44*sj3);
IkReal x11859=((1.0)*cj0);
IkReal x11860=(gconst44*r10);
IkReal x11861=(cj3*gconst45);
IkReal x11862=((1.0)*gconst45*sj3);
IkReal x11863=((1.0)*x11849);
IkReal x11864=(r20*x11850);
IkReal x11865=((1.0)*x11861);
IkReal x11866=((1.0)*cj1*sj2);
IkReal x11867=(r01*x11850);
IkReal x11868=(r21*x11850);
IkReal x11869=(cj3*x11849);
IkReal x11870=(cj3*x11850);
IkReal x11871=((1.0)*sj3*x11850);
evalcond[0]=((((-1.0)*gconst45*r21*x11863))+(((-1.0)*gconst44*r20*x11863)));
evalcond[1]=(cj0+(((-1.0)*x11860*x11863))+(((-1.0)*x11856*x11863))+((r12*x11850)));
evalcond[2]=((((-1.0)*x11855))+(((-1.0)*x11851*x11863))+(((-1.0)*gconst45*r01*x11863))+((r02*x11850)));
evalcond[3]=(((r21*x11858))+(((-1.0)*r20*x11862))+(((-1.0)*x11852))+((x11853*x11864))+((x11861*x11868))+x11854);
evalcond[4]=(((r21*x11853))+(((-1.0)*x11862*x11868))+(((-1.0)*r20*x11865))+(((-1.0)*x11858*x11864))+(((-1.0)*x11866))+(((-1.0)*x11857)));
evalcond[5]=(((r02*x11869))+(((-1.0)*x11857*x11859))+(((-1.0)*cj1*sj2*x11859))+((r01*x11858))+((x11861*x11867))+(((-1.0)*r00*x11862))+((x11851*x11870)));
evalcond[6]=((((-1.0)*x11855*x11857))+(((-1.0)*cj1*sj2*x11855))+((r10*x11850*x11853))+((r11*x11858))+((r12*x11869))+((x11856*x11870))+(((-1.0)*r10*x11862)));
evalcond[7]=(((cj0*x11852))+(((-1.0)*x11862*x11867))+(((-1.0)*x11851*x11871))+(((-1.0)*x11854*x11859))+(((-1.0)*r02*sj3*x11863))+((r01*x11853))+(((-1.0)*r00*x11865)));
evalcond[8]=((((-1.0)*x11856*x11871))+(((-1.0)*x11854*x11855))+((r11*x11853))+(((-1.0)*r10*x11865))+(((-1.0)*r10*x11850*x11858))+((sj0*x11852))+(((-1.0)*r12*sj3*x11863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11872=((1.0)*sj0);
IkReal x11873=((1.0)*gconst44);
IkReal x11874=((1.0)*cj0);
CheckValue<IkReal> x11875 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*r10*x11872))+(((-1.0)*gconst45*r11*x11872))+(((-1.0)*gconst45*r01*x11874))+(((-1.0)*cj0*r00*x11873)))),IkReal(((((-1.0)*r12*x11872))+(((-1.0)*r02*x11874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11875.valid){
continue;
}
CheckValue<IkReal> x11876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11873))+((gconst45*r20)))),-1);
if(!x11876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11875.value)+(((1.5707963267949)*(x11876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11877=IKcos(j4);
IkReal x11878=IKsin(j4);
IkReal x11879=(gconst44*r00);
IkReal x11880=(cj1*cj2);
IkReal x11881=(cj3*gconst44);
IkReal x11882=(sj1*sj2);
IkReal x11883=((1.0)*sj0);
IkReal x11884=(gconst45*r11);
IkReal x11885=(cj2*sj1);
IkReal x11886=(gconst44*sj3);
IkReal x11887=((1.0)*cj0);
IkReal x11888=(gconst44*r10);
IkReal x11889=(cj3*gconst45);
IkReal x11890=((1.0)*gconst45*sj3);
IkReal x11891=((1.0)*x11877);
IkReal x11892=(r20*x11878);
IkReal x11893=((1.0)*x11889);
IkReal x11894=((1.0)*cj1*sj2);
IkReal x11895=(r01*x11878);
IkReal x11896=(r21*x11878);
IkReal x11897=(cj3*x11877);
IkReal x11898=(cj3*x11878);
IkReal x11899=((1.0)*sj3*x11878);
evalcond[0]=((((-1.0)*gconst45*r21*x11891))+(((-1.0)*gconst44*r20*x11891)));
evalcond[1]=(cj0+(((-1.0)*x11884*x11891))+((r12*x11878))+(((-1.0)*x11888*x11891)));
evalcond[2]=((((-1.0)*gconst45*r01*x11891))+(((-1.0)*x11879*x11891))+(((-1.0)*x11883))+((r02*x11878)));
evalcond[3]=((((-1.0)*x11880))+(((-1.0)*r20*x11890))+((r21*x11886))+((x11889*x11896))+((x11881*x11892))+x11882);
evalcond[4]=((((-1.0)*x11885))+(((-1.0)*r20*x11893))+((r21*x11881))+(((-1.0)*x11890*x11896))+(((-1.0)*x11894))+(((-1.0)*x11886*x11892)));
evalcond[5]=(((x11879*x11898))+((r01*x11886))+((x11889*x11895))+(((-1.0)*r00*x11890))+(((-1.0)*cj1*sj2*x11887))+((r02*x11897))+(((-1.0)*x11885*x11887)));
evalcond[6]=(((x11884*x11898))+(((-1.0)*x11883*x11885))+(((-1.0)*r10*x11890))+((r10*x11878*x11881))+(((-1.0)*cj1*sj2*x11883))+((r12*x11897))+((r11*x11886)));
evalcond[7]=(((r01*x11881))+(((-1.0)*r00*x11893))+(((-1.0)*x11882*x11887))+(((-1.0)*x11890*x11895))+((cj0*x11880))+(((-1.0)*x11879*x11899))+(((-1.0)*r02*sj3*x11891)));
evalcond[8]=((((-1.0)*r10*x11893))+(((-1.0)*x11884*x11899))+(((-1.0)*x11882*x11883))+(((-1.0)*r12*sj3*x11891))+(((-1.0)*r10*x11878*x11886))+((sj0*x11880))+((r11*x11881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11900=((1.0)*sj0);
IkReal x11901=((1.0)*gconst44);
IkReal x11902=((1.0)*cj0);
CheckValue<IkReal> x11903 = IKatan2WithCheck(IkReal(((((-1.0)*gconst45*r11*x11900))+(((-1.0)*gconst44*r10*x11900))+(((-1.0)*gconst45*r01*x11902))+(((-1.0)*cj0*r00*x11901)))),IkReal(((((-1.0)*r02*x11902))+(((-1.0)*r12*x11900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11903.valid){
continue;
}
CheckValue<IkReal> x11904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11901))+((gconst45*r20)))),-1);
if(!x11904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11903.value)+(((1.5707963267949)*(x11904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11905=IKcos(j4);
IkReal x11906=IKsin(j4);
IkReal x11907=(gconst44*r00);
IkReal x11908=(cj1*cj2);
IkReal x11909=(cj3*gconst44);
IkReal x11910=(sj1*sj2);
IkReal x11911=((1.0)*sj0);
IkReal x11912=(gconst45*r11);
IkReal x11913=(cj2*sj1);
IkReal x11914=((1.0)*cj0);
IkReal x11915=(gconst44*r10);
IkReal x11916=(gconst44*sj3);
IkReal x11917=(cj3*gconst45);
IkReal x11918=((1.0)*gconst45*sj3);
IkReal x11919=((1.0)*x11905);
IkReal x11920=(r20*x11906);
IkReal x11921=(cj3*x11905);
IkReal x11922=((1.0)*cj1*sj2);
IkReal x11923=((1.0)*x11917);
IkReal x11924=(r01*x11906);
IkReal x11925=(r21*x11906);
IkReal x11926=(cj3*x11906);
IkReal x11927=((1.0)*sj3*x11906);
evalcond[0]=(((r22*x11906))+(((-1.0)*gconst45*r21*x11919))+(((-1.0)*gconst44*r20*x11919)));
evalcond[1]=(((r12*x11906))+(((-1.0)*x11912*x11919))+cj0+(((-1.0)*x11915*x11919)));
evalcond[2]=((((-1.0)*gconst45*r01*x11919))+((r02*x11906))+(((-1.0)*x11907*x11919))+(((-1.0)*x11911)));
evalcond[3]=(x11910+((x11917*x11925))+(((-1.0)*x11908))+(((-1.0)*r20*x11918))+((r21*x11916))+((r22*x11921))+((x11909*x11920)));
evalcond[4]=(((r02*x11921))+(((-1.0)*x11913*x11914))+((x11917*x11924))+((r01*x11916))+(((-1.0)*cj1*sj2*x11914))+((x11907*x11926))+(((-1.0)*r00*x11918)));
evalcond[5]=(((r10*x11906*x11909))+((r11*x11916))+(((-1.0)*cj1*sj2*x11911))+((r12*x11921))+(((-1.0)*x11911*x11913))+(((-1.0)*r10*x11918))+((x11912*x11926)));
evalcond[6]=((((-1.0)*x11916*x11920))+(((-1.0)*r20*x11923))+(((-1.0)*x11918*x11925))+(((-1.0)*x11922))+(((-1.0)*x11913))+((r21*x11909))+(((-1.0)*r22*sj3*x11919)));
evalcond[7]=((((-1.0)*x11918*x11924))+(((-1.0)*r02*sj3*x11919))+((r01*x11909))+(((-1.0)*x11907*x11927))+((cj0*x11908))+(((-1.0)*x11910*x11914))+(((-1.0)*r00*x11923)));
evalcond[8]=((((-1.0)*r10*x11923))+((sj0*x11908))+(((-1.0)*x11912*x11927))+(((-1.0)*x11910*x11911))+(((-1.0)*r12*sj3*x11919))+(((-1.0)*x11915*x11927))+((r11*x11909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11928=((1.0)*gconst45);
CheckValue<IkReal> x11929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11928))+((gconst44*r11)))),-1);
if(!x11929.valid){
continue;
}
CheckValue<IkReal> x11930 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*r20*sj0))+(((-1.0)*r21*sj0*x11928)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11929.value)))+(x11930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11931=IKcos(j4);
IkReal x11932=IKsin(j4);
IkReal x11933=(gconst44*r00);
IkReal x11934=(cj1*cj2);
IkReal x11935=(cj3*gconst44);
IkReal x11936=(sj1*sj2);
IkReal x11937=((1.0)*sj0);
IkReal x11938=(gconst45*r11);
IkReal x11939=(cj2*sj1);
IkReal x11940=((1.0)*cj0);
IkReal x11941=(gconst44*r10);
IkReal x11942=(gconst44*sj3);
IkReal x11943=(cj3*gconst45);
IkReal x11944=((1.0)*gconst45*sj3);
IkReal x11945=((1.0)*x11931);
IkReal x11946=(r20*x11932);
IkReal x11947=(cj3*x11931);
IkReal x11948=((1.0)*cj1*sj2);
IkReal x11949=((1.0)*x11943);
IkReal x11950=(r01*x11932);
IkReal x11951=(r21*x11932);
IkReal x11952=(cj3*x11932);
IkReal x11953=((1.0)*sj3*x11932);
evalcond[0]=((((-1.0)*gconst45*r21*x11945))+((r22*x11932))+(((-1.0)*gconst44*r20*x11945)));
evalcond[1]=(cj0+(((-1.0)*x11938*x11945))+((r12*x11932))+(((-1.0)*x11941*x11945)));
evalcond[2]=(((r02*x11932))+(((-1.0)*x11937))+(((-1.0)*gconst45*r01*x11945))+(((-1.0)*x11933*x11945)));
evalcond[3]=(x11936+(((-1.0)*r20*x11944))+((x11943*x11951))+((r21*x11942))+((r22*x11947))+(((-1.0)*x11934))+((x11935*x11946)));
evalcond[4]=((((-1.0)*cj1*sj2*x11940))+((x11943*x11950))+((r02*x11947))+((x11933*x11952))+(((-1.0)*r00*x11944))+((r01*x11942))+(((-1.0)*x11939*x11940)));
evalcond[5]=(((r11*x11942))+((r12*x11947))+(((-1.0)*x11937*x11939))+((x11938*x11952))+((r10*x11932*x11935))+(((-1.0)*cj1*sj2*x11937))+(((-1.0)*r10*x11944)));
evalcond[6]=((((-1.0)*r20*x11949))+(((-1.0)*x11948))+((r21*x11935))+(((-1.0)*x11942*x11946))+(((-1.0)*r22*sj3*x11945))+(((-1.0)*x11944*x11951))+(((-1.0)*x11939)));
evalcond[7]=((((-1.0)*r02*sj3*x11945))+((cj0*x11934))+(((-1.0)*x11936*x11940))+(((-1.0)*r00*x11949))+(((-1.0)*x11933*x11953))+(((-1.0)*x11944*x11950))+((r01*x11935)));
evalcond[8]=((((-1.0)*x11938*x11953))+(((-1.0)*r12*sj3*x11945))+((r11*x11935))+(((-1.0)*x11936*x11937))+((sj0*x11934))+(((-1.0)*r10*x11949))+(((-1.0)*x11941*x11953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11954=((1.0)*gconst45);
CheckValue<IkReal> x11955 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst44*r20))+(((-1.0)*cj0*r21*x11954)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11955.valid){
continue;
}
CheckValue<IkReal> x11956=IKPowWithIntegerCheck(IKsign((((gconst44*r01))+(((-1.0)*r00*x11954)))),-1);
if(!x11956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11955.value)+(((1.5707963267949)*(x11956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11957=IKcos(j4);
IkReal x11958=IKsin(j4);
IkReal x11959=(gconst44*r00);
IkReal x11960=(cj1*cj2);
IkReal x11961=(cj3*gconst44);
IkReal x11962=(sj1*sj2);
IkReal x11963=((1.0)*sj0);
IkReal x11964=(gconst45*r11);
IkReal x11965=(cj2*sj1);
IkReal x11966=((1.0)*cj0);
IkReal x11967=(gconst44*r10);
IkReal x11968=(gconst44*sj3);
IkReal x11969=(cj3*gconst45);
IkReal x11970=((1.0)*gconst45*sj3);
IkReal x11971=((1.0)*x11957);
IkReal x11972=(r20*x11958);
IkReal x11973=(cj3*x11957);
IkReal x11974=((1.0)*cj1*sj2);
IkReal x11975=((1.0)*x11969);
IkReal x11976=(r01*x11958);
IkReal x11977=(r21*x11958);
IkReal x11978=(cj3*x11958);
IkReal x11979=((1.0)*sj3*x11958);
evalcond[0]=((((-1.0)*gconst44*r20*x11971))+(((-1.0)*gconst45*r21*x11971))+((r22*x11958)));
evalcond[1]=(((r12*x11958))+cj0+(((-1.0)*x11967*x11971))+(((-1.0)*x11964*x11971)));
evalcond[2]=((((-1.0)*x11959*x11971))+((r02*x11958))+(((-1.0)*x11963))+(((-1.0)*gconst45*r01*x11971)));
evalcond[3]=(x11962+((x11961*x11972))+(((-1.0)*x11960))+(((-1.0)*r20*x11970))+((r21*x11968))+((r22*x11973))+((x11969*x11977)));
evalcond[4]=(((r01*x11968))+(((-1.0)*x11965*x11966))+((x11959*x11978))+(((-1.0)*r00*x11970))+((r02*x11973))+((x11969*x11976))+(((-1.0)*cj1*sj2*x11966)));
evalcond[5]=((((-1.0)*r10*x11970))+((r10*x11958*x11961))+((r11*x11968))+((r12*x11973))+((x11964*x11978))+(((-1.0)*cj1*sj2*x11963))+(((-1.0)*x11963*x11965)));
evalcond[6]=((((-1.0)*x11965))+(((-1.0)*r20*x11975))+(((-1.0)*x11974))+(((-1.0)*x11970*x11977))+(((-1.0)*r22*sj3*x11971))+((r21*x11961))+(((-1.0)*x11968*x11972)));
evalcond[7]=(((r01*x11961))+(((-1.0)*x11959*x11979))+((cj0*x11960))+(((-1.0)*r00*x11975))+(((-1.0)*x11970*x11976))+(((-1.0)*x11962*x11966))+(((-1.0)*r02*sj3*x11971)));
evalcond[8]=((((-1.0)*r10*x11975))+(((-1.0)*x11967*x11979))+((r11*x11961))+(((-1.0)*x11964*x11979))+(((-1.0)*r12*sj3*x11971))+((sj0*x11960))+(((-1.0)*x11962*x11963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x11980=((1.0)*cj5);
IkReal x11981=(((r01*sj5))+(((-1.0)*r00*x11980)));
j4eval[0]=x11981;
j4eval[1]=IKsign(x11981);
j4eval[2]=((IKabs(((((-1.0)*r21*x11980))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x11982=((1.0)*sj5);
IkReal x11983=(((cj5*r20))+(((-1.0)*r21*x11982)));
j4eval[0]=x11983;
j4eval[1]=((IKabs(((((-1.0)*r00*x11982))+(((-1.0)*cj5*r01)))))+(IKabs(r02)));
j4eval[2]=IKsign(x11983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x11984=cj5*cj5;
IkReal x11985=(cj3*r10);
IkReal x11986=(cj5*sj5);
IkReal x11987=(cj3*r11);
IkReal x11988=(((cj3*r12*r22))+((r20*x11986*x11987))+((r20*x11985))+((r21*x11985*x11986))+(((-1.0)*r20*x11984*x11985))+((r21*x11984*x11987)));
j4eval[0]=x11988;
j4eval[1]=IKsign(x11988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11989=((1.0)*cj5);
IkReal x11990=(((r01*sj5))+(((-1.0)*r00*x11989)));
j4eval[0]=x11990;
j4eval[1]=IKsign(x11990);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x11989))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11991=((1.0)*sj5);
IkReal x11992=(((cj5*r20))+(((-1.0)*r21*x11991)));
j4eval[0]=x11992;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x11991))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x11992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11993=cj5*cj5;
IkReal x11994=r10*r10;
IkReal x11995=(cj5*r11);
IkReal x11996=(r10*sj5);
IkReal x11997=((((-2.0)*x11995*x11996))+((x11993*x11994))+(((-1.0)*(r12*r12)))+(((-1.0)*x11994))+(((-1.0)*x11993*(r11*r11))));
j4eval[0]=x11997;
j4eval[1]=IKsign(x11997);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x11996))+(((-1.0)*x11995))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11998=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11998);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11998);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11999=((1.0)*sj5);
IkReal x12000=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x12000))+(((-1.0)*r00*x11999)));
j4eval[1]=((((-1.0)*r10*x11999))+(((-1.0)*r11*x12000)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12001=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12001);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12001);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12002=((1.0)*cj1);
CheckValue<IkReal> x12003=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x12003.valid){
continue;
}
CheckValue<IkReal> x12004=IKPowWithIntegerCheck(r22,-1);
if(!x12004.valid){
continue;
}
if( IKabs(((x12003.value)*(((((-1.0)*cj2*x12002))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12004.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12002)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12003.value)*(((((-1.0)*cj2*x12002))+((sj1*sj2))))))+IKsqr(((x12004.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12002))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12003.value)*(((((-1.0)*cj2*x12002))+((sj1*sj2))))), ((x12004.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12002))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12005=IKcos(j4);
IkReal x12006=IKsin(j4);
IkReal x12007=(cj5*r01);
IkReal x12008=((1.0)*sj1);
IkReal x12009=(cj5*r11);
IkReal x12010=(r00*sj5);
IkReal x12011=(r10*sj5);
IkReal x12012=((1.0)*x12005);
IkReal x12013=((1.0)*x12006);
evalcond[0]=(r22*x12006);
evalcond[1]=((((-1.0)*x12010*x12012))+(((-1.0)*x12007*x12012)));
evalcond[2]=((((-1.0)*cj2*x12008))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12012)));
evalcond[3]=((((-1.0)*x12011*x12013))+(((-1.0)*x12009*x12013)));
evalcond[4]=((1.0)+(((-1.0)*x12011*x12012))+(((-1.0)*x12009*x12012)));
evalcond[5]=((((-1.0)*x12010*x12013))+(((-1.0)*sj2*x12008))+(((-1.0)*x12007*x12013))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12014=((1.0)*cj5);
IkReal x12015=((1.0)*sj5);
CheckValue<IkReal> x12016=IKPowWithIntegerCheck(((((-1.0)*r01*x12014))+(((-1.0)*r00*x12015))),-1);
if(!x12016.valid){
continue;
}
CheckValue<IkReal> x12017=IKPowWithIntegerCheck(((((-1.0)*r10*x12015))+(((-1.0)*r11*x12014))),-1);
if(!x12017.valid){
continue;
}
if( IKabs(((x12016.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12017.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12016.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x12017.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12016.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x12017.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12018=IKcos(j4);
IkReal x12019=IKsin(j4);
IkReal x12020=(cj5*r01);
IkReal x12021=((1.0)*sj1);
IkReal x12022=(cj5*r11);
IkReal x12023=(r00*sj5);
IkReal x12024=(r10*sj5);
IkReal x12025=((1.0)*x12018);
IkReal x12026=((1.0)*x12019);
evalcond[0]=(r22*x12019);
evalcond[1]=((((-1.0)*x12020*x12025))+(((-1.0)*x12023*x12025)));
evalcond[2]=((((-1.0)*cj2*x12021))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12025)));
evalcond[3]=((((-1.0)*x12024*x12026))+(((-1.0)*x12022*x12026)));
evalcond[4]=((1.0)+(((-1.0)*x12024*x12025))+(((-1.0)*x12022*x12025)));
evalcond[5]=((((-1.0)*x12020*x12026))+(((-1.0)*sj2*x12021))+(((-1.0)*x12023*x12026))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12027=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12027);
rxp1_1=(px*r21);
rxp1_2=(r11*x12027);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12028=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12028);
rxp1_1=(px*r21);
rxp1_2=(r11*x12028);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12029=((1.0)*cj5);
IkReal x12030=((1.0)*sj5);
j4eval[0]=((((-1.0)*r20*x12030))+(((-1.0)*r21*x12029)));
j4eval[1]=((((-1.0)*r11*x12029))+(((-1.0)*r10*x12030)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12031=((1.0)*cj5);
IkReal x12032=((1.0)*sj5);
CheckValue<IkReal> x12033=IKPowWithIntegerCheck(((((-1.0)*r20*x12032))+(((-1.0)*r21*x12031))),-1);
if(!x12033.valid){
continue;
}
CheckValue<IkReal> x12034=IKPowWithIntegerCheck(((((-1.0)*r11*x12031))+(((-1.0)*r10*x12032))),-1);
if(!x12034.valid){
continue;
}
if( IKabs(((x12033.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12034.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12033.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x12034.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12033.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x12034.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12035=IKcos(j4);
IkReal x12036=IKsin(j4);
IkReal x12037=(cj5*r11);
IkReal x12038=((1.0)*sj2);
IkReal x12039=(r20*sj5);
IkReal x12040=(r10*sj5);
IkReal x12041=((1.0)*cj5*r21);
IkReal x12042=((1.0)*x12035);
IkReal x12043=((1.0)*x12036);
evalcond[0]=(r02*x12036);
evalcond[1]=((((-1.0)*sj1*x12038))+((cj1*cj2))+(((-1.0)*r02*x12042)));
evalcond[2]=((((-1.0)*x12035*x12041))+(((-1.0)*x12039*x12042)));
evalcond[3]=((((-1.0)*x12040*x12043))+(((-1.0)*x12037*x12043)));
evalcond[4]=((1.0)+(((-1.0)*x12040*x12042))+(((-1.0)*x12037*x12042)));
evalcond[5]=((((-1.0)*cj1*x12038))+(((-1.0)*cj2*sj1))+(((-1.0)*x12039*x12043))+(((-1.0)*x12036*x12041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12044=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x12044.valid){
continue;
}
CheckValue<IkReal> x12045=IKPowWithIntegerCheck(r02,-1);
if(!x12045.valid){
continue;
}
if( IKabs(((x12044.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12045.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12044.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12045.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12044.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12045.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12046=IKcos(j4);
IkReal x12047=IKsin(j4);
IkReal x12048=(cj5*r11);
IkReal x12049=((1.0)*sj2);
IkReal x12050=(r20*sj5);
IkReal x12051=(r10*sj5);
IkReal x12052=((1.0)*cj5*r21);
IkReal x12053=((1.0)*x12046);
IkReal x12054=((1.0)*x12047);
evalcond[0]=(r02*x12047);
evalcond[1]=((((-1.0)*r02*x12053))+(((-1.0)*sj1*x12049))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x12046*x12052))+(((-1.0)*x12050*x12053)));
evalcond[3]=((((-1.0)*x12048*x12054))+(((-1.0)*x12051*x12054)));
evalcond[4]=((1.0)+(((-1.0)*x12048*x12053))+(((-1.0)*x12051*x12053)));
evalcond[5]=((((-1.0)*cj1*x12049))+(((-1.0)*cj2*sj1))+(((-1.0)*x12050*x12054))+(((-1.0)*x12047*x12052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12055=cj5*cj5;
IkReal x12056=r10*r10;
IkReal x12057=(cj5*r11);
IkReal x12058=(r10*sj5);
CheckValue<IkReal> x12059 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12058))+(((-1.0)*x12057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12059.valid){
continue;
}
CheckValue<IkReal> x12060=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12056))+(((-1.0)*(r12*r12)))+(((-1.0)*x12055*(r11*r11)))+((x12055*x12056))+(((-2.0)*x12057*x12058)))),-1);
if(!x12060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12059.value)+(((1.5707963267949)*(x12060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12061=IKcos(j4);
IkReal x12062=IKsin(j4);
IkReal x12063=(r00*sj5);
IkReal x12064=(cj5*r01);
IkReal x12065=(r20*sj5);
IkReal x12066=((1.0)*sj2);
IkReal x12067=(cj5*r21);
IkReal x12068=(cj5*r11);
IkReal x12069=(r10*sj5);
IkReal x12070=((1.0)*x12061);
IkReal x12071=((1.0)*x12062);
evalcond[0]=(((r22*x12062))+(((-1.0)*x12067*x12070))+(((-1.0)*x12065*x12070)));
evalcond[1]=((((-1.0)*x12064*x12070))+(((-1.0)*x12063*x12070))+((r02*x12062)));
evalcond[2]=((1.0)+(((-1.0)*x12069*x12070))+((r12*x12062))+(((-1.0)*x12068*x12070)));
evalcond[3]=((((-1.0)*x12069*x12071))+(((-1.0)*r12*x12070))+(((-1.0)*x12068*x12071)));
evalcond[4]=((((-1.0)*r02*x12070))+(((-1.0)*x12064*x12071))+(((-1.0)*sj1*x12066))+(((-1.0)*x12063*x12071))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x12067*x12071))+(((-1.0)*x12065*x12071))+(((-1.0)*r22*x12070))+(((-1.0)*cj1*x12066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12072=((1.0)*sj5);
CheckValue<IkReal> x12073 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12072))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12073.valid){
continue;
}
CheckValue<IkReal> x12074=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x12072)))),-1);
if(!x12074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12073.value)+(((1.5707963267949)*(x12074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12075=IKcos(j4);
IkReal x12076=IKsin(j4);
IkReal x12077=(r00*sj5);
IkReal x12078=(cj5*r01);
IkReal x12079=(r20*sj5);
IkReal x12080=((1.0)*sj2);
IkReal x12081=(cj5*r21);
IkReal x12082=(cj5*r11);
IkReal x12083=(r10*sj5);
IkReal x12084=((1.0)*x12075);
IkReal x12085=((1.0)*x12076);
evalcond[0]=(((r22*x12076))+(((-1.0)*x12081*x12084))+(((-1.0)*x12079*x12084)));
evalcond[1]=((((-1.0)*x12077*x12084))+((r02*x12076))+(((-1.0)*x12078*x12084)));
evalcond[2]=((1.0)+(((-1.0)*x12082*x12084))+(((-1.0)*x12083*x12084))+((r12*x12076)));
evalcond[3]=((((-1.0)*r12*x12084))+(((-1.0)*x12082*x12085))+(((-1.0)*x12083*x12085)));
evalcond[4]=((((-1.0)*x12077*x12085))+(((-1.0)*r02*x12084))+((cj1*cj2))+(((-1.0)*sj1*x12080))+(((-1.0)*x12078*x12085)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x12081*x12085))+(((-1.0)*r22*x12084))+(((-1.0)*x12079*x12085))+(((-1.0)*cj1*x12080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12086=((1.0)*cj5);
CheckValue<IkReal> x12087 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x12086))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12087.valid){
continue;
}
CheckValue<IkReal> x12088=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x12086)))),-1);
if(!x12088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12087.value)+(((1.5707963267949)*(x12088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12089=IKcos(j4);
IkReal x12090=IKsin(j4);
IkReal x12091=(r00*sj5);
IkReal x12092=(cj5*r01);
IkReal x12093=(r20*sj5);
IkReal x12094=((1.0)*sj2);
IkReal x12095=(cj5*r21);
IkReal x12096=(cj5*r11);
IkReal x12097=(r10*sj5);
IkReal x12098=((1.0)*x12089);
IkReal x12099=((1.0)*x12090);
evalcond[0]=((((-1.0)*x12093*x12098))+(((-1.0)*x12095*x12098))+((r22*x12090)));
evalcond[1]=((((-1.0)*x12092*x12098))+((r02*x12090))+(((-1.0)*x12091*x12098)));
evalcond[2]=((1.0)+((r12*x12090))+(((-1.0)*x12096*x12098))+(((-1.0)*x12097*x12098)));
evalcond[3]=((((-1.0)*x12096*x12099))+(((-1.0)*x12097*x12099))+(((-1.0)*r12*x12098)));
evalcond[4]=((((-1.0)*x12092*x12099))+(((-1.0)*sj1*x12094))+(((-1.0)*r02*x12098))+((cj1*cj2))+(((-1.0)*x12091*x12099)));
evalcond[5]=((((-1.0)*x12093*x12099))+(((-1.0)*x12095*x12099))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x12098))+(((-1.0)*cj1*x12094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12100=((1.0)*cj5);
IkReal x12101=(((r01*sj5))+(((-1.0)*r00*x12100)));
j4eval[0]=x12101;
j4eval[1]=IKsign(x12101);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x12100))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12102=((1.0)*sj5);
IkReal x12103=(((cj5*r20))+(((-1.0)*r21*x12102)));
j4eval[0]=x12103;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x12102))+(((-1.0)*cj5*r01))))));
j4eval[2]=IKsign(x12103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12104=(cj5*r11);
IkReal x12105=(r10*sj5);
IkReal x12106=(sj1*sj2);
IkReal x12107=((1.0)*cj1*cj2);
IkReal x12108=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12108;
j4eval[1]=((IKabs(((((-1.0)*r12*x12106))+((cj1*cj2*r12)))))+(IKabs((((x12105*x12106))+((x12104*x12106))+(((-1.0)*x12105*x12107))+(((-1.0)*x12104*x12107))))));
j4eval[2]=IKsign(x12108);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12109=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12109);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12109);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r00*sj5))+((cj5*r01)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12110=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12110);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12110);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r00*sj5))+((cj5*r01)));
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12111=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x12111.valid){
continue;
}
CheckValue<IkReal> x12112=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x12112.valid){
continue;
}
if( IKabs(((x12111.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12112.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12111.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x12112.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12111.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x12112.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12113=IKsin(j4);
IkReal x12114=IKcos(j4);
IkReal x12115=(cj5*r01);
IkReal x12116=((1.0)*sj1);
IkReal x12117=(cj5*r11);
IkReal x12118=((1.0)*x12114);
IkReal x12119=(sj5*x12113);
evalcond[0]=(r22*x12113);
evalcond[1]=(((r10*x12119))+((x12113*x12117)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12116))+((r22*x12114)));
evalcond[3]=((((-1.0)*x12115*x12118))+(((-1.0)*r00*sj5*x12118)));
evalcond[4]=((1.0)+(((-1.0)*r10*sj5*x12118))+(((-1.0)*x12117*x12118)));
evalcond[5]=(((r00*x12119))+(((-1.0)*sj2*x12116))+((x12113*x12115))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12120=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x12120.valid){
continue;
}
CheckValue<IkReal> x12121=IKPowWithIntegerCheck(r22,-1);
if(!x12121.valid){
continue;
}
if( IKabs(((x12120.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12121.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12120.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12121.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12120.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12121.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12122=IKsin(j4);
IkReal x12123=IKcos(j4);
IkReal x12124=(cj5*r01);
IkReal x12125=((1.0)*sj1);
IkReal x12126=(cj5*r11);
IkReal x12127=((1.0)*x12123);
IkReal x12128=(sj5*x12122);
evalcond[0]=(r22*x12122);
evalcond[1]=(((x12122*x12126))+((r10*x12128)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r22*x12123))+(((-1.0)*cj2*x12125)));
evalcond[3]=((((-1.0)*r00*sj5*x12127))+(((-1.0)*x12124*x12127)));
evalcond[4]=((1.0)+(((-1.0)*r10*sj5*x12127))+(((-1.0)*x12126*x12127)));
evalcond[5]=(((r00*x12128))+((cj1*cj2))+((x12122*x12124))+(((-1.0)*sj2*x12125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12129=((1.0)*sj5);
IkReal x12130=(((cj5*r10))+(((-1.0)*r11*x12129)));
j4eval[0]=x12130;
j4eval[1]=IKsign(x12130);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x12129))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12131=((1.0)*cj5);
IkReal x12132=(((r01*sj5))+(((-1.0)*r00*x12131)));
j4eval[0]=x12132;
j4eval[1]=IKsign(x12132);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12131))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12133=cj5*cj5;
IkReal x12134=r10*r10;
IkReal x12135=(cj5*r11);
IkReal x12136=(r10*sj5);
IkReal x12137=(((x12133*x12134))+(((-1.0)*x12133*(r11*r11)))+(((-1.0)*(r12*r12)))+(((-1.0)*x12134))+(((-2.0)*x12135*x12136)));
j4eval[0]=x12137;
j4eval[1]=IKsign(x12137);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12135))+(((-1.0)*x12136))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12138=cj5*cj5;
IkReal x12139=r10*r10;
IkReal x12140=(cj5*r11);
IkReal x12141=(r10*sj5);
CheckValue<IkReal> x12142 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12141))+(((-1.0)*x12140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12142.valid){
continue;
}
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign((((x12138*x12139))+(((-2.0)*x12140*x12141))+(((-1.0)*(r12*r12)))+(((-1.0)*x12139))+(((-1.0)*x12138*(r11*r11))))),-1);
if(!x12143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12142.value)+(((1.5707963267949)*(x12143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12144=IKsin(j4);
IkReal x12145=IKcos(j4);
IkReal x12146=(sj5*x12144);
IkReal x12147=(cj5*x12144);
IkReal x12148=((1.0)*cj5*x12145);
IkReal x12149=((1.0)*sj5*x12145);
evalcond[0]=(((r02*x12145))+((r00*x12146))+((r01*x12147)));
evalcond[1]=(((r10*x12146))+((r12*x12145))+((r11*x12147)));
evalcond[2]=((-1.0)+((r22*x12145))+((r20*x12146))+((r21*x12147)));
evalcond[3]=(((r22*x12144))+(((-1.0)*r20*x12149))+(((-1.0)*r21*x12148)));
evalcond[4]=((((-1.0)*r00*x12149))+(((-1.0)*r01*x12148))+((r02*x12144)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12148))+((r12*x12144))+(((-1.0)*r10*x12149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12150=((1.0)*cj5);
CheckValue<IkReal> x12151=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x12150)))),-1);
if(!x12151.valid){
continue;
}
CheckValue<IkReal> x12152 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12151.value)))+(x12152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12153=IKsin(j4);
IkReal x12154=IKcos(j4);
IkReal x12155=(sj5*x12153);
IkReal x12156=(cj5*x12153);
IkReal x12157=((1.0)*cj5*x12154);
IkReal x12158=((1.0)*sj5*x12154);
evalcond[0]=(((r02*x12154))+((r01*x12156))+((r00*x12155)));
evalcond[1]=(((r10*x12155))+((r12*x12154))+((r11*x12156)));
evalcond[2]=((-1.0)+((r22*x12154))+((r20*x12155))+((r21*x12156)));
evalcond[3]=(((r22*x12153))+(((-1.0)*r21*x12157))+(((-1.0)*r20*x12158)));
evalcond[4]=((((-1.0)*r01*x12157))+(((-1.0)*r00*x12158))+((r02*x12153)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12157))+((r12*x12153))+(((-1.0)*r10*x12158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12159=((1.0)*sj5);
CheckValue<IkReal> x12160 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x12159))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12160.valid){
continue;
}
CheckValue<IkReal> x12161=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x12159)))),-1);
if(!x12161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12160.value)+(((1.5707963267949)*(x12161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12162=IKsin(j4);
IkReal x12163=IKcos(j4);
IkReal x12164=(sj5*x12162);
IkReal x12165=(cj5*x12162);
IkReal x12166=((1.0)*cj5*x12163);
IkReal x12167=((1.0)*sj5*x12163);
evalcond[0]=(((r02*x12163))+((r00*x12164))+((r01*x12165)));
evalcond[1]=(((r10*x12164))+((r11*x12165))+((r12*x12163)));
evalcond[2]=((-1.0)+((r21*x12165))+((r20*x12164))+((r22*x12163)));
evalcond[3]=((((-1.0)*r20*x12167))+(((-1.0)*r21*x12166))+((r22*x12162)));
evalcond[4]=(((r02*x12162))+(((-1.0)*r00*x12167))+(((-1.0)*r01*x12166)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12167))+((r12*x12162))+(((-1.0)*r11*x12166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12168=((1.0)*cj5);
IkReal x12169=(((r11*sj5))+(((-1.0)*r10*x12168)));
j4eval[0]=x12169;
j4eval[1]=IKsign(x12169);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12168))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12170=((1.0)*sj5);
IkReal x12171=((((-1.0)*r01*x12170))+((cj5*r00)));
j4eval[0]=x12171;
j4eval[1]=IKsign(x12171);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12170))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12172=cj5*cj5;
IkReal x12173=r10*r10;
IkReal x12174=(cj5*r11);
IkReal x12175=(r10*sj5);
IkReal x12176=((((-1.0)*x12173))+(((-2.0)*x12174*x12175))+(((-1.0)*(r12*r12)))+((x12172*x12173))+(((-1.0)*x12172*(r11*r11))));
j4eval[0]=x12176;
j4eval[1]=IKsign(x12176);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12174))+(((-1.0)*x12175))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12177=cj5*cj5;
IkReal x12178=r10*r10;
IkReal x12179=(cj5*r11);
IkReal x12180=(r10*sj5);
CheckValue<IkReal> x12181=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12178))+(((-1.0)*x12177*(r11*r11)))+(((-1.0)*(r12*r12)))+(((-2.0)*x12179*x12180))+((x12177*x12178)))),-1);
if(!x12181.valid){
continue;
}
CheckValue<IkReal> x12182 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12179))+(((-1.0)*x12180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12181.value)))+(x12182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12183=IKsin(j4);
IkReal x12184=IKcos(j4);
IkReal x12185=(sj5*x12183);
IkReal x12186=(cj5*x12183);
IkReal x12187=((1.0)*cj5*x12184);
IkReal x12188=((1.0)*sj5*x12184);
evalcond[0]=(((r02*x12184))+((r00*x12185))+((r01*x12186)));
evalcond[1]=(((r12*x12184))+((r11*x12186))+((r10*x12185)));
evalcond[2]=((1.0)+((r22*x12184))+((r21*x12186))+((r20*x12185)));
evalcond[3]=((((-1.0)*r21*x12187))+((r22*x12183))+(((-1.0)*r20*x12188)));
evalcond[4]=(((r02*x12183))+(((-1.0)*r00*x12188))+(((-1.0)*r01*x12187)));
evalcond[5]=((1.0)+((r12*x12183))+(((-1.0)*r10*x12188))+(((-1.0)*r11*x12187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12189=((1.0)*sj5);
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
CheckValue<IkReal> x12191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12189))+((cj5*r00)))),-1);
if(!x12191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12190.value)+(((1.5707963267949)*(x12191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12192=IKsin(j4);
IkReal x12193=IKcos(j4);
IkReal x12194=(sj5*x12192);
IkReal x12195=(cj5*x12192);
IkReal x12196=((1.0)*cj5*x12193);
IkReal x12197=((1.0)*sj5*x12193);
evalcond[0]=(((r02*x12193))+((r01*x12195))+((r00*x12194)));
evalcond[1]=(((r12*x12193))+((r11*x12195))+((r10*x12194)));
evalcond[2]=((1.0)+((r21*x12195))+((r22*x12193))+((r20*x12194)));
evalcond[3]=((((-1.0)*r20*x12197))+((r22*x12192))+(((-1.0)*r21*x12196)));
evalcond[4]=(((r02*x12192))+(((-1.0)*r01*x12196))+(((-1.0)*r00*x12197)));
evalcond[5]=((1.0)+((r12*x12192))+(((-1.0)*r10*x12197))+(((-1.0)*r11*x12196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12198=((1.0)*cj5);
CheckValue<IkReal> x12199 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12199.valid){
continue;
}
CheckValue<IkReal> x12200=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x12198)))),-1);
if(!x12200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12199.value)+(((1.5707963267949)*(x12200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12201=IKsin(j4);
IkReal x12202=IKcos(j4);
IkReal x12203=(sj5*x12201);
IkReal x12204=(cj5*x12201);
IkReal x12205=((1.0)*cj5*x12202);
IkReal x12206=((1.0)*sj5*x12202);
evalcond[0]=(((r02*x12202))+((r01*x12204))+((r00*x12203)));
evalcond[1]=(((r12*x12202))+((r10*x12203))+((r11*x12204)));
evalcond[2]=((1.0)+((r22*x12202))+((r21*x12204))+((r20*x12203)));
evalcond[3]=(((r22*x12201))+(((-1.0)*r21*x12205))+(((-1.0)*r20*x12206)));
evalcond[4]=(((r02*x12201))+(((-1.0)*r01*x12205))+(((-1.0)*r00*x12206)));
evalcond[5]=((1.0)+((r12*x12201))+(((-1.0)*r11*x12205))+(((-1.0)*r10*x12206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12207=((1.0)*sj5);
IkReal x12208=(((cj5*r10))+(((-1.0)*r11*x12207)));
j4eval[0]=x12208;
j4eval[1]=IKsign(x12208);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x12207))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12209=((1.0)*cj5);
IkReal x12210=(((r01*sj5))+(((-1.0)*r00*x12209)));
j4eval[0]=x12210;
j4eval[1]=IKsign(x12210);
j4eval[2]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12209)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12211=cj5*cj5;
IkReal x12212=r10*r10;
IkReal x12213=(cj5*r11);
IkReal x12214=(r10*sj5);
IkReal x12215=((((-2.0)*x12213*x12214))+((x12211*x12212))+(((-1.0)*(r12*r12)))+(((-1.0)*x12211*(r11*r11)))+(((-1.0)*x12212)));
j4eval[0]=x12215;
j4eval[1]=IKsign(x12215);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12214))+(((-1.0)*x12213))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12216=cj5*cj5;
IkReal x12217=r10*r10;
IkReal x12218=(cj5*r11);
IkReal x12219=(r10*sj5);
CheckValue<IkReal> x12220 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12219))+(((-1.0)*x12218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12220.valid){
continue;
}
CheckValue<IkReal> x12221=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12218*x12219))+(((-1.0)*x12216*(r11*r11)))+((x12216*x12217))+(((-1.0)*(r12*r12)))+(((-1.0)*x12217)))),-1);
if(!x12221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12220.value)+(((1.5707963267949)*(x12221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12222=IKsin(j4);
IkReal x12223=IKcos(j4);
IkReal x12224=(sj5*x12222);
IkReal x12225=(cj5*x12222);
IkReal x12226=((1.0)*cj5*x12223);
IkReal x12227=((1.0)*sj5*x12223);
evalcond[0]=(((r02*x12223))+((r01*x12225))+((r00*x12224)));
evalcond[1]=(((r11*x12225))+((r10*x12224))+((r12*x12223)));
evalcond[2]=((-1.0)+((r22*x12223))+((r21*x12225))+((r20*x12224)));
evalcond[3]=(((r22*x12222))+(((-1.0)*r21*x12226))+(((-1.0)*r20*x12227)));
evalcond[4]=(((r02*x12222))+(((-1.0)*r01*x12226))+(((-1.0)*r00*x12227)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12226))+(((-1.0)*r10*x12227))+((r12*x12222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12228=((1.0)*cj5);
CheckValue<IkReal> x12229 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12229.valid){
continue;
}
CheckValue<IkReal> x12230=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x12228)))),-1);
if(!x12230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12229.value)+(((1.5707963267949)*(x12230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12231=IKsin(j4);
IkReal x12232=IKcos(j4);
IkReal x12233=(sj5*x12231);
IkReal x12234=(cj5*x12231);
IkReal x12235=((1.0)*cj5*x12232);
IkReal x12236=((1.0)*sj5*x12232);
evalcond[0]=(((r01*x12234))+((r00*x12233))+((r02*x12232)));
evalcond[1]=(((r10*x12233))+((r12*x12232))+((r11*x12234)));
evalcond[2]=((-1.0)+((r20*x12233))+((r22*x12232))+((r21*x12234)));
evalcond[3]=((((-1.0)*r21*x12235))+(((-1.0)*r20*x12236))+((r22*x12231)));
evalcond[4]=((((-1.0)*r01*x12235))+(((-1.0)*r00*x12236))+((r02*x12231)));
evalcond[5]=((1.0)+((r12*x12231))+(((-1.0)*r10*x12236))+(((-1.0)*r11*x12235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12237=((1.0)*sj5);
CheckValue<IkReal> x12238 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x12237))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12238.valid){
continue;
}
CheckValue<IkReal> x12239=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x12237)))),-1);
if(!x12239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12238.value)+(((1.5707963267949)*(x12239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12240=IKsin(j4);
IkReal x12241=IKcos(j4);
IkReal x12242=(sj5*x12240);
IkReal x12243=(cj5*x12240);
IkReal x12244=((1.0)*cj5*x12241);
IkReal x12245=((1.0)*sj5*x12241);
evalcond[0]=(((r00*x12242))+((r01*x12243))+((r02*x12241)));
evalcond[1]=(((r11*x12243))+((r12*x12241))+((r10*x12242)));
evalcond[2]=((-1.0)+((r20*x12242))+((r22*x12241))+((r21*x12243)));
evalcond[3]=((((-1.0)*r20*x12245))+(((-1.0)*r21*x12244))+((r22*x12240)));
evalcond[4]=((((-1.0)*r01*x12244))+((r02*x12240))+(((-1.0)*r00*x12245)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12244))+(((-1.0)*r10*x12245))+((r12*x12240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12246=((1.0)*cj5);
IkReal x12247=((((-1.0)*r10*x12246))+((r11*sj5)));
j4eval[0]=x12247;
j4eval[1]=IKsign(x12247);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12246))+(((-1.0)*r00*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12248=((1.0)*sj5);
IkReal x12249=((((-1.0)*r01*x12248))+((cj5*r00)));
j4eval[0]=x12249;
j4eval[1]=IKsign(x12249);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12248))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12250=cj5*cj5;
IkReal x12251=r10*r10;
IkReal x12252=(cj5*r11);
IkReal x12253=(r10*sj5);
IkReal x12254=((((-2.0)*x12252*x12253))+(((-1.0)*x12250*(r11*r11)))+((x12250*x12251))+(((-1.0)*(r12*r12)))+(((-1.0)*x12251)));
j4eval[0]=x12254;
j4eval[1]=IKsign(x12254);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12253))+(((-1.0)*x12252))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12255=cj5*cj5;
IkReal x12256=r10*r10;
IkReal x12257=(cj5*r11);
IkReal x12258=(r10*sj5);
CheckValue<IkReal> x12259 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12257))+(((-1.0)*x12258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12259.valid){
continue;
}
CheckValue<IkReal> x12260=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12257*x12258))+(((-1.0)*(r12*r12)))+(((-1.0)*x12256))+((x12255*x12256))+(((-1.0)*x12255*(r11*r11))))),-1);
if(!x12260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12259.value)+(((1.5707963267949)*(x12260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12261=IKsin(j4);
IkReal x12262=IKcos(j4);
IkReal x12263=(sj5*x12261);
IkReal x12264=(cj5*x12261);
IkReal x12265=((1.0)*cj5*x12262);
IkReal x12266=((1.0)*sj5*x12262);
evalcond[0]=(((r00*x12263))+((r01*x12264))+((r02*x12262)));
evalcond[1]=(((r12*x12262))+((r10*x12263))+((r11*x12264)));
evalcond[2]=((1.0)+((r20*x12263))+((r21*x12264))+((r22*x12262)));
evalcond[3]=((((-1.0)*r20*x12266))+(((-1.0)*r21*x12265))+((r22*x12261)));
evalcond[4]=((((-1.0)*r00*x12266))+(((-1.0)*r01*x12265))+((r02*x12261)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12265))+((r12*x12261))+(((-1.0)*r10*x12266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12267=((1.0)*sj5);
CheckValue<IkReal> x12268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12267))+((cj5*r00)))),-1);
if(!x12268.valid){
continue;
}
CheckValue<IkReal> x12269 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12268.value)))+(x12269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12270=IKsin(j4);
IkReal x12271=IKcos(j4);
IkReal x12272=(sj5*x12270);
IkReal x12273=(cj5*x12270);
IkReal x12274=((1.0)*cj5*x12271);
IkReal x12275=((1.0)*sj5*x12271);
evalcond[0]=(((r02*x12271))+((r00*x12272))+((r01*x12273)));
evalcond[1]=(((r10*x12272))+((r12*x12271))+((r11*x12273)));
evalcond[2]=((1.0)+((r20*x12272))+((r21*x12273))+((r22*x12271)));
evalcond[3]=(((r22*x12270))+(((-1.0)*r20*x12275))+(((-1.0)*r21*x12274)));
evalcond[4]=((((-1.0)*r00*x12275))+(((-1.0)*r01*x12274))+((r02*x12270)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12275))+((r12*x12270))+(((-1.0)*r11*x12274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12276=((1.0)*cj5);
CheckValue<IkReal> x12277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12276))+((r11*sj5)))),-1);
if(!x12277.valid){
continue;
}
CheckValue<IkReal> x12278 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12277.value)))+(x12278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12279=IKsin(j4);
IkReal x12280=IKcos(j4);
IkReal x12281=(sj5*x12279);
IkReal x12282=(cj5*x12279);
IkReal x12283=((1.0)*cj5*x12280);
IkReal x12284=((1.0)*sj5*x12280);
evalcond[0]=(((r02*x12280))+((r00*x12281))+((r01*x12282)));
evalcond[1]=(((r12*x12280))+((r11*x12282))+((r10*x12281)));
evalcond[2]=((1.0)+((r22*x12280))+((r20*x12281))+((r21*x12282)));
evalcond[3]=(((r22*x12279))+(((-1.0)*r20*x12284))+(((-1.0)*r21*x12283)));
evalcond[4]=(((r02*x12279))+(((-1.0)*r00*x12284))+(((-1.0)*r01*x12283)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12284))+(((-1.0)*r11*x12283))+((r12*x12279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12285=((1.0)*cj5);
IkReal x12286=((((-1.0)*r10*x12285))+((r11*sj5)));
j4eval[0]=x12286;
j4eval[1]=IKsign(x12286);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12285))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12287=((1.0)*sj5);
IkReal x12288=((((-1.0)*r01*x12287))+((cj5*r00)));
j4eval[0]=x12288;
j4eval[1]=IKsign(x12288);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12287))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12289=cj5*cj5;
IkReal x12290=r10*r10;
IkReal x12291=(cj5*r11);
IkReal x12292=(r10*sj5);
IkReal x12293=((((-2.0)*x12291*x12292))+(((-1.0)*(r12*r12)))+(((-1.0)*x12290))+((x12289*x12290))+(((-1.0)*x12289*(r11*r11))));
j4eval[0]=x12293;
j4eval[1]=IKsign(x12293);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12292))+(((-1.0)*x12291))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12294=cj5*cj5;
IkReal x12295=r10*r10;
IkReal x12296=(cj5*r11);
IkReal x12297=(r10*sj5);
CheckValue<IkReal> x12298 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12297))+(((-1.0)*x12296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12298.valid){
continue;
}
CheckValue<IkReal> x12299=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x12295))+((x12294*x12295))+(((-2.0)*x12296*x12297))+(((-1.0)*x12294*(r11*r11))))),-1);
if(!x12299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12298.value)+(((1.5707963267949)*(x12299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12300=IKsin(j4);
IkReal x12301=IKcos(j4);
IkReal x12302=(sj5*x12300);
IkReal x12303=(cj5*x12300);
IkReal x12304=((1.0)*cj5*x12301);
IkReal x12305=((1.0)*sj5*x12301);
evalcond[0]=(((r00*x12302))+((r01*x12303))+((r02*x12301)));
evalcond[1]=(((r10*x12302))+((r11*x12303))+((r12*x12301)));
evalcond[2]=((1.0)+((r21*x12303))+((r20*x12302))+((r22*x12301)));
evalcond[3]=((((-1.0)*r20*x12305))+(((-1.0)*r21*x12304))+((r22*x12300)));
evalcond[4]=((((-1.0)*r00*x12305))+(((-1.0)*r01*x12304))+((r02*x12300)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12304))+(((-1.0)*r10*x12305))+((r12*x12300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12306=((1.0)*sj5);
CheckValue<IkReal> x12307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12306))+((cj5*r00)))),-1);
if(!x12307.valid){
continue;
}
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12307.value)))+(x12308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12309=IKsin(j4);
IkReal x12310=IKcos(j4);
IkReal x12311=(sj5*x12309);
IkReal x12312=(cj5*x12309);
IkReal x12313=((1.0)*cj5*x12310);
IkReal x12314=((1.0)*sj5*x12310);
evalcond[0]=(((r02*x12310))+((r00*x12311))+((r01*x12312)));
evalcond[1]=(((r10*x12311))+((r12*x12310))+((r11*x12312)));
evalcond[2]=((1.0)+((r22*x12310))+((r20*x12311))+((r21*x12312)));
evalcond[3]=((((-1.0)*r20*x12314))+(((-1.0)*r21*x12313))+((r22*x12309)));
evalcond[4]=((((-1.0)*r00*x12314))+(((-1.0)*r01*x12313))+((r02*x12309)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12314))+(((-1.0)*r11*x12313))+((r12*x12309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12315=((1.0)*cj5);
CheckValue<IkReal> x12316 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x12315))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12316.valid){
continue;
}
CheckValue<IkReal> x12317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12315))+((r11*sj5)))),-1);
if(!x12317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12316.value)+(((1.5707963267949)*(x12317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12318=IKsin(j4);
IkReal x12319=IKcos(j4);
IkReal x12320=(sj5*x12318);
IkReal x12321=(cj5*x12318);
IkReal x12322=((1.0)*cj5*x12319);
IkReal x12323=((1.0)*sj5*x12319);
evalcond[0]=(((r00*x12320))+((r01*x12321))+((r02*x12319)));
evalcond[1]=(((r12*x12319))+((r10*x12320))+((r11*x12321)));
evalcond[2]=((1.0)+((r22*x12319))+((r20*x12320))+((r21*x12321)));
evalcond[3]=(((r22*x12318))+(((-1.0)*r20*x12323))+(((-1.0)*r21*x12322)));
evalcond[4]=(((r02*x12318))+(((-1.0)*r00*x12323))+(((-1.0)*r01*x12322)));
evalcond[5]=((1.0)+((r12*x12318))+(((-1.0)*r10*x12323))+(((-1.0)*r11*x12322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12324=((1.0)*sj5);
IkReal x12325=(((cj5*r10))+(((-1.0)*r11*x12324)));
j4eval[0]=x12325;
j4eval[1]=IKsign(x12325);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x12324))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12326=((1.0)*cj5);
IkReal x12327=(((r01*sj5))+(((-1.0)*r00*x12326)));
j4eval[0]=x12327;
j4eval[1]=IKsign(x12327);
j4eval[2]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12326)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12328=cj5*cj5;
IkReal x12329=r10*r10;
IkReal x12330=(cj5*r11);
IkReal x12331=(r10*sj5);
IkReal x12332=(((x12328*x12329))+(((-2.0)*x12330*x12331))+(((-1.0)*x12328*(r11*r11)))+(((-1.0)*(r12*r12)))+(((-1.0)*x12329)));
j4eval[0]=x12332;
j4eval[1]=IKsign(x12332);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12331))+(((-1.0)*x12330))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12333=cj5*cj5;
IkReal x12334=r10*r10;
IkReal x12335=(cj5*r11);
IkReal x12336=(r10*sj5);
CheckValue<IkReal> x12337 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12335))+(((-1.0)*x12336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12337.valid){
continue;
}
CheckValue<IkReal> x12338=IKPowWithIntegerCheck(IKsign((((x12333*x12334))+(((-1.0)*(r12*r12)))+(((-1.0)*x12333*(r11*r11)))+(((-2.0)*x12335*x12336))+(((-1.0)*x12334)))),-1);
if(!x12338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12337.value)+(((1.5707963267949)*(x12338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12339=IKsin(j4);
IkReal x12340=IKcos(j4);
IkReal x12341=(sj5*x12339);
IkReal x12342=(cj5*x12339);
IkReal x12343=((1.0)*cj5*x12340);
IkReal x12344=((1.0)*sj5*x12340);
evalcond[0]=(((r00*x12341))+((r01*x12342))+((r02*x12340)));
evalcond[1]=(((r11*x12342))+((r10*x12341))+((r12*x12340)));
evalcond[2]=((-1.0)+((r20*x12341))+((r22*x12340))+((r21*x12342)));
evalcond[3]=(((r22*x12339))+(((-1.0)*r20*x12344))+(((-1.0)*r21*x12343)));
evalcond[4]=(((r02*x12339))+(((-1.0)*r00*x12344))+(((-1.0)*r01*x12343)));
evalcond[5]=((1.0)+((r12*x12339))+(((-1.0)*r11*x12343))+(((-1.0)*r10*x12344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12345=((1.0)*cj5);
CheckValue<IkReal> x12346=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x12345)))),-1);
if(!x12346.valid){
continue;
}
CheckValue<IkReal> x12347 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12346.value)))+(x12347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12348=IKsin(j4);
IkReal x12349=IKcos(j4);
IkReal x12350=(sj5*x12348);
IkReal x12351=(cj5*x12348);
IkReal x12352=((1.0)*cj5*x12349);
IkReal x12353=((1.0)*sj5*x12349);
evalcond[0]=(((r01*x12351))+((r00*x12350))+((r02*x12349)));
evalcond[1]=(((r11*x12351))+((r12*x12349))+((r10*x12350)));
evalcond[2]=((-1.0)+((r20*x12350))+((r22*x12349))+((r21*x12351)));
evalcond[3]=(((r22*x12348))+(((-1.0)*r21*x12352))+(((-1.0)*r20*x12353)));
evalcond[4]=(((r02*x12348))+(((-1.0)*r01*x12352))+(((-1.0)*r00*x12353)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12352))+(((-1.0)*r10*x12353))+((r12*x12348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12354=((1.0)*sj5);
CheckValue<IkReal> x12355=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x12354)))),-1);
if(!x12355.valid){
continue;
}
CheckValue<IkReal> x12356 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x12354))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12355.value)))+(x12356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12357=IKsin(j4);
IkReal x12358=IKcos(j4);
IkReal x12359=(sj5*x12357);
IkReal x12360=(cj5*x12357);
IkReal x12361=((1.0)*cj5*x12358);
IkReal x12362=((1.0)*sj5*x12358);
evalcond[0]=(((r00*x12359))+((r02*x12358))+((r01*x12360)));
evalcond[1]=(((r11*x12360))+((r12*x12358))+((r10*x12359)));
evalcond[2]=((-1.0)+((r20*x12359))+((r22*x12358))+((r21*x12360)));
evalcond[3]=((((-1.0)*r20*x12362))+(((-1.0)*r21*x12361))+((r22*x12357)));
evalcond[4]=((((-1.0)*r00*x12362))+(((-1.0)*r01*x12361))+((r02*x12357)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12362))+(((-1.0)*r11*x12361))+((r12*x12357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12363=((1.0)*cj5);
IkReal x12364=(((r11*sj5))+(((-1.0)*r10*x12363)));
j4eval[0]=x12364;
j4eval[1]=IKsign(x12364);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12363))+(((-1.0)*r00*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12365=((1.0)*sj5);
IkReal x12366=((((-1.0)*r01*x12365))+((cj5*r00)));
j4eval[0]=x12366;
j4eval[1]=IKsign(x12366);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12365))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12367=cj5*cj5;
IkReal x12368=r10*r10;
IkReal x12369=(cj5*r11);
IkReal x12370=(r10*sj5);
IkReal x12371=((((-2.0)*x12369*x12370))+(((-1.0)*x12367*(r11*r11)))+((x12367*x12368))+(((-1.0)*(r12*r12)))+(((-1.0)*x12368)));
j4eval[0]=x12371;
j4eval[1]=IKsign(x12371);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12369))+(((-1.0)*x12370))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12372=cj5*cj5;
IkReal x12373=r10*r10;
IkReal x12374=(cj5*r11);
IkReal x12375=(r10*sj5);
CheckValue<IkReal> x12376 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12374))+(((-1.0)*x12375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12376.valid){
continue;
}
CheckValue<IkReal> x12377=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12372*(r11*r11)))+(((-1.0)*(r12*r12)))+(((-2.0)*x12374*x12375))+(((-1.0)*x12373))+((x12372*x12373)))),-1);
if(!x12377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12376.value)+(((1.5707963267949)*(x12377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12378=IKsin(j4);
IkReal x12379=IKcos(j4);
IkReal x12380=(sj5*x12378);
IkReal x12381=(cj5*x12378);
IkReal x12382=((1.0)*cj5*x12379);
IkReal x12383=((1.0)*sj5*x12379);
evalcond[0]=(((r00*x12380))+((r01*x12381))+((r02*x12379)));
evalcond[1]=(((r11*x12381))+((r10*x12380))+((r12*x12379)));
evalcond[2]=((1.0)+((r20*x12380))+((r21*x12381))+((r22*x12379)));
evalcond[3]=((((-1.0)*r20*x12383))+(((-1.0)*r21*x12382))+((r22*x12378)));
evalcond[4]=((((-1.0)*r00*x12383))+(((-1.0)*r01*x12382))+((r02*x12378)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12382))+(((-1.0)*r10*x12383))+((r12*x12378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12384=((1.0)*sj5);
CheckValue<IkReal> x12385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12384))+((cj5*r00)))),-1);
if(!x12385.valid){
continue;
}
CheckValue<IkReal> x12386 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12385.value)))+(x12386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12387=IKsin(j4);
IkReal x12388=IKcos(j4);
IkReal x12389=(sj5*x12387);
IkReal x12390=(cj5*x12387);
IkReal x12391=((1.0)*cj5*x12388);
IkReal x12392=((1.0)*sj5*x12388);
evalcond[0]=(((r02*x12388))+((r00*x12389))+((r01*x12390)));
evalcond[1]=(((r12*x12388))+((r11*x12390))+((r10*x12389)));
evalcond[2]=((1.0)+((r20*x12389))+((r21*x12390))+((r22*x12388)));
evalcond[3]=((((-1.0)*r21*x12391))+(((-1.0)*r20*x12392))+((r22*x12387)));
evalcond[4]=(((r02*x12387))+(((-1.0)*r01*x12391))+(((-1.0)*r00*x12392)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12391))+((r12*x12387))+(((-1.0)*r10*x12392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12393=((1.0)*cj5);
CheckValue<IkReal> x12394=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x12393)))),-1);
if(!x12394.valid){
continue;
}
CheckValue<IkReal> x12395 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12394.value)))+(x12395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12396=IKsin(j4);
IkReal x12397=IKcos(j4);
IkReal x12398=(sj5*x12396);
IkReal x12399=(cj5*x12396);
IkReal x12400=((1.0)*cj5*x12397);
IkReal x12401=((1.0)*sj5*x12397);
evalcond[0]=(((r02*x12397))+((r01*x12399))+((r00*x12398)));
evalcond[1]=(((r11*x12399))+((r10*x12398))+((r12*x12397)));
evalcond[2]=((1.0)+((r22*x12397))+((r20*x12398))+((r21*x12399)));
evalcond[3]=(((r22*x12396))+(((-1.0)*r21*x12400))+(((-1.0)*r20*x12401)));
evalcond[4]=(((r02*x12396))+(((-1.0)*r01*x12400))+(((-1.0)*r00*x12401)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12400))+(((-1.0)*r10*x12401))+((r12*x12396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12402=((1.0)*sj5);
IkReal x12403=(((cj5*r10))+(((-1.0)*r11*x12402)));
j4eval[0]=x12403;
j4eval[1]=IKsign(x12403);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x12402))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12404=((1.0)*cj5);
IkReal x12405=(((r01*sj5))+(((-1.0)*r00*x12404)));
j4eval[0]=x12405;
j4eval[1]=IKsign(x12405);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12404))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12406=cj5*cj5;
IkReal x12407=r10*r10;
IkReal x12408=(cj5*r11);
IkReal x12409=(r10*sj5);
IkReal x12410=((((-2.0)*x12408*x12409))+((x12406*x12407))+(((-1.0)*(r12*r12)))+(((-1.0)*x12406*(r11*r11)))+(((-1.0)*x12407)));
j4eval[0]=x12410;
j4eval[1]=IKsign(x12410);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12408))+(((-1.0)*x12409))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12411=cj5*cj5;
IkReal x12412=r10*r10;
IkReal x12413=(cj5*r11);
IkReal x12414=(r10*sj5);
CheckValue<IkReal> x12415=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12411*(r11*r11)))+((x12411*x12412))+(((-1.0)*x12412))+(((-1.0)*(r12*r12)))+(((-2.0)*x12413*x12414)))),-1);
if(!x12415.valid){
continue;
}
CheckValue<IkReal> x12416 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12414))+(((-1.0)*x12413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12415.value)))+(x12416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12417=IKsin(j4);
IkReal x12418=IKcos(j4);
IkReal x12419=(sj5*x12417);
IkReal x12420=(cj5*x12417);
IkReal x12421=((1.0)*cj5*x12418);
IkReal x12422=((1.0)*sj5*x12418);
evalcond[0]=(((r00*x12419))+((r02*x12418))+((r01*x12420)));
evalcond[1]=(((r10*x12419))+((r12*x12418))+((r11*x12420)));
evalcond[2]=((-1.0)+((r21*x12420))+((r20*x12419))+((r22*x12418)));
evalcond[3]=((((-1.0)*r20*x12422))+((r22*x12417))+(((-1.0)*r21*x12421)));
evalcond[4]=((((-1.0)*r01*x12421))+(((-1.0)*r00*x12422))+((r02*x12417)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12422))+((r12*x12417))+(((-1.0)*r11*x12421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12423=((1.0)*cj5);
CheckValue<IkReal> x12424 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12424.valid){
continue;
}
CheckValue<IkReal> x12425=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x12423)))),-1);
if(!x12425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12424.value)+(((1.5707963267949)*(x12425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12426=IKsin(j4);
IkReal x12427=IKcos(j4);
IkReal x12428=(sj5*x12426);
IkReal x12429=(cj5*x12426);
IkReal x12430=((1.0)*cj5*x12427);
IkReal x12431=((1.0)*sj5*x12427);
evalcond[0]=(((r02*x12427))+((r01*x12429))+((r00*x12428)));
evalcond[1]=(((r12*x12427))+((r10*x12428))+((r11*x12429)));
evalcond[2]=((-1.0)+((r20*x12428))+((r21*x12429))+((r22*x12427)));
evalcond[3]=((((-1.0)*r21*x12430))+((r22*x12426))+(((-1.0)*r20*x12431)));
evalcond[4]=((((-1.0)*r00*x12431))+(((-1.0)*r01*x12430))+((r02*x12426)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12431))+((r12*x12426))+(((-1.0)*r11*x12430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12432=((1.0)*sj5);
CheckValue<IkReal> x12433 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x12432))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12433.valid){
continue;
}
CheckValue<IkReal> x12434=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x12432)))),-1);
if(!x12434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12433.value)+(((1.5707963267949)*(x12434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12435=IKsin(j4);
IkReal x12436=IKcos(j4);
IkReal x12437=(sj5*x12435);
IkReal x12438=(cj5*x12435);
IkReal x12439=((1.0)*cj5*x12436);
IkReal x12440=((1.0)*sj5*x12436);
evalcond[0]=(((r02*x12436))+((r00*x12437))+((r01*x12438)));
evalcond[1]=(((r10*x12437))+((r12*x12436))+((r11*x12438)));
evalcond[2]=((-1.0)+((r20*x12437))+((r21*x12438))+((r22*x12436)));
evalcond[3]=((((-1.0)*r21*x12439))+(((-1.0)*r20*x12440))+((r22*x12435)));
evalcond[4]=((((-1.0)*r01*x12439))+(((-1.0)*r00*x12440))+((r02*x12435)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12440))+((r12*x12435))+(((-1.0)*r11*x12439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12441=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12441);
rxp1_1=(px*r21);
rxp1_2=(r11*x12441);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12442=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12442);
rxp1_1=(px*r21);
rxp1_2=(r11*x12442);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12443=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x12443.valid){
continue;
}
CheckValue<IkReal> x12444=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x12444.valid){
continue;
}
if( IKabs(((x12443.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12444.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12443.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x12444.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12443.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x12444.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12445=IKsin(j4);
IkReal x12446=IKcos(j4);
IkReal x12447=((1.0)*sj2);
IkReal x12448=(sj5*x12445);
IkReal x12449=(cj5*x12445);
IkReal x12450=((1.0)*cj5*x12446);
IkReal x12451=((1.0)*sj5*x12446);
evalcond[0]=(r02*x12445);
evalcond[1]=(((r02*x12446))+(((-1.0)*sj1*x12447))+((cj1*cj2)));
evalcond[2]=(((r11*x12449))+((r10*x12448)));
evalcond[3]=((((-1.0)*r21*x12450))+(((-1.0)*r20*x12451)));
evalcond[4]=((1.0)+(((-1.0)*r11*x12450))+(((-1.0)*r10*x12451)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x12449))+(((-1.0)*cj1*x12447))+((r20*x12448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12452=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x12452.valid){
continue;
}
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(r02,-1);
if(!x12453.valid){
continue;
}
if( IKabs(((x12452.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12453.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12452.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12453.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12452.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12453.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12454=IKsin(j4);
IkReal x12455=IKcos(j4);
IkReal x12456=((1.0)*sj2);
IkReal x12457=(sj5*x12454);
IkReal x12458=(cj5*x12454);
IkReal x12459=((1.0)*cj5*x12455);
IkReal x12460=((1.0)*sj5*x12455);
evalcond[0]=(r02*x12454);
evalcond[1]=(((r02*x12455))+(((-1.0)*sj1*x12456))+((cj1*cj2)));
evalcond[2]=(((r11*x12458))+((r10*x12457)));
evalcond[3]=((((-1.0)*r20*x12460))+(((-1.0)*r21*x12459)));
evalcond[4]=((1.0)+(((-1.0)*r11*x12459))+(((-1.0)*r10*x12460)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x12457))+(((-1.0)*cj1*x12456))+((r21*x12458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12461=(sj1*sj2);
IkReal x12462=(cj5*r11);
IkReal x12463=(r10*sj5);
IkReal x12464=((1.0)*cj1*cj2);
CheckValue<IkReal> x12465 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12461))+((cj1*cj2*r12)))),IkReal((((x12461*x12463))+((x12461*x12462))+(((-1.0)*x12463*x12464))+(((-1.0)*x12462*x12464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12465.valid){
continue;
}
CheckValue<IkReal> x12466=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x12466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12465.value)+(((1.5707963267949)*(x12466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12467=IKsin(j4);
IkReal x12468=IKcos(j4);
IkReal x12469=(r20*sj5);
IkReal x12470=((1.0)*sj2);
IkReal x12471=(r00*sj5);
IkReal x12472=(cj5*r21);
IkReal x12473=(cj5*r11);
IkReal x12474=(cj5*r01);
IkReal x12475=(r10*sj5);
IkReal x12476=((1.0)*x12468);
evalcond[0]=(((r12*x12468))+((x12467*x12473))+((x12467*x12475)));
evalcond[1]=((((-1.0)*x12472*x12476))+((r22*x12467))+(((-1.0)*x12469*x12476)));
evalcond[2]=((((-1.0)*x12471*x12476))+((r02*x12467))+(((-1.0)*x12474*x12476)));
evalcond[3]=((1.0)+((r12*x12467))+(((-1.0)*x12475*x12476))+(((-1.0)*x12473*x12476)));
evalcond[4]=(((r02*x12468))+((cj1*cj2))+((x12467*x12471))+((x12467*x12474))+(((-1.0)*sj1*x12470)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x12468))+(((-1.0)*cj1*x12470))+((x12467*x12469))+((x12467*x12472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12477=((1.0)*sj5);
CheckValue<IkReal> x12478=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x12477)))),-1);
if(!x12478.valid){
continue;
}
CheckValue<IkReal> x12479 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12477))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12478.value)))+(x12479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12480=IKsin(j4);
IkReal x12481=IKcos(j4);
IkReal x12482=(r20*sj5);
IkReal x12483=((1.0)*sj2);
IkReal x12484=(r00*sj5);
IkReal x12485=(cj5*r21);
IkReal x12486=(cj5*r11);
IkReal x12487=(cj5*r01);
IkReal x12488=(r10*sj5);
IkReal x12489=((1.0)*x12481);
evalcond[0]=(((x12480*x12486))+((x12480*x12488))+((r12*x12481)));
evalcond[1]=((((-1.0)*x12482*x12489))+((r22*x12480))+(((-1.0)*x12485*x12489)));
evalcond[2]=((((-1.0)*x12487*x12489))+((r02*x12480))+(((-1.0)*x12484*x12489)));
evalcond[3]=((1.0)+(((-1.0)*x12488*x12489))+((r12*x12480))+(((-1.0)*x12486*x12489)));
evalcond[4]=(((r02*x12481))+((x12480*x12484))+((x12480*x12487))+((cj1*cj2))+(((-1.0)*sj1*x12483)));
evalcond[5]=(((r22*x12481))+(((-1.0)*cj2*sj1))+((x12480*x12482))+((x12480*x12485))+(((-1.0)*cj1*x12483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12490=((1.0)*cj5);
CheckValue<IkReal> x12491=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x12490)))),-1);
if(!x12491.valid){
continue;
}
CheckValue<IkReal> x12492 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x12490))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12491.value)))+(x12492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12493=IKsin(j4);
IkReal x12494=IKcos(j4);
IkReal x12495=(r20*sj5);
IkReal x12496=((1.0)*sj2);
IkReal x12497=(r00*sj5);
IkReal x12498=(cj5*r21);
IkReal x12499=(cj5*r11);
IkReal x12500=(cj5*r01);
IkReal x12501=(r10*sj5);
IkReal x12502=((1.0)*x12494);
evalcond[0]=(((x12493*x12501))+((x12493*x12499))+((r12*x12494)));
evalcond[1]=((((-1.0)*x12498*x12502))+(((-1.0)*x12495*x12502))+((r22*x12493)));
evalcond[2]=((((-1.0)*x12497*x12502))+(((-1.0)*x12500*x12502))+((r02*x12493)));
evalcond[3]=((1.0)+(((-1.0)*x12501*x12502))+((r12*x12493))+(((-1.0)*x12499*x12502)));
evalcond[4]=(((x12493*x12500))+((x12493*x12497))+(((-1.0)*sj1*x12496))+((cj1*cj2))+((r02*x12494)));
evalcond[5]=(((x12493*x12495))+((x12493*x12498))+(((-1.0)*cj2*sj1))+((r22*x12494))+(((-1.0)*cj1*x12496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12504 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12504)==0){
continue;
}
IkReal x12503=pow(x12504,-0.5);
CheckValue<IkReal> x12505 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12505.valid){
continue;
}
IkReal gconst58=((-1.0)*(x12505.value));
IkReal gconst59=(r00*x12503);
IkReal gconst60=(r01*x12503);
CheckValue<IkReal> x12506 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12506.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12506.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12509 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12509.valid){
continue;
}
IkReal x12507=((-1.0)*(x12509.value));
IkReal x12508=x12503;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst59;
cj5=gconst60;
j5=x12507;
IkReal gconst58=x12507;
IkReal gconst59=(r00*x12508);
IkReal gconst60=(r01*x12508);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12510=gconst60*gconst60;
IkReal x12511=gconst59*gconst59;
IkReal x12512=(cj3*r10);
IkReal x12513=(gconst59*gconst60);
IkReal x12514=(cj3*r11);
IkReal x12515=(r10*sj3);
IkReal x12516=(r20*x12511);
IkReal x12517=((1.0)*r11*sj3);
IkReal x12518=(r21*x12510);
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r20*x12513*x12514))+((x12512*x12516))+((r21*x12512*x12513))+((x12514*x12518)))),-1);
if(!x12519.valid){
continue;
}
CheckValue<IkReal> x12520 = IKatan2WithCheck(IkReal((((x12515*x12518))+(((-1.0)*x12516*x12517))+(((-1.0)*r21*x12513*x12517))+((r20*x12513*x12515)))),IkReal((((gconst60*r22*x12515))+(((-1.0)*gconst59*r22*x12517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12519.value)))+(x12520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12521=IKcos(j4);
IkReal x12522=IKsin(j4);
IkReal x12523=((1.0)*gconst60);
IkReal x12524=(sj1*sj2);
IkReal x12525=((1.0)*cj2);
IkReal x12526=(gconst59*r10);
IkReal x12527=(cj3*gconst59);
IkReal x12528=(gconst59*sj3);
IkReal x12529=((1.0)*cj1*sj2);
IkReal x12530=(sj1*x12525);
IkReal x12531=(sj3*x12522);
IkReal x12532=((1.0)*gconst59*r00);
IkReal x12533=((1.0)*gconst59*r20);
IkReal x12534=(cj3*x12522);
IkReal x12535=(cj3*x12521);
IkReal x12536=((1.0)*sj3*x12521);
IkReal x12537=(x12529+x12530);
evalcond[0]=(((r22*x12522))+(((-1.0)*x12521*x12533))+(((-1.0)*r21*x12521*x12523)));
evalcond[1]=((((-1.0)*x12521*x12532))+(((-1.0)*r01*x12521*x12523))+((r02*x12522)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12521*x12523))+(((-1.0)*x12521*x12526))+((r12*x12522)));
evalcond[3]=(((x12526*x12534))+((gconst60*r11*x12534))+(((-1.0)*r10*sj3*x12523))+((r11*x12528))+((r12*x12535)));
evalcond[4]=((((-1.0)*x12526*x12531))+(((-1.0)*r12*x12536))+(((-1.0)*r11*x12523*x12531))+((r11*x12527))+(((-1.0)*cj3*r10*x12523)));
evalcond[5]=(((gconst60*r21*x12534))+(((-1.0)*cj1*x12525))+((r21*x12528))+((r20*x12522*x12527))+(((-1.0)*r20*sj3*x12523))+((r22*x12535))+x12524);
evalcond[6]=(((r00*x12522*x12527))+(((-1.0)*r00*sj3*x12523))+((gconst60*r01*x12534))+((r02*x12535))+((r01*x12528))+(((-1.0)*x12537)));
evalcond[7]=((((-1.0)*r00*x12522*x12528))+(((-1.0)*r02*x12536))+(((-1.0)*cj3*r00*x12523))+(((-1.0)*r01*x12523*x12531))+((r01*x12527))+((cj1*cj2))+(((-1.0)*x12524)));
evalcond[8]=((((-1.0)*r21*x12523*x12531))+((r21*x12527))+(((-1.0)*r22*x12536))+(((-1.0)*r20*x12522*x12528))+(((-1.0)*cj3*r20*x12523))+(((-1.0)*x12537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12538=((1.0)*gconst59);
CheckValue<IkReal> x12539 = IKatan2WithCheck(IkReal(((((-1.0)*gconst60*r01))+(((-1.0)*r00*x12538)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12539.valid){
continue;
}
CheckValue<IkReal> x12540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12538))+((gconst60*r20)))),-1);
if(!x12540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12539.value)+(((1.5707963267949)*(x12540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12541=IKcos(j4);
IkReal x12542=IKsin(j4);
IkReal x12543=((1.0)*gconst60);
IkReal x12544=(sj1*sj2);
IkReal x12545=((1.0)*cj2);
IkReal x12546=(gconst59*r10);
IkReal x12547=(cj3*gconst59);
IkReal x12548=(gconst59*sj3);
IkReal x12549=((1.0)*cj1*sj2);
IkReal x12550=(sj1*x12545);
IkReal x12551=(sj3*x12542);
IkReal x12552=((1.0)*gconst59*r00);
IkReal x12553=((1.0)*gconst59*r20);
IkReal x12554=(cj3*x12542);
IkReal x12555=(cj3*x12541);
IkReal x12556=((1.0)*sj3*x12541);
IkReal x12557=(x12549+x12550);
evalcond[0]=((((-1.0)*r21*x12541*x12543))+(((-1.0)*x12541*x12553))+((r22*x12542)));
evalcond[1]=((((-1.0)*x12541*x12552))+((r02*x12542))+(((-1.0)*r01*x12541*x12543)));
evalcond[2]=((1.0)+((r12*x12542))+(((-1.0)*x12541*x12546))+(((-1.0)*r11*x12541*x12543)));
evalcond[3]=(((gconst60*r11*x12554))+((r12*x12555))+((r11*x12548))+((x12546*x12554))+(((-1.0)*r10*sj3*x12543)));
evalcond[4]=((((-1.0)*r11*x12543*x12551))+(((-1.0)*r12*x12556))+((r11*x12547))+(((-1.0)*cj3*r10*x12543))+(((-1.0)*x12546*x12551)));
evalcond[5]=((((-1.0)*r20*sj3*x12543))+((r20*x12542*x12547))+(((-1.0)*cj1*x12545))+((r22*x12555))+x12544+((gconst60*r21*x12554))+((r21*x12548)));
evalcond[6]=(((r01*x12548))+(((-1.0)*r00*sj3*x12543))+((gconst60*r01*x12554))+((r02*x12555))+((r00*x12542*x12547))+(((-1.0)*x12557)));
evalcond[7]=((((-1.0)*x12544))+((r01*x12547))+(((-1.0)*r01*x12543*x12551))+(((-1.0)*r00*x12542*x12548))+((cj1*cj2))+(((-1.0)*cj3*r00*x12543))+(((-1.0)*r02*x12556)));
evalcond[8]=((((-1.0)*r20*x12542*x12548))+(((-1.0)*r21*x12543*x12551))+(((-1.0)*r22*x12556))+(((-1.0)*cj3*r20*x12543))+((r21*x12547))+(((-1.0)*x12557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12558=((-1.0)*r00);
IkReal x12560 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12560)==0){
continue;
}
IkReal x12559=pow(x12560,-0.5);
CheckValue<IkReal> x12561 = IKatan2WithCheck(IkReal(x12558),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12561.valid){
continue;
}
IkReal gconst61=((3.14159265358979)+(((-1.0)*(x12561.value))));
IkReal gconst62=(x12558*x12559);
IkReal gconst63=((-1.0)*r01*x12559);
CheckValue<IkReal> x12562 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12562.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12562.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x12563=((-1.0)*r00);
CheckValue<IkReal> x12566 = IKatan2WithCheck(IkReal(x12563),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12566.valid){
continue;
}
IkReal x12564=((1.0)*(x12566.value));
IkReal x12565=x12559;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst62;
cj5=gconst63;
j5=((3.14159265)+(((-1.0)*x12564)));
IkReal gconst61=((3.14159265358979)+(((-1.0)*x12564)));
IkReal gconst62=(x12563*x12565);
IkReal gconst63=((-1.0)*r01*x12565);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12567=((-1.0)*r00);
CheckValue<IkReal> x12570 = IKatan2WithCheck(IkReal(x12567),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12570.valid){
continue;
}
IkReal x12568=((1.0)*(x12570.value));
IkReal x12569=x12559;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst62;
cj5=gconst63;
j5=((3.14159265)+(((-1.0)*x12568)));
IkReal gconst61=((3.14159265358979)+(((-1.0)*x12568)));
IkReal gconst62=(x12567*x12569);
IkReal gconst63=((-1.0)*r01*x12569);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12571=gconst63*gconst63;
IkReal x12572=gconst62*gconst62;
IkReal x12573=(cj3*r11);
IkReal x12574=(r10*sj3);
IkReal x12575=(cj3*r10);
IkReal x12576=(gconst62*gconst63*r20);
IkReal x12577=(r21*x12571);
IkReal x12578=((1.0)*r11*sj3);
IkReal x12579=(gconst62*gconst63*r21);
IkReal x12580=(r20*x12572);
CheckValue<IkReal> x12581=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x12575*x12579))+((x12575*x12580))+((x12573*x12577))+((x12573*x12576)))),-1);
if(!x12581.valid){
continue;
}
CheckValue<IkReal> x12582 = IKatan2WithCheck(IkReal(((((-1.0)*x12578*x12580))+(((-1.0)*x12578*x12579))+((x12574*x12577))+((x12574*x12576)))),IkReal(((((-1.0)*gconst62*r22*x12578))+((gconst63*r22*x12574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12581.value)))+(x12582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12583=IKcos(j4);
IkReal x12584=IKsin(j4);
IkReal x12585=(gconst62*r00);
IkReal x12586=(cj3*gconst62);
IkReal x12587=(sj1*sj2);
IkReal x12588=(cj3*gconst63);
IkReal x12589=((1.0)*cj2);
IkReal x12590=(gconst62*sj3);
IkReal x12591=((1.0)*cj1*sj2);
IkReal x12592=(sj1*x12589);
IkReal x12593=((1.0)*gconst63*sj3);
IkReal x12594=((1.0)*x12583);
IkReal x12595=(r20*x12584);
IkReal x12596=(r01*x12584);
IkReal x12597=(cj3*x12583);
IkReal x12598=(r21*x12584);
IkReal x12599=(r10*x12584);
IkReal x12600=(r11*x12584);
IkReal x12601=(x12592+x12591);
evalcond[0]=(((r22*x12584))+(((-1.0)*gconst63*r21*x12594))+(((-1.0)*gconst62*r20*x12594)));
evalcond[1]=((((-1.0)*x12585*x12594))+(((-1.0)*gconst63*r01*x12594))+((r02*x12584)));
evalcond[2]=((1.0)+((r12*x12584))+(((-1.0)*gconst63*r11*x12594))+(((-1.0)*gconst62*r10*x12594)));
evalcond[3]=(((r12*x12597))+(((-1.0)*r10*x12593))+((x12588*x12600))+((x12586*x12599))+((r11*x12590)));
evalcond[4]=((((-1.0)*x12593*x12600))+(((-1.0)*r12*sj3*x12594))+(((-1.0)*r10*x12588))+(((-1.0)*x12590*x12599))+((r11*x12586)));
evalcond[5]=((((-1.0)*r20*x12593))+((r21*x12590))+((r22*x12597))+(((-1.0)*cj1*x12589))+x12587+((x12586*x12595))+((x12588*x12598)));
evalcond[6]=(((r01*x12590))+(((-1.0)*r00*x12593))+(((-1.0)*x12601))+((r02*x12597))+((x12588*x12596))+((cj3*x12584*x12585)));
evalcond[7]=((((-1.0)*sj3*x12584*x12585))+((r01*x12586))+(((-1.0)*x12593*x12596))+((cj1*cj2))+(((-1.0)*x12587))+(((-1.0)*r00*x12588))+(((-1.0)*r02*sj3*x12594)));
evalcond[8]=((((-1.0)*x12601))+(((-1.0)*r22*sj3*x12594))+((r21*x12586))+(((-1.0)*x12593*x12598))+(((-1.0)*r20*x12588))+(((-1.0)*x12590*x12595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12602=((1.0)*gconst62);
CheckValue<IkReal> x12603=IKPowWithIntegerCheck(IKsign((((gconst63*r20))+(((-1.0)*r21*x12602)))),-1);
if(!x12603.valid){
continue;
}
CheckValue<IkReal> x12604 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12602))+(((-1.0)*gconst63*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12603.value)))+(x12604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12605=IKcos(j4);
IkReal x12606=IKsin(j4);
IkReal x12607=(gconst62*r00);
IkReal x12608=(cj3*gconst62);
IkReal x12609=(sj1*sj2);
IkReal x12610=(cj3*gconst63);
IkReal x12611=((1.0)*cj2);
IkReal x12612=(gconst62*sj3);
IkReal x12613=((1.0)*cj1*sj2);
IkReal x12614=(sj1*x12611);
IkReal x12615=((1.0)*gconst63*sj3);
IkReal x12616=((1.0)*x12605);
IkReal x12617=(r20*x12606);
IkReal x12618=(r01*x12606);
IkReal x12619=(cj3*x12605);
IkReal x12620=(r21*x12606);
IkReal x12621=(r10*x12606);
IkReal x12622=(r11*x12606);
IkReal x12623=(x12614+x12613);
evalcond[0]=((((-1.0)*gconst63*r21*x12616))+(((-1.0)*gconst62*r20*x12616))+((r22*x12606)));
evalcond[1]=((((-1.0)*gconst63*r01*x12616))+(((-1.0)*x12607*x12616))+((r02*x12606)));
evalcond[2]=((1.0)+((r12*x12606))+(((-1.0)*gconst63*r11*x12616))+(((-1.0)*gconst62*r10*x12616)));
evalcond[3]=(((x12608*x12621))+((x12610*x12622))+(((-1.0)*r10*x12615))+((r11*x12612))+((r12*x12619)));
evalcond[4]=((((-1.0)*x12612*x12621))+(((-1.0)*r10*x12610))+((r11*x12608))+(((-1.0)*x12615*x12622))+(((-1.0)*r12*sj3*x12616)));
evalcond[5]=((((-1.0)*cj1*x12611))+((x12608*x12617))+(((-1.0)*r20*x12615))+((r21*x12612))+((x12610*x12620))+x12609+((r22*x12619)));
evalcond[6]=(((r02*x12619))+(((-1.0)*x12623))+(((-1.0)*r00*x12615))+((r01*x12612))+((x12610*x12618))+((cj3*x12606*x12607)));
evalcond[7]=(((r01*x12608))+(((-1.0)*x12609))+(((-1.0)*sj3*x12606*x12607))+(((-1.0)*x12615*x12618))+(((-1.0)*r00*x12610))+(((-1.0)*r02*sj3*x12616))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x12623))+(((-1.0)*r22*sj3*x12616))+(((-1.0)*x12612*x12617))+(((-1.0)*x12615*x12620))+(((-1.0)*r20*x12610))+((r21*x12608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12624=((1.0)*gconst63);
CheckValue<IkReal> x12625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12624))+((gconst62*r01)))),-1);
if(!x12625.valid){
continue;
}
CheckValue<IkReal> x12626 = IKatan2WithCheck(IkReal(((((-1.0)*gconst62*r20))+(((-1.0)*r21*x12624)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12625.value)))+(x12626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12627=IKcos(j4);
IkReal x12628=IKsin(j4);
IkReal x12629=(gconst62*r00);
IkReal x12630=(cj3*gconst62);
IkReal x12631=(sj1*sj2);
IkReal x12632=(cj3*gconst63);
IkReal x12633=((1.0)*cj2);
IkReal x12634=(gconst62*sj3);
IkReal x12635=((1.0)*cj1*sj2);
IkReal x12636=(sj1*x12633);
IkReal x12637=((1.0)*gconst63*sj3);
IkReal x12638=((1.0)*x12627);
IkReal x12639=(r20*x12628);
IkReal x12640=(r01*x12628);
IkReal x12641=(cj3*x12627);
IkReal x12642=(r21*x12628);
IkReal x12643=(r10*x12628);
IkReal x12644=(r11*x12628);
IkReal x12645=(x12636+x12635);
evalcond[0]=(((r22*x12628))+(((-1.0)*gconst63*r21*x12638))+(((-1.0)*gconst62*r20*x12638)));
evalcond[1]=(((r02*x12628))+(((-1.0)*x12629*x12638))+(((-1.0)*gconst63*r01*x12638)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r10*x12638))+((r12*x12628))+(((-1.0)*gconst63*r11*x12638)));
evalcond[3]=(((r11*x12634))+((r12*x12641))+((x12630*x12643))+(((-1.0)*r10*x12637))+((x12632*x12644)));
evalcond[4]=(((r11*x12630))+(((-1.0)*x12637*x12644))+(((-1.0)*x12634*x12643))+(((-1.0)*r10*x12632))+(((-1.0)*r12*sj3*x12638)));
evalcond[5]=(((x12630*x12639))+(((-1.0)*r20*x12637))+((r22*x12641))+x12631+(((-1.0)*cj1*x12633))+((r21*x12634))+((x12632*x12642)));
evalcond[6]=(((cj3*x12628*x12629))+((r01*x12634))+(((-1.0)*x12645))+((r02*x12641))+((x12632*x12640))+(((-1.0)*r00*x12637)));
evalcond[7]=((((-1.0)*r02*sj3*x12638))+(((-1.0)*x12637*x12640))+(((-1.0)*r00*x12632))+(((-1.0)*sj3*x12628*x12629))+(((-1.0)*x12631))+((r01*x12630))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x12637*x12642))+(((-1.0)*x12634*x12639))+(((-1.0)*x12645))+((r21*x12630))+(((-1.0)*r22*sj3*x12638))+(((-1.0)*r20*x12632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12646=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12646);
rxp1_1=(px*r21);
rxp1_2=(r11*x12646);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12647=(r10*sj5);
IkReal x12648=(cj5*r11);
j4eval[0]=(((cj3*x12647))+((cj3*x12648)));
j4eval[1]=((((-1.0)*x12648))+(((-1.0)*x12647)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12649=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12649);
rxp1_1=(px*r21);
rxp1_2=(r11*x12649);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12650=((1.0)*r10*sj5);
IkReal x12651=((1.0)*cj5*r11);
j4eval[0]=((((-1.0)*sj3*x12650))+(((-1.0)*sj3*x12651)));
j4eval[1]=((((-1.0)*x12651))+(((-1.0)*x12650)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12652=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12652);
rxp1_1=(px*r21);
rxp1_2=(r11*x12652);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj3*cj5*r11))+((cj3*r10*sj5)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12653=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12653);
rxp1_1=(px*r21);
rxp1_2=(r11*x12653);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r21))+((r20*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12654=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12654);
rxp1_1=(px*r21);
rxp1_2=(r11*x12654);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r21))+((r20*sj5)));
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12655=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x12655.valid){
continue;
}
CheckValue<IkReal> x12656=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x12656.valid){
continue;
}
if( IKabs(((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12656.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((-1.0)*(x12656.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((-1.0)*(x12656.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12657=IKsin(j4);
IkReal x12658=IKcos(j4);
IkReal x12659=((1.0)*cj2);
IkReal x12660=(sj5*x12657);
IkReal x12661=(cj5*x12657);
IkReal x12662=((1.0)*cj5*x12658);
IkReal x12663=((1.0)*sj5*x12658);
evalcond[0]=(r02*x12657);
evalcond[1]=(((r10*x12660))+((r11*x12661)));
evalcond[2]=(((r02*x12658))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12659)));
evalcond[3]=((((-1.0)*r21*x12662))+(((-1.0)*r20*x12663)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12663))+(((-1.0)*r11*x12662)));
evalcond[5]=(((r21*x12661))+(((-1.0)*cj1*x12659))+((sj1*sj2))+((r20*x12660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12664=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x12664.valid){
continue;
}
CheckValue<IkReal> x12665=IKPowWithIntegerCheck(r02,-1);
if(!x12665.valid){
continue;
}
if( IKabs(((x12664.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12665.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12664.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12665.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12664.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12665.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12666=IKsin(j4);
IkReal x12667=IKcos(j4);
IkReal x12668=((1.0)*cj2);
IkReal x12669=(sj5*x12666);
IkReal x12670=(cj5*x12666);
IkReal x12671=((1.0)*cj5*x12667);
IkReal x12672=((1.0)*sj5*x12667);
evalcond[0]=(r02*x12666);
evalcond[1]=(((r10*x12669))+((r11*x12670)));
evalcond[2]=(((r02*x12667))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12668)));
evalcond[3]=((((-1.0)*r20*x12672))+(((-1.0)*r21*x12671)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12672))+(((-1.0)*r11*x12671)));
evalcond[5]=((((-1.0)*cj1*x12668))+((r21*x12670))+((sj1*sj2))+((r20*x12669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12673=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12673);
rxp1_1=(px*r21);
rxp1_2=(r11*x12673);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12674=((1.0)*cj5);
IkReal x12675=((1.0)*sj5);
j4eval[0]=((((-1.0)*r20*x12675))+(((-1.0)*r21*x12674)));
j4eval[1]=((((-1.0)*r10*x12675))+(((-1.0)*r11*x12674)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12676=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12676);
rxp1_1=(px*r21);
rxp1_2=(r11*x12676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12677=((1.0)*sj1);
CheckValue<IkReal> x12678=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(r02,-1);
if(!x12679.valid){
continue;
}
if( IKabs(((x12678.value)*((((cj1*cj2))+(((-1.0)*sj2*x12677)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12679.value)*(((((-1.0)*cj2*x12677))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12678.value)*((((cj1*cj2))+(((-1.0)*sj2*x12677))))))+IKsqr(((x12679.value)*(((((-1.0)*cj2*x12677))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12678.value)*((((cj1*cj2))+(((-1.0)*sj2*x12677))))), ((x12679.value)*(((((-1.0)*cj2*x12677))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12680=IKcos(j4);
IkReal x12681=IKsin(j4);
IkReal x12682=((1.0)*cj2);
IkReal x12683=(cj5*r11);
IkReal x12684=(r20*sj5);
IkReal x12685=(r10*sj5);
IkReal x12686=((1.0)*cj5*r21);
IkReal x12687=((1.0)*x12680);
IkReal x12688=((1.0)*x12681);
evalcond[0]=(r02*x12681);
evalcond[1]=((((-1.0)*x12684*x12687))+(((-1.0)*x12680*x12686)));
evalcond[2]=((((-1.0)*sj1*x12682))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12687)));
evalcond[3]=((((-1.0)*x12685*x12688))+(((-1.0)*x12683*x12688)));
evalcond[4]=((1.0)+(((-1.0)*x12685*x12687))+(((-1.0)*x12683*x12687)));
evalcond[5]=((((-1.0)*cj1*x12682))+((sj1*sj2))+(((-1.0)*x12684*x12688))+(((-1.0)*x12681*x12686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12689=((1.0)*cj5);
IkReal x12690=((1.0)*sj5);
CheckValue<IkReal> x12691=IKPowWithIntegerCheck(((((-1.0)*r21*x12689))+(((-1.0)*r20*x12690))),-1);
if(!x12691.valid){
continue;
}
CheckValue<IkReal> x12692=IKPowWithIntegerCheck(((((-1.0)*r10*x12690))+(((-1.0)*r11*x12689))),-1);
if(!x12692.valid){
continue;
}
if( IKabs(((x12691.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12692.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12691.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((-1.0)*(x12692.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12691.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((-1.0)*(x12692.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12693=IKcos(j4);
IkReal x12694=IKsin(j4);
IkReal x12695=((1.0)*cj2);
IkReal x12696=(cj5*r11);
IkReal x12697=(r20*sj5);
IkReal x12698=(r10*sj5);
IkReal x12699=((1.0)*cj5*r21);
IkReal x12700=((1.0)*x12693);
IkReal x12701=((1.0)*x12694);
evalcond[0]=(r02*x12694);
evalcond[1]=((((-1.0)*x12697*x12700))+(((-1.0)*x12693*x12699)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12695))+(((-1.0)*r02*x12700)));
evalcond[3]=((((-1.0)*x12698*x12701))+(((-1.0)*x12696*x12701)));
evalcond[4]=((1.0)+(((-1.0)*x12698*x12700))+(((-1.0)*x12696*x12700)));
evalcond[5]=((((-1.0)*cj1*x12695))+((sj1*sj2))+(((-1.0)*x12697*x12701))+(((-1.0)*x12694*x12699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12702=IKPowWithIntegerCheck((((cj3*cj5*r11))+((cj3*r10*sj5))),-1);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703=IKPowWithIntegerCheck(cj3,-1);
if(!x12703.valid){
continue;
}
CheckValue<IkReal> x12704=IKPowWithIntegerCheck(r02,-1);
if(!x12704.valid){
continue;
}
if( IKabs(((x12702.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12703.value)*(x12704.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12702.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))))+IKsqr(((x12703.value)*(x12704.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12702.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))), ((x12703.value)*(x12704.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12705=IKcos(j4);
IkReal x12706=IKsin(j4);
IkReal x12707=(cj3*cj5);
IkReal x12708=((1.0)*r10);
IkReal x12709=(sj3*sj5);
IkReal x12710=(cj5*sj3);
IkReal x12711=(sj1*sj2);
IkReal x12712=((1.0)*cj2);
IkReal x12713=(cj3*sj5);
IkReal x12714=((1.0)*cj1*sj2);
IkReal x12715=(sj1*x12712);
IkReal x12716=(r11*x12706);
IkReal x12717=((1.0)*r20*sj3);
IkReal x12718=(sj5*x12706);
IkReal x12719=(r21*x12706);
IkReal x12720=((1.0)*x12705);
IkReal x12721=(x12714+x12715);
evalcond[0]=(r02*x12706);
evalcond[1]=((((-1.0)*r20*sj5*x12720))+(((-1.0)*cj5*r21*x12720)));
evalcond[2]=((((-1.0)*x12721))+((cj3*r02*x12705)));
evalcond[3]=((((-1.0)*x12711))+(((-1.0)*r02*sj3*x12720))+((cj1*cj2)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r11*x12720))+(((-1.0)*sj5*x12705*x12708)));
evalcond[5]=(((r11*x12709))+(((-1.0)*x12708*x12710))+((x12707*x12716))+((r10*x12706*x12713)));
evalcond[6]=((((-1.0)*x12707*x12708))+(((-1.0)*x12706*x12708*x12709))+((r11*x12713))+(((-1.0)*x12710*x12716)));
evalcond[7]=(((r21*x12709))+((r20*x12706*x12713))+(((-1.0)*r20*x12710))+x12711+((x12707*x12719))+(((-1.0)*cj1*x12712)));
evalcond[8]=(((r21*x12713))+(((-1.0)*x12721))+(((-1.0)*r20*x12707))+(((-1.0)*x12710*x12719))+(((-1.0)*r20*x12706*x12709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12722=((1.0)*r11);
IkReal x12723=((1.0)*r10*sj5);
CheckValue<IkReal> x12724=IKPowWithIntegerCheck(((((-1.0)*sj3*x12723))+(((-1.0)*cj5*sj3*x12722))),-1);
if(!x12724.valid){
continue;
}
CheckValue<IkReal> x12725=IKPowWithIntegerCheck(((((-1.0)*x12723))+(((-1.0)*cj5*x12722))),-1);
if(!x12725.valid){
continue;
}
if( IKabs(((x12724.value)*((((cj3*cj5*r10))+(((-1.0)*cj3*sj5*x12722)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12725.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12724.value)*((((cj3*cj5*r10))+(((-1.0)*cj3*sj5*x12722))))))+IKsqr(((-1.0)*(x12725.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12724.value)*((((cj3*cj5*r10))+(((-1.0)*cj3*sj5*x12722))))), ((-1.0)*(x12725.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12726=IKcos(j4);
IkReal x12727=IKsin(j4);
IkReal x12728=(cj3*cj5);
IkReal x12729=((1.0)*r10);
IkReal x12730=(sj3*sj5);
IkReal x12731=(cj5*sj3);
IkReal x12732=(sj1*sj2);
IkReal x12733=((1.0)*cj2);
IkReal x12734=(cj3*sj5);
IkReal x12735=((1.0)*cj1*sj2);
IkReal x12736=(sj1*x12733);
IkReal x12737=(r11*x12727);
IkReal x12738=((1.0)*r20*sj3);
IkReal x12739=(sj5*x12727);
IkReal x12740=(r21*x12727);
IkReal x12741=((1.0)*x12726);
IkReal x12742=(x12736+x12735);
evalcond[0]=(r02*x12727);
evalcond[1]=((((-1.0)*cj5*r21*x12741))+(((-1.0)*r20*sj5*x12741)));
evalcond[2]=(((cj3*r02*x12726))+(((-1.0)*x12742)));
evalcond[3]=((((-1.0)*x12732))+(((-1.0)*r02*sj3*x12741))+((cj1*cj2)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r11*x12741))+(((-1.0)*sj5*x12726*x12729)));
evalcond[5]=(((r11*x12730))+(((-1.0)*x12729*x12731))+((x12728*x12737))+((r10*x12727*x12734)));
evalcond[6]=(((r11*x12734))+(((-1.0)*x12728*x12729))+(((-1.0)*x12727*x12729*x12730))+(((-1.0)*x12731*x12737)));
evalcond[7]=(((r20*x12727*x12734))+(((-1.0)*r20*x12731))+((r21*x12730))+((x12728*x12740))+x12732+(((-1.0)*cj1*x12733)));
evalcond[8]=((((-1.0)*r20*x12728))+((r21*x12734))+(((-1.0)*r20*x12727*x12730))+(((-1.0)*x12742))+(((-1.0)*x12731*x12740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12743=(r10*sj5);
IkReal x12744=((1.0)*r11);
CheckValue<IkReal> x12745=IKPowWithIntegerCheck((((cj3*x12743))+((cj3*cj5*r11))),-1);
if(!x12745.valid){
continue;
}
CheckValue<IkReal> x12746=IKPowWithIntegerCheck(((((-1.0)*x12743))+(((-1.0)*cj5*x12744))),-1);
if(!x12746.valid){
continue;
}
if( IKabs(((x12745.value)*((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x12744)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12745.value)*((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x12744))))))+IKsqr(((-1.0)*(x12746.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12745.value)*((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x12744))))), ((-1.0)*(x12746.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12747=IKcos(j4);
IkReal x12748=IKsin(j4);
IkReal x12749=(cj3*cj5);
IkReal x12750=((1.0)*r10);
IkReal x12751=(sj3*sj5);
IkReal x12752=(cj5*sj3);
IkReal x12753=(sj1*sj2);
IkReal x12754=((1.0)*cj2);
IkReal x12755=(cj3*sj5);
IkReal x12756=((1.0)*cj1*sj2);
IkReal x12757=(sj1*x12754);
IkReal x12758=(r11*x12748);
IkReal x12759=((1.0)*r20*sj3);
IkReal x12760=(sj5*x12748);
IkReal x12761=(r21*x12748);
IkReal x12762=((1.0)*x12747);
IkReal x12763=(x12756+x12757);
evalcond[0]=(r02*x12748);
evalcond[1]=((((-1.0)*r20*sj5*x12762))+(((-1.0)*cj5*r21*x12762)));
evalcond[2]=(((cj3*r02*x12747))+(((-1.0)*x12763)));
evalcond[3]=((((-1.0)*x12753))+((cj1*cj2))+(((-1.0)*r02*sj3*x12762)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r11*x12762))+(((-1.0)*sj5*x12747*x12750)));
evalcond[5]=(((r11*x12751))+((r10*x12748*x12755))+(((-1.0)*x12750*x12752))+((x12749*x12758)));
evalcond[6]=(((r11*x12755))+(((-1.0)*x12749*x12750))+(((-1.0)*x12748*x12750*x12751))+(((-1.0)*x12752*x12758)));
evalcond[7]=((((-1.0)*r20*x12752))+x12753+((r20*x12748*x12755))+((r21*x12751))+((x12749*x12761))+(((-1.0)*cj1*x12754)));
evalcond[8]=((((-1.0)*r20*x12749))+(((-1.0)*x12763))+(((-1.0)*r20*x12748*x12751))+(((-1.0)*x12752*x12761))+((r21*x12755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12764=cj5*cj5;
IkReal x12765=(cj3*r10);
IkReal x12766=(cj3*r11);
IkReal x12767=(r20*sj5);
IkReal x12768=(cj5*r21*sj5);
IkReal x12769=((1.0)*r11*sj3);
IkReal x12770=(r20*x12764);
IkReal x12771=(cj5*r10*sj3);
IkReal x12772=(r21*x12764);
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x12765*x12768))+((r20*x12765))+(((-1.0)*x12765*x12770))+((cj5*x12766*x12767))+((x12766*x12772)))),-1);
if(!x12773.valid){
continue;
}
CheckValue<IkReal> x12774 = IKatan2WithCheck(IkReal((((r11*sj3*x12770))+(((-1.0)*r20*x12769))+((x12767*x12771))+((r10*sj3*x12772))+(((-1.0)*x12768*x12769)))),IkReal(((((-1.0)*r22*sj5*x12769))+((r22*x12771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12773.value)))+(x12774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12775=IKcos(j4);
IkReal x12776=IKsin(j4);
IkReal x12777=(cj3*cj5);
IkReal x12778=((1.0)*sj3);
IkReal x12779=((1.0)*r10);
IkReal x12780=(sj3*sj5);
IkReal x12781=(sj1*sj2);
IkReal x12782=((1.0)*cj1);
IkReal x12783=(cj3*sj5);
IkReal x12784=(sj2*x12782);
IkReal x12785=((1.0)*cj2*sj1);
IkReal x12786=(r11*x12776);
IkReal x12787=(sj5*x12776);
IkReal x12788=(r01*x12776);
IkReal x12789=(r21*x12776);
IkReal x12790=(r02*x12775);
IkReal x12791=((1.0)*x12775);
IkReal x12792=(r22*x12775);
IkReal x12793=(r12*x12775);
IkReal x12794=(x12785+x12784);
evalcond[0]=((((-1.0)*cj5*r21*x12791))+(((-1.0)*r20*sj5*x12791))+((r22*x12776)));
evalcond[1]=((((-1.0)*r00*sj5*x12791))+(((-1.0)*cj5*r01*x12791))+((r02*x12776)));
evalcond[2]=((1.0)+(((-1.0)*sj5*x12775*x12779))+((r12*x12776))+(((-1.0)*cj5*r11*x12791)));
evalcond[3]=((((-1.0)*cj5*r10*x12778))+((r11*x12780))+((x12777*x12786))+((r10*x12776*x12783))+((cj3*x12793)));
evalcond[4]=((((-1.0)*x12777*x12779))+(((-1.0)*r10*x12778*x12787))+((r11*x12783))+(((-1.0)*cj5*x12778*x12786))+(((-1.0)*x12778*x12793)));
evalcond[5]=((((-1.0)*cj5*r20*x12778))+(((-1.0)*cj2*x12782))+((r21*x12780))+((x12777*x12789))+((cj3*x12792))+x12781+((r20*x12776*x12783)));
evalcond[6]=((((-1.0)*x12794))+((r01*x12780))+((x12777*x12788))+((cj3*x12790))+((r00*x12776*x12783))+(((-1.0)*cj5*r00*x12778)));
evalcond[7]=((((-1.0)*r00*x12778*x12787))+((r01*x12783))+(((-1.0)*cj5*x12778*x12788))+(((-1.0)*x12778*x12790))+((cj1*cj2))+(((-1.0)*r00*x12777))+(((-1.0)*x12781)));
evalcond[8]=((((-1.0)*x12794))+((r21*x12783))+(((-1.0)*cj5*x12778*x12789))+(((-1.0)*x12778*x12792))+(((-1.0)*r20*x12778*x12787))+(((-1.0)*r20*x12777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12795=((1.0)*sj5);
CheckValue<IkReal> x12796 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12795))+(((-1.0)*cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12796.valid){
continue;
}
CheckValue<IkReal> x12797=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x12795)))),-1);
if(!x12797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12796.value)+(((1.5707963267949)*(x12797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12798=IKcos(j4);
IkReal x12799=IKsin(j4);
IkReal x12800=(cj3*cj5);
IkReal x12801=((1.0)*sj3);
IkReal x12802=((1.0)*r10);
IkReal x12803=(sj3*sj5);
IkReal x12804=(sj1*sj2);
IkReal x12805=((1.0)*cj1);
IkReal x12806=(cj3*sj5);
IkReal x12807=(sj2*x12805);
IkReal x12808=((1.0)*cj2*sj1);
IkReal x12809=(r11*x12799);
IkReal x12810=(sj5*x12799);
IkReal x12811=(r01*x12799);
IkReal x12812=(r21*x12799);
IkReal x12813=(r02*x12798);
IkReal x12814=((1.0)*x12798);
IkReal x12815=(r22*x12798);
IkReal x12816=(r12*x12798);
IkReal x12817=(x12807+x12808);
evalcond[0]=((((-1.0)*cj5*r21*x12814))+(((-1.0)*r20*sj5*x12814))+((r22*x12799)));
evalcond[1]=(((r02*x12799))+(((-1.0)*r00*sj5*x12814))+(((-1.0)*cj5*r01*x12814)));
evalcond[2]=((1.0)+(((-1.0)*cj5*r11*x12814))+((r12*x12799))+(((-1.0)*sj5*x12798*x12802)));
evalcond[3]=(((x12800*x12809))+((cj3*x12816))+((r11*x12803))+(((-1.0)*cj5*r10*x12801))+((r10*x12799*x12806)));
evalcond[4]=((((-1.0)*x12800*x12802))+(((-1.0)*r10*x12801*x12810))+(((-1.0)*x12801*x12816))+((r11*x12806))+(((-1.0)*cj5*x12801*x12809)));
evalcond[5]=(x12804+((x12800*x12812))+((cj3*x12815))+(((-1.0)*cj2*x12805))+((r21*x12803))+(((-1.0)*cj5*r20*x12801))+((r20*x12799*x12806)));
evalcond[6]=(((x12800*x12811))+(((-1.0)*x12817))+((cj3*x12813))+((r01*x12803))+(((-1.0)*cj5*r00*x12801))+((r00*x12799*x12806)));
evalcond[7]=((((-1.0)*x12801*x12813))+(((-1.0)*cj5*x12801*x12811))+((r01*x12806))+(((-1.0)*r00*x12801*x12810))+(((-1.0)*x12804))+((cj1*cj2))+(((-1.0)*r00*x12800)));
evalcond[8]=((((-1.0)*x12817))+(((-1.0)*r20*x12800))+(((-1.0)*x12801*x12815))+(((-1.0)*cj5*x12801*x12812))+((r21*x12806))+(((-1.0)*r20*x12801*x12810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12818=((1.0)*cj5);
CheckValue<IkReal> x12819=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x12818)))),-1);
if(!x12819.valid){
continue;
}
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x12818))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12819.value)))+(x12820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12821=IKcos(j4);
IkReal x12822=IKsin(j4);
IkReal x12823=(cj3*cj5);
IkReal x12824=((1.0)*sj3);
IkReal x12825=((1.0)*r10);
IkReal x12826=(sj3*sj5);
IkReal x12827=(sj1*sj2);
IkReal x12828=((1.0)*cj1);
IkReal x12829=(cj3*sj5);
IkReal x12830=(sj2*x12828);
IkReal x12831=((1.0)*cj2*sj1);
IkReal x12832=(r11*x12822);
IkReal x12833=(sj5*x12822);
IkReal x12834=(r01*x12822);
IkReal x12835=(r21*x12822);
IkReal x12836=(r02*x12821);
IkReal x12837=((1.0)*x12821);
IkReal x12838=(r22*x12821);
IkReal x12839=(r12*x12821);
IkReal x12840=(x12831+x12830);
evalcond[0]=((((-1.0)*r20*sj5*x12837))+((r22*x12822))+(((-1.0)*cj5*r21*x12837)));
evalcond[1]=(((r02*x12822))+(((-1.0)*r00*sj5*x12837))+(((-1.0)*cj5*r01*x12837)));
evalcond[2]=((1.0)+((r12*x12822))+(((-1.0)*cj5*r11*x12837))+(((-1.0)*sj5*x12821*x12825)));
evalcond[3]=(((cj3*x12839))+((x12823*x12832))+(((-1.0)*cj5*r10*x12824))+((r11*x12826))+((r10*x12822*x12829)));
evalcond[4]=((((-1.0)*cj5*x12824*x12832))+(((-1.0)*r10*x12824*x12833))+(((-1.0)*x12824*x12839))+((r11*x12829))+(((-1.0)*x12823*x12825)));
evalcond[5]=(((cj3*x12838))+x12827+((x12823*x12835))+((r21*x12826))+(((-1.0)*cj2*x12828))+((r20*x12822*x12829))+(((-1.0)*cj5*r20*x12824)));
evalcond[6]=(((cj3*x12836))+((r01*x12826))+((x12823*x12834))+((r00*x12822*x12829))+(((-1.0)*x12840))+(((-1.0)*cj5*r00*x12824)));
evalcond[7]=((((-1.0)*r00*x12823))+(((-1.0)*cj5*x12824*x12834))+((r01*x12829))+(((-1.0)*x12824*x12836))+(((-1.0)*x12827))+((cj1*cj2))+(((-1.0)*r00*x12824*x12833)));
evalcond[8]=((((-1.0)*cj5*x12824*x12835))+(((-1.0)*r20*x12823))+(((-1.0)*r20*x12824*x12833))+(((-1.0)*x12824*x12838))+((r21*x12829))+(((-1.0)*x12840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x12841=((1.0)*sj5);
IkReal x12842=((((-1.0)*r01*x12841))+((cj5*r00)));
j4eval[0]=x12842;
j4eval[1]=IKsign(x12842);
j4eval[2]=((IKabs(((((-1.0)*r20*x12841))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x12843=((1.0)*cj5);
IkReal x12844=(((r21*sj5))+(((-1.0)*r20*x12843)));
j4eval[0]=x12844;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12843))))));
j4eval[2]=IKsign(x12844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x12845=cj5*cj5;
IkReal x12846=(cj3*r10);
IkReal x12847=(cj5*sj5);
IkReal x12848=(cj3*r11);
IkReal x12849=(((cj3*r12*r22))+((r21*x12845*x12848))+((r20*x12847*x12848))+((r20*x12846))+(((-1.0)*r20*x12845*x12846))+((r21*x12846*x12847)));
j4eval[0]=x12849;
j4eval[1]=IKsign(x12849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12850=((1.0)*sj5);
IkReal x12851=(((cj5*r00))+(((-1.0)*r01*x12850)));
j4eval[0]=x12851;
j4eval[1]=IKsign(x12851);
j4eval[2]=((IKabs(((((-1.0)*r20*x12850))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12852=((1.0)*cj5);
IkReal x12853=(((r21*sj5))+(((-1.0)*r20*x12852)));
j4eval[0]=x12853;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12852))))));
j4eval[2]=IKsign(x12853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12854=cj5*cj5;
IkReal x12855=r10*r10;
IkReal x12856=(cj5*r11);
IkReal x12857=(r10*sj5);
IkReal x12858=((r12*r12)+x12855+(((-1.0)*x12854*x12855))+((x12854*(r11*r11)))+(((2.0)*x12856*x12857)));
j4eval[0]=x12858;
j4eval[1]=IKsign(x12858);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12857))+(((-1.0)*x12856))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12859=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12859);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12859);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12860=((1.0)*sj5);
IkReal x12861=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x12861))+(((-1.0)*r00*x12860)));
j4eval[1]=((((-1.0)*r10*x12860))+(((-1.0)*r11*x12861)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12862=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12862);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12862);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12863=((1.0)*sj2);
CheckValue<IkReal> x12864=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x12864.valid){
continue;
}
CheckValue<IkReal> x12865=IKPowWithIntegerCheck(r22,-1);
if(!x12865.valid){
continue;
}
if( IKabs(((x12864.value)*(((((-1.0)*sj1*x12863))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12865.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x12863)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12864.value)*(((((-1.0)*sj1*x12863))+((cj1*cj2))))))+IKsqr(((x12865.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x12863))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12864.value)*(((((-1.0)*sj1*x12863))+((cj1*cj2))))), ((x12865.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x12863))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12866=IKcos(j4);
IkReal x12867=IKsin(j4);
IkReal x12868=(cj5*r01);
IkReal x12869=((1.0)*cj2);
IkReal x12870=(cj5*r11);
IkReal x12871=(r00*sj5);
IkReal x12872=(r10*sj5);
IkReal x12873=((1.0)*x12866);
IkReal x12874=((1.0)*x12867);
evalcond[0]=(r22*x12867);
evalcond[1]=((((-1.0)*x12871*x12873))+(((-1.0)*x12868*x12873)));
evalcond[2]=((((-1.0)*r22*x12873))+(((-1.0)*sj1*x12869))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*x12872*x12874))+(((-1.0)*x12870*x12874)));
evalcond[4]=((-1.0)+(((-1.0)*x12872*x12873))+(((-1.0)*x12870*x12873)));
evalcond[5]=((((-1.0)*x12871*x12874))+(((-1.0)*x12868*x12874))+((sj1*sj2))+(((-1.0)*cj1*x12869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12875=((1.0)*cj5);
IkReal x12876=((1.0)*sj5);
CheckValue<IkReal> x12877=IKPowWithIntegerCheck(((((-1.0)*r01*x12875))+(((-1.0)*r00*x12876))),-1);
if(!x12877.valid){
continue;
}
CheckValue<IkReal> x12878=IKPowWithIntegerCheck(((((-1.0)*r11*x12875))+(((-1.0)*r10*x12876))),-1);
if(!x12878.valid){
continue;
}
if( IKabs(((x12877.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12878.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12877.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(x12878.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12877.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), x12878.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12879=IKcos(j4);
IkReal x12880=IKsin(j4);
IkReal x12881=(cj5*r01);
IkReal x12882=((1.0)*cj2);
IkReal x12883=(cj5*r11);
IkReal x12884=(r00*sj5);
IkReal x12885=(r10*sj5);
IkReal x12886=((1.0)*x12879);
IkReal x12887=((1.0)*x12880);
evalcond[0]=(r22*x12880);
evalcond[1]=((((-1.0)*x12884*x12886))+(((-1.0)*x12881*x12886)));
evalcond[2]=((((-1.0)*r22*x12886))+(((-1.0)*sj1*x12882))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*x12883*x12887))+(((-1.0)*x12885*x12887)));
evalcond[4]=((-1.0)+(((-1.0)*x12883*x12886))+(((-1.0)*x12885*x12886)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*x12884*x12887))+(((-1.0)*x12881*x12887))+(((-1.0)*cj1*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12888=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12888);
rxp1_1=(px*r21);
rxp1_2=(r11*x12888);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12889=((1.0)*cj5);
IkReal x12890=((1.0)*sj5);
j4eval[0]=((((-1.0)*r20*x12890))+(((-1.0)*r21*x12889)));
j4eval[1]=((((-1.0)*r11*x12889))+(((-1.0)*r10*x12890)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12891=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12891);
rxp1_1=(px*r21);
rxp1_2=(r11*x12891);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12892=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x12892.valid){
continue;
}
CheckValue<IkReal> x12893=IKPowWithIntegerCheck(r02,-1);
if(!x12893.valid){
continue;
}
if( IKabs(((x12892.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12893.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12892.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12893.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12892.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12893.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12894=IKcos(j4);
IkReal x12895=IKsin(j4);
IkReal x12896=(cj5*r11);
IkReal x12897=((1.0)*cj1);
IkReal x12898=(r20*sj5);
IkReal x12899=(r10*sj5);
IkReal x12900=((1.0)*cj5*r21);
IkReal x12901=((1.0)*x12894);
IkReal x12902=((1.0)*x12895);
evalcond[0]=(r02*x12895);
evalcond[1]=((((-1.0)*cj2*x12897))+((sj1*sj2))+(((-1.0)*r02*x12901)));
evalcond[2]=((((-1.0)*x12894*x12900))+(((-1.0)*x12898*x12901)));
evalcond[3]=((((-1.0)*x12899*x12902))+(((-1.0)*x12896*x12902)));
evalcond[4]=((-1.0)+(((-1.0)*x12899*x12901))+(((-1.0)*x12896*x12901)));
evalcond[5]=((((-1.0)*x12898*x12902))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12897))+(((-1.0)*x12895*x12900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12903=((1.0)*cj5);
IkReal x12904=((1.0)*sj5);
CheckValue<IkReal> x12905=IKPowWithIntegerCheck(((((-1.0)*r20*x12904))+(((-1.0)*r21*x12903))),-1);
if(!x12905.valid){
continue;
}
CheckValue<IkReal> x12906=IKPowWithIntegerCheck(((((-1.0)*r10*x12904))+(((-1.0)*r11*x12903))),-1);
if(!x12906.valid){
continue;
}
if( IKabs(((x12905.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12906.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12905.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x12906.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12905.value)*((((cj2*sj1))+((cj1*sj2))))), x12906.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12907=IKcos(j4);
IkReal x12908=IKsin(j4);
IkReal x12909=(cj5*r11);
IkReal x12910=((1.0)*cj1);
IkReal x12911=(r20*sj5);
IkReal x12912=(r10*sj5);
IkReal x12913=((1.0)*cj5*r21);
IkReal x12914=((1.0)*x12907);
IkReal x12915=((1.0)*x12908);
evalcond[0]=(r02*x12908);
evalcond[1]=((((-1.0)*r02*x12914))+((sj1*sj2))+(((-1.0)*cj2*x12910)));
evalcond[2]=((((-1.0)*x12911*x12914))+(((-1.0)*x12907*x12913)));
evalcond[3]=((((-1.0)*x12909*x12915))+(((-1.0)*x12912*x12915)));
evalcond[4]=((-1.0)+(((-1.0)*x12909*x12914))+(((-1.0)*x12912*x12914)));
evalcond[5]=((((-1.0)*x12908*x12913))+(((-1.0)*x12911*x12915))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12916=cj5*cj5;
IkReal x12917=r10*r10;
IkReal x12918=(cj5*r11);
IkReal x12919=(r10*sj5);
CheckValue<IkReal> x12920 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12918))+(((-1.0)*x12919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12920.valid){
continue;
}
CheckValue<IkReal> x12921=IKPowWithIntegerCheck(IKsign((x12917+(r12*r12)+((x12916*(r11*r11)))+(((-1.0)*x12916*x12917))+(((2.0)*x12918*x12919)))),-1);
if(!x12921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12920.value)+(((1.5707963267949)*(x12921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12922=IKcos(j4);
IkReal x12923=IKsin(j4);
IkReal x12924=(r00*sj5);
IkReal x12925=(cj5*r01);
IkReal x12926=(r20*sj5);
IkReal x12927=((1.0)*cj2);
IkReal x12928=(cj5*r21);
IkReal x12929=(cj5*r11);
IkReal x12930=(r10*sj5);
IkReal x12931=((1.0)*x12922);
IkReal x12932=((1.0)*x12923);
evalcond[0]=((((-1.0)*x12928*x12931))+(((-1.0)*x12926*x12931))+((r22*x12923)));
evalcond[1]=((((-1.0)*x12924*x12931))+(((-1.0)*x12925*x12931))+((r02*x12923)));
evalcond[2]=((-1.0)+(((-1.0)*x12930*x12931))+(((-1.0)*x12929*x12931))+((r12*x12923)));
evalcond[3]=((((-1.0)*r12*x12931))+(((-1.0)*x12930*x12932))+(((-1.0)*x12929*x12932)));
evalcond[4]=((((-1.0)*x12924*x12932))+(((-1.0)*x12925*x12932))+(((-1.0)*r02*x12931))+((sj1*sj2))+(((-1.0)*cj1*x12927)));
evalcond[5]=((((-1.0)*x12928*x12932))+(((-1.0)*x12926*x12932))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12927))+(((-1.0)*r22*x12931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12933=((1.0)*cj5);
CheckValue<IkReal> x12934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12933))+((r21*sj5)))),-1);
if(!x12934.valid){
continue;
}
CheckValue<IkReal> x12935 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12933)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12934.value)))+(x12935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12936=IKcos(j4);
IkReal x12937=IKsin(j4);
IkReal x12938=(r00*sj5);
IkReal x12939=(cj5*r01);
IkReal x12940=(r20*sj5);
IkReal x12941=((1.0)*cj2);
IkReal x12942=(cj5*r21);
IkReal x12943=(cj5*r11);
IkReal x12944=(r10*sj5);
IkReal x12945=((1.0)*x12936);
IkReal x12946=((1.0)*x12937);
evalcond[0]=(((r22*x12937))+(((-1.0)*x12940*x12945))+(((-1.0)*x12942*x12945)));
evalcond[1]=((((-1.0)*x12939*x12945))+((r02*x12937))+(((-1.0)*x12938*x12945)));
evalcond[2]=((-1.0)+((r12*x12937))+(((-1.0)*x12944*x12945))+(((-1.0)*x12943*x12945)));
evalcond[3]=((((-1.0)*x12944*x12946))+(((-1.0)*x12943*x12946))+(((-1.0)*r12*x12945)));
evalcond[4]=((((-1.0)*x12939*x12946))+(((-1.0)*cj1*x12941))+((sj1*sj2))+(((-1.0)*r02*x12945))+(((-1.0)*x12938*x12946)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x12945))+(((-1.0)*sj1*x12941))+(((-1.0)*x12940*x12946))+(((-1.0)*x12942*x12946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12947=((1.0)*sj5);
CheckValue<IkReal> x12948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12947))+((cj5*r00)))),-1);
if(!x12948.valid){
continue;
}
CheckValue<IkReal> x12949 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12947))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12948.value)))+(x12949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12950=IKcos(j4);
IkReal x12951=IKsin(j4);
IkReal x12952=(r00*sj5);
IkReal x12953=(cj5*r01);
IkReal x12954=(r20*sj5);
IkReal x12955=((1.0)*cj2);
IkReal x12956=(cj5*r21);
IkReal x12957=(cj5*r11);
IkReal x12958=(r10*sj5);
IkReal x12959=((1.0)*x12950);
IkReal x12960=((1.0)*x12951);
evalcond[0]=((((-1.0)*x12954*x12959))+((r22*x12951))+(((-1.0)*x12956*x12959)));
evalcond[1]=((((-1.0)*x12952*x12959))+(((-1.0)*x12953*x12959))+((r02*x12951)));
evalcond[2]=((-1.0)+(((-1.0)*x12957*x12959))+(((-1.0)*x12958*x12959))+((r12*x12951)));
evalcond[3]=((((-1.0)*r12*x12959))+(((-1.0)*x12958*x12960))+(((-1.0)*x12957*x12960)));
evalcond[4]=((((-1.0)*x12953*x12960))+(((-1.0)*cj1*x12955))+(((-1.0)*x12952*x12960))+((sj1*sj2))+(((-1.0)*r02*x12959)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x12959))+(((-1.0)*x12954*x12960))+(((-1.0)*x12956*x12960))+(((-1.0)*sj1*x12955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12961=((1.0)*sj5);
IkReal x12962=((((-1.0)*r01*x12961))+((cj5*r00)));
j4eval[0]=x12962;
j4eval[1]=IKsign(x12962);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12961))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12963=((1.0)*cj5);
IkReal x12964=(((r21*sj5))+(((-1.0)*r20*x12963)));
j4eval[0]=x12964;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12963))+(((-1.0)*r00*sj5))))));
j4eval[2]=IKsign(x12964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12965=cj5*cj5;
IkReal x12966=r10*r10;
IkReal x12967=(cj5*r11);
IkReal x12968=(r10*sj5);
IkReal x12969=((((-1.0)*x12965*x12966))+x12966+(r12*r12)+(((2.0)*x12967*x12968))+((x12965*(r11*r11))));
j4eval[0]=x12969;
j4eval[1]=IKsign(x12969);
j4eval[2]=((IKabs(((((-1.0)*x12968))+(((-1.0)*x12967)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12970=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12970);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12970);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r00*sj5))+((cj5*r01)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12971=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12971);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12971);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r00*sj5))+((cj5*r01)));
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12972=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x12972.valid){
continue;
}
CheckValue<IkReal> x12973=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x12973.valid){
continue;
}
if( IKabs(((x12972.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12973.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12972.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(x12973.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12972.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), x12973.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12974=IKsin(j4);
IkReal x12975=IKcos(j4);
IkReal x12976=(cj5*r01);
IkReal x12977=((1.0)*cj2);
IkReal x12978=(cj5*r11);
IkReal x12979=((1.0)*x12975);
IkReal x12980=(sj5*x12974);
evalcond[0]=(r22*x12974);
evalcond[1]=(((r10*x12980))+((x12974*x12978)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12977))+((r22*x12975)));
evalcond[3]=((((-1.0)*x12976*x12979))+(((-1.0)*r00*sj5*x12979)));
evalcond[4]=((-1.0)+(((-1.0)*r10*sj5*x12979))+(((-1.0)*x12978*x12979)));
evalcond[5]=((((-1.0)*cj1*x12977))+((x12974*x12976))+((r00*x12980))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12981=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x12981.valid){
continue;
}
CheckValue<IkReal> x12982=IKPowWithIntegerCheck(r22,-1);
if(!x12982.valid){
continue;
}
if( IKabs(((x12981.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12982.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12981.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12982.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12981.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12982.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12983=IKsin(j4);
IkReal x12984=IKcos(j4);
IkReal x12985=(cj5*r01);
IkReal x12986=((1.0)*cj2);
IkReal x12987=(cj5*r11);
IkReal x12988=((1.0)*x12984);
IkReal x12989=(sj5*x12983);
evalcond[0]=(r22*x12983);
evalcond[1]=(((r10*x12989))+((x12983*x12987)));
evalcond[2]=(((r22*x12984))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12986)));
evalcond[3]=((((-1.0)*r00*sj5*x12988))+(((-1.0)*x12985*x12988)));
evalcond[4]=((-1.0)+(((-1.0)*r10*sj5*x12988))+(((-1.0)*x12987*x12988)));
evalcond[5]=((((-1.0)*cj1*x12986))+((r00*x12989))+((sj1*sj2))+((x12983*x12985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12990=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12990);
rxp1_1=(px*r21);
rxp1_2=(r11*x12990);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12991=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12991);
rxp1_1=(px*r21);
rxp1_2=(r11*x12991);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12992=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x12992.valid){
continue;
}
CheckValue<IkReal> x12993=IKPowWithIntegerCheck(r02,-1);
if(!x12993.valid){
continue;
}
if( IKabs(((x12992.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12993.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12992.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12993.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12992.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12993.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12994=IKsin(j4);
IkReal x12995=IKcos(j4);
IkReal x12996=((1.0)*cj1);
IkReal x12997=(sj5*x12994);
IkReal x12998=(cj5*x12994);
IkReal x12999=((1.0)*cj5*x12995);
IkReal x13000=((1.0)*sj5*x12995);
evalcond[0]=(r02*x12994);
evalcond[1]=((((-1.0)*cj2*x12996))+((sj1*sj2))+((r02*x12995)));
evalcond[2]=(((r10*x12997))+((r11*x12998)));
evalcond[3]=((((-1.0)*r20*x13000))+(((-1.0)*r21*x12999)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x12999))+(((-1.0)*r10*x13000)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x12998))+((r20*x12997))+(((-1.0)*sj2*x12996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13001=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x13001.valid){
continue;
}
CheckValue<IkReal> x13002=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x13002.valid){
continue;
}
if( IKabs(((x13001.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13002.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13001.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x13002.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13001.value)*((((cj2*sj1))+((cj1*sj2))))), x13002.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13003=IKsin(j4);
IkReal x13004=IKcos(j4);
IkReal x13005=((1.0)*cj1);
IkReal x13006=(sj5*x13003);
IkReal x13007=(cj5*x13003);
IkReal x13008=((1.0)*cj5*x13004);
IkReal x13009=((1.0)*sj5*x13004);
evalcond[0]=(r02*x13003);
evalcond[1]=((((-1.0)*cj2*x13005))+((sj1*sj2))+((r02*x13004)));
evalcond[2]=(((r11*x13007))+((r10*x13006)));
evalcond[3]=((((-1.0)*r21*x13008))+(((-1.0)*r20*x13009)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x13008))+(((-1.0)*r10*x13009)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x13006))+(((-1.0)*sj2*x13005))+((r21*x13007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13010=cj5*cj5;
IkReal x13011=r10*r10;
IkReal x13012=(cj5*r11);
IkReal x13013=(r10*sj5);
CheckValue<IkReal> x13014=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x13012*x13013))+(((-1.0)*x13010*x13011))+x13011+((x13010*(r11*r11))))),-1);
if(!x13014.valid){
continue;
}
CheckValue<IkReal> x13015 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x13012))+(((-1.0)*x13013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13014.value)))+(x13015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13016=IKsin(j4);
IkReal x13017=IKcos(j4);
IkReal x13018=(r20*sj5);
IkReal x13019=((1.0)*cj2);
IkReal x13020=(r00*sj5);
IkReal x13021=(cj5*r21);
IkReal x13022=(cj5*r01);
IkReal x13023=(r10*sj5);
IkReal x13024=(cj5*r11);
IkReal x13025=((1.0)*x13017);
evalcond[0]=(((x13016*x13023))+((x13016*x13024))+((r12*x13017)));
evalcond[1]=((((-1.0)*x13021*x13025))+(((-1.0)*x13018*x13025))+((r22*x13016)));
evalcond[2]=(((r02*x13016))+(((-1.0)*x13022*x13025))+(((-1.0)*x13020*x13025)));
evalcond[3]=((-1.0)+(((-1.0)*x13024*x13025))+((r12*x13016))+(((-1.0)*x13023*x13025)));
evalcond[4]=((((-1.0)*cj1*x13019))+((x13016*x13022))+((x13016*x13020))+((sj1*sj2))+((r02*x13017)));
evalcond[5]=(((x13016*x13018))+((x13016*x13021))+(((-1.0)*sj1*x13019))+(((-1.0)*cj1*sj2))+((r22*x13017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13026=((1.0)*cj5);
CheckValue<IkReal> x13027=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x13026)))),-1);
if(!x13027.valid){
continue;
}
CheckValue<IkReal> x13028 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13026)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13027.value)))+(x13028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13029=IKsin(j4);
IkReal x13030=IKcos(j4);
IkReal x13031=(r20*sj5);
IkReal x13032=((1.0)*cj2);
IkReal x13033=(r00*sj5);
IkReal x13034=(cj5*r21);
IkReal x13035=(cj5*r01);
IkReal x13036=(r10*sj5);
IkReal x13037=(cj5*r11);
IkReal x13038=((1.0)*x13030);
evalcond[0]=(((r12*x13030))+((x13029*x13037))+((x13029*x13036)));
evalcond[1]=((((-1.0)*x13031*x13038))+(((-1.0)*x13034*x13038))+((r22*x13029)));
evalcond[2]=((((-1.0)*x13035*x13038))+(((-1.0)*x13033*x13038))+((r02*x13029)));
evalcond[3]=((-1.0)+(((-1.0)*x13036*x13038))+(((-1.0)*x13037*x13038))+((r12*x13029)));
evalcond[4]=(((x13029*x13033))+((x13029*x13035))+((sj1*sj2))+(((-1.0)*cj1*x13032))+((r02*x13030)));
evalcond[5]=(((r22*x13030))+((x13029*x13031))+((x13029*x13034))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13039=((1.0)*sj5);
CheckValue<IkReal> x13040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13039))+((cj5*r00)))),-1);
if(!x13040.valid){
continue;
}
CheckValue<IkReal> x13041 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13039))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13040.value)))+(x13041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13042=IKsin(j4);
IkReal x13043=IKcos(j4);
IkReal x13044=(r20*sj5);
IkReal x13045=((1.0)*cj2);
IkReal x13046=(r00*sj5);
IkReal x13047=(cj5*r21);
IkReal x13048=(cj5*r01);
IkReal x13049=(r10*sj5);
IkReal x13050=(cj5*r11);
IkReal x13051=((1.0)*x13043);
evalcond[0]=(((x13042*x13049))+((x13042*x13050))+((r12*x13043)));
evalcond[1]=((((-1.0)*x13044*x13051))+(((-1.0)*x13047*x13051))+((r22*x13042)));
evalcond[2]=((((-1.0)*x13046*x13051))+((r02*x13042))+(((-1.0)*x13048*x13051)));
evalcond[3]=((-1.0)+(((-1.0)*x13049*x13051))+(((-1.0)*x13050*x13051))+((r12*x13042)));
evalcond[4]=(((r02*x13043))+((x13042*x13046))+((x13042*x13048))+((sj1*sj2))+(((-1.0)*cj1*x13045)));
evalcond[5]=((((-1.0)*sj1*x13045))+((x13042*x13047))+((x13042*x13044))+(((-1.0)*cj1*sj2))+((r22*x13043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13053 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13053)==0){
continue;
}
IkReal x13052=pow(x13053,-0.5);
CheckValue<IkReal> x13054 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13054.valid){
continue;
}
IkReal gconst64=((-1.0)*(x13054.value));
IkReal gconst65=(r20*x13052);
IkReal gconst66=(r21*x13052);
CheckValue<IkReal> x13055 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13055.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13055.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13058 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13058.valid){
continue;
}
IkReal x13056=((-1.0)*(x13058.value));
IkReal x13057=x13052;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst65;
cj5=gconst66;
j5=x13056;
IkReal gconst64=x13056;
IkReal gconst65=(r20*x13057);
IkReal gconst66=(r21*x13057);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13059=gconst65*gconst65;
IkReal x13060=gconst66*gconst66;
IkReal x13061=(cj3*r11);
IkReal x13062=(r10*sj3);
IkReal x13063=(cj3*r10);
IkReal x13064=(r01*x13060);
IkReal x13065=((1.0)*r11*sj3);
IkReal x13066=(r00*x13059);
IkReal x13067=(gconst65*gconst66*r00);
IkReal x13068=(gconst65*gconst66*r01);
CheckValue<IkReal> x13069=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x13063*x13068))+((x13063*x13066))+((x13061*x13064))+((x13061*x13067)))),-1);
if(!x13069.valid){
continue;
}
CheckValue<IkReal> x13070 = IKatan2WithCheck(IkReal((((x13062*x13064))+((x13062*x13067))+(((-1.0)*x13065*x13066))+(((-1.0)*x13065*x13068)))),IkReal((((gconst66*r02*x13062))+(((-1.0)*gconst65*r02*x13065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13069.value)))+(x13070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13071=IKcos(j4);
IkReal x13072=IKsin(j4);
IkReal x13073=(sj1*sj2);
IkReal x13074=((1.0)*cj1);
IkReal x13075=(gconst66*r11);
IkReal x13076=(gconst65*r00);
IkReal x13077=(gconst65*r20);
IkReal x13078=(gconst66*r01);
IkReal x13079=(gconst65*r11);
IkReal x13080=((1.0)*gconst66);
IkReal x13081=(cj2*sj1);
IkReal x13082=(gconst66*r21);
IkReal x13083=(gconst65*r10);
IkReal x13084=(cj3*gconst65);
IkReal x13085=(gconst65*sj3);
IkReal x13086=(cj2*x13074);
IkReal x13087=(cj3*x13072);
IkReal x13088=((1.0)*x13071);
IkReal x13089=(cj3*x13071);
IkReal x13090=((1.0)*sj3*x13072);
evalcond[0]=((((-1.0)*r21*x13071*x13080))+(((-1.0)*x13077*x13088))+((r22*x13072)));
evalcond[1]=((((-1.0)*x13076*x13088))+((r02*x13072))+(((-1.0)*x13078*x13088)));
evalcond[2]=((-1.0)+(((-1.0)*x13083*x13088))+(((-1.0)*x13075*x13088))+((r12*x13072)));
evalcond[3]=(((x13083*x13087))+((x13075*x13087))+(((-1.0)*r10*sj3*x13080))+((r12*x13089))+((sj3*x13079)));
evalcond[4]=((((-1.0)*x13083*x13090))+(((-1.0)*x13075*x13090))+(((-1.0)*cj3*r10*x13080))+(((-1.0)*r12*sj3*x13088))+((cj3*x13079)));
evalcond[5]=((((-1.0)*r00*sj3*x13080))+((r02*x13089))+((cj1*sj2))+((x13078*x13087))+x13081+((r01*x13085))+((x13076*x13087)));
evalcond[6]=((((-1.0)*x13086))+(((-1.0)*r20*sj3*x13080))+((x13077*x13087))+((r22*x13089))+x13073+((x13082*x13087))+((r21*x13085)));
evalcond[7]=((((-1.0)*x13086))+(((-1.0)*cj3*r00*x13080))+(((-1.0)*x13076*x13090))+(((-1.0)*r02*sj3*x13088))+x13073+((r01*x13084))+(((-1.0)*x13078*x13090)));
evalcond[8]=((((-1.0)*sj2*x13074))+(((-1.0)*x13077*x13090))+(((-1.0)*r22*sj3*x13088))+(((-1.0)*r21*sj3*x13072*x13080))+(((-1.0)*x13081))+(((-1.0)*cj3*r20*x13080))+((r21*x13084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13091=((1.0)*gconst65);
CheckValue<IkReal> x13092 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13091))+(((-1.0)*gconst66*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13092.valid){
continue;
}
CheckValue<IkReal> x13093=IKPowWithIntegerCheck(IKsign((((gconst66*r00))+(((-1.0)*r01*x13091)))),-1);
if(!x13093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13092.value)+(((1.5707963267949)*(x13093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13094=IKcos(j4);
IkReal x13095=IKsin(j4);
IkReal x13096=(sj1*sj2);
IkReal x13097=((1.0)*cj1);
IkReal x13098=(gconst66*r11);
IkReal x13099=(gconst65*r00);
IkReal x13100=(gconst65*r20);
IkReal x13101=(gconst66*r01);
IkReal x13102=(gconst65*r11);
IkReal x13103=((1.0)*gconst66);
IkReal x13104=(cj2*sj1);
IkReal x13105=(gconst66*r21);
IkReal x13106=(gconst65*r10);
IkReal x13107=(cj3*gconst65);
IkReal x13108=(gconst65*sj3);
IkReal x13109=(cj2*x13097);
IkReal x13110=(cj3*x13095);
IkReal x13111=((1.0)*x13094);
IkReal x13112=(cj3*x13094);
IkReal x13113=((1.0)*sj3*x13095);
evalcond[0]=((((-1.0)*x13100*x13111))+((r22*x13095))+(((-1.0)*r21*x13094*x13103)));
evalcond[1]=(((r02*x13095))+(((-1.0)*x13099*x13111))+(((-1.0)*x13101*x13111)));
evalcond[2]=((-1.0)+((r12*x13095))+(((-1.0)*x13098*x13111))+(((-1.0)*x13106*x13111)));
evalcond[3]=(((r12*x13112))+((sj3*x13102))+((x13098*x13110))+(((-1.0)*r10*sj3*x13103))+((x13106*x13110)));
evalcond[4]=((((-1.0)*r12*sj3*x13111))+((cj3*x13102))+(((-1.0)*cj3*r10*x13103))+(((-1.0)*x13098*x13113))+(((-1.0)*x13106*x13113)));
evalcond[5]=((((-1.0)*r00*sj3*x13103))+((r01*x13108))+((r02*x13112))+((cj1*sj2))+((x13099*x13110))+((x13101*x13110))+x13104);
evalcond[6]=(((r22*x13112))+(((-1.0)*r20*sj3*x13103))+(((-1.0)*x13109))+((x13100*x13110))+x13096+((r21*x13108))+((x13105*x13110)));
evalcond[7]=(((r01*x13107))+(((-1.0)*x13109))+x13096+(((-1.0)*cj3*r00*x13103))+(((-1.0)*x13099*x13113))+(((-1.0)*r02*sj3*x13111))+(((-1.0)*x13101*x13113)));
evalcond[8]=((((-1.0)*cj3*r20*x13103))+(((-1.0)*x13100*x13113))+(((-1.0)*x13104))+(((-1.0)*r22*sj3*x13111))+((r21*x13107))+(((-1.0)*r21*sj3*x13095*x13103))+(((-1.0)*sj2*x13097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13116 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13116)==0){
continue;
}
IkReal x13114=pow(x13116,-0.5);
IkReal x13115=((-1.0)*x13114);
CheckValue<IkReal> x13117 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13117.valid){
continue;
}
IkReal gconst67=((3.14159265358979)+(((-1.0)*(x13117.value))));
IkReal gconst68=(r20*x13115);
IkReal gconst69=(r21*x13115);
CheckValue<IkReal> x13118 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13118.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13118.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13122 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13122.valid){
continue;
}
IkReal x13119=((1.0)*(x13122.value));
IkReal x13120=x13114;
IkReal x13121=((-1.0)*x13120);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst68;
cj5=gconst69;
j5=((3.14159265)+(((-1.0)*x13119)));
IkReal gconst67=((3.14159265358979)+(((-1.0)*x13119)));
IkReal gconst68=(r20*x13121);
IkReal gconst69=(r21*x13121);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13126 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13126.valid){
continue;
}
IkReal x13123=((1.0)*(x13126.value));
IkReal x13124=x13114;
IkReal x13125=((-1.0)*x13124);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst68;
cj5=gconst69;
j5=((3.14159265)+(((-1.0)*x13123)));
IkReal gconst67=((3.14159265358979)+(((-1.0)*x13123)));
IkReal gconst68=(r20*x13125);
IkReal gconst69=(r21*x13125);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13130 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13130.valid){
continue;
}
IkReal x13127=((1.0)*(x13130.value));
IkReal x13128=x13114;
IkReal x13129=((-1.0)*x13128);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst68;
cj5=gconst69;
j5=((3.14159265)+(((-1.0)*x13127)));
IkReal gconst67=((3.14159265358979)+(((-1.0)*x13127)));
IkReal gconst68=(r20*x13129);
IkReal gconst69=(r21*x13129);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13131=gconst69*gconst69;
IkReal x13132=gconst68*gconst68;
IkReal x13133=(cj3*r11);
IkReal x13134=(gconst68*gconst69);
IkReal x13135=(cj3*r10);
IkReal x13136=(r10*sj3);
IkReal x13137=((1.0)*r11*sj3);
IkReal x13138=(r20*x13132);
IkReal x13139=(r21*x13131);
CheckValue<IkReal> x13140=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r20*x13133*x13134))+((x13135*x13138))+((x13133*x13139))+((r21*x13134*x13135)))),-1);
if(!x13140.valid){
continue;
}
CheckValue<IkReal> x13141 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13134*x13137))+((r20*x13134*x13136))+(((-1.0)*x13137*x13138))+((x13136*x13139)))),IkReal(((((-1.0)*gconst68*r22*x13137))+((gconst69*r22*x13136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13140.value)))+(x13141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13142=IKcos(j4);
IkReal x13143=IKsin(j4);
IkReal x13144=(sj1*sj2);
IkReal x13145=(cj3*r01);
IkReal x13146=(gconst68*sj3);
IkReal x13147=((1.0)*r20);
IkReal x13148=((1.0)*sj3);
IkReal x13149=(gconst69*r10);
IkReal x13150=((1.0)*cj2);
IkReal x13151=((1.0)*r00);
IkReal x13152=(cj1*sj2);
IkReal x13153=(cj3*gconst69);
IkReal x13154=(cj3*r11);
IkReal x13155=(cj3*gconst68);
IkReal x13156=(cj1*x13150);
IkReal x13157=(gconst69*x13143);
IkReal x13158=(gconst68*x13142);
IkReal x13159=(r02*x13142);
IkReal x13160=(r22*x13142);
IkReal x13161=(r12*x13142);
IkReal x13162=(r10*x13143);
IkReal x13163=((1.0)*gconst69*x13142);
evalcond[0]=((((-1.0)*r21*x13163))+((r22*x13143))+(((-1.0)*x13147*x13158)));
evalcond[1]=((((-1.0)*x13151*x13158))+(((-1.0)*r01*x13163))+((r02*x13143)));
evalcond[2]=((-1.0)+((r12*x13143))+(((-1.0)*r11*x13163))+(((-1.0)*r10*x13158)));
evalcond[3]=(((x13155*x13162))+((r11*x13143*x13153))+((cj3*x13161))+((r11*x13146))+(((-1.0)*x13148*x13149)));
evalcond[4]=(((gconst68*x13154))+(((-1.0)*x13148*x13161))+(((-1.0)*cj3*x13149))+(((-1.0)*r11*x13148*x13157))+(((-1.0)*x13146*x13162)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst69*r00*x13148))+((r00*x13143*x13155))+((cj3*x13159))+((x13145*x13157))+x13152+((r01*x13146)));
evalcond[6]=((((-1.0)*x13156))+((cj3*x13160))+((r20*x13143*x13155))+((r21*x13143*x13153))+(((-1.0)*gconst69*sj3*x13147))+x13144+((r21*x13146)));
evalcond[7]=((((-1.0)*x13151*x13153))+(((-1.0)*r01*x13148*x13157))+(((-1.0)*x13148*x13159))+(((-1.0)*x13156))+((gconst68*x13145))+(((-1.0)*x13143*x13146*x13151))+x13144);
evalcond[8]=((((-1.0)*sj1*x13150))+((r21*x13155))+(((-1.0)*r21*x13148*x13157))+(((-1.0)*x13147*x13153))+(((-1.0)*x13148*x13160))+(((-1.0)*x13143*x13146*x13147))+(((-1.0)*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13164=((1.0)*gconst69);
CheckValue<IkReal> x13165 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13164))+(((-1.0)*gconst68*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13165.valid){
continue;
}
CheckValue<IkReal> x13166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13164))+((gconst68*r21)))),-1);
if(!x13166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13165.value)+(((1.5707963267949)*(x13166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13167=IKcos(j4);
IkReal x13168=IKsin(j4);
IkReal x13169=(sj1*sj2);
IkReal x13170=(cj3*r01);
IkReal x13171=(gconst68*sj3);
IkReal x13172=((1.0)*r20);
IkReal x13173=((1.0)*sj3);
IkReal x13174=(gconst69*r10);
IkReal x13175=((1.0)*cj2);
IkReal x13176=((1.0)*r00);
IkReal x13177=(cj1*sj2);
IkReal x13178=(cj3*gconst69);
IkReal x13179=(cj3*r11);
IkReal x13180=(cj3*gconst68);
IkReal x13181=(cj1*x13175);
IkReal x13182=(gconst69*x13168);
IkReal x13183=(gconst68*x13167);
IkReal x13184=(r02*x13167);
IkReal x13185=(r22*x13167);
IkReal x13186=(r12*x13167);
IkReal x13187=(r10*x13168);
IkReal x13188=((1.0)*gconst69*x13167);
evalcond[0]=(((r22*x13168))+(((-1.0)*r21*x13188))+(((-1.0)*x13172*x13183)));
evalcond[1]=(((r02*x13168))+(((-1.0)*x13176*x13183))+(((-1.0)*r01*x13188)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x13188))+(((-1.0)*r10*x13183))+((r12*x13168)));
evalcond[3]=(((cj3*x13186))+(((-1.0)*x13173*x13174))+((x13180*x13187))+((r11*x13168*x13178))+((r11*x13171)));
evalcond[4]=((((-1.0)*r11*x13173*x13182))+(((-1.0)*x13171*x13187))+(((-1.0)*cj3*x13174))+(((-1.0)*x13173*x13186))+((gconst68*x13179)));
evalcond[5]=(((cj3*x13184))+((x13170*x13182))+((r01*x13171))+((cj2*sj1))+(((-1.0)*gconst69*r00*x13173))+((r00*x13168*x13180))+x13177);
evalcond[6]=(((cj3*x13185))+(((-1.0)*x13181))+((r20*x13168*x13180))+((r21*x13168*x13178))+(((-1.0)*gconst69*sj3*x13172))+((r21*x13171))+x13169);
evalcond[7]=((((-1.0)*x13181))+(((-1.0)*r01*x13173*x13182))+(((-1.0)*x13173*x13184))+(((-1.0)*x13168*x13171*x13176))+x13169+(((-1.0)*x13176*x13178))+((gconst68*x13170)));
evalcond[8]=((((-1.0)*x13172*x13178))+((r21*x13180))+(((-1.0)*sj1*x13175))+(((-1.0)*x13177))+(((-1.0)*x13173*x13185))+(((-1.0)*x13168*x13171*x13172))+(((-1.0)*r21*x13173*x13182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13189=((1.0)*gconst68);
CheckValue<IkReal> x13190=IKPowWithIntegerCheck(IKsign((((gconst69*r00))+(((-1.0)*r01*x13189)))),-1);
if(!x13190.valid){
continue;
}
CheckValue<IkReal> x13191 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13189))+(((-1.0)*gconst69*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13190.value)))+(x13191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13192=IKcos(j4);
IkReal x13193=IKsin(j4);
IkReal x13194=(sj1*sj2);
IkReal x13195=(cj3*r01);
IkReal x13196=(gconst68*sj3);
IkReal x13197=((1.0)*r20);
IkReal x13198=((1.0)*sj3);
IkReal x13199=(gconst69*r10);
IkReal x13200=((1.0)*cj2);
IkReal x13201=((1.0)*r00);
IkReal x13202=(cj1*sj2);
IkReal x13203=(cj3*gconst69);
IkReal x13204=(cj3*r11);
IkReal x13205=(cj3*gconst68);
IkReal x13206=(cj1*x13200);
IkReal x13207=(gconst69*x13193);
IkReal x13208=(gconst68*x13192);
IkReal x13209=(r02*x13192);
IkReal x13210=(r22*x13192);
IkReal x13211=(r12*x13192);
IkReal x13212=(r10*x13193);
IkReal x13213=((1.0)*gconst69*x13192);
evalcond[0]=((((-1.0)*r21*x13213))+(((-1.0)*x13197*x13208))+((r22*x13193)));
evalcond[1]=(((r02*x13193))+(((-1.0)*x13201*x13208))+(((-1.0)*r01*x13213)));
evalcond[2]=((-1.0)+((r12*x13193))+(((-1.0)*r10*x13208))+(((-1.0)*r11*x13213)));
evalcond[3]=((((-1.0)*x13198*x13199))+((x13205*x13212))+((r11*x13196))+((cj3*x13211))+((r11*x13193*x13203)));
evalcond[4]=((((-1.0)*x13196*x13212))+(((-1.0)*r11*x13198*x13207))+((gconst68*x13204))+(((-1.0)*x13198*x13211))+(((-1.0)*cj3*x13199)));
evalcond[5]=(((cj2*sj1))+((r00*x13193*x13205))+((r01*x13196))+(((-1.0)*gconst69*r00*x13198))+((x13195*x13207))+((cj3*x13209))+x13202);
evalcond[6]=(((r20*x13193*x13205))+(((-1.0)*gconst69*sj3*x13197))+((r21*x13196))+((cj3*x13210))+x13194+(((-1.0)*x13206))+((r21*x13193*x13203)));
evalcond[7]=((((-1.0)*x13198*x13209))+((gconst68*x13195))+(((-1.0)*x13193*x13196*x13201))+(((-1.0)*r01*x13198*x13207))+(((-1.0)*x13201*x13203))+x13194+(((-1.0)*x13206)));
evalcond[8]=((((-1.0)*x13193*x13196*x13197))+((r21*x13205))+(((-1.0)*x13198*x13210))+(((-1.0)*r21*x13198*x13207))+(((-1.0)*x13202))+(((-1.0)*sj1*x13200))+(((-1.0)*x13197*x13203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13216 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13216)==0){
continue;
}
IkReal x13214=pow(x13216,-0.5);
IkReal x13215=((-1.0)*x13214);
CheckValue<IkReal> x13217 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x13217.valid){
continue;
}
IkReal gconst70=((-1.0)*(x13217.value));
IkReal gconst71=(r00*x13215);
IkReal gconst72=(r01*x13215);
CheckValue<IkReal> x13218 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x13218.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13218.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13222 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x13222.valid){
continue;
}
IkReal x13219=((-1.0)*(x13222.value));
IkReal x13220=x13214;
IkReal x13221=((-1.0)*x13220);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst71;
cj5=gconst72;
j5=x13219;
IkReal gconst70=x13219;
IkReal gconst71=(r00*x13221);
IkReal gconst72=(r01*x13221);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13223=gconst72*gconst72;
IkReal x13224=gconst71*gconst71;
IkReal x13225=(cj3*r10);
IkReal x13226=(gconst71*r20);
IkReal x13227=(cj3*r11);
IkReal x13228=((1.0)*r11*sj3);
IkReal x13229=(r20*x13224);
IkReal x13230=(gconst72*r10*sj3);
IkReal x13231=(gconst71*gconst72*r21);
IkReal x13232=(r21*x13223);
CheckValue<IkReal> x13233 = IKatan2WithCheck(IkReal(((((-1.0)*x13228*x13231))+((r10*sj3*x13232))+(((-1.0)*x13228*x13229))+((x13226*x13230)))),IkReal(((((-1.0)*gconst71*r22*x13228))+((r22*x13230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13233.valid){
continue;
}
CheckValue<IkReal> x13234=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x13225*x13229))+((x13225*x13231))+((x13227*x13232))+((gconst72*x13226*x13227)))),-1);
if(!x13234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13233.value)+(((1.5707963267949)*(x13234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13235=IKcos(j4);
IkReal x13236=IKsin(j4);
IkReal x13237=(sj1*sj2);
IkReal x13238=(gconst72*r21);
IkReal x13239=(gconst71*r10);
IkReal x13240=(gconst71*r20);
IkReal x13241=((1.0)*r00);
IkReal x13242=(cj3*gconst72);
IkReal x13243=((1.0)*cj2);
IkReal x13244=(gconst72*r01);
IkReal x13245=(gconst71*r21);
IkReal x13246=(cj3*gconst71);
IkReal x13247=(cj1*sj2);
IkReal x13248=((1.0)*r20);
IkReal x13249=(gconst71*r00);
IkReal x13250=(gconst71*sj3);
IkReal x13251=((1.0)*r10);
IkReal x13252=(gconst72*sj3);
IkReal x13253=(cj1*x13243);
IkReal x13254=(cj3*x13236);
IkReal x13255=((1.0)*gconst72*r11);
IkReal x13256=(sj3*x13236);
IkReal x13257=((1.0)*x13235);
IkReal x13258=(cj3*x13235);
evalcond[0]=(((r22*x13236))+(((-1.0)*x13238*x13257))+(((-1.0)*x13240*x13257)));
evalcond[1]=(((r02*x13236))+(((-1.0)*x13244*x13257))+(((-1.0)*gconst71*x13235*x13241)));
evalcond[2]=((-1.0)+(((-1.0)*x13239*x13257))+(((-1.0)*x13235*x13255))+((r12*x13236)));
evalcond[3]=(((r12*x13258))+((x13239*x13254))+((r11*x13236*x13242))+((r11*x13250))+(((-1.0)*x13251*x13252)));
evalcond[4]=((((-1.0)*r11*x13236*x13252))+(((-1.0)*x13239*x13256))+(((-1.0)*r12*sj3*x13257))+((r11*x13246))+(((-1.0)*x13242*x13251)));
evalcond[5]=(((cj2*sj1))+((r00*x13236*x13246))+((r02*x13258))+((r01*x13236*x13242))+((r01*x13250))+x13247+(((-1.0)*x13241*x13252)));
evalcond[6]=(((x13238*x13254))+((r22*x13258))+(((-1.0)*x13248*x13252))+(((-1.0)*x13253))+((x13240*x13254))+x13237+((sj3*x13245)));
evalcond[7]=((((-1.0)*r02*sj3*x13257))+(((-1.0)*x13244*x13256))+(((-1.0)*x13236*x13241*x13250))+((r01*x13246))+(((-1.0)*x13253))+x13237+(((-1.0)*x13241*x13242)));
evalcond[8]=((((-1.0)*r22*sj3*x13257))+(((-1.0)*x13247))+((cj3*x13245))+(((-1.0)*x13242*x13248))+(((-1.0)*x13238*x13256))+(((-1.0)*sj1*x13243))+(((-1.0)*x13240*x13256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13259=((1.0)*gconst72);
CheckValue<IkReal> x13260=IKPowWithIntegerCheck(IKsign((((gconst71*r21))+(((-1.0)*r20*x13259)))),-1);
if(!x13260.valid){
continue;
}
CheckValue<IkReal> x13261 = IKatan2WithCheck(IkReal(((((-1.0)*gconst71*r00))+(((-1.0)*r01*x13259)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13260.value)))+(x13261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13262=IKcos(j4);
IkReal x13263=IKsin(j4);
IkReal x13264=(sj1*sj2);
IkReal x13265=(gconst72*r21);
IkReal x13266=(gconst71*r10);
IkReal x13267=(gconst71*r20);
IkReal x13268=((1.0)*r00);
IkReal x13269=(cj3*gconst72);
IkReal x13270=((1.0)*cj2);
IkReal x13271=(gconst72*r01);
IkReal x13272=(gconst71*r21);
IkReal x13273=(cj3*gconst71);
IkReal x13274=(cj1*sj2);
IkReal x13275=((1.0)*r20);
IkReal x13276=(gconst71*r00);
IkReal x13277=(gconst71*sj3);
IkReal x13278=((1.0)*r10);
IkReal x13279=(gconst72*sj3);
IkReal x13280=(cj1*x13270);
IkReal x13281=(cj3*x13263);
IkReal x13282=((1.0)*gconst72*r11);
IkReal x13283=(sj3*x13263);
IkReal x13284=((1.0)*x13262);
IkReal x13285=(cj3*x13262);
evalcond[0]=((((-1.0)*x13265*x13284))+(((-1.0)*x13267*x13284))+((r22*x13263)));
evalcond[1]=((((-1.0)*x13271*x13284))+(((-1.0)*gconst71*x13262*x13268))+((r02*x13263)));
evalcond[2]=((-1.0)+((r12*x13263))+(((-1.0)*x13262*x13282))+(((-1.0)*x13266*x13284)));
evalcond[3]=((((-1.0)*x13278*x13279))+((r12*x13285))+((r11*x13277))+((x13266*x13281))+((r11*x13263*x13269)));
evalcond[4]=((((-1.0)*x13269*x13278))+((r11*x13273))+(((-1.0)*x13266*x13283))+(((-1.0)*r12*sj3*x13284))+(((-1.0)*r11*x13263*x13279)));
evalcond[5]=((((-1.0)*x13268*x13279))+((cj2*sj1))+((r01*x13263*x13269))+((r01*x13277))+((r02*x13285))+((r00*x13263*x13273))+x13274);
evalcond[6]=((((-1.0)*x13275*x13279))+((sj3*x13272))+((x13265*x13281))+((r22*x13285))+x13264+((x13267*x13281))+(((-1.0)*x13280)));
evalcond[7]=((((-1.0)*x13263*x13268*x13277))+((r01*x13273))+x13264+(((-1.0)*r02*sj3*x13284))+(((-1.0)*x13268*x13269))+(((-1.0)*x13280))+(((-1.0)*x13271*x13283)));
evalcond[8]=((((-1.0)*x13269*x13275))+(((-1.0)*x13267*x13283))+(((-1.0)*sj1*x13270))+(((-1.0)*x13274))+(((-1.0)*r22*sj3*x13284))+((cj3*x13272))+(((-1.0)*x13265*x13283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13288 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13288)==0){
continue;
}
IkReal x13286=pow(x13288,-0.5);
IkReal x13287=((1.0)*x13286);
CheckValue<IkReal> x13289 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x13289.valid){
continue;
}
IkReal gconst73=((3.14159265358979)+(((-1.0)*(x13289.value))));
IkReal gconst74=(r00*x13287);
IkReal gconst75=(r01*x13287);
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13290.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13294 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x13294.valid){
continue;
}
IkReal x13291=((1.0)*(x13294.value));
IkReal x13292=x13286;
IkReal x13293=((1.0)*x13292);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst74;
cj5=gconst75;
j5=((3.14159265)+(((-1.0)*x13291)));
IkReal gconst73=((3.14159265358979)+(((-1.0)*x13291)));
IkReal gconst74=(r00*x13293);
IkReal gconst75=(r01*x13293);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13298 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x13298.valid){
continue;
}
IkReal x13295=((1.0)*(x13298.value));
IkReal x13296=x13286;
IkReal x13297=((1.0)*x13296);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst74;
cj5=gconst75;
j5=((3.14159265)+(((-1.0)*x13295)));
IkReal gconst73=((3.14159265358979)+(((-1.0)*x13295)));
IkReal gconst74=(r00*x13297);
IkReal gconst75=(r01*x13297);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13299=gconst75*gconst75;
IkReal x13300=gconst74*gconst74;
IkReal x13301=(r22*sj3);
IkReal x13302=(gconst75*r10);
IkReal x13303=(cj3*r11);
IkReal x13304=((1.0)*r11);
IkReal x13305=(r20*sj3);
IkReal x13306=(gconst74*r21);
IkReal x13307=(r21*x13299);
CheckValue<IkReal> x13308 = IKatan2WithCheck(IkReal((((gconst74*x13302*x13305))+((r10*sj3*x13307))+(((-1.0)*gconst75*sj3*x13304*x13306))+(((-1.0)*x13300*x13304*x13305)))),IkReal(((((-1.0)*gconst74*x13301*x13304))+((x13301*x13302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13308.valid){
continue;
}
CheckValue<IkReal> x13309=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((gconst74*gconst75*r20*x13303))+((cj3*r10*r20*x13300))+((x13303*x13307))+((cj3*x13302*x13306)))),-1);
if(!x13309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13308.value)+(((1.5707963267949)*(x13309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13310=IKcos(j4);
IkReal x13311=IKsin(j4);
IkReal x13312=(sj1*sj2);
IkReal x13313=((1.0)*gconst75);
IkReal x13314=(cj3*r20);
IkReal x13315=(cj3*gconst74);
IkReal x13316=((1.0)*cj2);
IkReal x13317=(cj1*sj2);
IkReal x13318=(gconst74*sj3);
IkReal x13319=((1.0)*gconst74);
IkReal x13320=(cj1*x13316);
IkReal x13321=(sj3*x13311);
IkReal x13322=(r20*x13319);
IkReal x13323=(cj3*x13310);
IkReal x13324=((1.0)*sj3*x13310);
IkReal x13325=(cj3*gconst75*x13311);
IkReal x13326=(x13310*x13319);
evalcond[0]=((((-1.0)*r21*x13310*x13313))+((r22*x13311))+(((-1.0)*x13310*x13322)));
evalcond[1]=((((-1.0)*r00*x13326))+(((-1.0)*r01*x13310*x13313))+((r02*x13311)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13326))+(((-1.0)*r11*x13310*x13313))+((r12*x13311)));
evalcond[3]=(((r12*x13323))+((r11*x13318))+((r11*x13325))+(((-1.0)*r10*sj3*x13313))+((r10*x13311*x13315)));
evalcond[4]=((((-1.0)*r11*x13313*x13321))+(((-1.0)*r12*x13324))+((r11*x13315))+(((-1.0)*cj3*r10*x13313))+(((-1.0)*r10*x13311*x13318)));
evalcond[5]=(((cj2*sj1))+((r00*x13311*x13315))+((r02*x13323))+((r01*x13318))+(((-1.0)*r00*sj3*x13313))+((r01*x13325))+x13317);
evalcond[6]=((((-1.0)*r20*sj3*x13313))+((gconst74*x13311*x13314))+((r21*x13325))+(((-1.0)*x13320))+((r21*x13318))+x13312+((r22*x13323)));
evalcond[7]=((((-1.0)*r01*x13313*x13321))+(((-1.0)*r02*x13324))+(((-1.0)*cj3*r00*x13313))+(((-1.0)*r00*x13311*x13318))+((r01*x13315))+(((-1.0)*x13320))+x13312);
evalcond[8]=((((-1.0)*r21*x13313*x13321))+(((-1.0)*sj1*x13316))+(((-1.0)*r22*x13324))+(((-1.0)*x13313*x13314))+(((-1.0)*r20*x13311*x13318))+((r21*x13315))+(((-1.0)*x13317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13327=((1.0)*gconst75);
CheckValue<IkReal> x13328 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13327))+(((-1.0)*gconst74*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13328.valid){
continue;
}
CheckValue<IkReal> x13329=IKPowWithIntegerCheck(IKsign((((gconst74*r21))+(((-1.0)*r20*x13327)))),-1);
if(!x13329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13328.value)+(((1.5707963267949)*(x13329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13330=IKcos(j4);
IkReal x13331=IKsin(j4);
IkReal x13332=(sj1*sj2);
IkReal x13333=((1.0)*gconst75);
IkReal x13334=(cj3*r20);
IkReal x13335=(cj3*gconst74);
IkReal x13336=((1.0)*cj2);
IkReal x13337=(cj1*sj2);
IkReal x13338=(gconst74*sj3);
IkReal x13339=((1.0)*gconst74);
IkReal x13340=(cj1*x13336);
IkReal x13341=(sj3*x13331);
IkReal x13342=(r20*x13339);
IkReal x13343=(cj3*x13330);
IkReal x13344=((1.0)*sj3*x13330);
IkReal x13345=(cj3*gconst75*x13331);
IkReal x13346=(x13330*x13339);
evalcond[0]=(((r22*x13331))+(((-1.0)*x13330*x13342))+(((-1.0)*r21*x13330*x13333)));
evalcond[1]=((((-1.0)*r01*x13330*x13333))+((r02*x13331))+(((-1.0)*r00*x13346)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x13330*x13333))+(((-1.0)*r10*x13346))+((r12*x13331)));
evalcond[3]=(((r10*x13331*x13335))+((r12*x13343))+((r11*x13345))+(((-1.0)*r10*sj3*x13333))+((r11*x13338)));
evalcond[4]=((((-1.0)*r11*x13333*x13341))+(((-1.0)*r12*x13344))+(((-1.0)*r10*x13331*x13338))+(((-1.0)*cj3*r10*x13333))+((r11*x13335)));
evalcond[5]=(((cj2*sj1))+((r00*x13331*x13335))+((r01*x13338))+((r02*x13343))+((r01*x13345))+(((-1.0)*r00*sj3*x13333))+x13337);
evalcond[6]=(((gconst74*x13331*x13334))+(((-1.0)*x13340))+(((-1.0)*r20*sj3*x13333))+((r22*x13343))+((r21*x13345))+((r21*x13338))+x13332);
evalcond[7]=((((-1.0)*r00*x13331*x13338))+(((-1.0)*x13340))+(((-1.0)*r02*x13344))+((r01*x13335))+(((-1.0)*cj3*r00*x13333))+(((-1.0)*r01*x13333*x13341))+x13332);
evalcond[8]=((((-1.0)*sj1*x13336))+(((-1.0)*x13337))+(((-1.0)*r21*x13333*x13341))+(((-1.0)*x13333*x13334))+((r21*x13335))+(((-1.0)*r22*x13344))+(((-1.0)*r20*x13331*x13338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13347=((1.0)*gconst74);
CheckValue<IkReal> x13348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13347))+((gconst75*r00)))),-1);
if(!x13348.valid){
continue;
}
CheckValue<IkReal> x13349 = IKatan2WithCheck(IkReal(((((-1.0)*gconst75*r21))+(((-1.0)*r20*x13347)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13348.value)))+(x13349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13350=IKcos(j4);
IkReal x13351=IKsin(j4);
IkReal x13352=(sj1*sj2);
IkReal x13353=((1.0)*gconst75);
IkReal x13354=(cj3*r20);
IkReal x13355=(cj3*gconst74);
IkReal x13356=((1.0)*cj2);
IkReal x13357=(cj1*sj2);
IkReal x13358=(gconst74*sj3);
IkReal x13359=((1.0)*gconst74);
IkReal x13360=(cj1*x13356);
IkReal x13361=(sj3*x13351);
IkReal x13362=(r20*x13359);
IkReal x13363=(cj3*x13350);
IkReal x13364=((1.0)*sj3*x13350);
IkReal x13365=(cj3*gconst75*x13351);
IkReal x13366=(x13350*x13359);
evalcond[0]=(((r22*x13351))+(((-1.0)*x13350*x13362))+(((-1.0)*r21*x13350*x13353)));
evalcond[1]=(((r02*x13351))+(((-1.0)*r00*x13366))+(((-1.0)*r01*x13350*x13353)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13366))+((r12*x13351))+(((-1.0)*r11*x13350*x13353)));
evalcond[3]=(((r12*x13363))+(((-1.0)*r10*sj3*x13353))+((r11*x13365))+((r10*x13351*x13355))+((r11*x13358)));
evalcond[4]=((((-1.0)*r12*x13364))+(((-1.0)*r11*x13353*x13361))+(((-1.0)*cj3*r10*x13353))+((r11*x13355))+(((-1.0)*r10*x13351*x13358)));
evalcond[5]=(((cj2*sj1))+((r01*x13365))+((r00*x13351*x13355))+(((-1.0)*r00*sj3*x13353))+((r01*x13358))+x13357+((r02*x13363)));
evalcond[6]=(((gconst74*x13351*x13354))+(((-1.0)*r20*sj3*x13353))+((r21*x13358))+(((-1.0)*x13360))+((r21*x13365))+((r22*x13363))+x13352);
evalcond[7]=((((-1.0)*r01*x13353*x13361))+(((-1.0)*r02*x13364))+((r01*x13355))+(((-1.0)*r00*x13351*x13358))+(((-1.0)*x13360))+x13352+(((-1.0)*cj3*r00*x13353)));
evalcond[8]=((((-1.0)*r20*x13351*x13358))+(((-1.0)*r22*x13364))+(((-1.0)*x13353*x13354))+(((-1.0)*x13357))+(((-1.0)*r21*x13353*x13361))+((r21*x13355))+(((-1.0)*sj1*x13356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13367=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13367);
rxp1_1=(px*r21);
rxp1_2=(r11*x13367);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13368=(r10*sj5);
IkReal x13369=(cj5*r11);
j4eval[0]=(((cj3*x13369))+((cj3*x13368)));
j4eval[1]=((((-1.0)*x13368))+(((-1.0)*x13369)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13370=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13370);
rxp1_1=(px*r21);
rxp1_2=(r11*x13370);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj3*cj5*r11))+((cj3*r10*sj5)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13371=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13371);
rxp1_1=(px*r21);
rxp1_2=(r11*x13371);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj3*cj5*r11))+((cj3*r10*sj5)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13372=IKPowWithIntegerCheck((((cj3*cj5*r11))+((cj3*r10*sj5))),-1);
if(!x13372.valid){
continue;
}
CheckValue<IkReal> x13373=IKPowWithIntegerCheck(cj3,-1);
if(!x13373.valid){
continue;
}
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(r02,-1);
if(!x13374.valid){
continue;
}
if( IKabs(((x13372.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13373.value)*(x13374.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13372.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))))+IKsqr(((x13373.value)*(x13374.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13372.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))), ((x13373.value)*(x13374.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13375=IKcos(j4);
IkReal x13376=IKsin(j4);
IkReal x13377=(sj1*sj2);
IkReal x13378=(cj3*cj5);
IkReal x13379=((1.0)*r10);
IkReal x13380=(sj3*sj5);
IkReal x13381=(cj5*sj3);
IkReal x13382=((1.0)*cj1);
IkReal x13383=(cj3*sj5);
IkReal x13384=(cj2*sj1);
IkReal x13385=(cj2*x13382);
IkReal x13386=(r11*x13376);
IkReal x13387=((1.0)*r20*sj3);
IkReal x13388=(sj5*x13376);
IkReal x13389=(r21*x13376);
IkReal x13390=((1.0)*x13375);
evalcond[0]=(r02*x13376);
evalcond[1]=(((cj3*r02*x13375))+((cj1*sj2))+x13384);
evalcond[2]=((((-1.0)*r20*sj5*x13390))+(((-1.0)*cj5*r21*x13390)));
evalcond[3]=((((-1.0)*x13385))+(((-1.0)*r02*sj3*x13390))+x13377);
evalcond[4]=((-1.0)+(((-1.0)*sj5*x13375*x13379))+(((-1.0)*cj5*r11*x13390)));
evalcond[5]=(((r10*x13376*x13383))+((r11*x13380))+(((-1.0)*x13379*x13381))+((x13378*x13386)));
evalcond[6]=(((r11*x13383))+(((-1.0)*x13376*x13379*x13380))+(((-1.0)*x13381*x13386))+(((-1.0)*x13378*x13379)));
evalcond[7]=((((-1.0)*x13385))+((x13378*x13389))+(((-1.0)*r20*x13381))+((r20*x13376*x13383))+x13377+((r21*x13380)));
evalcond[8]=((((-1.0)*x13384))+(((-1.0)*r20*x13376*x13380))+(((-1.0)*x13381*x13389))+(((-1.0)*sj2*x13382))+((r21*x13383))+(((-1.0)*r20*x13378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13391=IKPowWithIntegerCheck((((cj3*cj5*r11))+((cj3*r10*sj5))),-1);
if(!x13391.valid){
continue;
}
CheckValue<IkReal> x13392=IKPowWithIntegerCheck(r02,-1);
if(!x13392.valid){
continue;
}
CheckValue<IkReal> x13393=IKPowWithIntegerCheck(sj3,-1);
if(!x13393.valid){
continue;
}
if( IKabs(((x13391.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13392.value)*(x13393.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13391.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))))+IKsqr(((x13392.value)*(x13393.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13391.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))), ((x13392.value)*(x13393.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13394=IKcos(j4);
IkReal x13395=IKsin(j4);
IkReal x13396=(sj1*sj2);
IkReal x13397=(cj3*cj5);
IkReal x13398=((1.0)*r10);
IkReal x13399=(sj3*sj5);
IkReal x13400=(cj5*sj3);
IkReal x13401=((1.0)*cj1);
IkReal x13402=(cj3*sj5);
IkReal x13403=(cj2*sj1);
IkReal x13404=(cj2*x13401);
IkReal x13405=(r11*x13395);
IkReal x13406=((1.0)*r20*sj3);
IkReal x13407=(sj5*x13395);
IkReal x13408=(r21*x13395);
IkReal x13409=((1.0)*x13394);
evalcond[0]=(r02*x13395);
evalcond[1]=(x13403+((cj3*r02*x13394))+((cj1*sj2)));
evalcond[2]=((((-1.0)*cj5*r21*x13409))+(((-1.0)*r20*sj5*x13409)));
evalcond[3]=((((-1.0)*r02*sj3*x13409))+(((-1.0)*x13404))+x13396);
evalcond[4]=((-1.0)+(((-1.0)*sj5*x13394*x13398))+(((-1.0)*cj5*r11*x13409)));
evalcond[5]=(((r11*x13399))+((r10*x13395*x13402))+((x13397*x13405))+(((-1.0)*x13398*x13400)));
evalcond[6]=((((-1.0)*x13395*x13398*x13399))+(((-1.0)*x13400*x13405))+((r11*x13402))+(((-1.0)*x13397*x13398)));
evalcond[7]=(((r20*x13395*x13402))+((r21*x13399))+((x13397*x13408))+(((-1.0)*x13404))+(((-1.0)*r20*x13400))+x13396);
evalcond[8]=((((-1.0)*x13400*x13408))+((r21*x13402))+(((-1.0)*sj2*x13401))+(((-1.0)*x13403))+(((-1.0)*r20*x13397))+(((-1.0)*r20*x13395*x13399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13410=(r10*sj5);
IkReal x13411=((1.0)*r11);
CheckValue<IkReal> x13412=IKPowWithIntegerCheck((((cj3*x13410))+((cj3*cj5*r11))),-1);
if(!x13412.valid){
continue;
}
CheckValue<IkReal> x13413=IKPowWithIntegerCheck(((((-1.0)*x13410))+(((-1.0)*cj5*x13411))),-1);
if(!x13413.valid){
continue;
}
if( IKabs(((x13412.value)*((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x13411)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13413.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13412.value)*((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x13411))))))+IKsqr(x13413.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13412.value)*((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x13411))))), x13413.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13414=IKcos(j4);
IkReal x13415=IKsin(j4);
IkReal x13416=(sj1*sj2);
IkReal x13417=(cj3*cj5);
IkReal x13418=((1.0)*r10);
IkReal x13419=(sj3*sj5);
IkReal x13420=(cj5*sj3);
IkReal x13421=((1.0)*cj1);
IkReal x13422=(cj3*sj5);
IkReal x13423=(cj2*sj1);
IkReal x13424=(cj2*x13421);
IkReal x13425=(r11*x13415);
IkReal x13426=((1.0)*r20*sj3);
IkReal x13427=(sj5*x13415);
IkReal x13428=(r21*x13415);
IkReal x13429=((1.0)*x13414);
evalcond[0]=(r02*x13415);
evalcond[1]=(x13423+((cj1*sj2))+((cj3*r02*x13414)));
evalcond[2]=((((-1.0)*cj5*r21*x13429))+(((-1.0)*r20*sj5*x13429)));
evalcond[3]=(x13416+(((-1.0)*r02*sj3*x13429))+(((-1.0)*x13424)));
evalcond[4]=((-1.0)+(((-1.0)*cj5*r11*x13429))+(((-1.0)*sj5*x13414*x13418)));
evalcond[5]=(((x13417*x13425))+(((-1.0)*x13418*x13420))+((r11*x13419))+((r10*x13415*x13422)));
evalcond[6]=((((-1.0)*x13420*x13425))+(((-1.0)*x13415*x13418*x13419))+((r11*x13422))+(((-1.0)*x13417*x13418)));
evalcond[7]=(x13416+((x13417*x13428))+(((-1.0)*x13424))+((r20*x13415*x13422))+(((-1.0)*r20*x13420))+((r21*x13419)));
evalcond[8]=((((-1.0)*r20*x13417))+(((-1.0)*r20*x13415*x13419))+(((-1.0)*x13420*x13428))+(((-1.0)*x13423))+(((-1.0)*sj2*x13421))+((r21*x13422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13430=cj5*cj5;
IkReal x13431=(cj3*r10);
IkReal x13432=(cj3*r11);
IkReal x13433=(r20*sj5);
IkReal x13434=(cj5*r21*sj5);
IkReal x13435=((1.0)*r11*sj3);
IkReal x13436=(r20*x13430);
IkReal x13437=(cj5*r10*sj3);
IkReal x13438=(r21*x13430);
CheckValue<IkReal> x13439=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x13432*x13438))+((x13431*x13434))+((r20*x13431))+((cj5*x13432*x13433))+(((-1.0)*x13431*x13436)))),-1);
if(!x13439.valid){
continue;
}
CheckValue<IkReal> x13440 = IKatan2WithCheck(IkReal(((((-1.0)*x13434*x13435))+(((-1.0)*r20*x13435))+((r10*sj3*x13438))+((r11*sj3*x13436))+((x13433*x13437)))),IkReal((((r22*x13437))+(((-1.0)*r22*sj5*x13435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13439.value)))+(x13440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13441=IKcos(j4);
IkReal x13442=IKsin(j4);
IkReal x13443=(sj1*sj2);
IkReal x13444=(cj3*cj5);
IkReal x13445=((1.0)*cj1);
IkReal x13446=((1.0)*r10);
IkReal x13447=(sj3*sj5);
IkReal x13448=(cj5*sj3);
IkReal x13449=((1.0)*r00);
IkReal x13450=(cj3*sj5);
IkReal x13451=(cj2*sj1);
IkReal x13452=(cj2*x13445);
IkReal x13453=(r11*x13442);
IkReal x13454=((1.0)*r20*sj3);
IkReal x13455=(r01*x13442);
IkReal x13456=(sj5*x13442);
IkReal x13457=(r21*x13442);
IkReal x13458=((1.0)*x13441);
IkReal x13459=(cj3*x13441);
evalcond[0]=(((r22*x13442))+(((-1.0)*cj5*r21*x13458))+(((-1.0)*r20*sj5*x13458)));
evalcond[1]=(((r02*x13442))+(((-1.0)*sj5*x13441*x13449))+(((-1.0)*cj5*r01*x13458)));
evalcond[2]=((-1.0)+(((-1.0)*sj5*x13441*x13446))+((r12*x13442))+(((-1.0)*cj5*r11*x13458)));
evalcond[3]=(((r10*x13442*x13450))+((r12*x13459))+((x13444*x13453))+((r11*x13447))+(((-1.0)*x13446*x13448)));
evalcond[4]=((((-1.0)*x13442*x13446*x13447))+((r11*x13450))+(((-1.0)*r12*sj3*x13458))+(((-1.0)*x13448*x13453))+(((-1.0)*x13444*x13446)));
evalcond[5]=(x13451+((cj1*sj2))+((r00*x13442*x13450))+((x13444*x13455))+((r01*x13447))+(((-1.0)*x13448*x13449))+((r02*x13459)));
evalcond[6]=(x13443+((r20*x13442*x13450))+(((-1.0)*x13452))+((x13444*x13457))+((r22*x13459))+(((-1.0)*r20*x13448))+((r21*x13447)));
evalcond[7]=(x13443+(((-1.0)*r02*sj3*x13458))+(((-1.0)*x13452))+(((-1.0)*x13448*x13455))+(((-1.0)*x13444*x13449))+((r01*x13450))+(((-1.0)*x13442*x13447*x13449)));
evalcond[8]=(((r21*x13450))+(((-1.0)*x13451))+(((-1.0)*r20*x13442*x13447))+(((-1.0)*x13448*x13457))+(((-1.0)*sj2*x13445))+(((-1.0)*r20*x13444))+(((-1.0)*r22*sj3*x13458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13460=((1.0)*cj5);
CheckValue<IkReal> x13461 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13460)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13461.valid){
continue;
}
CheckValue<IkReal> x13462=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x13460)))),-1);
if(!x13462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13461.value)+(((1.5707963267949)*(x13462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13463=IKcos(j4);
IkReal x13464=IKsin(j4);
IkReal x13465=(sj1*sj2);
IkReal x13466=(cj3*cj5);
IkReal x13467=((1.0)*cj1);
IkReal x13468=((1.0)*r10);
IkReal x13469=(sj3*sj5);
IkReal x13470=(cj5*sj3);
IkReal x13471=((1.0)*r00);
IkReal x13472=(cj3*sj5);
IkReal x13473=(cj2*sj1);
IkReal x13474=(cj2*x13467);
IkReal x13475=(r11*x13464);
IkReal x13476=((1.0)*r20*sj3);
IkReal x13477=(r01*x13464);
IkReal x13478=(sj5*x13464);
IkReal x13479=(r21*x13464);
IkReal x13480=((1.0)*x13463);
IkReal x13481=(cj3*x13463);
evalcond[0]=((((-1.0)*r20*sj5*x13480))+((r22*x13464))+(((-1.0)*cj5*r21*x13480)));
evalcond[1]=((((-1.0)*cj5*r01*x13480))+(((-1.0)*sj5*x13463*x13471))+((r02*x13464)));
evalcond[2]=((-1.0)+(((-1.0)*cj5*r11*x13480))+((r12*x13464))+(((-1.0)*sj5*x13463*x13468)));
evalcond[3]=(((x13466*x13475))+((r11*x13469))+(((-1.0)*x13468*x13470))+((r10*x13464*x13472))+((r12*x13481)));
evalcond[4]=(((r11*x13472))+(((-1.0)*x13470*x13475))+(((-1.0)*r12*sj3*x13480))+(((-1.0)*x13464*x13468*x13469))+(((-1.0)*x13466*x13468)));
evalcond[5]=(x13473+((x13466*x13477))+((r02*x13481))+((cj1*sj2))+((r00*x13464*x13472))+(((-1.0)*x13470*x13471))+((r01*x13469)));
evalcond[6]=(x13465+((x13466*x13479))+((r20*x13464*x13472))+((r21*x13469))+(((-1.0)*x13474))+(((-1.0)*r20*x13470))+((r22*x13481)));
evalcond[7]=(x13465+((r01*x13472))+(((-1.0)*x13470*x13477))+(((-1.0)*x13464*x13469*x13471))+(((-1.0)*x13474))+(((-1.0)*x13466*x13471))+(((-1.0)*r02*sj3*x13480)));
evalcond[8]=((((-1.0)*r20*x13464*x13469))+(((-1.0)*x13470*x13479))+((r21*x13472))+(((-1.0)*r22*sj3*x13480))+(((-1.0)*sj2*x13467))+(((-1.0)*x13473))+(((-1.0)*r20*x13466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13482=((1.0)*sj5);
CheckValue<IkReal> x13483 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13482))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13483.valid){
continue;
}
CheckValue<IkReal> x13484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13482))+((cj5*r00)))),-1);
if(!x13484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13483.value)+(((1.5707963267949)*(x13484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13485=IKcos(j4);
IkReal x13486=IKsin(j4);
IkReal x13487=(sj1*sj2);
IkReal x13488=(cj3*cj5);
IkReal x13489=((1.0)*cj1);
IkReal x13490=((1.0)*r10);
IkReal x13491=(sj3*sj5);
IkReal x13492=(cj5*sj3);
IkReal x13493=((1.0)*r00);
IkReal x13494=(cj3*sj5);
IkReal x13495=(cj2*sj1);
IkReal x13496=(cj2*x13489);
IkReal x13497=(r11*x13486);
IkReal x13498=((1.0)*r20*sj3);
IkReal x13499=(r01*x13486);
IkReal x13500=(sj5*x13486);
IkReal x13501=(r21*x13486);
IkReal x13502=((1.0)*x13485);
IkReal x13503=(cj3*x13485);
evalcond[0]=((((-1.0)*cj5*r21*x13502))+(((-1.0)*r20*sj5*x13502))+((r22*x13486)));
evalcond[1]=(((r02*x13486))+(((-1.0)*cj5*r01*x13502))+(((-1.0)*sj5*x13485*x13493)));
evalcond[2]=((-1.0)+(((-1.0)*cj5*r11*x13502))+(((-1.0)*sj5*x13485*x13490))+((r12*x13486)));
evalcond[3]=(((x13488*x13497))+(((-1.0)*x13490*x13492))+((r10*x13486*x13494))+((r12*x13503))+((r11*x13491)));
evalcond[4]=((((-1.0)*x13488*x13490))+(((-1.0)*x13492*x13497))+(((-1.0)*r12*sj3*x13502))+(((-1.0)*x13486*x13490*x13491))+((r11*x13494)));
evalcond[5]=(x13495+((r02*x13503))+((x13488*x13499))+((cj1*sj2))+((r00*x13486*x13494))+(((-1.0)*x13492*x13493))+((r01*x13491)));
evalcond[6]=((((-1.0)*r20*x13492))+x13487+((r20*x13486*x13494))+((r22*x13503))+((r21*x13491))+((x13488*x13501))+(((-1.0)*x13496)));
evalcond[7]=((((-1.0)*x13488*x13493))+(((-1.0)*x13492*x13499))+x13487+(((-1.0)*x13486*x13491*x13493))+(((-1.0)*r02*sj3*x13502))+((r01*x13494))+(((-1.0)*x13496)));
evalcond[8]=((((-1.0)*r22*sj3*x13502))+(((-1.0)*x13495))+(((-1.0)*r20*x13486*x13491))+(((-1.0)*x13492*x13501))+((r21*x13494))+(((-1.0)*sj2*x13489))+(((-1.0)*r20*x13488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13505 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13505)==0){
continue;
}
IkReal x13504=pow(x13505,-0.5);
CheckValue<IkReal> x13506 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13506.valid){
continue;
}
IkReal gconst46=((-1.0)*(x13506.value));
IkReal gconst47=(r00*x13504);
IkReal gconst48=(r01*x13504);
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13507.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13510 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13510.valid){
continue;
}
IkReal x13508=((-1.0)*(x13510.value));
IkReal x13509=x13504;
sj5=gconst47;
cj5=gconst48;
j5=x13508;
IkReal gconst46=x13508;
IkReal gconst47=(r00*x13509);
IkReal gconst48=(r01*x13509);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13511=((1.0)*sj0);
IkReal x13512=((1.0)*cj0);
CheckValue<IkReal> x13513 = IKatan2WithCheck(IkReal(((((-1.0)*gconst48*r01*x13512))+(((-1.0)*gconst47*r10*x13511))+(((-1.0)*gconst47*r00*x13512))+(((-1.0)*gconst48*r11*x13511)))),IkReal(((((-1.0)*r12*x13511))+(((-1.0)*r02*x13512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13513.valid){
continue;
}
CheckValue<IkReal> x13514=IKPowWithIntegerCheck(IKsign((((gconst48*r20))+(((-1.0)*gconst47*r21)))),-1);
if(!x13514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13513.value)+(((1.5707963267949)*(x13514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13515=IKcos(j4);
IkReal x13516=IKsin(j4);
IkReal x13517=(gconst48*r11);
IkReal x13518=(cj1*cj2);
IkReal x13519=(gconst47*r10);
IkReal x13520=((1.0)*sj3);
IkReal x13521=(cj3*gconst47);
IkReal x13522=(gconst48*r21);
IkReal x13523=(sj1*sj2);
IkReal x13524=(gconst47*r20);
IkReal x13525=(gconst48*r20);
IkReal x13526=(gconst48*r00);
IkReal x13527=((1.0)*cj3);
IkReal x13528=(gconst47*sj3);
IkReal x13529=(gconst48*r01);
IkReal x13530=((1.0)*sj0);
IkReal x13531=(gconst48*r10);
IkReal x13532=(gconst47*r00);
IkReal x13533=(cj3*x13516);
IkReal x13534=(r02*x13515);
IkReal x13535=((1.0)*x13515);
IkReal x13536=((1.0)*cj2*sj1);
IkReal x13537=(r22*x13515);
IkReal x13538=((1.0)*cj1*sj2);
IkReal x13539=(r12*x13515);
evalcond[0]=(((r22*x13516))+(((-1.0)*x13524*x13535))+(((-1.0)*x13522*x13535)));
evalcond[1]=(cj0+((r12*x13516))+(((-1.0)*x13517*x13535))+(((-1.0)*x13519*x13535)));
evalcond[2]=(((r02*x13516))+(((-1.0)*x13529*x13535))+(((-1.0)*x13532*x13535))+(((-1.0)*x13530)));
evalcond[3]=(((r21*x13528))+x13523+((x13522*x13533))+(((-1.0)*x13520*x13525))+(((-1.0)*x13518))+((r20*x13516*x13521))+((cj3*x13537)));
evalcond[4]=(((r01*x13528))+(((-1.0)*x13520*x13526))+((x13529*x13533))+(((-1.0)*cj0*x13536))+(((-1.0)*cj0*x13538))+((r00*x13516*x13521))+((cj3*x13534)));
evalcond[5]=(((x13519*x13533))+(((-1.0)*cj2*sj1*x13530))+(((-1.0)*x13520*x13531))+((r11*x13528))+(((-1.0)*cj1*sj2*x13530))+((x13517*x13533))+((cj3*x13539)));
evalcond[6]=(((r21*x13521))+(((-1.0)*x13520*x13537))+(((-1.0)*x13525*x13527))+(((-1.0)*x13536))+(((-1.0)*x13538))+(((-1.0)*x13516*x13520*x13524))+(((-1.0)*x13516*x13520*x13522)));
evalcond[7]=((((-1.0)*cj0*x13523))+((r01*x13521))+(((-1.0)*x13516*x13520*x13532))+((cj0*x13518))+(((-1.0)*x13520*x13534))+(((-1.0)*x13526*x13527))+(((-1.0)*x13516*x13520*x13529)));
evalcond[8]=((((-1.0)*x13516*x13519*x13520))+(((-1.0)*x13520*x13539))+(((-1.0)*x13516*x13517*x13520))+(((-1.0)*x13527*x13531))+(((-1.0)*x13523*x13530))+((r11*x13521))+((sj0*x13518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13540=((1.0)*gconst48);
CheckValue<IkReal> x13541 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x13540))+(((-1.0)*gconst47*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x13541.valid){
continue;
}
CheckValue<IkReal> x13542=IKPowWithIntegerCheck(IKsign((((gconst47*r11))+(((-1.0)*r10*x13540)))),-1);
if(!x13542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13541.value)+(((1.5707963267949)*(x13542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13543=IKcos(j4);
IkReal x13544=IKsin(j4);
IkReal x13545=(gconst48*r11);
IkReal x13546=(cj1*cj2);
IkReal x13547=(gconst47*r10);
IkReal x13548=((1.0)*sj3);
IkReal x13549=(cj3*gconst47);
IkReal x13550=(gconst48*r21);
IkReal x13551=(sj1*sj2);
IkReal x13552=(gconst47*r20);
IkReal x13553=(gconst48*r20);
IkReal x13554=(gconst48*r00);
IkReal x13555=((1.0)*cj3);
IkReal x13556=(gconst47*sj3);
IkReal x13557=(gconst48*r01);
IkReal x13558=((1.0)*sj0);
IkReal x13559=(gconst48*r10);
IkReal x13560=(gconst47*r00);
IkReal x13561=(cj3*x13544);
IkReal x13562=(r02*x13543);
IkReal x13563=((1.0)*x13543);
IkReal x13564=((1.0)*cj2*sj1);
IkReal x13565=(r22*x13543);
IkReal x13566=((1.0)*cj1*sj2);
IkReal x13567=(r12*x13543);
evalcond[0]=(((r22*x13544))+(((-1.0)*x13550*x13563))+(((-1.0)*x13552*x13563)));
evalcond[1]=(((r12*x13544))+cj0+(((-1.0)*x13547*x13563))+(((-1.0)*x13545*x13563)));
evalcond[2]=((((-1.0)*x13558))+(((-1.0)*x13557*x13563))+(((-1.0)*x13560*x13563))+((r02*x13544)));
evalcond[3]=(x13551+((r21*x13556))+((r20*x13544*x13549))+(((-1.0)*x13548*x13553))+((cj3*x13565))+((x13550*x13561))+(((-1.0)*x13546)));
evalcond[4]=(((x13557*x13561))+(((-1.0)*cj0*x13566))+(((-1.0)*cj0*x13564))+((r01*x13556))+(((-1.0)*x13548*x13554))+((cj3*x13562))+((r00*x13544*x13549)));
evalcond[5]=(((x13547*x13561))+((r11*x13556))+(((-1.0)*cj1*sj2*x13558))+(((-1.0)*x13548*x13559))+((cj3*x13567))+(((-1.0)*cj2*sj1*x13558))+((x13545*x13561)));
evalcond[6]=(((r21*x13549))+(((-1.0)*x13553*x13555))+(((-1.0)*x13544*x13548*x13552))+(((-1.0)*x13544*x13548*x13550))+(((-1.0)*x13564))+(((-1.0)*x13566))+(((-1.0)*x13548*x13565)));
evalcond[7]=(((r01*x13549))+(((-1.0)*x13544*x13548*x13557))+(((-1.0)*cj0*x13551))+((cj0*x13546))+(((-1.0)*x13554*x13555))+(((-1.0)*x13544*x13548*x13560))+(((-1.0)*x13548*x13562)));
evalcond[8]=(((sj0*x13546))+(((-1.0)*x13551*x13558))+((r11*x13549))+(((-1.0)*x13555*x13559))+(((-1.0)*x13544*x13545*x13548))+(((-1.0)*x13548*x13567))+(((-1.0)*x13544*x13547*x13548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13568=((-1.0)*r00);
IkReal x13570 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13570)==0){
continue;
}
IkReal x13569=pow(x13570,-0.5);
CheckValue<IkReal> x13571 = IKatan2WithCheck(IkReal(x13568),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13571.valid){
continue;
}
IkReal gconst49=((3.14159265358979)+(((-1.0)*(x13571.value))));
IkReal gconst50=(x13568*x13569);
IkReal gconst51=((-1.0)*r01*x13569);
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13572.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x13573=((-1.0)*r00);
CheckValue<IkReal> x13576 = IKatan2WithCheck(IkReal(x13573),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13576.valid){
continue;
}
IkReal x13574=((1.0)*(x13576.value));
IkReal x13575=x13569;
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x13574)));
IkReal gconst49=((3.14159265358979)+(((-1.0)*x13574)));
IkReal gconst50=(x13573*x13575);
IkReal gconst51=((-1.0)*r01*x13575);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13577=((-1.0)*r00);
CheckValue<IkReal> x13580 = IKatan2WithCheck(IkReal(x13577),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13580.valid){
continue;
}
IkReal x13578=((1.0)*(x13580.value));
IkReal x13579=x13569;
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x13578)));
IkReal gconst49=((3.14159265358979)+(((-1.0)*x13578)));
IkReal gconst50=(x13577*x13579);
IkReal gconst51=((-1.0)*r01*x13579);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13581=((-1.0)*r00);
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(x13581),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
IkReal x13582=((1.0)*(x13584.value));
IkReal x13583=x13569;
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x13582)));
IkReal gconst49=((3.14159265358979)+(((-1.0)*x13582)));
IkReal gconst50=(x13581*x13583);
IkReal gconst51=((-1.0)*r01*x13583);
IkReal x13585=r02*r02;
IkReal x13586=(r12*sj0);
IkReal x13587=((1.0)*cj0);
IkReal x13588=x13569;
j4eval[0]=((IKabs((((r02*x13586*x13588))+(((-1.0)*x13587*x13588))+((cj0*x13585*x13588)))))+(IKabs(((((-1.0)*r02*x13587))+(((-1.0)*x13586))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x13589=((-1.0)*r00);
CheckValue<IkReal> x13592 = IKatan2WithCheck(IkReal(x13589),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13592.valid){
continue;
}
IkReal x13590=((1.0)*(x13592.value));
IkReal x13591=x13569;
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x13590)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst49=((3.14159265358979)+(((-1.0)*x13590)));
IkReal gconst50=(x13589*x13591);
IkReal gconst51=((-1.0)*r01*x13591);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13593=((-1.0)*r00);
CheckValue<IkReal> x13596 = IKatan2WithCheck(IkReal(x13593),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13596.valid){
continue;
}
IkReal x13594=((1.0)*(x13596.value));
IkReal x13595=x13569;
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x13594)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst49=((3.14159265358979)+(((-1.0)*x13594)));
IkReal gconst50=(x13593*x13595);
IkReal gconst51=((-1.0)*r01*x13595);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13597=gconst50*gconst50;
IkReal x13598=gconst51*gconst51;
IkReal x13599=(gconst51*sj3);
IkReal x13600=(r11*r20);
IkReal x13601=(r10*r21);
IkReal x13602=(r10*r20);
IkReal x13603=((1.0)*gconst50*r11);
IkReal x13604=(cj3*gconst50*gconst51);
CheckValue<IkReal> x13605=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x13600*x13604))+((cj3*r11*r21*x13598))+((x13601*x13604))+((cj3*x13597*x13602)))),-1);
if(!x13605.valid){
continue;
}
CheckValue<IkReal> x13606 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13599*x13603))+(((-1.0)*sj3*x13597*x13600))+((sj3*x13598*x13601))+((gconst50*x13599*x13602)))),IkReal(((((-1.0)*r22*sj3*x13603))+((r10*r22*x13599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13605.value)))+(x13606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13607=IKcos(j4);
IkReal x13608=IKsin(j4);
IkReal x13609=(sj1*sj2);
IkReal x13610=((1.0)*cj1);
IkReal x13611=(gconst50*sj3);
IkReal x13612=(cj3*gconst50);
IkReal x13613=(cj2*sj1);
IkReal x13614=(cj2*x13610);
IkReal x13615=((1.0)*gconst51*sj3);
IkReal x13616=((1.0)*x13607);
IkReal x13617=((1.0)*cj3*gconst51);
IkReal x13618=(r00*x13608);
IkReal x13619=(cj3*x13607);
IkReal x13620=((1.0)*x13608);
IkReal x13621=(cj3*gconst51*x13608);
evalcond[0]=((((-1.0)*gconst51*r21*x13616))+((r22*x13608))+(((-1.0)*gconst50*r20*x13616)));
evalcond[1]=(((r02*x13608))+(((-1.0)*gconst51*r01*x13616))+(((-1.0)*gconst50*r00*x13616)));
evalcond[2]=((-1.0)+((r12*x13608))+(((-1.0)*gconst51*r11*x13616))+(((-1.0)*gconst50*r10*x13616)));
evalcond[3]=(((r11*x13621))+(((-1.0)*r10*x13615))+((r11*x13611))+((r12*x13619))+((r10*x13608*x13612)));
evalcond[4]=((((-1.0)*r12*sj3*x13616))+(((-1.0)*r11*x13608*x13615))+(((-1.0)*r10*x13617))+((r11*x13612))+(((-1.0)*r10*x13611*x13620)));
evalcond[5]=(x13613+((x13612*x13618))+((cj1*sj2))+((r01*x13611))+((r01*x13621))+(((-1.0)*r00*x13615))+((r02*x13619)));
evalcond[6]=((((-1.0)*x13614))+((r21*x13611))+x13609+(((-1.0)*r20*x13615))+((r21*x13621))+((r20*x13608*x13612))+((r22*x13619)));
evalcond[7]=((((-1.0)*x13614))+x13609+(((-1.0)*r01*x13608*x13615))+((r01*x13612))+(((-1.0)*x13611*x13618))+(((-1.0)*r00*x13617))+(((-1.0)*r02*sj3*x13616)));
evalcond[8]=((((-1.0)*sj2*x13610))+(((-1.0)*r20*x13611*x13620))+((r21*x13612))+(((-1.0)*r21*x13608*x13615))+(((-1.0)*r20*x13617))+(((-1.0)*x13613))+(((-1.0)*r22*sj3*x13616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13622=((1.0)*gconst51);
CheckValue<IkReal> x13623 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13622))+(((-1.0)*gconst50*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13623.valid){
continue;
}
CheckValue<IkReal> x13624=IKPowWithIntegerCheck(IKsign((((gconst50*r21))+(((-1.0)*r20*x13622)))),-1);
if(!x13624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13623.value)+(((1.5707963267949)*(x13624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13625=IKcos(j4);
IkReal x13626=IKsin(j4);
IkReal x13627=(sj1*sj2);
IkReal x13628=((1.0)*cj1);
IkReal x13629=(gconst50*sj3);
IkReal x13630=(cj3*gconst50);
IkReal x13631=(cj2*sj1);
IkReal x13632=(cj2*x13628);
IkReal x13633=((1.0)*gconst51*sj3);
IkReal x13634=((1.0)*x13625);
IkReal x13635=((1.0)*cj3*gconst51);
IkReal x13636=(r00*x13626);
IkReal x13637=(cj3*x13625);
IkReal x13638=((1.0)*x13626);
IkReal x13639=(cj3*gconst51*x13626);
evalcond[0]=((((-1.0)*gconst50*r20*x13634))+(((-1.0)*gconst51*r21*x13634))+((r22*x13626)));
evalcond[1]=((((-1.0)*gconst51*r01*x13634))+((r02*x13626))+(((-1.0)*gconst50*r00*x13634)));
evalcond[2]=((-1.0)+((r12*x13626))+(((-1.0)*gconst50*r10*x13634))+(((-1.0)*gconst51*r11*x13634)));
evalcond[3]=(((r11*x13639))+((r11*x13629))+((r12*x13637))+((r10*x13626*x13630))+(((-1.0)*r10*x13633)));
evalcond[4]=(((r11*x13630))+(((-1.0)*r10*x13629*x13638))+(((-1.0)*r12*sj3*x13634))+(((-1.0)*r10*x13635))+(((-1.0)*r11*x13626*x13633)));
evalcond[5]=(x13631+((cj1*sj2))+(((-1.0)*r00*x13633))+((r02*x13637))+((x13630*x13636))+((r01*x13629))+((r01*x13639)));
evalcond[6]=(x13627+((r20*x13626*x13630))+((r22*x13637))+((r21*x13629))+(((-1.0)*x13632))+((r21*x13639))+(((-1.0)*r20*x13633)));
evalcond[7]=((((-1.0)*r01*x13626*x13633))+x13627+(((-1.0)*x13629*x13636))+(((-1.0)*r02*sj3*x13634))+(((-1.0)*r00*x13635))+(((-1.0)*x13632))+((r01*x13630)));
evalcond[8]=((((-1.0)*r21*x13626*x13633))+(((-1.0)*x13631))+(((-1.0)*r22*sj3*x13634))+(((-1.0)*sj2*x13628))+((r21*x13630))+(((-1.0)*r20*x13629*x13638))+(((-1.0)*r20*x13635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13640=((1.0)*gconst50);
CheckValue<IkReal> x13641 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13640))+(((-1.0)*gconst51*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13641.valid){
continue;
}
CheckValue<IkReal> x13642=IKPowWithIntegerCheck(IKsign((((gconst51*r00))+(((-1.0)*r01*x13640)))),-1);
if(!x13642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13641.value)+(((1.5707963267949)*(x13642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13643=IKcos(j4);
IkReal x13644=IKsin(j4);
IkReal x13645=(sj1*sj2);
IkReal x13646=((1.0)*cj1);
IkReal x13647=(gconst50*sj3);
IkReal x13648=(cj3*gconst50);
IkReal x13649=(cj2*sj1);
IkReal x13650=(cj2*x13646);
IkReal x13651=((1.0)*gconst51*sj3);
IkReal x13652=((1.0)*x13643);
IkReal x13653=((1.0)*cj3*gconst51);
IkReal x13654=(r00*x13644);
IkReal x13655=(cj3*x13643);
IkReal x13656=((1.0)*x13644);
IkReal x13657=(cj3*gconst51*x13644);
evalcond[0]=(((r22*x13644))+(((-1.0)*gconst50*r20*x13652))+(((-1.0)*gconst51*r21*x13652)));
evalcond[1]=((((-1.0)*gconst51*r01*x13652))+((r02*x13644))+(((-1.0)*gconst50*r00*x13652)));
evalcond[2]=((-1.0)+(((-1.0)*gconst50*r10*x13652))+(((-1.0)*gconst51*r11*x13652))+((r12*x13644)));
evalcond[3]=(((r12*x13655))+((r10*x13644*x13648))+((r11*x13647))+(((-1.0)*r10*x13651))+((r11*x13657)));
evalcond[4]=((((-1.0)*r11*x13644*x13651))+((r11*x13648))+(((-1.0)*r10*x13647*x13656))+(((-1.0)*r12*sj3*x13652))+(((-1.0)*r10*x13653)));
evalcond[5]=((((-1.0)*r00*x13651))+((x13648*x13654))+x13649+((r01*x13657))+((cj1*sj2))+((r02*x13655))+((r01*x13647)));
evalcond[6]=((((-1.0)*r20*x13651))+x13645+((r21*x13657))+((r22*x13655))+((r21*x13647))+(((-1.0)*x13650))+((r20*x13644*x13648)));
evalcond[7]=((((-1.0)*r00*x13653))+x13645+(((-1.0)*r02*sj3*x13652))+((r01*x13648))+(((-1.0)*r01*x13644*x13651))+(((-1.0)*x13647*x13654))+(((-1.0)*x13650)));
evalcond[8]=((((-1.0)*sj2*x13646))+(((-1.0)*r20*x13653))+(((-1.0)*r21*x13644*x13651))+(((-1.0)*r20*x13647*x13656))+(((-1.0)*r22*sj3*x13652))+(((-1.0)*x13649))+((r21*x13648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x13658=(gconst51*r21);
IkReal x13659=(gconst50*r20);
op[0]=(x13658+x13659);
op[1]=((2.0)*r22);
op[2]=((((-1.0)*x13658))+(((-1.0)*x13659)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x13660=(gconst51*r21);
IkReal x13661=(gconst50*r20);
op[0]=(x13661+x13660);
op[1]=((2.0)*r22);
op[2]=((((-1.0)*x13660))+(((-1.0)*x13661)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13665 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13665.valid){
continue;
}
IkReal x13662=((1.0)*(x13665.value));
IkReal x13663=x13569;
IkReal x13664=((-1.0)*x13663);
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x13662)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst49=((3.14159265358979)+(((-1.0)*x13662)));
IkReal gconst50=(r00*x13664);
IkReal gconst51=(r01*x13664);
IkReal x13666=r02*r02;
IkReal x13667=(r12*sj0);
IkReal x13668=((1.0)*cj0);
IkReal x13669=x13569;
j4eval[0]=((IKabs(((((-1.0)*x13668*x13669))+((r02*x13667*x13669))+((cj0*x13666*x13669)))))+(IKabs(((((-1.0)*x13667))+(((-1.0)*r02*x13668))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13670=(gconst51*sj3);
IkReal x13671=(gconst50*r20);
IkReal x13672=(cj1*sj2);
IkReal x13673=((1.0)*r12);
IkReal x13674=(cj2*sj1);
IkReal x13675=(cj3*gconst50*r21);
IkReal x13676=(cj3*gconst51*r20);
CheckValue<IkReal> x13677=IKPowWithIntegerCheck(((((-1.0)*sj3*x13671))+(((-1.0)*r21*x13670))),-1);
if(!x13677.valid){
continue;
}
CheckValue<IkReal> x13678=IKPowWithIntegerCheck((((gconst50*r10*sj3*x13671))+((gconst50*r10*r21*x13670))+((r11*x13670*x13671))+((gconst51*r11*r21*x13670))),-1);
if(!x13678.valid){
continue;
}
if( IKabs(((x13677.value)*((x13672+x13674+x13676+(((-1.0)*x13675)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13678.value)*((((cj0*sj3*x13671))+((r12*x13675))+(((-1.0)*x13672*x13673))+(((-1.0)*x13673*x13676))+(((-1.0)*x13673*x13674))+((cj0*r21*x13670)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13677.value)*((x13672+x13674+x13676+(((-1.0)*x13675))))))+IKsqr(((x13678.value)*((((cj0*sj3*x13671))+((r12*x13675))+(((-1.0)*x13672*x13673))+(((-1.0)*x13673*x13676))+(((-1.0)*x13673*x13674))+((cj0*r21*x13670))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13677.value)*((x13672+x13674+x13676+(((-1.0)*x13675))))), ((x13678.value)*((((cj0*sj3*x13671))+((r12*x13675))+(((-1.0)*x13672*x13673))+(((-1.0)*x13673*x13676))+(((-1.0)*x13673*x13674))+((cj0*r21*x13670))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13679=IKcos(j4);
IkReal x13680=IKsin(j4);
IkReal x13681=(gconst50*sj3);
IkReal x13682=(cj3*gconst50);
IkReal x13683=(cj1*cj2);
IkReal x13684=((1.0)*sj3);
IkReal x13685=(gconst51*r20);
IkReal x13686=(sj1*sj2);
IkReal x13687=(gconst51*r11);
IkReal x13688=((1.0)*cj3);
IkReal x13689=(gconst51*r21);
IkReal x13690=(gconst51*r10);
IkReal x13691=(gconst51*r00);
IkReal x13692=((1.0)*sj0);
IkReal x13693=((1.0)*gconst51*r01);
IkReal x13694=(sj3*x13680);
IkReal x13695=((1.0)*x13679);
IkReal x13696=(r10*x13680);
IkReal x13697=(r02*x13679);
IkReal x13698=((1.0)*cj2*sj1);
IkReal x13699=((1.0)*cj1*sj2);
IkReal x13700=(cj3*x13680);
IkReal x13701=(r12*x13679);
IkReal x13702=(r00*x13680);
IkReal x13703=(r20*x13680);
evalcond[0]=((((-1.0)*gconst50*r20*x13695))+(((-1.0)*x13689*x13695)));
evalcond[1]=(cj0+(((-1.0)*x13687*x13695))+((r12*x13680))+(((-1.0)*gconst50*r10*x13695)));
evalcond[2]=((((-1.0)*x13692))+((r02*x13680))+(((-1.0)*gconst50*r00*x13695))+(((-1.0)*x13679*x13693)));
evalcond[3]=(((x13682*x13703))+x13686+(((-1.0)*x13684*x13685))+(((-1.0)*x13683))+((x13689*x13700))+((r21*x13681)));
evalcond[4]=((((-1.0)*x13699))+(((-1.0)*x13698))+(((-1.0)*x13681*x13703))+(((-1.0)*x13685*x13688))+(((-1.0)*x13680*x13684*x13689))+((r21*x13682)));
evalcond[5]=(((x13682*x13702))+(((-1.0)*x13684*x13691))+(((-1.0)*cj0*x13699))+(((-1.0)*cj0*x13698))+((gconst51*r01*x13700))+((r01*x13681))+((cj3*x13697)));
evalcond[6]=((((-1.0)*x13684*x13690))+((x13687*x13700))+((r11*x13681))+((cj3*x13701))+(((-1.0)*cj2*sj1*x13692))+(((-1.0)*cj1*sj2*x13692))+((x13682*x13696)));
evalcond[7]=((((-1.0)*gconst51*r01*x13680*x13684))+(((-1.0)*x13684*x13697))+(((-1.0)*cj0*x13686))+(((-1.0)*x13681*x13702))+((r01*x13682))+(((-1.0)*x13688*x13691))+((cj0*x13683)));
evalcond[8]=((((-1.0)*x13681*x13696))+((r11*x13682))+(((-1.0)*x13680*x13684*x13687))+(((-1.0)*x13688*x13690))+(((-1.0)*x13686*x13692))+((sj0*x13683))+(((-1.0)*x13684*x13701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13704=((1.0)*cj0);
IkReal x13705=((1.0)*sj0);
CheckValue<IkReal> x13706=IKPowWithIntegerCheck(IKsign((((gconst51*r20))+(((-1.0)*gconst50*r21)))),-1);
if(!x13706.valid){
continue;
}
CheckValue<IkReal> x13707 = IKatan2WithCheck(IkReal(((((-1.0)*gconst51*r01*x13704))+(((-1.0)*gconst50*r00*x13704))+(((-1.0)*gconst51*r11*x13705))+(((-1.0)*gconst50*r10*x13705)))),IkReal(((((-1.0)*r12*x13705))+(((-1.0)*r02*x13704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13706.value)))+(x13707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13708=IKcos(j4);
IkReal x13709=IKsin(j4);
IkReal x13710=(gconst50*sj3);
IkReal x13711=(cj3*gconst50);
IkReal x13712=(cj1*cj2);
IkReal x13713=((1.0)*sj3);
IkReal x13714=(gconst51*r20);
IkReal x13715=(sj1*sj2);
IkReal x13716=(gconst51*r11);
IkReal x13717=((1.0)*cj3);
IkReal x13718=(gconst51*r21);
IkReal x13719=(gconst51*r10);
IkReal x13720=(gconst51*r00);
IkReal x13721=((1.0)*sj0);
IkReal x13722=((1.0)*gconst51*r01);
IkReal x13723=(sj3*x13709);
IkReal x13724=((1.0)*x13708);
IkReal x13725=(r10*x13709);
IkReal x13726=(r02*x13708);
IkReal x13727=((1.0)*cj2*sj1);
IkReal x13728=((1.0)*cj1*sj2);
IkReal x13729=(cj3*x13709);
IkReal x13730=(r12*x13708);
IkReal x13731=(r00*x13709);
IkReal x13732=(r20*x13709);
evalcond[0]=((((-1.0)*gconst50*r20*x13724))+(((-1.0)*x13718*x13724)));
evalcond[1]=(((r12*x13709))+cj0+(((-1.0)*gconst50*r10*x13724))+(((-1.0)*x13716*x13724)));
evalcond[2]=((((-1.0)*x13708*x13722))+(((-1.0)*gconst50*r00*x13724))+(((-1.0)*x13721))+((r02*x13709)));
evalcond[3]=((((-1.0)*x13713*x13714))+((r21*x13710))+(((-1.0)*x13712))+((x13711*x13732))+x13715+((x13718*x13729)));
evalcond[4]=(((r21*x13711))+(((-1.0)*x13714*x13717))+(((-1.0)*x13709*x13713*x13718))+(((-1.0)*x13727))+(((-1.0)*x13728))+(((-1.0)*x13710*x13732)));
evalcond[5]=((((-1.0)*x13713*x13720))+((x13711*x13731))+((gconst51*r01*x13729))+((r01*x13710))+(((-1.0)*cj0*x13728))+(((-1.0)*cj0*x13727))+((cj3*x13726)));
evalcond[6]=(((x13716*x13729))+(((-1.0)*x13713*x13719))+((x13711*x13725))+(((-1.0)*cj2*sj1*x13721))+(((-1.0)*cj1*sj2*x13721))+((cj3*x13730))+((r11*x13710)));
evalcond[7]=((((-1.0)*x13713*x13726))+(((-1.0)*gconst51*r01*x13709*x13713))+((r01*x13711))+(((-1.0)*cj0*x13715))+(((-1.0)*x13717*x13720))+(((-1.0)*x13710*x13731))+((cj0*x13712)));
evalcond[8]=(((sj0*x13712))+(((-1.0)*x13710*x13725))+(((-1.0)*x13713*x13730))+(((-1.0)*x13709*x13713*x13716))+(((-1.0)*x13717*x13719))+(((-1.0)*x13715*x13721))+((r11*x13711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13733=((1.0)*cj0);
IkReal x13734=((1.0)*sj0);
CheckValue<IkReal> x13735 = IKatan2WithCheck(IkReal(((((-1.0)*gconst51*r01*x13733))+(((-1.0)*gconst51*r11*x13734))+(((-1.0)*gconst50*r10*x13734))+(((-1.0)*gconst50*r00*x13733)))),IkReal(((((-1.0)*r12*x13734))+(((-1.0)*r02*x13733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13735.valid){
continue;
}
CheckValue<IkReal> x13736=IKPowWithIntegerCheck(IKsign((((gconst51*r20))+(((-1.0)*gconst50*r21)))),-1);
if(!x13736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13735.value)+(((1.5707963267949)*(x13736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13737=IKcos(j4);
IkReal x13738=IKsin(j4);
IkReal x13739=((1.0)*sj2);
IkReal x13740=(gconst50*sj3);
IkReal x13741=(cj3*gconst50);
IkReal x13742=(cj1*cj2);
IkReal x13743=(sj0*sj1);
IkReal x13744=((1.0)*cj2);
IkReal x13745=(gconst51*r21);
IkReal x13746=(cj0*sj1);
IkReal x13747=(cj3*gconst51);
IkReal x13748=((1.0)*gconst51*sj3);
IkReal x13749=(r01*x13738);
IkReal x13750=((1.0)*x13737);
IkReal x13751=(r10*x13738);
IkReal x13752=(r11*x13738);
IkReal x13753=((1.0)*x13747);
IkReal x13754=(r00*x13738);
IkReal x13755=(cj3*x13737);
IkReal x13756=(r20*x13738);
evalcond[0]=(((r22*x13738))+(((-1.0)*gconst50*r20*x13750))+(((-1.0)*x13745*x13750)));
evalcond[1]=(cj0+(((-1.0)*gconst50*r10*x13750))+((r12*x13738))+(((-1.0)*gconst51*r11*x13750)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst50*r00*x13750))+(((-1.0)*gconst51*r01*x13750))+((r02*x13738)));
evalcond[3]=(((r22*x13755))+(((-1.0)*r20*x13748))+((cj3*x13738*x13745))+((x13741*x13756))+(((-1.0)*x13742))+((sj1*sj2))+((r21*x13740)));
evalcond[4]=(((r01*x13740))+(((-1.0)*cj0*cj1*x13739))+(((-1.0)*x13744*x13746))+(((-1.0)*r00*x13748))+((r02*x13755))+((x13747*x13749))+((x13741*x13754)));
evalcond[5]=(((x13747*x13752))+((r12*x13755))+(((-1.0)*r10*x13748))+((x13741*x13751))+(((-1.0)*cj1*sj0*x13739))+(((-1.0)*x13743*x13744))+((r11*x13740)));
evalcond[6]=((((-1.0)*r20*x13753))+(((-1.0)*x13740*x13756))+(((-1.0)*r22*sj3*x13750))+(((-1.0)*sj1*x13744))+((r21*x13741))+(((-1.0)*cj1*x13739))+(((-1.0)*sj3*x13738*x13745)));
evalcond[7]=(((cj0*x13742))+((r01*x13741))+(((-1.0)*x13740*x13754))+(((-1.0)*x13739*x13746))+(((-1.0)*r02*sj3*x13750))+(((-1.0)*r00*x13753))+(((-1.0)*x13748*x13749)));
evalcond[8]=((((-1.0)*x13740*x13751))+(((-1.0)*x13739*x13743))+(((-1.0)*x13748*x13752))+(((-1.0)*r12*sj3*x13750))+((sj0*x13742))+(((-1.0)*r10*x13753))+((r11*x13741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13757=((1.0)*gconst51);
CheckValue<IkReal> x13758 = IKatan2WithCheck(IkReal(((((-1.0)*gconst50*r20*sj0))+(((-1.0)*r21*sj0*x13757)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x13758.valid){
continue;
}
CheckValue<IkReal> x13759=IKPowWithIntegerCheck(IKsign((((gconst50*r11))+(((-1.0)*r10*x13757)))),-1);
if(!x13759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13758.value)+(((1.5707963267949)*(x13759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13760=IKcos(j4);
IkReal x13761=IKsin(j4);
IkReal x13762=((1.0)*sj2);
IkReal x13763=(gconst50*sj3);
IkReal x13764=(cj3*gconst50);
IkReal x13765=(cj1*cj2);
IkReal x13766=(sj0*sj1);
IkReal x13767=((1.0)*cj2);
IkReal x13768=(gconst51*r21);
IkReal x13769=(cj0*sj1);
IkReal x13770=(cj3*gconst51);
IkReal x13771=((1.0)*gconst51*sj3);
IkReal x13772=(r01*x13761);
IkReal x13773=((1.0)*x13760);
IkReal x13774=(r10*x13761);
IkReal x13775=(r11*x13761);
IkReal x13776=((1.0)*x13770);
IkReal x13777=(r00*x13761);
IkReal x13778=(cj3*x13760);
IkReal x13779=(r20*x13761);
evalcond[0]=((((-1.0)*gconst50*r20*x13773))+(((-1.0)*x13768*x13773))+((r22*x13761)));
evalcond[1]=(cj0+(((-1.0)*gconst50*r10*x13773))+((r12*x13761))+(((-1.0)*gconst51*r11*x13773)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst50*r00*x13773))+(((-1.0)*gconst51*r01*x13773))+((r02*x13761)));
evalcond[3]=((((-1.0)*x13765))+(((-1.0)*r20*x13771))+((sj1*sj2))+((cj3*x13761*x13768))+((x13764*x13779))+((r22*x13778))+((r21*x13763)));
evalcond[4]=((((-1.0)*r00*x13771))+(((-1.0)*cj0*cj1*x13762))+((r01*x13763))+(((-1.0)*x13767*x13769))+((x13764*x13777))+((x13770*x13772))+((r02*x13778)));
evalcond[5]=(((r11*x13763))+(((-1.0)*cj1*sj0*x13762))+(((-1.0)*x13766*x13767))+(((-1.0)*r10*x13771))+((x13764*x13774))+((x13770*x13775))+((r12*x13778)));
evalcond[6]=((((-1.0)*x13763*x13779))+(((-1.0)*cj1*x13762))+(((-1.0)*r20*x13776))+(((-1.0)*sj1*x13767))+(((-1.0)*r22*sj3*x13773))+((r21*x13764))+(((-1.0)*sj3*x13761*x13768)));
evalcond[7]=((((-1.0)*r00*x13776))+(((-1.0)*x13763*x13777))+(((-1.0)*x13771*x13772))+((r01*x13764))+(((-1.0)*r02*sj3*x13773))+((cj0*x13765))+(((-1.0)*x13762*x13769)));
evalcond[8]=((((-1.0)*x13763*x13774))+((r11*x13764))+(((-1.0)*x13771*x13775))+(((-1.0)*r10*x13776))+(((-1.0)*r12*sj3*x13773))+((sj0*x13765))+(((-1.0)*x13762*x13766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13780=((1.0)*gconst51);
CheckValue<IkReal> x13781 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst50*r20))+(((-1.0)*cj0*r21*x13780)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13781.valid){
continue;
}
CheckValue<IkReal> x13782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13780))+((gconst50*r01)))),-1);
if(!x13782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13781.value)+(((1.5707963267949)*(x13782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13783=IKcos(j4);
IkReal x13784=IKsin(j4);
IkReal x13785=((1.0)*sj2);
IkReal x13786=(gconst50*sj3);
IkReal x13787=(cj3*gconst50);
IkReal x13788=(cj1*cj2);
IkReal x13789=(sj0*sj1);
IkReal x13790=((1.0)*cj2);
IkReal x13791=(gconst51*r21);
IkReal x13792=(cj0*sj1);
IkReal x13793=(cj3*gconst51);
IkReal x13794=((1.0)*gconst51*sj3);
IkReal x13795=(r01*x13784);
IkReal x13796=((1.0)*x13783);
IkReal x13797=(r10*x13784);
IkReal x13798=(r11*x13784);
IkReal x13799=((1.0)*x13793);
IkReal x13800=(r00*x13784);
IkReal x13801=(cj3*x13783);
IkReal x13802=(r20*x13784);
evalcond[0]=((((-1.0)*x13791*x13796))+(((-1.0)*gconst50*r20*x13796))+((r22*x13784)));
evalcond[1]=((((-1.0)*gconst51*r11*x13796))+cj0+(((-1.0)*gconst50*r10*x13796))+((r12*x13784)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst50*r00*x13796))+((r02*x13784))+(((-1.0)*gconst51*r01*x13796)));
evalcond[3]=(((cj3*x13784*x13791))+(((-1.0)*r20*x13794))+((sj1*sj2))+(((-1.0)*x13788))+((r22*x13801))+((r21*x13786))+((x13787*x13802)));
evalcond[4]=((((-1.0)*x13790*x13792))+((r01*x13786))+(((-1.0)*cj0*cj1*x13785))+(((-1.0)*r00*x13794))+((x13787*x13800))+((x13793*x13795))+((r02*x13801)));
evalcond[5]=(((r12*x13801))+(((-1.0)*cj1*sj0*x13785))+(((-1.0)*r10*x13794))+(((-1.0)*x13789*x13790))+((x13787*x13797))+((r11*x13786))+((x13793*x13798)));
evalcond[6]=((((-1.0)*cj1*x13785))+(((-1.0)*r20*x13799))+(((-1.0)*sj1*x13790))+(((-1.0)*r22*sj3*x13796))+((r21*x13787))+(((-1.0)*sj3*x13784*x13791))+(((-1.0)*x13786*x13802)));
evalcond[7]=(((cj0*x13788))+((r01*x13787))+(((-1.0)*r02*sj3*x13796))+(((-1.0)*x13785*x13792))+(((-1.0)*r00*x13799))+(((-1.0)*x13794*x13795))+(((-1.0)*x13786*x13800)));
evalcond[8]=((((-1.0)*r10*x13799))+(((-1.0)*x13785*x13789))+((sj0*x13788))+(((-1.0)*x13794*x13798))+(((-1.0)*r12*sj3*x13796))+((r11*x13787))+(((-1.0)*x13786*x13797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13803=((1.0)*cj5);
IkReal x13804=((((-1.0)*r10*x13803))+((r11*sj5)));
j4eval[0]=x13804;
j4eval[1]=((IKabs(((((-1.0)*r21*x13803))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13805=((1.0)*sj5);
IkReal x13806=(((cj5*r20))+(((-1.0)*r21*x13805)));
j4eval[0]=x13806;
j4eval[1]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13805)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13807=cj5*cj5;
IkReal x13808=(cj3*r20);
IkReal x13809=(cj5*sj5);
IkReal x13810=(cj3*r21);
IkReal x13811=(((r00*x13808))+((r00*x13809*x13810))+((r01*x13808*x13809))+((r01*x13807*x13810))+((cj3*r02*r22))+(((-1.0)*r00*x13807*x13808)));
j4eval[0]=x13811;
j4eval[1]=IKsign(x13811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13812=((1.0)*cj5);
IkReal x13813=((((-1.0)*r10*x13812))+((r11*sj5)));
j4eval[0]=x13813;
j4eval[1]=((IKabs(((((-1.0)*r21*x13812))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13814=((1.0)*sj5);
IkReal x13815=(((cj5*r20))+(((-1.0)*r21*x13814)));
j4eval[0]=x13815;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13814))))));
j4eval[2]=IKsign(x13815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13816=cj5*cj5;
IkReal x13817=r00*r00;
IkReal x13818=(r00*sj5);
IkReal x13819=(cj5*r01);
IkReal x13820=(((x13816*(r01*r01)))+x13817+(((-1.0)*x13816*x13817))+(((2.0)*x13818*x13819))+(r02*r02));
j4eval[0]=x13820;
j4eval[1]=IKsign(x13820);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x13818))+(((-1.0)*x13819))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13821=cj5*cj5;
IkReal x13822=r00*r00;
IkReal x13823=(cj5*r01);
IkReal x13824=(r00*sj5);
CheckValue<IkReal> x13825=IKPowWithIntegerCheck(IKsign((x13822+((x13821*(r01*r01)))+(((2.0)*x13823*x13824))+(r02*r02)+(((-1.0)*x13821*x13822)))),-1);
if(!x13825.valid){
continue;
}
CheckValue<IkReal> x13826 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x13823))+(((-1.0)*x13824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13825.value)))+(x13826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13827=IKcos(j4);
IkReal x13828=IKsin(j4);
IkReal x13829=(r00*sj5);
IkReal x13830=(cj5*r01);
IkReal x13831=(r20*sj5);
IkReal x13832=((1.0)*sj2);
IkReal x13833=(cj5*r21);
IkReal x13834=(cj5*r11);
IkReal x13835=(r10*sj5);
IkReal x13836=((1.0)*x13827);
IkReal x13837=((1.0)*x13828);
evalcond[0]=(((r22*x13828))+(((-1.0)*x13833*x13836))+(((-1.0)*x13831*x13836)));
evalcond[1]=((((-1.0)*x13834*x13836))+((r12*x13828))+(((-1.0)*x13835*x13836)));
evalcond[2]=((-1.0)+(((-1.0)*x13830*x13836))+(((-1.0)*x13829*x13836))+((r02*x13828)));
evalcond[3]=((((-1.0)*x13830*x13837))+(((-1.0)*x13829*x13837))+(((-1.0)*r02*x13836)));
evalcond[4]=((((-1.0)*x13834*x13837))+(((-1.0)*r12*x13836))+(((-1.0)*x13835*x13837))+(((-1.0)*sj1*x13832))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x13832))+(((-1.0)*r22*x13836))+(((-1.0)*x13833*x13837))+(((-1.0)*x13831*x13837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13838=((1.0)*sj5);
CheckValue<IkReal> x13839=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x13838)))),-1);
if(!x13839.valid){
continue;
}
CheckValue<IkReal> x13840 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13838)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13839.value)))+(x13840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13841=IKcos(j4);
IkReal x13842=IKsin(j4);
IkReal x13843=(r00*sj5);
IkReal x13844=(cj5*r01);
IkReal x13845=(r20*sj5);
IkReal x13846=((1.0)*sj2);
IkReal x13847=(cj5*r21);
IkReal x13848=(cj5*r11);
IkReal x13849=(r10*sj5);
IkReal x13850=((1.0)*x13841);
IkReal x13851=((1.0)*x13842);
evalcond[0]=((((-1.0)*x13845*x13850))+((r22*x13842))+(((-1.0)*x13847*x13850)));
evalcond[1]=((((-1.0)*x13848*x13850))+((r12*x13842))+(((-1.0)*x13849*x13850)));
evalcond[2]=((-1.0)+(((-1.0)*x13844*x13850))+(((-1.0)*x13843*x13850))+((r02*x13842)));
evalcond[3]=((((-1.0)*x13844*x13851))+(((-1.0)*x13843*x13851))+(((-1.0)*r02*x13850)));
evalcond[4]=((((-1.0)*r12*x13850))+(((-1.0)*x13848*x13851))+(((-1.0)*sj1*x13846))+((cj1*cj2))+(((-1.0)*x13849*x13851)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x13845*x13851))+(((-1.0)*r22*x13850))+(((-1.0)*cj1*x13846))+(((-1.0)*x13847*x13851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13852=((1.0)*cj5);
CheckValue<IkReal> x13853 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13852))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13853.valid){
continue;
}
CheckValue<IkReal> x13854=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x13852)))),-1);
if(!x13854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13853.value)+(((1.5707963267949)*(x13854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13855=IKcos(j4);
IkReal x13856=IKsin(j4);
IkReal x13857=(r00*sj5);
IkReal x13858=(cj5*r01);
IkReal x13859=(r20*sj5);
IkReal x13860=((1.0)*sj2);
IkReal x13861=(cj5*r21);
IkReal x13862=(cj5*r11);
IkReal x13863=(r10*sj5);
IkReal x13864=((1.0)*x13855);
IkReal x13865=((1.0)*x13856);
evalcond[0]=(((r22*x13856))+(((-1.0)*x13861*x13864))+(((-1.0)*x13859*x13864)));
evalcond[1]=((((-1.0)*x13862*x13864))+(((-1.0)*x13863*x13864))+((r12*x13856)));
evalcond[2]=((-1.0)+(((-1.0)*x13858*x13864))+(((-1.0)*x13857*x13864))+((r02*x13856)));
evalcond[3]=((((-1.0)*x13858*x13865))+(((-1.0)*x13857*x13865))+(((-1.0)*r02*x13864)));
evalcond[4]=((((-1.0)*x13862*x13865))+(((-1.0)*x13863*x13865))+(((-1.0)*r12*x13864))+(((-1.0)*sj1*x13860))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x13864))+(((-1.0)*cj2*sj1))+(((-1.0)*x13861*x13865))+(((-1.0)*cj1*x13860))+(((-1.0)*x13859*x13865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13866=((1.0)*cj5);
IkReal x13867=(((r11*sj5))+(((-1.0)*r10*x13866)));
j4eval[0]=x13867;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x13866))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x13867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13868=((1.0)*sj5);
IkReal x13869=(((cj5*r20))+(((-1.0)*r21*x13868)));
j4eval[0]=x13869;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13868))))));
j4eval[2]=IKsign(x13869);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13870=cj5*cj5;
IkReal x13871=r00*r00;
IkReal x13872=(r00*sj5);
IkReal x13873=(cj5*r01);
IkReal x13874=(x13871+(((-1.0)*x13870*x13871))+(((2.0)*x13872*x13873))+(r02*r02)+((x13870*(r01*r01))));
j4eval[0]=x13874;
j4eval[1]=IKsign(x13874);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x13872))+(((-1.0)*x13873))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13875=cj5*cj5;
IkReal x13876=r00*r00;
IkReal x13877=(cj5*r01);
IkReal x13878=(r00*sj5);
CheckValue<IkReal> x13879=IKPowWithIntegerCheck(IKsign((x13876+(((2.0)*x13877*x13878))+((x13875*(r01*r01)))+(r02*r02)+(((-1.0)*x13875*x13876)))),-1);
if(!x13879.valid){
continue;
}
CheckValue<IkReal> x13880 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x13878))+(((-1.0)*x13877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13879.value)))+(x13880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13881=IKsin(j4);
IkReal x13882=IKcos(j4);
IkReal x13883=(r20*sj5);
IkReal x13884=((1.0)*sj2);
IkReal x13885=(r00*sj5);
IkReal x13886=(cj5*r21);
IkReal x13887=(cj5*r11);
IkReal x13888=(cj5*r01);
IkReal x13889=(r10*sj5);
IkReal x13890=((1.0)*x13882);
evalcond[0]=(((x13881*x13885))+((x13881*x13888))+((r02*x13882)));
evalcond[1]=((((-1.0)*x13883*x13890))+(((-1.0)*x13886*x13890))+((r22*x13881)));
evalcond[2]=((((-1.0)*x13889*x13890))+(((-1.0)*x13887*x13890))+((r12*x13881)));
evalcond[3]=((-1.0)+(((-1.0)*x13888*x13890))+(((-1.0)*x13885*x13890))+((r02*x13881)));
evalcond[4]=((((-1.0)*sj1*x13884))+((x13881*x13887))+((x13881*x13889))+((r12*x13882))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x13884))+((x13881*x13886))+((x13881*x13883))+(((-1.0)*cj2*sj1))+((r22*x13882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13891=((1.0)*sj5);
CheckValue<IkReal> x13892 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13891)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13892.valid){
continue;
}
CheckValue<IkReal> x13893=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x13891)))),-1);
if(!x13893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13892.value)+(((1.5707963267949)*(x13893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13894=IKsin(j4);
IkReal x13895=IKcos(j4);
IkReal x13896=(r20*sj5);
IkReal x13897=((1.0)*sj2);
IkReal x13898=(r00*sj5);
IkReal x13899=(cj5*r21);
IkReal x13900=(cj5*r11);
IkReal x13901=(cj5*r01);
IkReal x13902=(r10*sj5);
IkReal x13903=((1.0)*x13895);
evalcond[0]=(((x13894*x13901))+((r02*x13895))+((x13894*x13898)));
evalcond[1]=(((r22*x13894))+(((-1.0)*x13896*x13903))+(((-1.0)*x13899*x13903)));
evalcond[2]=((((-1.0)*x13902*x13903))+((r12*x13894))+(((-1.0)*x13900*x13903)));
evalcond[3]=((-1.0)+(((-1.0)*x13901*x13903))+(((-1.0)*x13898*x13903))+((r02*x13894)));
evalcond[4]=((((-1.0)*sj1*x13897))+((x13894*x13902))+((x13894*x13900))+((r12*x13895))+((cj1*cj2)));
evalcond[5]=(((r22*x13895))+(((-1.0)*cj1*x13897))+(((-1.0)*cj2*sj1))+((x13894*x13899))+((x13894*x13896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13904=((1.0)*cj5);
CheckValue<IkReal> x13905=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x13904)))),-1);
if(!x13905.valid){
continue;
}
CheckValue<IkReal> x13906 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13904))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13905.value)))+(x13906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13907=IKsin(j4);
IkReal x13908=IKcos(j4);
IkReal x13909=(r20*sj5);
IkReal x13910=((1.0)*sj2);
IkReal x13911=(r00*sj5);
IkReal x13912=(cj5*r21);
IkReal x13913=(cj5*r11);
IkReal x13914=(cj5*r01);
IkReal x13915=(r10*sj5);
IkReal x13916=((1.0)*x13908);
evalcond[0]=(((r02*x13908))+((x13907*x13911))+((x13907*x13914)));
evalcond[1]=(((r22*x13907))+(((-1.0)*x13909*x13916))+(((-1.0)*x13912*x13916)));
evalcond[2]=((((-1.0)*x13913*x13916))+(((-1.0)*x13915*x13916))+((r12*x13907)));
evalcond[3]=((-1.0)+(((-1.0)*x13914*x13916))+((r02*x13907))+(((-1.0)*x13911*x13916)));
evalcond[4]=((((-1.0)*sj1*x13910))+((r12*x13908))+((x13907*x13913))+((x13907*x13915))+((cj1*cj2)));
evalcond[5]=(((r22*x13908))+(((-1.0)*cj2*sj1))+((x13907*x13912))+((x13907*x13909))+(((-1.0)*cj1*x13910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13917=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13917);
rxp0_2=(py*r00);
rxp1_0=(r21*x13917);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x13918=(r00*sj5);
IkReal x13919=(cj5*r01);
j4eval[0]=(((cj3*x13918))+((cj3*x13919)));
j4eval[1]=((((-1.0)*x13919))+(((-1.0)*x13918)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13920=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13920);
rxp0_2=(py*r00);
rxp1_0=(r21*x13920);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x13921=((1.0)*r00*sj5);
IkReal x13922=((1.0)*cj5*r01);
j4eval[0]=((((-1.0)*sj3*x13922))+(((-1.0)*sj3*x13921)));
j4eval[1]=((((-1.0)*x13922))+(((-1.0)*x13921)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13923=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13923);
rxp0_2=(py*r00);
rxp1_0=(r21*x13923);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj3*cj5*r01))+((cj3*r00*sj5)));
j4eval[1]=cj3;
j4eval[2]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13924=IKPowWithIntegerCheck((((cj3*cj5*r01))+((cj3*r00*sj5))),-1);
if(!x13924.valid){
continue;
}
CheckValue<IkReal> x13925=IKPowWithIntegerCheck(cj3,-1);
if(!x13925.valid){
continue;
}
CheckValue<IkReal> x13926=IKPowWithIntegerCheck(r12,-1);
if(!x13926.valid){
continue;
}
if( IKabs(((x13924.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13925.value)*(x13926.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13924.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))))+IKsqr(((x13925.value)*(x13926.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13924.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))), ((x13925.value)*(x13926.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13927=IKcos(j4);
IkReal x13928=IKsin(j4);
IkReal x13929=((1.0)*sj2);
IkReal x13930=((1.0)*sj3);
IkReal x13931=(cj5*r21);
IkReal x13932=(r21*sj5);
IkReal x13933=(cj5*r00);
IkReal x13934=((1.0)*cj2);
IkReal x13935=((1.0)*cj3);
IkReal x13936=(r01*sj5);
IkReal x13937=(cj1*x13929);
IkReal x13938=(sj1*x13934);
IkReal x13939=(r20*x13930);
IkReal x13940=(sj5*x13928);
IkReal x13941=((1.0)*x13927);
IkReal x13942=(r12*x13927);
IkReal x13943=(cj5*r01*x13928);
IkReal x13944=(x13938+x13937);
evalcond[0]=(r12*x13928);
evalcond[1]=((((-1.0)*x13931*x13941))+(((-1.0)*r20*sj5*x13941)));
evalcond[2]=(((cj3*x13942))+(((-1.0)*x13944)));
evalcond[3]=((((-1.0)*sj1*x13929))+(((-1.0)*x13930*x13942))+((cj1*cj2)));
evalcond[4]=((-1.0)+(((-1.0)*cj5*r01*x13941))+(((-1.0)*r00*sj5*x13941)));
evalcond[5]=(((cj3*x13943))+((sj3*x13936))+((cj3*r00*x13940))+(((-1.0)*x13930*x13933)));
evalcond[6]=(((cj3*x13936))+(((-1.0)*r00*x13930*x13940))+(((-1.0)*x13930*x13943))+(((-1.0)*x13933*x13935)));
evalcond[7]=(((sj3*x13932))+((cj3*x13928*x13931))+((cj3*r20*x13940))+((sj1*sj2))+(((-1.0)*cj1*x13934))+(((-1.0)*cj5*x13939)));
evalcond[8]=(((cj3*x13932))+(((-1.0)*x13928*x13930*x13931))+(((-1.0)*cj5*r20*x13935))+(((-1.0)*x13944))+(((-1.0)*x13939*x13940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13945=((1.0)*r01);
IkReal x13946=((1.0)*r00*sj5);
CheckValue<IkReal> x13947=IKPowWithIntegerCheck(((((-1.0)*cj5*sj3*x13945))+(((-1.0)*sj3*x13946))),-1);
if(!x13947.valid){
continue;
}
CheckValue<IkReal> x13948=IKPowWithIntegerCheck(((((-1.0)*cj5*x13945))+(((-1.0)*x13946))),-1);
if(!x13948.valid){
continue;
}
if( IKabs(((x13947.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x13945)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13948.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13947.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x13945))))))+IKsqr(x13948.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13947.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x13945))))), x13948.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13949=IKcos(j4);
IkReal x13950=IKsin(j4);
IkReal x13951=((1.0)*sj2);
IkReal x13952=((1.0)*sj3);
IkReal x13953=(cj5*r21);
IkReal x13954=(r21*sj5);
IkReal x13955=(cj5*r00);
IkReal x13956=((1.0)*cj2);
IkReal x13957=((1.0)*cj3);
IkReal x13958=(r01*sj5);
IkReal x13959=(cj1*x13951);
IkReal x13960=(sj1*x13956);
IkReal x13961=(r20*x13952);
IkReal x13962=(sj5*x13950);
IkReal x13963=((1.0)*x13949);
IkReal x13964=(r12*x13949);
IkReal x13965=(cj5*r01*x13950);
IkReal x13966=(x13959+x13960);
evalcond[0]=(r12*x13950);
evalcond[1]=((((-1.0)*r20*sj5*x13963))+(((-1.0)*x13953*x13963)));
evalcond[2]=(((cj3*x13964))+(((-1.0)*x13966)));
evalcond[3]=(((cj1*cj2))+(((-1.0)*sj1*x13951))+(((-1.0)*x13952*x13964)));
evalcond[4]=((-1.0)+(((-1.0)*cj5*r01*x13963))+(((-1.0)*r00*sj5*x13963)));
evalcond[5]=((((-1.0)*x13952*x13955))+((cj3*r00*x13962))+((cj3*x13965))+((sj3*x13958)));
evalcond[6]=((((-1.0)*x13955*x13957))+((cj3*x13958))+(((-1.0)*r00*x13952*x13962))+(((-1.0)*x13952*x13965)));
evalcond[7]=(((cj3*x13950*x13953))+(((-1.0)*cj5*x13961))+((sj1*sj2))+((cj3*r20*x13962))+(((-1.0)*cj1*x13956))+((sj3*x13954)));
evalcond[8]=(((cj3*x13954))+(((-1.0)*cj5*r20*x13957))+(((-1.0)*x13966))+(((-1.0)*x13950*x13952*x13953))+(((-1.0)*x13961*x13962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13967=((1.0)*r01);
IkReal x13968=(r00*sj5);
CheckValue<IkReal> x13969=IKPowWithIntegerCheck((((cj3*cj5*r01))+((cj3*x13968))),-1);
if(!x13969.valid){
continue;
}
CheckValue<IkReal> x13970=IKPowWithIntegerCheck(((((-1.0)*cj5*x13967))+(((-1.0)*x13968))),-1);
if(!x13970.valid){
continue;
}
if( IKabs(((x13969.value)*((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x13967)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13970.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13969.value)*((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x13967))))))+IKsqr(x13970.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13969.value)*((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x13967))))), x13970.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13971=IKcos(j4);
IkReal x13972=IKsin(j4);
IkReal x13973=((1.0)*sj2);
IkReal x13974=((1.0)*sj3);
IkReal x13975=(cj5*r21);
IkReal x13976=(r21*sj5);
IkReal x13977=(cj5*r00);
IkReal x13978=((1.0)*cj2);
IkReal x13979=((1.0)*cj3);
IkReal x13980=(r01*sj5);
IkReal x13981=(cj1*x13973);
IkReal x13982=(sj1*x13978);
IkReal x13983=(r20*x13974);
IkReal x13984=(sj5*x13972);
IkReal x13985=((1.0)*x13971);
IkReal x13986=(r12*x13971);
IkReal x13987=(cj5*r01*x13972);
IkReal x13988=(x13982+x13981);
evalcond[0]=(r12*x13972);
evalcond[1]=((((-1.0)*x13975*x13985))+(((-1.0)*r20*sj5*x13985)));
evalcond[2]=(((cj3*x13986))+(((-1.0)*x13988)));
evalcond[3]=((((-1.0)*sj1*x13973))+(((-1.0)*x13974*x13986))+((cj1*cj2)));
evalcond[4]=((-1.0)+(((-1.0)*r00*sj5*x13985))+(((-1.0)*cj5*r01*x13985)));
evalcond[5]=(((sj3*x13980))+((cj3*x13987))+(((-1.0)*x13974*x13977))+((cj3*r00*x13984)));
evalcond[6]=(((cj3*x13980))+(((-1.0)*x13977*x13979))+(((-1.0)*x13974*x13987))+(((-1.0)*r00*x13974*x13984)));
evalcond[7]=(((cj3*r20*x13984))+((cj3*x13972*x13975))+((sj1*sj2))+((sj3*x13976))+(((-1.0)*cj5*x13983))+(((-1.0)*cj1*x13978)));
evalcond[8]=((((-1.0)*x13972*x13974*x13975))+(((-1.0)*x13988))+((cj3*x13976))+(((-1.0)*cj5*r20*x13979))+(((-1.0)*x13983*x13984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13989=cj5*cj5;
IkReal x13990=(cj3*r20);
IkReal x13991=((1.0)*sj3);
IkReal x13992=(r00*sj3);
IkReal x13993=(cj5*sj5);
IkReal x13994=(r01*r20);
IkReal x13995=(r01*x13993);
IkReal x13996=(r21*x13989);
CheckValue<IkReal> x13997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13989*x13990))+((cj3*r01*x13996))+((cj3*r00*r21*x13993))+((cj3*r02*r22))+((x13990*x13995))+((r00*x13990)))),-1);
if(!x13997.valid){
continue;
}
CheckValue<IkReal> x13998 = IKatan2WithCheck(IkReal((((x13992*x13996))+(((-1.0)*r21*x13991*x13995))+((r20*x13992*x13993))+((sj3*x13989*x13994))+(((-1.0)*x13991*x13994)))),IkReal(((((-1.0)*r01*r22*sj5*x13991))+((cj5*r22*x13992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13997.value)))+(x13998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13999=IKcos(j4);
IkReal x14000=IKsin(j4);
IkReal x14001=((1.0)*cj1);
IkReal x14002=(cj3*r10);
IkReal x14003=(sj3*sj5);
IkReal x14004=(sj1*sj2);
IkReal x14005=(cj3*sj5);
IkReal x14006=((1.0)*sj3);
IkReal x14007=(cj3*r00);
IkReal x14008=((1.0)*cj5);
IkReal x14009=(cj3*r20);
IkReal x14010=(sj2*x14001);
IkReal x14011=((1.0)*cj2*sj1);
IkReal x14012=(r20*x14006);
IkReal x14013=(sj5*x14000);
IkReal x14014=(cj5*x14006);
IkReal x14015=((1.0)*x13999);
IkReal x14016=(cj3*x13999);
IkReal x14017=(cj3*cj5*x14000);
IkReal x14018=(x14011+x14010);
evalcond[0]=((((-1.0)*r20*sj5*x14015))+((r22*x14000))+(((-1.0)*r21*x13999*x14008)));
evalcond[1]=((((-1.0)*r11*x13999*x14008))+((r12*x14000))+(((-1.0)*r10*sj5*x14015)));
evalcond[2]=((-1.0)+((r02*x14000))+(((-1.0)*r00*sj5*x14015))+(((-1.0)*r01*x13999*x14008)));
evalcond[3]=(((r00*x14000*x14005))+((r02*x14016))+((r01*x14003))+((r01*x14017))+(((-1.0)*r00*x14014)));
evalcond[4]=((((-1.0)*r00*x14000*x14003))+(((-1.0)*r02*x13999*x14006))+(((-1.0)*x14007*x14008))+((r01*x14005))+(((-1.0)*r01*x14000*x14014)));
evalcond[5]=(((r21*x14003))+(((-1.0)*cj2*x14001))+((r21*x14017))+((r22*x14016))+x14004+(((-1.0)*cj5*x14012))+((r20*x14000*x14005)));
evalcond[6]=((((-1.0)*x14018))+((x14002*x14013))+((r11*x14017))+((r11*x14003))+((r12*x14016))+(((-1.0)*r10*x14014)));
evalcond[7]=((((-1.0)*r12*x13999*x14006))+((r11*x14005))+(((-1.0)*x14002*x14008))+(((-1.0)*r11*x14000*x14014))+(((-1.0)*r10*x14000*x14003))+((cj1*cj2))+(((-1.0)*x14004)));
evalcond[8]=((((-1.0)*x14018))+((r21*x14005))+(((-1.0)*r22*x13999*x14006))+(((-1.0)*r21*x14000*x14014))+(((-1.0)*r20*x14000*x14003))+(((-1.0)*x14008*x14009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14019=((1.0)*sj5);
CheckValue<IkReal> x14020=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x14019)))),-1);
if(!x14020.valid){
continue;
}
CheckValue<IkReal> x14021 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x14019)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14020.value)))+(x14021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14022=IKcos(j4);
IkReal x14023=IKsin(j4);
IkReal x14024=((1.0)*cj1);
IkReal x14025=(cj3*r10);
IkReal x14026=(sj3*sj5);
IkReal x14027=(sj1*sj2);
IkReal x14028=(cj3*sj5);
IkReal x14029=((1.0)*sj3);
IkReal x14030=(cj3*r00);
IkReal x14031=((1.0)*cj5);
IkReal x14032=(cj3*r20);
IkReal x14033=(sj2*x14024);
IkReal x14034=((1.0)*cj2*sj1);
IkReal x14035=(r20*x14029);
IkReal x14036=(sj5*x14023);
IkReal x14037=(cj5*x14029);
IkReal x14038=((1.0)*x14022);
IkReal x14039=(cj3*x14022);
IkReal x14040=(cj3*cj5*x14023);
IkReal x14041=(x14033+x14034);
evalcond[0]=(((r22*x14023))+(((-1.0)*r21*x14022*x14031))+(((-1.0)*r20*sj5*x14038)));
evalcond[1]=((((-1.0)*r10*sj5*x14038))+(((-1.0)*r11*x14022*x14031))+((r12*x14023)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x14022*x14031))+(((-1.0)*r00*sj5*x14038))+((r02*x14023)));
evalcond[3]=(((r01*x14026))+((r01*x14040))+(((-1.0)*r00*x14037))+((r02*x14039))+((r00*x14023*x14028)));
evalcond[4]=((((-1.0)*r00*x14023*x14026))+(((-1.0)*r02*x14022*x14029))+((r01*x14028))+(((-1.0)*x14030*x14031))+(((-1.0)*r01*x14023*x14037)));
evalcond[5]=(((r22*x14039))+((r20*x14023*x14028))+(((-1.0)*cj5*x14035))+((r21*x14026))+((r21*x14040))+x14027+(((-1.0)*cj2*x14024)));
evalcond[6]=(((r11*x14040))+((r11*x14026))+((x14025*x14036))+(((-1.0)*x14041))+((r12*x14039))+(((-1.0)*r10*x14037)));
evalcond[7]=((((-1.0)*r12*x14022*x14029))+((r11*x14028))+(((-1.0)*x14027))+(((-1.0)*r10*x14023*x14026))+(((-1.0)*r11*x14023*x14037))+(((-1.0)*x14025*x14031))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x14031*x14032))+(((-1.0)*r20*x14023*x14026))+((r21*x14028))+(((-1.0)*r22*x14022*x14029))+(((-1.0)*x14041))+(((-1.0)*r21*x14023*x14037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14042=((1.0)*cj5);
CheckValue<IkReal> x14043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14042))+((r11*sj5)))),-1);
if(!x14043.valid){
continue;
}
CheckValue<IkReal> x14044 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x14042))+(((-1.0)*r20*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14043.value)))+(x14044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14045=IKcos(j4);
IkReal x14046=IKsin(j4);
IkReal x14047=((1.0)*cj1);
IkReal x14048=(cj3*r10);
IkReal x14049=(sj3*sj5);
IkReal x14050=(sj1*sj2);
IkReal x14051=(cj3*sj5);
IkReal x14052=((1.0)*sj3);
IkReal x14053=(cj3*r00);
IkReal x14054=((1.0)*cj5);
IkReal x14055=(cj3*r20);
IkReal x14056=(sj2*x14047);
IkReal x14057=((1.0)*cj2*sj1);
IkReal x14058=(r20*x14052);
IkReal x14059=(sj5*x14046);
IkReal x14060=(cj5*x14052);
IkReal x14061=((1.0)*x14045);
IkReal x14062=(cj3*x14045);
IkReal x14063=(cj3*cj5*x14046);
IkReal x14064=(x14057+x14056);
evalcond[0]=(((r22*x14046))+(((-1.0)*r21*x14045*x14054))+(((-1.0)*r20*sj5*x14061)));
evalcond[1]=((((-1.0)*r10*sj5*x14061))+(((-1.0)*r11*x14045*x14054))+((r12*x14046)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x14045*x14054))+(((-1.0)*r00*sj5*x14061))+((r02*x14046)));
evalcond[3]=(((r02*x14062))+((r01*x14049))+(((-1.0)*r00*x14060))+((r01*x14063))+((r00*x14046*x14051)));
evalcond[4]=((((-1.0)*r02*x14045*x14052))+(((-1.0)*x14053*x14054))+(((-1.0)*r01*x14046*x14060))+(((-1.0)*r00*x14046*x14049))+((r01*x14051)));
evalcond[5]=((((-1.0)*cj2*x14047))+((r20*x14046*x14051))+((r22*x14062))+((r21*x14063))+((r21*x14049))+(((-1.0)*cj5*x14058))+x14050);
evalcond[6]=(((r11*x14049))+((x14048*x14059))+((r11*x14063))+(((-1.0)*x14064))+((r12*x14062))+(((-1.0)*r10*x14060)));
evalcond[7]=((((-1.0)*x14050))+((r11*x14051))+(((-1.0)*x14048*x14054))+(((-1.0)*r10*x14046*x14049))+((cj1*cj2))+(((-1.0)*r12*x14045*x14052))+(((-1.0)*r11*x14046*x14060)));
evalcond[8]=((((-1.0)*x14054*x14055))+(((-1.0)*r22*x14045*x14052))+(((-1.0)*x14064))+(((-1.0)*r20*x14046*x14049))+(((-1.0)*r21*x14046*x14060))+((r21*x14051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14065=((1.0)*sj5);
IkReal x14066=(((cj5*r10))+(((-1.0)*r11*x14065)));
j4eval[0]=x14066;
j4eval[1]=IKsign(x14066);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x14065))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14067=((1.0)*cj5);
IkReal x14068=(((r21*sj5))+(((-1.0)*r20*x14067)));
j4eval[0]=x14068;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14067))))));
j4eval[2]=IKsign(x14068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14069=cj5*cj5;
IkReal x14070=(cj3*r20);
IkReal x14071=(cj5*sj5);
IkReal x14072=(cj3*r21);
IkReal x14073=(((r00*x14071*x14072))+((r01*x14069*x14072))+((r01*x14070*x14071))+((r00*x14070))+((cj3*r02*r22))+(((-1.0)*r00*x14069*x14070)));
j4eval[0]=x14073;
j4eval[1]=IKsign(x14073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14074=((1.0)*sj5);
IkReal x14075=(((cj5*r10))+(((-1.0)*r11*x14074)));
j4eval[0]=x14075;
j4eval[1]=IKsign(x14075);
j4eval[2]=((IKabs(((((-1.0)*r20*x14074))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14076=((1.0)*cj5);
IkReal x14077=(((r21*sj5))+(((-1.0)*r20*x14076)));
j4eval[0]=x14077;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14076))))));
j4eval[2]=IKsign(x14077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14078=cj5*cj5;
IkReal x14079=r00*r00;
IkReal x14080=(cj5*r01);
IkReal x14081=(r00*sj5);
IkReal x14082=((((-1.0)*(r02*r02)))+(((-2.0)*x14080*x14081))+(((-1.0)*x14079))+(((-1.0)*x14078*(r01*r01)))+((x14078*x14079)));
j4eval[0]=x14082;
j4eval[1]=IKsign(x14082);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14081))+(((-1.0)*x14080))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14083=cj5*cj5;
IkReal x14084=r00*r00;
IkReal x14085=(cj5*r01);
IkReal x14086=(r00*sj5);
CheckValue<IkReal> x14087=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x14083*(r01*r01)))+(((-2.0)*x14085*x14086))+(((-1.0)*x14084))+((x14083*x14084)))),-1);
if(!x14087.valid){
continue;
}
CheckValue<IkReal> x14088 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14086))+(((-1.0)*x14085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14087.value)))+(x14088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14089=IKcos(j4);
IkReal x14090=IKsin(j4);
IkReal x14091=(r00*sj5);
IkReal x14092=(cj5*r01);
IkReal x14093=(r20*sj5);
IkReal x14094=((1.0)*cj2);
IkReal x14095=(cj5*r21);
IkReal x14096=(cj5*r11);
IkReal x14097=(r10*sj5);
IkReal x14098=((1.0)*x14089);
IkReal x14099=((1.0)*x14090);
evalcond[0]=((((-1.0)*x14093*x14098))+(((-1.0)*x14095*x14098))+((r22*x14090)));
evalcond[1]=((((-1.0)*x14096*x14098))+(((-1.0)*x14097*x14098))+((r12*x14090)));
evalcond[2]=((1.0)+(((-1.0)*x14092*x14098))+(((-1.0)*x14091*x14098))+((r02*x14090)));
evalcond[3]=((((-1.0)*x14092*x14099))+(((-1.0)*r02*x14098))+(((-1.0)*x14091*x14099)));
evalcond[4]=((((-1.0)*r12*x14098))+((sj1*sj2))+(((-1.0)*x14096*x14099))+(((-1.0)*x14097*x14099))+(((-1.0)*cj1*x14094)));
evalcond[5]=((((-1.0)*x14093*x14099))+(((-1.0)*sj1*x14094))+(((-1.0)*r22*x14098))+(((-1.0)*cj1*sj2))+(((-1.0)*x14095*x14099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14100=((1.0)*cj5);
CheckValue<IkReal> x14101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14100))+((r21*sj5)))),-1);
if(!x14101.valid){
continue;
}
CheckValue<IkReal> x14102 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14100)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14101.value)))+(x14102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14103=IKcos(j4);
IkReal x14104=IKsin(j4);
IkReal x14105=(r00*sj5);
IkReal x14106=(cj5*r01);
IkReal x14107=(r20*sj5);
IkReal x14108=((1.0)*cj2);
IkReal x14109=(cj5*r21);
IkReal x14110=(cj5*r11);
IkReal x14111=(r10*sj5);
IkReal x14112=((1.0)*x14103);
IkReal x14113=((1.0)*x14104);
evalcond[0]=(((r22*x14104))+(((-1.0)*x14107*x14112))+(((-1.0)*x14109*x14112)));
evalcond[1]=((((-1.0)*x14110*x14112))+(((-1.0)*x14111*x14112))+((r12*x14104)));
evalcond[2]=((1.0)+((r02*x14104))+(((-1.0)*x14105*x14112))+(((-1.0)*x14106*x14112)));
evalcond[3]=((((-1.0)*x14105*x14113))+(((-1.0)*r02*x14112))+(((-1.0)*x14106*x14113)));
evalcond[4]=((((-1.0)*cj1*x14108))+(((-1.0)*x14110*x14113))+((sj1*sj2))+(((-1.0)*r12*x14112))+(((-1.0)*x14111*x14113)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x14112))+(((-1.0)*sj1*x14108))+(((-1.0)*x14107*x14113))+(((-1.0)*x14109*x14113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14114=((1.0)*sj5);
CheckValue<IkReal> x14115 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14114))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14115.valid){
continue;
}
CheckValue<IkReal> x14116=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x14114)))),-1);
if(!x14116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14115.value)+(((1.5707963267949)*(x14116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14117=IKcos(j4);
IkReal x14118=IKsin(j4);
IkReal x14119=(r00*sj5);
IkReal x14120=(cj5*r01);
IkReal x14121=(r20*sj5);
IkReal x14122=((1.0)*cj2);
IkReal x14123=(cj5*r21);
IkReal x14124=(cj5*r11);
IkReal x14125=(r10*sj5);
IkReal x14126=((1.0)*x14117);
IkReal x14127=((1.0)*x14118);
evalcond[0]=((((-1.0)*x14121*x14126))+((r22*x14118))+(((-1.0)*x14123*x14126)));
evalcond[1]=((((-1.0)*x14124*x14126))+((r12*x14118))+(((-1.0)*x14125*x14126)));
evalcond[2]=((1.0)+((r02*x14118))+(((-1.0)*x14120*x14126))+(((-1.0)*x14119*x14126)));
evalcond[3]=((((-1.0)*x14120*x14127))+(((-1.0)*r02*x14126))+(((-1.0)*x14119*x14127)));
evalcond[4]=((((-1.0)*r12*x14126))+(((-1.0)*x14124*x14127))+((sj1*sj2))+(((-1.0)*cj1*x14122))+(((-1.0)*x14125*x14127)));
evalcond[5]=((((-1.0)*x14121*x14127))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14122))+(((-1.0)*r22*x14126))+(((-1.0)*x14123*x14127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14128=((1.0)*sj5);
IkReal x14129=(((cj5*r10))+(((-1.0)*r11*x14128)));
j4eval[0]=x14129;
j4eval[1]=IKsign(x14129);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14128))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14130=((1.0)*cj5);
IkReal x14131=(((r21*sj5))+(((-1.0)*r20*x14130)));
j4eval[0]=x14131;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14130)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14132=(cj1*cj2);
IkReal x14133=(r00*sj5);
IkReal x14134=(cj5*r01);
IkReal x14135=(sj1*sj2);
IkReal x14136=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x14136;
j4eval[1]=IKsign(x14136);
j4eval[2]=((IKabs(((((-1.0)*x14134*x14135))+((x14132*x14134))+((x14132*x14133))+(((-1.0)*x14133*x14135)))))+(IKabs(((((-1.0)*r02*x14132))+((r02*x14135))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14137=(cj5*r01);
IkReal x14138=(cj1*cj2);
IkReal x14139=(sj1*sj2);
IkReal x14140=(r00*sj5);
CheckValue<IkReal> x14141 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14138))+((r02*x14139)))),IkReal(((((-1.0)*x14139*x14140))+((x14138*x14140))+(((-1.0)*x14137*x14139))+((x14137*x14138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14141.valid){
continue;
}
CheckValue<IkReal> x14142=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x14142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14141.value)+(((1.5707963267949)*(x14142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14143=IKsin(j4);
IkReal x14144=IKcos(j4);
IkReal x14145=(r20*sj5);
IkReal x14146=((1.0)*cj2);
IkReal x14147=(r00*sj5);
IkReal x14148=(cj5*r21);
IkReal x14149=(cj5*r01);
IkReal x14150=(r10*sj5);
IkReal x14151=(cj5*r11);
IkReal x14152=((1.0)*x14144);
evalcond[0]=(((r02*x14144))+((x14143*x14147))+((x14143*x14149)));
evalcond[1]=((((-1.0)*x14145*x14152))+(((-1.0)*x14148*x14152))+((r22*x14143)));
evalcond[2]=((((-1.0)*x14151*x14152))+((r12*x14143))+(((-1.0)*x14150*x14152)));
evalcond[3]=((1.0)+((r02*x14143))+(((-1.0)*x14147*x14152))+(((-1.0)*x14149*x14152)));
evalcond[4]=(((sj1*sj2))+((r12*x14144))+((x14143*x14151))+((x14143*x14150))+(((-1.0)*cj1*x14146)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x14143*x14145))+((x14143*x14148))+((r22*x14144))+(((-1.0)*sj1*x14146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14153=((1.0)*cj5);
CheckValue<IkReal> x14154 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14153)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14154.valid){
continue;
}
CheckValue<IkReal> x14155=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x14153)))),-1);
if(!x14155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14154.value)+(((1.5707963267949)*(x14155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14156=IKsin(j4);
IkReal x14157=IKcos(j4);
IkReal x14158=(r20*sj5);
IkReal x14159=((1.0)*cj2);
IkReal x14160=(r00*sj5);
IkReal x14161=(cj5*r21);
IkReal x14162=(cj5*r01);
IkReal x14163=(r10*sj5);
IkReal x14164=(cj5*r11);
IkReal x14165=((1.0)*x14157);
evalcond[0]=(((r02*x14157))+((x14156*x14162))+((x14156*x14160)));
evalcond[1]=(((r22*x14156))+(((-1.0)*x14158*x14165))+(((-1.0)*x14161*x14165)));
evalcond[2]=((((-1.0)*x14163*x14165))+(((-1.0)*x14164*x14165))+((r12*x14156)));
evalcond[3]=((1.0)+((r02*x14156))+(((-1.0)*x14162*x14165))+(((-1.0)*x14160*x14165)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14159))+((r12*x14157))+((x14156*x14164))+((x14156*x14163)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x14157))+(((-1.0)*sj1*x14159))+((x14156*x14161))+((x14156*x14158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14166=((1.0)*sj5);
CheckValue<IkReal> x14167 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14166))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14167.valid){
continue;
}
CheckValue<IkReal> x14168=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x14166)))),-1);
if(!x14168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14167.value)+(((1.5707963267949)*(x14168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14169=IKsin(j4);
IkReal x14170=IKcos(j4);
IkReal x14171=(r20*sj5);
IkReal x14172=((1.0)*cj2);
IkReal x14173=(r00*sj5);
IkReal x14174=(cj5*r21);
IkReal x14175=(cj5*r01);
IkReal x14176=(r10*sj5);
IkReal x14177=(cj5*r11);
IkReal x14178=((1.0)*x14170);
evalcond[0]=(((r02*x14170))+((x14169*x14175))+((x14169*x14173)));
evalcond[1]=(((r22*x14169))+(((-1.0)*x14174*x14178))+(((-1.0)*x14171*x14178)));
evalcond[2]=((((-1.0)*x14177*x14178))+(((-1.0)*x14176*x14178))+((r12*x14169)));
evalcond[3]=((1.0)+((r02*x14169))+(((-1.0)*x14173*x14178))+(((-1.0)*x14175*x14178)));
evalcond[4]=(((r12*x14170))+((sj1*sj2))+(((-1.0)*cj1*x14172))+((x14169*x14177))+((x14169*x14176)));
evalcond[5]=(((r22*x14170))+(((-1.0)*sj1*x14172))+(((-1.0)*cj1*sj2))+((x14169*x14174))+((x14169*x14171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14180 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14180)==0){
continue;
}
IkReal x14179=pow(x14180,-0.5);
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
IkReal gconst88=((-1.0)*(x14181.value));
IkReal gconst89=(r20*x14179);
IkReal gconst90=(r21*x14179);
CheckValue<IkReal> x14182 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14182.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14182.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14185 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14185.valid){
continue;
}
IkReal x14183=((-1.0)*(x14185.value));
IkReal x14184=x14179;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst89;
cj5=gconst90;
j5=x14183;
IkReal gconst88=x14183;
IkReal gconst89=(r20*x14184);
IkReal gconst90=(r21*x14184);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14186=gconst89*gconst89;
IkReal x14187=gconst90*gconst90;
IkReal x14188=(gconst89*sj3);
IkReal x14189=((1.0)*r01);
IkReal x14190=(gconst90*r00);
IkReal x14191=(cj3*r01);
IkReal x14192=(r11*x14187);
IkReal x14193=(r10*x14186);
CheckValue<IkReal> x14194 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x14189*x14193))+((r10*x14188*x14190))+((r00*sj3*x14192))+(((-1.0)*gconst90*r11*x14188*x14189)))),IkReal(((((-1.0)*r12*x14188*x14189))+((r12*sj3*x14190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14194.valid){
continue;
}
CheckValue<IkReal> x14195=IKPowWithIntegerCheck(IKsign((((cj3*gconst89*r11*x14190))+((cj3*r02*r12))+((gconst89*gconst90*r10*x14191))+((x14191*x14192))+((cj3*r00*x14193)))),-1);
if(!x14195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14194.value)+(((1.5707963267949)*(x14195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14196=IKcos(j4);
IkReal x14197=IKsin(j4);
IkReal x14198=(sj1*sj2);
IkReal x14199=(cj3*gconst89);
IkReal x14200=(gconst89*sj3);
IkReal x14201=((1.0)*cj2);
IkReal x14202=((1.0)*r00);
IkReal x14203=(cj3*gconst90);
IkReal x14204=((1.0)*r20);
IkReal x14205=(cj1*sj2);
IkReal x14206=((1.0)*r10);
IkReal x14207=(gconst90*sj3);
IkReal x14208=(cj1*x14201);
IkReal x14209=(gconst89*x14206);
IkReal x14210=(r20*x14197);
IkReal x14211=(sj3*x14197);
IkReal x14212=((1.0)*x14196);
IkReal x14213=(cj3*x14196);
IkReal x14214=((1.0)*x14197*x14207);
evalcond[0]=((((-1.0)*gconst90*r21*x14212))+((r22*x14197))+(((-1.0)*gconst89*x14196*x14204)));
evalcond[1]=((((-1.0)*x14196*x14209))+(((-1.0)*gconst90*r11*x14212))+((r12*x14197)));
evalcond[2]=((1.0)+(((-1.0)*gconst90*r01*x14212))+((r02*x14197))+(((-1.0)*gconst89*x14196*x14202)));
evalcond[3]=(((r00*x14197*x14199))+((r01*x14197*x14203))+((r01*x14200))+(((-1.0)*x14202*x14207))+((r02*x14213)));
evalcond[4]=((((-1.0)*r02*sj3*x14212))+(((-1.0)*r01*x14214))+(((-1.0)*x14197*x14200*x14202))+((r01*x14199))+(((-1.0)*x14202*x14203)));
evalcond[5]=(((cj2*sj1))+((r12*x14213))+(((-1.0)*x14206*x14207))+((r11*x14197*x14203))+((r11*x14200))+x14205+((r10*x14197*x14199)));
evalcond[6]=(((r21*x14197*x14203))+(((-1.0)*x14208))+((r22*x14213))+((r21*x14200))+(((-1.0)*x14204*x14207))+((x14199*x14210))+x14198);
evalcond[7]=((((-1.0)*x14208))+(((-1.0)*x14197*x14200*x14206))+((r11*x14199))+x14198+(((-1.0)*x14203*x14206))+(((-1.0)*r12*sj3*x14212))+(((-1.0)*r11*x14214)));
evalcond[8]=((((-1.0)*r21*x14214))+(((-1.0)*sj1*x14201))+(((-1.0)*x14197*x14200*x14204))+(((-1.0)*r22*sj3*x14212))+(((-1.0)*x14205))+(((-1.0)*x14203*x14204))+((r21*x14199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14215=((1.0)*gconst89);
CheckValue<IkReal> x14216=IKPowWithIntegerCheck(IKsign((((gconst90*r10))+(((-1.0)*r11*x14215)))),-1);
if(!x14216.valid){
continue;
}
CheckValue<IkReal> x14217 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14215))+(((-1.0)*gconst90*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14216.value)))+(x14217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14218=IKcos(j4);
IkReal x14219=IKsin(j4);
IkReal x14220=(sj1*sj2);
IkReal x14221=(cj3*gconst89);
IkReal x14222=(gconst89*sj3);
IkReal x14223=((1.0)*cj2);
IkReal x14224=((1.0)*r00);
IkReal x14225=(cj3*gconst90);
IkReal x14226=((1.0)*r20);
IkReal x14227=(cj1*sj2);
IkReal x14228=((1.0)*r10);
IkReal x14229=(gconst90*sj3);
IkReal x14230=(cj1*x14223);
IkReal x14231=(gconst89*x14228);
IkReal x14232=(r20*x14219);
IkReal x14233=(sj3*x14219);
IkReal x14234=((1.0)*x14218);
IkReal x14235=(cj3*x14218);
IkReal x14236=((1.0)*x14219*x14229);
evalcond[0]=(((r22*x14219))+(((-1.0)*gconst90*r21*x14234))+(((-1.0)*gconst89*x14218*x14226)));
evalcond[1]=((((-1.0)*x14218*x14231))+((r12*x14219))+(((-1.0)*gconst90*r11*x14234)));
evalcond[2]=((1.0)+(((-1.0)*gconst90*r01*x14234))+((r02*x14219))+(((-1.0)*gconst89*x14218*x14224)));
evalcond[3]=(((r02*x14235))+((r00*x14219*x14221))+(((-1.0)*x14224*x14229))+((r01*x14219*x14225))+((r01*x14222)));
evalcond[4]=((((-1.0)*r01*x14236))+(((-1.0)*x14219*x14222*x14224))+(((-1.0)*x14224*x14225))+(((-1.0)*r02*sj3*x14234))+((r01*x14221)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x14228*x14229))+((r11*x14222))+((r12*x14235))+((r10*x14219*x14221))+x14227+((r11*x14219*x14225)));
evalcond[6]=((((-1.0)*x14226*x14229))+(((-1.0)*x14230))+((r21*x14219*x14225))+((r21*x14222))+((x14221*x14232))+((r22*x14235))+x14220);
evalcond[7]=((((-1.0)*x14230))+(((-1.0)*x14219*x14222*x14228))+(((-1.0)*r11*x14236))+(((-1.0)*r12*sj3*x14234))+((r11*x14221))+(((-1.0)*x14225*x14228))+x14220);
evalcond[8]=((((-1.0)*sj1*x14223))+(((-1.0)*x14219*x14222*x14226))+(((-1.0)*r21*x14236))+((r21*x14221))+(((-1.0)*r22*sj3*x14234))+(((-1.0)*x14227))+(((-1.0)*x14225*x14226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14239 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14239)==0){
continue;
}
IkReal x14237=pow(x14239,-0.5);
IkReal x14238=((-1.0)*x14237);
CheckValue<IkReal> x14240 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14240.valid){
continue;
}
IkReal gconst91=((3.14159265358979)+(((-1.0)*(x14240.value))));
IkReal gconst92=(r20*x14238);
IkReal gconst93=(r21*x14238);
CheckValue<IkReal> x14241 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14241.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14241.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14245 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14245.valid){
continue;
}
IkReal x14242=((1.0)*(x14245.value));
IkReal x14243=x14237;
IkReal x14244=((-1.0)*x14243);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst92;
cj5=gconst93;
j5=((3.14159265)+(((-1.0)*x14242)));
IkReal gconst91=((3.14159265358979)+(((-1.0)*x14242)));
IkReal gconst92=(r20*x14244);
IkReal gconst93=(r21*x14244);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x14249 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14249.valid){
continue;
}
IkReal x14246=((1.0)*(x14249.value));
IkReal x14247=x14237;
IkReal x14248=((-1.0)*x14247);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst92;
cj5=gconst93;
j5=((3.14159265)+(((-1.0)*x14246)));
IkReal gconst91=((3.14159265358979)+(((-1.0)*x14246)));
IkReal gconst92=(r20*x14248);
IkReal gconst93=(r21*x14248);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14253 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x14253.valid){
continue;
}
IkReal x14250=((1.0)*(x14253.value));
IkReal x14251=x14237;
IkReal x14252=((-1.0)*x14251);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst92;
cj5=gconst93;
j5=((3.14159265)+(((-1.0)*x14250)));
IkReal gconst91=((3.14159265358979)+(((-1.0)*x14250)));
IkReal gconst92=(r20*x14252);
IkReal gconst93=(r21*x14252);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14254=gconst93*gconst93;
IkReal x14255=gconst92*gconst92;
IkReal x14256=(r21*sj3);
IkReal x14257=(cj3*r21);
IkReal x14258=(cj3*r20);
IkReal x14259=(r22*sj3);
IkReal x14260=((1.0)*r01);
IkReal x14261=(gconst93*r00);
IkReal x14262=(r20*sj3);
IkReal x14263=(gconst92*gconst93*r01);
CheckValue<IkReal> x14264=IKPowWithIntegerCheck(IKsign((((r01*x14254*x14257))+((r00*x14255*x14258))+((gconst92*x14257*x14261))+((x14258*x14263))+((cj3*r02*r22)))),-1);
if(!x14264.valid){
continue;
}
CheckValue<IkReal> x14265 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*gconst93*x14256*x14260))+(((-1.0)*x14255*x14260*x14262))+((gconst92*x14261*x14262))+((r00*x14254*x14256)))),IkReal(((((-1.0)*gconst92*x14259*x14260))+((x14259*x14261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14264.value)))+(x14265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14266=IKcos(j4);
IkReal x14267=IKsin(j4);
IkReal x14268=(sj1*sj2);
IkReal x14269=((1.0)*gconst93);
IkReal x14270=(gconst92*sj3);
IkReal x14271=(gconst92*r10);
IkReal x14272=((1.0)*cj2);
IkReal x14273=(cj1*sj2);
IkReal x14274=(cj3*gconst92);
IkReal x14275=((1.0)*sj3);
IkReal x14276=(gconst92*r20);
IkReal x14277=(gconst92*r00);
IkReal x14278=(cj1*x14272);
IkReal x14279=(cj3*x14267);
IkReal x14280=((1.0)*x14267);
IkReal x14281=(sj3*x14267);
IkReal x14282=(r22*x14266);
IkReal x14283=(r12*x14266);
IkReal x14284=((1.0)*x14266);
IkReal x14285=(r02*x14266);
evalcond[0]=((((-1.0)*x14276*x14284))+(((-1.0)*r21*x14266*x14269))+((r22*x14267)));
evalcond[1]=(((r12*x14267))+(((-1.0)*r11*x14266*x14269))+(((-1.0)*x14271*x14284)));
evalcond[2]=((1.0)+(((-1.0)*r01*x14266*x14269))+((r02*x14267))+(((-1.0)*x14277*x14284)));
evalcond[3]=(((r01*x14270))+((cj3*x14285))+((gconst93*r01*x14279))+((r00*x14267*x14274))+(((-1.0)*r00*sj3*x14269)));
evalcond[4]=(((r01*x14274))+(((-1.0)*r01*x14269*x14281))+(((-1.0)*r00*x14270*x14280))+(((-1.0)*cj3*r00*x14269))+(((-1.0)*x14275*x14285)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*sj3*x14269))+((cj3*x14283))+((r11*x14270))+((x14271*x14279))+((gconst93*r11*x14279))+x14273);
evalcond[6]=(((cj3*x14282))+(((-1.0)*r20*sj3*x14269))+((r21*x14270))+(((-1.0)*x14278))+((gconst93*r21*x14279))+((r20*x14267*x14274))+x14268);
evalcond[7]=((((-1.0)*r10*x14270*x14280))+(((-1.0)*x14278))+((r11*x14274))+(((-1.0)*r11*x14269*x14281))+(((-1.0)*cj3*r10*x14269))+(((-1.0)*x14275*x14283))+x14268);
evalcond[8]=((((-1.0)*x14273))+((r21*x14274))+(((-1.0)*r21*x14269*x14281))+(((-1.0)*sj1*x14272))+(((-1.0)*r20*x14270*x14280))+(((-1.0)*cj3*r20*x14269))+(((-1.0)*x14275*x14282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14286=((1.0)*gconst93);
CheckValue<IkReal> x14287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14286))+((gconst92*r21)))),-1);
if(!x14287.valid){
continue;
}
CheckValue<IkReal> x14288 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x14286))+(((-1.0)*gconst92*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14287.value)))+(x14288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14289=IKcos(j4);
IkReal x14290=IKsin(j4);
IkReal x14291=(sj1*sj2);
IkReal x14292=((1.0)*gconst93);
IkReal x14293=(gconst92*sj3);
IkReal x14294=(gconst92*r10);
IkReal x14295=((1.0)*cj2);
IkReal x14296=(cj1*sj2);
IkReal x14297=(cj3*gconst92);
IkReal x14298=((1.0)*sj3);
IkReal x14299=(gconst92*r20);
IkReal x14300=(gconst92*r00);
IkReal x14301=(cj1*x14295);
IkReal x14302=(cj3*x14290);
IkReal x14303=((1.0)*x14290);
IkReal x14304=(sj3*x14290);
IkReal x14305=(r22*x14289);
IkReal x14306=(r12*x14289);
IkReal x14307=((1.0)*x14289);
IkReal x14308=(r02*x14289);
evalcond[0]=((((-1.0)*x14299*x14307))+(((-1.0)*r21*x14289*x14292))+((r22*x14290)));
evalcond[1]=((((-1.0)*x14294*x14307))+(((-1.0)*r11*x14289*x14292))+((r12*x14290)));
evalcond[2]=((1.0)+((r02*x14290))+(((-1.0)*x14300*x14307))+(((-1.0)*r01*x14289*x14292)));
evalcond[3]=(((gconst93*r01*x14302))+((r01*x14293))+(((-1.0)*r00*sj3*x14292))+((r00*x14290*x14297))+((cj3*x14308)));
evalcond[4]=((((-1.0)*x14298*x14308))+((r01*x14297))+(((-1.0)*r00*x14293*x14303))+(((-1.0)*cj3*r00*x14292))+(((-1.0)*r01*x14292*x14304)));
evalcond[5]=(((cj2*sj1))+((r11*x14293))+(((-1.0)*r10*sj3*x14292))+((gconst93*r11*x14302))+x14296+((x14294*x14302))+((cj3*x14306)));
evalcond[6]=(((r20*x14290*x14297))+((r21*x14293))+(((-1.0)*r20*sj3*x14292))+x14291+((cj3*x14305))+(((-1.0)*x14301))+((gconst93*r21*x14302)));
evalcond[7]=((((-1.0)*x14298*x14306))+(((-1.0)*cj3*r10*x14292))+((r11*x14297))+(((-1.0)*r10*x14293*x14303))+x14291+(((-1.0)*r11*x14292*x14304))+(((-1.0)*x14301)));
evalcond[8]=((((-1.0)*x14298*x14305))+((r21*x14297))+(((-1.0)*r21*x14292*x14304))+(((-1.0)*x14296))+(((-1.0)*cj3*r20*x14292))+(((-1.0)*sj1*x14295))+(((-1.0)*r20*x14293*x14303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14309=((1.0)*gconst92);
CheckValue<IkReal> x14310 = IKatan2WithCheck(IkReal(((((-1.0)*gconst93*r21))+(((-1.0)*r20*x14309)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14310.valid){
continue;
}
CheckValue<IkReal> x14311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14309))+((gconst93*r10)))),-1);
if(!x14311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14310.value)+(((1.5707963267949)*(x14311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14312=IKcos(j4);
IkReal x14313=IKsin(j4);
IkReal x14314=(sj1*sj2);
IkReal x14315=((1.0)*gconst93);
IkReal x14316=(gconst92*sj3);
IkReal x14317=(gconst92*r10);
IkReal x14318=((1.0)*cj2);
IkReal x14319=(cj1*sj2);
IkReal x14320=(cj3*gconst92);
IkReal x14321=((1.0)*sj3);
IkReal x14322=(gconst92*r20);
IkReal x14323=(gconst92*r00);
IkReal x14324=(cj1*x14318);
IkReal x14325=(cj3*x14313);
IkReal x14326=((1.0)*x14313);
IkReal x14327=(sj3*x14313);
IkReal x14328=(r22*x14312);
IkReal x14329=(r12*x14312);
IkReal x14330=((1.0)*x14312);
IkReal x14331=(r02*x14312);
evalcond[0]=((((-1.0)*x14322*x14330))+(((-1.0)*r21*x14312*x14315))+((r22*x14313)));
evalcond[1]=((((-1.0)*x14317*x14330))+(((-1.0)*r11*x14312*x14315))+((r12*x14313)));
evalcond[2]=((1.0)+((r02*x14313))+(((-1.0)*x14323*x14330))+(((-1.0)*r01*x14312*x14315)));
evalcond[3]=((((-1.0)*r00*sj3*x14315))+((gconst93*r01*x14325))+((r01*x14316))+((r00*x14313*x14320))+((cj3*x14331)));
evalcond[4]=((((-1.0)*x14321*x14331))+((r01*x14320))+(((-1.0)*r01*x14315*x14327))+(((-1.0)*r00*x14316*x14326))+(((-1.0)*cj3*r00*x14315)));
evalcond[5]=(((r11*x14316))+((cj2*sj1))+((gconst93*r11*x14325))+(((-1.0)*r10*sj3*x14315))+((x14317*x14325))+((cj3*x14329))+x14319);
evalcond[6]=(((r20*x14313*x14320))+(((-1.0)*r20*sj3*x14315))+((cj3*x14328))+(((-1.0)*x14324))+((r21*x14316))+x14314+((gconst93*r21*x14325)));
evalcond[7]=((((-1.0)*cj3*r10*x14315))+(((-1.0)*r10*x14316*x14326))+((r11*x14320))+(((-1.0)*x14321*x14329))+(((-1.0)*x14324))+x14314+(((-1.0)*r11*x14315*x14327)));
evalcond[8]=((((-1.0)*cj3*r20*x14315))+(((-1.0)*sj1*x14318))+(((-1.0)*x14319))+((r21*x14320))+(((-1.0)*x14321*x14328))+(((-1.0)*r21*x14315*x14327))+(((-1.0)*r20*x14316*x14326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14334 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14334)==0){
continue;
}
IkReal x14332=pow(x14334,-0.5);
IkReal x14333=((-1.0)*x14332);
CheckValue<IkReal> x14335 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14335.valid){
continue;
}
IkReal gconst94=((-1.0)*(x14335.value));
IkReal gconst95=(r10*x14333);
IkReal gconst96=(r11*x14333);
CheckValue<IkReal> x14336 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14336.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x14336.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14340 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14340.valid){
continue;
}
IkReal x14337=((-1.0)*(x14340.value));
IkReal x14338=x14332;
IkReal x14339=((-1.0)*x14338);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst95;
cj5=gconst96;
j5=x14337;
IkReal gconst94=x14337;
IkReal gconst95=(r10*x14339);
IkReal gconst96=(r11*x14339);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14341=gconst96*gconst96;
IkReal x14342=gconst95*gconst95;
IkReal x14343=(cj3*r00);
IkReal x14344=(cj3*r01);
IkReal x14345=(r00*sj3);
IkReal x14346=(gconst95*gconst96*r21);
IkReal x14347=(r20*x14342);
IkReal x14348=(r21*x14341);
IkReal x14349=((1.0)*r01*sj3);
IkReal x14350=(gconst95*gconst96*r20);
CheckValue<IkReal> x14351=IKPowWithIntegerCheck(IKsign((((x14343*x14346))+((x14343*x14347))+((x14344*x14348))+((cj3*r02*r22))+((x14344*x14350)))),-1);
if(!x14351.valid){
continue;
}
CheckValue<IkReal> x14352 = IKatan2WithCheck(IkReal((((x14345*x14348))+((x14345*x14350))+(((-1.0)*x14346*x14349))+(((-1.0)*x14347*x14349)))),IkReal(((((-1.0)*gconst95*r22*x14349))+((gconst96*r22*x14345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14351.value)))+(x14352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14353=IKcos(j4);
IkReal x14354=IKsin(j4);
IkReal x14355=(sj1*sj2);
IkReal x14356=(cj3*gconst96);
IkReal x14357=((1.0)*r10);
IkReal x14358=(cj3*gconst95);
IkReal x14359=(gconst95*sj3);
IkReal x14360=((1.0)*r00);
IkReal x14361=((1.0)*cj2);
IkReal x14362=(cj1*sj2);
IkReal x14363=((1.0)*r20);
IkReal x14364=(cj1*x14361);
IkReal x14365=(r11*x14354);
IkReal x14366=(r20*x14354);
IkReal x14367=(gconst95*x14353);
IkReal x14368=((1.0)*gconst96*sj3);
IkReal x14369=(r22*x14353);
IkReal x14370=((1.0)*x14353);
IkReal x14371=(r01*x14354);
IkReal x14372=(cj3*x14353);
IkReal x14373=(r21*x14354);
evalcond[0]=((((-1.0)*gconst96*r21*x14370))+((r22*x14354))+(((-1.0)*x14363*x14367)));
evalcond[1]=(((r12*x14354))+(((-1.0)*x14357*x14367))+(((-1.0)*gconst96*r11*x14370)));
evalcond[2]=((1.0)+((r02*x14354))+(((-1.0)*x14360*x14367))+(((-1.0)*gconst96*r01*x14370)));
evalcond[3]=((((-1.0)*gconst96*sj3*x14360))+((r01*x14359))+((x14356*x14371))+((r00*x14354*x14358))+((r02*x14372)));
evalcond[4]=((((-1.0)*x14356*x14360))+(((-1.0)*r02*sj3*x14370))+((r01*x14358))+(((-1.0)*x14354*x14359*x14360))+(((-1.0)*x14368*x14371)));
evalcond[5]=(((cj2*sj1))+((x14356*x14365))+(((-1.0)*gconst96*sj3*x14357))+((r11*x14359))+((r12*x14372))+((r10*x14354*x14358))+x14362);
evalcond[6]=((((-1.0)*gconst96*sj3*x14363))+((cj3*x14369))+(((-1.0)*x14364))+((x14356*x14373))+((r21*x14359))+((x14358*x14366))+x14355);
evalcond[7]=((((-1.0)*x14354*x14357*x14359))+(((-1.0)*x14356*x14357))+((r11*x14358))+(((-1.0)*r12*sj3*x14370))+(((-1.0)*x14364))+(((-1.0)*x14365*x14368))+x14355);
evalcond[8]=((((-1.0)*x14356*x14363))+(((-1.0)*sj1*x14361))+(((-1.0)*x14362))+((r21*x14358))+(((-1.0)*x14354*x14359*x14363))+(((-1.0)*sj3*x14369))+(((-1.0)*x14368*x14373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14374=((1.0)*gconst96);
CheckValue<IkReal> x14375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14374))+((gconst95*r21)))),-1);
if(!x14375.valid){
continue;
}
CheckValue<IkReal> x14376 = IKatan2WithCheck(IkReal(((((-1.0)*gconst95*r10))+(((-1.0)*r11*x14374)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14375.value)))+(x14376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14377=IKcos(j4);
IkReal x14378=IKsin(j4);
IkReal x14379=(sj1*sj2);
IkReal x14380=(cj3*gconst96);
IkReal x14381=((1.0)*r10);
IkReal x14382=(cj3*gconst95);
IkReal x14383=(gconst95*sj3);
IkReal x14384=((1.0)*r00);
IkReal x14385=((1.0)*cj2);
IkReal x14386=(cj1*sj2);
IkReal x14387=((1.0)*r20);
IkReal x14388=(cj1*x14385);
IkReal x14389=(r11*x14378);
IkReal x14390=(r20*x14378);
IkReal x14391=(gconst95*x14377);
IkReal x14392=((1.0)*gconst96*sj3);
IkReal x14393=(r22*x14377);
IkReal x14394=((1.0)*x14377);
IkReal x14395=(r01*x14378);
IkReal x14396=(cj3*x14377);
IkReal x14397=(r21*x14378);
evalcond[0]=((((-1.0)*gconst96*r21*x14394))+((r22*x14378))+(((-1.0)*x14387*x14391)));
evalcond[1]=((((-1.0)*gconst96*r11*x14394))+((r12*x14378))+(((-1.0)*x14381*x14391)));
evalcond[2]=((1.0)+(((-1.0)*x14384*x14391))+(((-1.0)*gconst96*r01*x14394))+((r02*x14378)));
evalcond[3]=(((r01*x14383))+((r00*x14378*x14382))+((x14380*x14395))+((r02*x14396))+(((-1.0)*gconst96*sj3*x14384)));
evalcond[4]=((((-1.0)*x14392*x14395))+(((-1.0)*r02*sj3*x14394))+((r01*x14382))+(((-1.0)*x14380*x14384))+(((-1.0)*x14378*x14383*x14384)));
evalcond[5]=(((cj2*sj1))+((r12*x14396))+((x14380*x14389))+((r11*x14383))+((r10*x14378*x14382))+(((-1.0)*gconst96*sj3*x14381))+x14386);
evalcond[6]=((((-1.0)*x14388))+((r21*x14383))+((x14380*x14397))+((cj3*x14393))+((x14382*x14390))+(((-1.0)*gconst96*sj3*x14387))+x14379);
evalcond[7]=((((-1.0)*x14388))+((r11*x14382))+(((-1.0)*x14380*x14381))+(((-1.0)*x14378*x14381*x14383))+(((-1.0)*x14389*x14392))+(((-1.0)*r12*sj3*x14394))+x14379);
evalcond[8]=((((-1.0)*x14392*x14397))+(((-1.0)*x14386))+((r21*x14382))+(((-1.0)*sj3*x14393))+(((-1.0)*x14380*x14387))+(((-1.0)*sj1*x14385))+(((-1.0)*x14378*x14383*x14387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14400 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14400)==0){
continue;
}
IkReal x14398=pow(x14400,-0.5);
IkReal x14399=((1.0)*x14398);
CheckValue<IkReal> x14401 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14401.valid){
continue;
}
IkReal gconst97=((3.14159265358979)+(((-1.0)*(x14401.value))));
IkReal gconst98=(r10*x14399);
IkReal gconst99=(r11*x14399);
CheckValue<IkReal> x14402 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x14402.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14406 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14406.valid){
continue;
}
IkReal x14403=((1.0)*(x14406.value));
IkReal x14404=x14398;
IkReal x14405=((1.0)*x14404);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst98;
cj5=gconst99;
j5=((3.14159265)+(((-1.0)*x14403)));
IkReal gconst97=((3.14159265358979)+(((-1.0)*x14403)));
IkReal gconst98=(r10*x14405);
IkReal gconst99=(r11*x14405);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14410 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14410.valid){
continue;
}
IkReal x14407=((1.0)*(x14410.value));
IkReal x14408=x14398;
IkReal x14409=((1.0)*x14408);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst98;
cj5=gconst99;
j5=((3.14159265)+(((-1.0)*x14407)));
IkReal gconst97=((3.14159265358979)+(((-1.0)*x14407)));
IkReal gconst98=(r10*x14409);
IkReal gconst99=(r11*x14409);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14411=gconst98*gconst98;
IkReal x14412=gconst99*gconst99;
IkReal x14413=(cj3*r20);
IkReal x14414=(gconst98*r01);
IkReal x14415=(r22*sj3);
IkReal x14416=(gconst99*r00);
IkReal x14417=(cj3*r21);
IkReal x14418=((1.0)*sj3);
CheckValue<IkReal> x14419 = IKatan2WithCheck(IkReal((((gconst98*r20*sj3*x14416))+((r00*r21*sj3*x14412))+(((-1.0)*gconst99*r21*x14414*x14418))+(((-1.0)*r01*r20*x14411*x14418)))),IkReal(((((-1.0)*x14414*x14415))+((x14415*x14416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14419.valid){
continue;
}
CheckValue<IkReal> x14420=IKPowWithIntegerCheck(IKsign((((r00*x14411*x14413))+((gconst98*x14416*x14417))+((cj3*r02*r22))+((gconst99*x14413*x14414))+((r01*x14412*x14417)))),-1);
if(!x14420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14419.value)+(((1.5707963267949)*(x14420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14421=IKcos(j4);
IkReal x14422=IKsin(j4);
IkReal x14423=(sj1*sj2);
IkReal x14424=((1.0)*sj3);
IkReal x14425=(gconst99*r11);
IkReal x14426=(gconst98*r20);
IkReal x14427=(gconst98*sj3);
IkReal x14428=(gconst99*r21);
IkReal x14429=((1.0)*cj1);
IkReal x14430=(gconst99*r01);
IkReal x14431=(cj3*gconst98);
IkReal x14432=(cj2*sj1);
IkReal x14433=(gconst99*r20);
IkReal x14434=((1.0)*cj3);
IkReal x14435=(gconst98*r00);
IkReal x14436=(gconst99*r10);
IkReal x14437=(gconst99*r00);
IkReal x14438=(cj2*x14429);
IkReal x14439=((1.0)*x14421);
IkReal x14440=(r02*x14421);
IkReal x14441=(cj3*x14422);
IkReal x14442=(r12*x14421);
IkReal x14443=(r22*x14421);
IkReal x14444=(gconst98*r10*x14422);
evalcond[0]=((((-1.0)*x14426*x14439))+(((-1.0)*x14428*x14439))+((r22*x14422)));
evalcond[1]=((((-1.0)*x14425*x14439))+((r12*x14422))+(((-1.0)*gconst98*r10*x14439)));
evalcond[2]=((1.0)+(((-1.0)*x14435*x14439))+((r02*x14422))+(((-1.0)*x14430*x14439)));
evalcond[3]=(((r01*x14427))+(((-1.0)*x14424*x14437))+((r00*x14422*x14431))+((x14430*x14441))+((cj3*x14440)));
evalcond[4]=(((r01*x14431))+(((-1.0)*x14434*x14437))+(((-1.0)*x14422*x14424*x14435))+(((-1.0)*x14422*x14424*x14430))+(((-1.0)*x14424*x14440)));
evalcond[5]=(((r11*x14427))+((cj1*sj2))+((x14425*x14441))+x14432+(((-1.0)*x14424*x14436))+((r10*x14422*x14431))+((cj3*x14442)));
evalcond[6]=((((-1.0)*x14438))+((x14428*x14441))+x14423+(((-1.0)*x14424*x14433))+((x14426*x14441))+((cj3*x14443))+((r21*x14427)));
evalcond[7]=((((-1.0)*x14438))+((r11*x14431))+x14423+(((-1.0)*x14434*x14436))+(((-1.0)*x14424*x14442))+(((-1.0)*x14424*x14444))+(((-1.0)*x14422*x14424*x14425)));
evalcond[8]=(((r21*x14431))+(((-1.0)*x14433*x14434))+(((-1.0)*sj2*x14429))+(((-1.0)*x14432))+(((-1.0)*x14424*x14443))+(((-1.0)*x14422*x14424*x14426))+(((-1.0)*x14422*x14424*x14428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14445=((1.0)*gconst99);
CheckValue<IkReal> x14446 = IKatan2WithCheck(IkReal(((((-1.0)*gconst98*r10))+(((-1.0)*r11*x14445)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14446.valid){
continue;
}
CheckValue<IkReal> x14447=IKPowWithIntegerCheck(IKsign((((gconst98*r21))+(((-1.0)*r20*x14445)))),-1);
if(!x14447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14446.value)+(((1.5707963267949)*(x14447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14448=IKcos(j4);
IkReal x14449=IKsin(j4);
IkReal x14450=(sj1*sj2);
IkReal x14451=((1.0)*sj3);
IkReal x14452=(gconst99*r11);
IkReal x14453=(gconst98*r20);
IkReal x14454=(gconst98*sj3);
IkReal x14455=(gconst99*r21);
IkReal x14456=((1.0)*cj1);
IkReal x14457=(gconst99*r01);
IkReal x14458=(cj3*gconst98);
IkReal x14459=(cj2*sj1);
IkReal x14460=(gconst99*r20);
IkReal x14461=((1.0)*cj3);
IkReal x14462=(gconst98*r00);
IkReal x14463=(gconst99*r10);
IkReal x14464=(gconst99*r00);
IkReal x14465=(cj2*x14456);
IkReal x14466=((1.0)*x14448);
IkReal x14467=(r02*x14448);
IkReal x14468=(cj3*x14449);
IkReal x14469=(r12*x14448);
IkReal x14470=(r22*x14448);
IkReal x14471=(gconst98*r10*x14449);
evalcond[0]=((((-1.0)*x14453*x14466))+(((-1.0)*x14455*x14466))+((r22*x14449)));
evalcond[1]=(((r12*x14449))+(((-1.0)*gconst98*r10*x14466))+(((-1.0)*x14452*x14466)));
evalcond[2]=((1.0)+(((-1.0)*x14462*x14466))+(((-1.0)*x14457*x14466))+((r02*x14449)));
evalcond[3]=(((cj3*x14467))+((x14457*x14468))+((r01*x14454))+(((-1.0)*x14451*x14464))+((r00*x14449*x14458)));
evalcond[4]=((((-1.0)*x14449*x14451*x14457))+((r01*x14458))+(((-1.0)*x14449*x14451*x14462))+(((-1.0)*x14451*x14467))+(((-1.0)*x14461*x14464)));
evalcond[5]=(((cj3*x14469))+((x14452*x14468))+((cj1*sj2))+((r11*x14454))+((r10*x14449*x14458))+(((-1.0)*x14451*x14463))+x14459);
evalcond[6]=((((-1.0)*x14451*x14460))+x14450+(((-1.0)*x14465))+((x14455*x14468))+((x14453*x14468))+((r21*x14454))+((cj3*x14470)));
evalcond[7]=((((-1.0)*x14449*x14451*x14452))+((r11*x14458))+(((-1.0)*x14451*x14471))+(((-1.0)*x14451*x14469))+x14450+(((-1.0)*x14465))+(((-1.0)*x14461*x14463)));
evalcond[8]=((((-1.0)*x14449*x14451*x14455))+(((-1.0)*x14449*x14451*x14453))+(((-1.0)*x14460*x14461))+(((-1.0)*sj2*x14456))+(((-1.0)*x14451*x14470))+(((-1.0)*x14459))+((r21*x14458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14472=((1.0)*gconst98);
CheckValue<IkReal> x14473 = IKatan2WithCheck(IkReal(((((-1.0)*gconst99*r21))+(((-1.0)*r20*x14472)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14473.valid){
continue;
}
CheckValue<IkReal> x14474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14472))+((gconst99*r10)))),-1);
if(!x14474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14473.value)+(((1.5707963267949)*(x14474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14475=IKcos(j4);
IkReal x14476=IKsin(j4);
IkReal x14477=(sj1*sj2);
IkReal x14478=((1.0)*sj3);
IkReal x14479=(gconst99*r11);
IkReal x14480=(gconst98*r20);
IkReal x14481=(gconst98*sj3);
IkReal x14482=(gconst99*r21);
IkReal x14483=((1.0)*cj1);
IkReal x14484=(gconst99*r01);
IkReal x14485=(cj3*gconst98);
IkReal x14486=(cj2*sj1);
IkReal x14487=(gconst99*r20);
IkReal x14488=((1.0)*cj3);
IkReal x14489=(gconst98*r00);
IkReal x14490=(gconst99*r10);
IkReal x14491=(gconst99*r00);
IkReal x14492=(cj2*x14483);
IkReal x14493=((1.0)*x14475);
IkReal x14494=(r02*x14475);
IkReal x14495=(cj3*x14476);
IkReal x14496=(r12*x14475);
IkReal x14497=(r22*x14475);
IkReal x14498=(gconst98*r10*x14476);
evalcond[0]=(((r22*x14476))+(((-1.0)*x14482*x14493))+(((-1.0)*x14480*x14493)));
evalcond[1]=((((-1.0)*gconst98*r10*x14493))+((r12*x14476))+(((-1.0)*x14479*x14493)));
evalcond[2]=((1.0)+((r02*x14476))+(((-1.0)*x14489*x14493))+(((-1.0)*x14484*x14493)));
evalcond[3]=(((x14484*x14495))+(((-1.0)*x14478*x14491))+((cj3*x14494))+((r00*x14476*x14485))+((r01*x14481)));
evalcond[4]=((((-1.0)*x14488*x14491))+(((-1.0)*x14478*x14494))+((r01*x14485))+(((-1.0)*x14476*x14478*x14484))+(((-1.0)*x14476*x14478*x14489)));
evalcond[5]=(((r11*x14481))+((r10*x14476*x14485))+((cj1*sj2))+(((-1.0)*x14478*x14490))+x14486+((cj3*x14496))+((x14479*x14495)));
evalcond[6]=(((x14480*x14495))+(((-1.0)*x14492))+((r21*x14481))+(((-1.0)*x14478*x14487))+x14477+((cj3*x14497))+((x14482*x14495)));
evalcond[7]=(((r11*x14485))+(((-1.0)*x14488*x14490))+(((-1.0)*x14492))+(((-1.0)*x14478*x14496))+(((-1.0)*x14478*x14498))+(((-1.0)*x14476*x14478*x14479))+x14477);
evalcond[8]=(((r21*x14485))+(((-1.0)*x14486))+(((-1.0)*x14478*x14497))+(((-1.0)*x14487*x14488))+(((-1.0)*sj2*x14483))+(((-1.0)*x14476*x14478*x14482))+(((-1.0)*x14476*x14478*x14480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14499=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14499);
rxp0_2=(py*r00);
rxp1_0=(r21*x14499);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14500=(r00*sj5);
IkReal x14501=(cj5*r01);
j4eval[0]=(((cj3*x14500))+((cj3*x14501)));
j4eval[1]=((((-1.0)*x14501))+(((-1.0)*x14500)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14502=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14502);
rxp0_2=(py*r00);
rxp1_0=(r21*x14502);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj3*cj5*r01))+((cj3*r00*sj5)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14503=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14503);
rxp0_2=(py*r00);
rxp1_0=(r21*x14503);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj3*cj5*r01))+((cj3*r00*sj5)));
j4eval[1]=cj3;
j4eval[2]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14504=IKPowWithIntegerCheck((((cj3*cj5*r01))+((cj3*r00*sj5))),-1);
if(!x14504.valid){
continue;
}
CheckValue<IkReal> x14505=IKPowWithIntegerCheck(cj3,-1);
if(!x14505.valid){
continue;
}
CheckValue<IkReal> x14506=IKPowWithIntegerCheck(r12,-1);
if(!x14506.valid){
continue;
}
if( IKabs(((x14504.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14505.value)*(x14506.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14504.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))))+IKsqr(((x14505.value)*(x14506.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14504.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))), ((x14505.value)*(x14506.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14507=IKcos(j4);
IkReal x14508=IKsin(j4);
IkReal x14509=(sj1*sj2);
IkReal x14510=((1.0)*cj1);
IkReal x14511=((1.0)*sj3);
IkReal x14512=(cj5*r21);
IkReal x14513=(r21*sj5);
IkReal x14514=(cj5*r00);
IkReal x14515=(cj2*sj1);
IkReal x14516=((1.0)*cj3);
IkReal x14517=(r01*sj5);
IkReal x14518=(cj2*x14510);
IkReal x14519=(r20*x14511);
IkReal x14520=(sj5*x14508);
IkReal x14521=((1.0)*x14507);
IkReal x14522=(r12*x14507);
IkReal x14523=(cj5*r01*x14508);
evalcond[0]=(r12*x14508);
evalcond[1]=(((cj1*sj2))+((cj3*x14522))+x14515);
evalcond[2]=((((-1.0)*x14512*x14521))+(((-1.0)*r20*sj5*x14521)));
evalcond[3]=((((-1.0)*x14511*x14522))+x14509+(((-1.0)*x14518)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r01*x14521))+(((-1.0)*r00*sj5*x14521)));
evalcond[5]=(((sj3*x14517))+(((-1.0)*x14511*x14514))+((cj3*x14523))+((cj3*r00*x14520)));
evalcond[6]=(((cj3*x14517))+(((-1.0)*x14511*x14523))+(((-1.0)*x14514*x14516))+(((-1.0)*r00*x14511*x14520)));
evalcond[7]=(((cj3*x14508*x14512))+((sj3*x14513))+(((-1.0)*cj5*x14519))+x14509+(((-1.0)*x14518))+((cj3*r20*x14520)));
evalcond[8]=(((cj3*x14513))+(((-1.0)*x14519*x14520))+(((-1.0)*x14508*x14511*x14512))+(((-1.0)*cj5*r20*x14516))+(((-1.0)*sj2*x14510))+(((-1.0)*x14515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14524=IKPowWithIntegerCheck((((cj3*cj5*r01))+((cj3*r00*sj5))),-1);
if(!x14524.valid){
continue;
}
CheckValue<IkReal> x14525=IKPowWithIntegerCheck(r12,-1);
if(!x14525.valid){
continue;
}
CheckValue<IkReal> x14526=IKPowWithIntegerCheck(sj3,-1);
if(!x14526.valid){
continue;
}
if( IKabs(((x14524.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14525.value)*(x14526.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14524.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))))+IKsqr(((x14525.value)*(x14526.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14524.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))), ((x14525.value)*(x14526.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14527=IKcos(j4);
IkReal x14528=IKsin(j4);
IkReal x14529=(sj1*sj2);
IkReal x14530=((1.0)*cj1);
IkReal x14531=((1.0)*sj3);
IkReal x14532=(cj5*r21);
IkReal x14533=(r21*sj5);
IkReal x14534=(cj5*r00);
IkReal x14535=(cj2*sj1);
IkReal x14536=((1.0)*cj3);
IkReal x14537=(r01*sj5);
IkReal x14538=(cj2*x14530);
IkReal x14539=(r20*x14531);
IkReal x14540=(sj5*x14528);
IkReal x14541=((1.0)*x14527);
IkReal x14542=(r12*x14527);
IkReal x14543=(cj5*r01*x14528);
evalcond[0]=(r12*x14528);
evalcond[1]=(((cj1*sj2))+((cj3*x14542))+x14535);
evalcond[2]=((((-1.0)*r20*sj5*x14541))+(((-1.0)*x14532*x14541)));
evalcond[3]=((((-1.0)*x14538))+(((-1.0)*x14531*x14542))+x14529);
evalcond[4]=((1.0)+(((-1.0)*r00*sj5*x14541))+(((-1.0)*cj5*r01*x14541)));
evalcond[5]=(((cj3*x14543))+(((-1.0)*x14531*x14534))+((cj3*r00*x14540))+((sj3*x14537)));
evalcond[6]=(((cj3*x14537))+(((-1.0)*x14531*x14543))+(((-1.0)*r00*x14531*x14540))+(((-1.0)*x14534*x14536)));
evalcond[7]=((((-1.0)*x14538))+((cj3*r20*x14540))+(((-1.0)*cj5*x14539))+x14529+((sj3*x14533))+((cj3*x14528*x14532)));
evalcond[8]=((((-1.0)*x14535))+((cj3*x14533))+(((-1.0)*sj2*x14530))+(((-1.0)*x14539*x14540))+(((-1.0)*cj5*r20*x14536))+(((-1.0)*x14528*x14531*x14532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14544=((1.0)*r01);
IkReal x14545=(r00*sj5);
CheckValue<IkReal> x14546=IKPowWithIntegerCheck((((cj3*cj5*r01))+((cj3*x14545))),-1);
if(!x14546.valid){
continue;
}
CheckValue<IkReal> x14547=IKPowWithIntegerCheck(((((-1.0)*x14545))+(((-1.0)*cj5*x14544))),-1);
if(!x14547.valid){
continue;
}
if( IKabs(((x14546.value)*((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x14544)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x14547.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14546.value)*((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x14544))))))+IKsqr(((-1.0)*(x14547.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14546.value)*((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x14544))))), ((-1.0)*(x14547.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14548=IKcos(j4);
IkReal x14549=IKsin(j4);
IkReal x14550=(sj1*sj2);
IkReal x14551=((1.0)*cj1);
IkReal x14552=((1.0)*sj3);
IkReal x14553=(cj5*r21);
IkReal x14554=(r21*sj5);
IkReal x14555=(cj5*r00);
IkReal x14556=(cj2*sj1);
IkReal x14557=((1.0)*cj3);
IkReal x14558=(r01*sj5);
IkReal x14559=(cj2*x14551);
IkReal x14560=(r20*x14552);
IkReal x14561=(sj5*x14549);
IkReal x14562=((1.0)*x14548);
IkReal x14563=(r12*x14548);
IkReal x14564=(cj5*r01*x14549);
evalcond[0]=(r12*x14549);
evalcond[1]=(((cj1*sj2))+x14556+((cj3*x14563)));
evalcond[2]=((((-1.0)*r20*sj5*x14562))+(((-1.0)*x14553*x14562)));
evalcond[3]=((((-1.0)*x14552*x14563))+(((-1.0)*x14559))+x14550);
evalcond[4]=((1.0)+(((-1.0)*cj5*r01*x14562))+(((-1.0)*r00*sj5*x14562)));
evalcond[5]=(((sj3*x14558))+(((-1.0)*x14552*x14555))+((cj3*x14564))+((cj3*r00*x14561)));
evalcond[6]=((((-1.0)*x14552*x14564))+((cj3*x14558))+(((-1.0)*x14555*x14557))+(((-1.0)*r00*x14552*x14561)));
evalcond[7]=(((sj3*x14554))+((cj3*x14549*x14553))+(((-1.0)*x14559))+x14550+((cj3*r20*x14561))+(((-1.0)*cj5*x14560)));
evalcond[8]=((((-1.0)*cj5*r20*x14557))+(((-1.0)*x14556))+(((-1.0)*x14560*x14561))+(((-1.0)*x14549*x14552*x14553))+(((-1.0)*sj2*x14551))+((cj3*x14554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14565=cj5*cj5;
IkReal x14566=(cj3*r20);
IkReal x14567=((1.0)*sj3);
IkReal x14568=(r00*sj3);
IkReal x14569=(cj5*sj5);
IkReal x14570=(r01*r20);
IkReal x14571=(r01*x14569);
IkReal x14572=(r21*x14565);
CheckValue<IkReal> x14573 = IKatan2WithCheck(IkReal((((r20*x14568*x14569))+((x14568*x14572))+((sj3*x14565*x14570))+(((-1.0)*r21*x14567*x14571))+(((-1.0)*x14567*x14570)))),IkReal((((cj5*r22*x14568))+(((-1.0)*r01*r22*sj5*x14567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14573.valid){
continue;
}
CheckValue<IkReal> x14574=IKPowWithIntegerCheck(IKsign((((x14566*x14571))+(((-1.0)*r00*x14565*x14566))+((cj3*r00*r21*x14569))+((cj3*r01*x14572))+((cj3*r02*r22))+((r00*x14566)))),-1);
if(!x14574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14573.value)+(((1.5707963267949)*(x14574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14575=IKcos(j4);
IkReal x14576=IKsin(j4);
IkReal x14577=(sj1*sj2);
IkReal x14578=(cj3*cj5);
IkReal x14579=((1.0)*cj1);
IkReal x14580=((1.0)*r10);
IkReal x14581=(sj3*sj5);
IkReal x14582=(cj5*sj3);
IkReal x14583=((1.0)*r00);
IkReal x14584=(cj3*sj5);
IkReal x14585=(cj2*sj1);
IkReal x14586=(cj2*x14579);
IkReal x14587=(r11*x14576);
IkReal x14588=((1.0)*r20*sj3);
IkReal x14589=(r01*x14576);
IkReal x14590=(sj5*x14576);
IkReal x14591=(r21*x14576);
IkReal x14592=((1.0)*x14575);
IkReal x14593=(cj3*x14575);
evalcond[0]=((((-1.0)*cj5*r21*x14592))+(((-1.0)*r20*sj5*x14592))+((r22*x14576)));
evalcond[1]=((((-1.0)*cj5*r11*x14592))+((r12*x14576))+(((-1.0)*sj5*x14575*x14580)));
evalcond[2]=((1.0)+((r02*x14576))+(((-1.0)*cj5*r01*x14592))+(((-1.0)*sj5*x14575*x14583)));
evalcond[3]=(((r00*x14576*x14584))+((x14578*x14589))+((r01*x14581))+(((-1.0)*x14582*x14583))+((r02*x14593)));
evalcond[4]=((((-1.0)*x14578*x14583))+(((-1.0)*x14582*x14589))+(((-1.0)*x14576*x14581*x14583))+((r01*x14584))+(((-1.0)*r02*sj3*x14592)));
evalcond[5]=(((r10*x14576*x14584))+((cj1*sj2))+x14585+((x14578*x14587))+((r11*x14581))+(((-1.0)*x14580*x14582))+((r12*x14593)));
evalcond[6]=((((-1.0)*x14586))+((r22*x14593))+(((-1.0)*r20*x14582))+((r21*x14581))+x14577+((x14578*x14591))+((r20*x14576*x14584)));
evalcond[7]=((((-1.0)*x14578*x14580))+(((-1.0)*x14582*x14587))+(((-1.0)*x14586))+(((-1.0)*x14576*x14580*x14581))+x14577+((r11*x14584))+(((-1.0)*r12*sj3*x14592)));
evalcond[8]=((((-1.0)*x14582*x14591))+(((-1.0)*r20*x14576*x14581))+(((-1.0)*x14585))+(((-1.0)*r20*x14578))+((r21*x14584))+(((-1.0)*sj2*x14579))+(((-1.0)*r22*sj3*x14592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14594=((1.0)*cj5);
CheckValue<IkReal> x14595 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14594)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14595.valid){
continue;
}
CheckValue<IkReal> x14596=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x14594)))),-1);
if(!x14596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14595.value)+(((1.5707963267949)*(x14596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14597=IKcos(j4);
IkReal x14598=IKsin(j4);
IkReal x14599=(sj1*sj2);
IkReal x14600=(cj3*cj5);
IkReal x14601=((1.0)*cj1);
IkReal x14602=((1.0)*r10);
IkReal x14603=(sj3*sj5);
IkReal x14604=(cj5*sj3);
IkReal x14605=((1.0)*r00);
IkReal x14606=(cj3*sj5);
IkReal x14607=(cj2*sj1);
IkReal x14608=(cj2*x14601);
IkReal x14609=(r11*x14598);
IkReal x14610=((1.0)*r20*sj3);
IkReal x14611=(r01*x14598);
IkReal x14612=(sj5*x14598);
IkReal x14613=(r21*x14598);
IkReal x14614=((1.0)*x14597);
IkReal x14615=(cj3*x14597);
evalcond[0]=(((r22*x14598))+(((-1.0)*r20*sj5*x14614))+(((-1.0)*cj5*r21*x14614)));
evalcond[1]=(((r12*x14598))+(((-1.0)*cj5*r11*x14614))+(((-1.0)*sj5*x14597*x14602)));
evalcond[2]=((1.0)+(((-1.0)*cj5*r01*x14614))+(((-1.0)*sj5*x14597*x14605))+((r02*x14598)));
evalcond[3]=((((-1.0)*x14604*x14605))+((r02*x14615))+((x14600*x14611))+((r01*x14603))+((r00*x14598*x14606)));
evalcond[4]=((((-1.0)*x14604*x14611))+(((-1.0)*x14598*x14603*x14605))+(((-1.0)*x14600*x14605))+((r01*x14606))+(((-1.0)*r02*sj3*x14614)));
evalcond[5]=(((x14600*x14609))+((cj1*sj2))+x14607+((r11*x14603))+(((-1.0)*x14602*x14604))+((r10*x14598*x14606))+((r12*x14615)));
evalcond[6]=(((r20*x14598*x14606))+((x14600*x14613))+((r21*x14603))+x14599+((r22*x14615))+(((-1.0)*r20*x14604))+(((-1.0)*x14608)));
evalcond[7]=((((-1.0)*x14604*x14609))+(((-1.0)*x14600*x14602))+(((-1.0)*r12*sj3*x14614))+x14599+(((-1.0)*x14598*x14602*x14603))+((r11*x14606))+(((-1.0)*x14608)));
evalcond[8]=((((-1.0)*r22*sj3*x14614))+(((-1.0)*sj2*x14601))+(((-1.0)*x14604*x14613))+((r21*x14606))+(((-1.0)*x14607))+(((-1.0)*r20*x14600))+(((-1.0)*r20*x14598*x14603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14616=((1.0)*sj5);
CheckValue<IkReal> x14617 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14616))+(((-1.0)*cj5*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14617.valid){
continue;
}
CheckValue<IkReal> x14618=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x14616)))),-1);
if(!x14618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14617.value)+(((1.5707963267949)*(x14618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14619=IKcos(j4);
IkReal x14620=IKsin(j4);
IkReal x14621=(sj1*sj2);
IkReal x14622=(cj3*cj5);
IkReal x14623=((1.0)*cj1);
IkReal x14624=((1.0)*r10);
IkReal x14625=(sj3*sj5);
IkReal x14626=(cj5*sj3);
IkReal x14627=((1.0)*r00);
IkReal x14628=(cj3*sj5);
IkReal x14629=(cj2*sj1);
IkReal x14630=(cj2*x14623);
IkReal x14631=(r11*x14620);
IkReal x14632=((1.0)*r20*sj3);
IkReal x14633=(r01*x14620);
IkReal x14634=(sj5*x14620);
IkReal x14635=(r21*x14620);
IkReal x14636=((1.0)*x14619);
IkReal x14637=(cj3*x14619);
evalcond[0]=((((-1.0)*cj5*r21*x14636))+(((-1.0)*r20*sj5*x14636))+((r22*x14620)));
evalcond[1]=((((-1.0)*sj5*x14619*x14624))+((r12*x14620))+(((-1.0)*cj5*r11*x14636)));
evalcond[2]=((1.0)+(((-1.0)*sj5*x14619*x14627))+(((-1.0)*cj5*r01*x14636))+((r02*x14620)));
evalcond[3]=(((r00*x14620*x14628))+((x14622*x14633))+((r02*x14637))+((r01*x14625))+(((-1.0)*x14626*x14627)));
evalcond[4]=((((-1.0)*r02*sj3*x14636))+(((-1.0)*x14622*x14627))+(((-1.0)*x14620*x14625*x14627))+(((-1.0)*x14626*x14633))+((r01*x14628)));
evalcond[5]=(((cj1*sj2))+((r10*x14620*x14628))+((r11*x14625))+((x14622*x14631))+((r12*x14637))+x14629+(((-1.0)*x14624*x14626)));
evalcond[6]=(((r22*x14637))+((r21*x14625))+(((-1.0)*r20*x14626))+(((-1.0)*x14630))+((x14622*x14635))+((r20*x14620*x14628))+x14621);
evalcond[7]=((((-1.0)*x14630))+((r11*x14628))+(((-1.0)*x14622*x14624))+(((-1.0)*x14626*x14631))+(((-1.0)*r12*sj3*x14636))+x14621+(((-1.0)*x14620*x14624*x14625)));
evalcond[8]=((((-1.0)*r20*x14620*x14625))+((r21*x14628))+(((-1.0)*r20*x14622))+(((-1.0)*r22*sj3*x14636))+(((-1.0)*sj2*x14623))+(((-1.0)*x14626*x14635))+(((-1.0)*x14629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14638=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14638);
rxp1_1=(px*r21);
rxp1_2=(r11*x14638);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14639=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14639);
rxp1_1=(px*r21);
rxp1_2=(r11*x14639);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj3*r20*sj5))+((cj3*cj5*r21)));
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14640=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14640);
rxp1_1=(px*r21);
rxp1_2=(r11*x14640);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14641=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14641);
rxp1_1=(px*r21);
rxp1_2=(r11*x14641);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14642=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14642);
rxp1_1=(px*r21);
rxp1_2=(r11*x14642);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14643=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14643);
rxp1_1=(px*r21);
rxp1_2=(r11*x14643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14646=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x14646.valid){
continue;
}
IkReal x14644=x14646.value;
IkReal x14645=(sj0*x14644);
sj4array[0]=(((sj1*sj2*x14645))+(((-1.0)*cj1*cj2*x14645)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14647=IKcos(j4);
IkReal x14648=IKsin(j4);
IkReal x14649=(r20*sj5);
IkReal x14650=((1.0)*cj5*r21);
IkReal x14651=((1.0)*x14647);
evalcond[0]=((-1.0)*r02*x14647);
evalcond[1]=((((-1.0)*sj0))+((r02*x14648)));
evalcond[2]=((((-1.0)*x14649*x14651))+(((-1.0)*x14647*x14650)));
evalcond[3]=((((-1.0)*cj5*r11*x14651))+(((-1.0)*r10*sj5*x14651)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x14648*x14649))+(((-1.0)*x14648*x14650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14653=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x14653.valid){
continue;
}
IkReal x14652=x14653.value;
sj4array[0]=(((cj2*sj1*x14652))+((cj1*sj2*x14652)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14654=IKcos(j4);
IkReal x14655=IKsin(j4);
IkReal x14656=((1.0)*sj0);
IkReal x14657=(r10*sj5);
IkReal x14658=((1.0)*x14655);
IkReal x14659=((1.0)*x14654);
IkReal x14660=(cj5*x14659);
evalcond[0]=((-1.0)*r02*x14654);
evalcond[1]=(((r02*x14655))+(((-1.0)*x14656)));
evalcond[2]=((((-1.0)*r21*x14660))+(((-1.0)*r20*sj5*x14659)));
evalcond[3]=((((-1.0)*r11*x14660))+(((-1.0)*x14657*x14659)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*cj5*r11*x14658))+(((-1.0)*sj1*sj2*x14656))+(((-1.0)*x14657*x14658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14661=IKPowWithIntegerCheck(r02,-1);
if(!x14661.valid){
continue;
}
sj4array[0]=(sj0*(x14661.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14662=IKcos(j4);
IkReal x14663=IKsin(j4);
IkReal x14664=((1.0)*sj1);
IkReal x14665=((1.0)*cj5*r21);
IkReal x14666=((1.0)*cj5*r11);
IkReal x14667=((1.0)*sj5*x14663);
IkReal x14668=((1.0)*sj5*x14662);
evalcond[0]=((-1.0)*r02*x14662);
evalcond[1]=((((-1.0)*x14662*x14665))+(((-1.0)*r20*x14668)));
evalcond[2]=((((-1.0)*r10*x14668))+(((-1.0)*x14662*x14666)));
evalcond[3]=((((-1.0)*cj2*x14664))+(((-1.0)*x14663*x14665))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x14667)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x14663*x14666))+(((-1.0)*sj0*sj2*x14664))+(((-1.0)*r10*x14667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14669=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14669);
rxp1_1=(px*r21);
rxp1_2=(r11*x14669);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14670=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14670);
rxp1_1=(px*r21);
rxp1_2=(r11*x14670);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14671=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14671);
rxp1_1=(px*r21);
rxp1_2=(r11*x14671);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14674=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x14674.valid){
continue;
}
IkReal x14672=x14674.value;
IkReal x14673=(sj0*x14672);
sj4array[0]=((((-1.0)*cj1*cj2*x14673))+((sj1*sj2*x14673)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14675=IKcos(j4);
IkReal x14676=IKsin(j4);
IkReal x14677=(r20*sj5);
IkReal x14678=((1.0)*x14675);
IkReal x14679=(cj5*x14678);
evalcond[0]=(r02*x14675);
evalcond[1]=((((-1.0)*sj0))+((r02*x14676)));
evalcond[2]=((((-1.0)*x14677*x14678))+(((-1.0)*r21*x14679)));
evalcond[3]=((((-1.0)*r10*sj5*x14678))+(((-1.0)*r11*x14679)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x14676*x14677))+((cj5*r21*x14676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14681=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x14681.valid){
continue;
}
IkReal x14680=x14681.value;
sj4array[0]=(((cj1*sj2*x14680))+((cj2*sj1*x14680)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14682=IKcos(j4);
IkReal x14683=IKsin(j4);
IkReal x14684=(r10*sj5);
IkReal x14685=((1.0)*sj0);
IkReal x14686=((1.0)*x14682);
IkReal x14687=(cj5*x14686);
evalcond[0]=(r02*x14682);
evalcond[1]=((((-1.0)*x14685))+((r02*x14683)));
evalcond[2]=((((-1.0)*r20*sj5*x14686))+(((-1.0)*r21*x14687)));
evalcond[3]=((((-1.0)*x14684*x14686))+(((-1.0)*r11*x14687)));
evalcond[4]=(((cj1*cj2*sj0))+((cj5*r11*x14683))+(((-1.0)*sj1*sj2*x14685))+((x14683*x14684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14688=IKPowWithIntegerCheck(r02,-1);
if(!x14688.valid){
continue;
}
sj4array[0]=(sj0*(x14688.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14689=IKcos(j4);
IkReal x14690=IKsin(j4);
IkReal x14691=((1.0)*sj1);
IkReal x14692=(sj5*x14690);
IkReal x14693=(cj5*x14690);
IkReal x14694=((1.0)*cj5*x14689);
IkReal x14695=((1.0)*sj5*x14689);
evalcond[0]=(r02*x14689);
evalcond[1]=((((-1.0)*r20*x14695))+(((-1.0)*r21*x14694)));
evalcond[2]=((((-1.0)*r11*x14694))+(((-1.0)*r10*x14695)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x14692))+(((-1.0)*cj2*x14691))+((r21*x14693)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*x14693))+(((-1.0)*sj0*sj2*x14691))+((r10*x14692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14696=((-1.0)*r10);
CheckValue<IkReal> x14697 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14696),IKFAST_ATAN2_MAGTHRESH);
if(!x14697.valid){
continue;
}
IkReal gconst100=((-1.0)*(x14697.value));
IkReal gconst101=r11;
IkReal gconst102=x14696;
CheckValue<IkReal> x14698 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14698.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14698.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14699=((-1.0)*r10);
IkReal x14700=((-1.0)*r11);
CheckValue<IkReal> x14702 = IKatan2WithCheck(IkReal(x14700),IkReal(x14699),IKFAST_ATAN2_MAGTHRESH);
if(!x14702.valid){
continue;
}
IkReal x14701=((-1.0)*(x14702.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14699);
rxp1_1=(px*r21);
rxp1_2=(px*x14700);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst101;
cj5=gconst102;
j5=x14701;
IkReal gconst100=x14701;
IkReal gconst101=r11;
IkReal gconst102=x14699;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14703=((-1.0)*r10);
IkReal x14704=((-1.0)*r11);
CheckValue<IkReal> x14706 = IKatan2WithCheck(IkReal(x14704),IkReal(x14703),IKFAST_ATAN2_MAGTHRESH);
if(!x14706.valid){
continue;
}
IkReal x14705=((-1.0)*(x14706.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14703);
rxp1_1=(px*r21);
rxp1_2=(px*x14704);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst101;
cj5=gconst102;
j5=x14705;
IkReal gconst100=x14705;
IkReal gconst101=r11;
IkReal gconst102=x14703;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14707=((-1.0)*r10);
IkReal x14708=((-1.0)*r11);
CheckValue<IkReal> x14710 = IKatan2WithCheck(IkReal(x14708),IkReal(x14707),IKFAST_ATAN2_MAGTHRESH);
if(!x14710.valid){
continue;
}
IkReal x14709=((-1.0)*(x14710.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14707);
rxp1_1=(px*r21);
rxp1_2=(px*x14708);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst101;
cj5=gconst102;
j5=x14709;
IkReal gconst100=x14709;
IkReal gconst101=r11;
IkReal gconst102=x14707;
j4eval[0]=((((-1.0)*cj3*r10*r21))+((cj3*r11*r20)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14711=IKPowWithIntegerCheck((((cj3*gconst102*r21))+((cj3*gconst101*r20))),-1);
if(!x14711.valid){
continue;
}
CheckValue<IkReal> x14712=IKPowWithIntegerCheck(cj3,-1);
if(!x14712.valid){
continue;
}
CheckValue<IkReal> x14713=IKPowWithIntegerCheck(r02,-1);
if(!x14713.valid){
continue;
}
if( IKabs(((x14711.value)*(((((-1.0)*sj1*sj2))+((gconst102*r20*sj3))+((cj1*cj2))+(((-1.0)*gconst101*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14712.value)*(x14713.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14711.value)*(((((-1.0)*sj1*sj2))+((gconst102*r20*sj3))+((cj1*cj2))+(((-1.0)*gconst101*r21*sj3))))))+IKsqr(((x14712.value)*(x14713.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14711.value)*(((((-1.0)*sj1*sj2))+((gconst102*r20*sj3))+((cj1*cj2))+(((-1.0)*gconst101*r21*sj3))))), ((x14712.value)*(x14713.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14714=IKcos(j4);
IkReal x14715=IKsin(j4);
IkReal x14716=(gconst101*r10);
IkReal x14717=(gconst102*r21);
IkReal x14718=(cj1*cj2);
IkReal x14719=(sj1*sj2);
IkReal x14720=(gconst102*r11);
IkReal x14721=(gconst101*sj3);
IkReal x14722=(gconst101*r20);
IkReal x14723=((1.0)*sj3);
IkReal x14724=(gconst102*r20);
IkReal x14725=((1.0)*cj3);
IkReal x14726=((1.0)*sj0);
IkReal x14727=(cj3*gconst101);
IkReal x14728=(gconst102*r10);
IkReal x14729=(cj3*x14715);
IkReal x14730=((1.0)*x14714);
IkReal x14731=((1.0)*cj2*sj1);
IkReal x14732=((1.0)*cj1*sj2);
evalcond[0]=(((r02*x14715))+(((-1.0)*x14726)));
evalcond[1]=((((-1.0)*x14722*x14730))+(((-1.0)*x14717*x14730)));
evalcond[2]=(cj0+(((-1.0)*x14716*x14730))+(((-1.0)*x14720*x14730)));
evalcond[3]=(((cj3*r02*x14714))+(((-1.0)*cj0*x14731))+(((-1.0)*cj0*x14732)));
evalcond[4]=((((-1.0)*r02*x14714*x14723))+(((-1.0)*cj0*x14719))+((cj0*x14718)));
evalcond[5]=(((r21*x14721))+(((-1.0)*x14723*x14724))+((x14722*x14729))+((x14717*x14729))+(((-1.0)*x14718))+x14719);
evalcond[6]=(((r21*x14727))+(((-1.0)*x14715*x14717*x14723))+(((-1.0)*r20*x14715*x14721))+(((-1.0)*x14732))+(((-1.0)*x14731))+(((-1.0)*x14724*x14725)));
evalcond[7]=((((-1.0)*x14723*x14728))+((x14720*x14729))+(((-1.0)*cj1*sj2*x14726))+(((-1.0)*cj2*sj1*x14726))+((r11*x14721))+((x14716*x14729)));
evalcond[8]=((((-1.0)*x14715*x14716*x14723))+(((-1.0)*x14719*x14726))+((sj0*x14718))+((r11*x14727))+(((-1.0)*x14715*x14720*x14723))+(((-1.0)*x14725*x14728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14734=IKPowWithIntegerCheck(r02,-1);
if(!x14734.valid){
continue;
}
IkReal x14733=x14734.value;
CheckValue<IkReal> x14735=IKPowWithIntegerCheck(sj3,-1);
if(!x14735.valid){
continue;
}
if( IKabs((sj0*x14733)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14733*(x14735.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x14733))+IKsqr((x14733*(x14735.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x14733), (x14733*(x14735.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14736=IKcos(j4);
IkReal x14737=IKsin(j4);
IkReal x14738=(gconst101*r10);
IkReal x14739=(gconst102*r21);
IkReal x14740=(cj1*cj2);
IkReal x14741=(sj1*sj2);
IkReal x14742=(gconst102*r11);
IkReal x14743=(gconst101*sj3);
IkReal x14744=(gconst101*r20);
IkReal x14745=((1.0)*sj3);
IkReal x14746=(gconst102*r20);
IkReal x14747=((1.0)*cj3);
IkReal x14748=((1.0)*sj0);
IkReal x14749=(cj3*gconst101);
IkReal x14750=(gconst102*r10);
IkReal x14751=(cj3*x14737);
IkReal x14752=((1.0)*x14736);
IkReal x14753=((1.0)*cj2*sj1);
IkReal x14754=((1.0)*cj1*sj2);
evalcond[0]=(((r02*x14737))+(((-1.0)*x14748)));
evalcond[1]=((((-1.0)*x14744*x14752))+(((-1.0)*x14739*x14752)));
evalcond[2]=((((-1.0)*x14738*x14752))+cj0+(((-1.0)*x14742*x14752)));
evalcond[3]=(((cj3*r02*x14736))+(((-1.0)*cj0*x14754))+(((-1.0)*cj0*x14753)));
evalcond[4]=((((-1.0)*cj0*x14741))+((cj0*x14740))+(((-1.0)*r02*x14736*x14745)));
evalcond[5]=(((x14739*x14751))+((r21*x14743))+(((-1.0)*x14740))+((x14744*x14751))+(((-1.0)*x14745*x14746))+x14741);
evalcond[6]=(((r21*x14749))+(((-1.0)*x14746*x14747))+(((-1.0)*r20*x14737*x14743))+(((-1.0)*x14737*x14739*x14745))+(((-1.0)*x14753))+(((-1.0)*x14754)));
evalcond[7]=((((-1.0)*cj1*sj2*x14748))+(((-1.0)*cj2*sj1*x14748))+((x14738*x14751))+((r11*x14743))+(((-1.0)*x14745*x14750))+((x14742*x14751)));
evalcond[8]=((((-1.0)*x14737*x14742*x14745))+((r11*x14749))+(((-1.0)*x14741*x14748))+((sj0*x14740))+(((-1.0)*x14747*x14750))+(((-1.0)*x14737*x14738*x14745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14756=IKPowWithIntegerCheck(r02,-1);
if(!x14756.valid){
continue;
}
IkReal x14755=x14756.value;
CheckValue<IkReal> x14757=IKPowWithIntegerCheck(cj3,-1);
if(!x14757.valid){
continue;
}
if( IKabs((sj0*x14755)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14755*(x14757.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x14755))+IKsqr((x14755*(x14757.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x14755), (x14755*(x14757.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14758=IKcos(j4);
IkReal x14759=IKsin(j4);
IkReal x14760=(gconst101*r10);
IkReal x14761=(gconst102*r21);
IkReal x14762=(cj1*cj2);
IkReal x14763=(sj1*sj2);
IkReal x14764=(gconst102*r11);
IkReal x14765=(gconst101*sj3);
IkReal x14766=(gconst101*r20);
IkReal x14767=((1.0)*sj3);
IkReal x14768=(gconst102*r20);
IkReal x14769=((1.0)*cj3);
IkReal x14770=((1.0)*sj0);
IkReal x14771=(cj3*gconst101);
IkReal x14772=(gconst102*r10);
IkReal x14773=(cj3*x14759);
IkReal x14774=((1.0)*x14758);
IkReal x14775=((1.0)*cj2*sj1);
IkReal x14776=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x14770))+((r02*x14759)));
evalcond[1]=((((-1.0)*x14761*x14774))+(((-1.0)*x14766*x14774)));
evalcond[2]=(cj0+(((-1.0)*x14764*x14774))+(((-1.0)*x14760*x14774)));
evalcond[3]=(((cj3*r02*x14758))+(((-1.0)*cj0*x14775))+(((-1.0)*cj0*x14776)));
evalcond[4]=((((-1.0)*r02*x14758*x14767))+((cj0*x14762))+(((-1.0)*cj0*x14763)));
evalcond[5]=((((-1.0)*x14762))+((x14761*x14773))+((x14766*x14773))+((r21*x14765))+x14763+(((-1.0)*x14767*x14768)));
evalcond[6]=((((-1.0)*x14768*x14769))+(((-1.0)*x14776))+(((-1.0)*x14775))+((r21*x14771))+(((-1.0)*x14759*x14761*x14767))+(((-1.0)*r20*x14759*x14765)));
evalcond[7]=((((-1.0)*cj2*sj1*x14770))+((r11*x14765))+(((-1.0)*x14767*x14772))+((x14764*x14773))+((x14760*x14773))+(((-1.0)*cj1*sj2*x14770)));
evalcond[8]=((((-1.0)*x14759*x14764*x14767))+((sj0*x14762))+(((-1.0)*x14759*x14760*x14767))+((r11*x14771))+(((-1.0)*x14769*x14772))+(((-1.0)*x14763*x14770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14777=((-1.0)*r11);
CheckValue<IkReal> x14778 = IKatan2WithCheck(IkReal(x14777),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14778.valid){
continue;
}
IkReal gconst103=((3.14159265358979)+(((-1.0)*(x14778.value))));
IkReal gconst104=x14777;
IkReal gconst105=((1.0)*r10);
CheckValue<IkReal> x14779 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14779.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14779.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14780=((-1.0)*r11);
IkReal x14781=((-1.0)*r10);
CheckValue<IkReal> x14783 = IKatan2WithCheck(IkReal(x14780),IkReal(x14781),IKFAST_ATAN2_MAGTHRESH);
if(!x14783.valid){
continue;
}
IkReal x14782=((1.0)*(x14783.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14781);
rxp1_1=(px*r21);
rxp1_2=(px*x14780);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst104;
cj5=gconst105;
j5=((3.14159265)+(((-1.0)*x14782)));
IkReal gconst103=((3.14159265358979)+(((-1.0)*x14782)));
IkReal gconst104=x14780;
IkReal gconst105=((1.0)*r10);
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14784=((-1.0)*r11);
IkReal x14785=((-1.0)*r10);
CheckValue<IkReal> x14787 = IKatan2WithCheck(IkReal(x14784),IkReal(x14785),IKFAST_ATAN2_MAGTHRESH);
if(!x14787.valid){
continue;
}
IkReal x14786=((1.0)*(x14787.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14785);
rxp1_1=(px*r21);
rxp1_2=(px*x14784);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst104;
cj5=gconst105;
j5=((3.14159265)+(((-1.0)*x14786)));
IkReal gconst103=((3.14159265358979)+(((-1.0)*x14786)));
IkReal gconst104=x14784;
IkReal gconst105=((1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14788=((-1.0)*r11);
IkReal x14789=((-1.0)*r10);
CheckValue<IkReal> x14791 = IKatan2WithCheck(IkReal(x14788),IkReal(x14789),IKFAST_ATAN2_MAGTHRESH);
if(!x14791.valid){
continue;
}
IkReal x14790=((1.0)*(x14791.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14789);
rxp1_1=(px*r21);
rxp1_2=(px*x14788);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst104;
cj5=gconst105;
j5=((3.14159265)+(((-1.0)*x14790)));
IkReal gconst103=((3.14159265358979)+(((-1.0)*x14790)));
IkReal gconst104=x14788;
IkReal gconst105=((1.0)*r10);
IkReal x14792=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r20*x14792))+((r10*r21*x14792)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14793=IKPowWithIntegerCheck((((cj3*gconst104*r20))+((cj3*gconst105*r21))),-1);
if(!x14793.valid){
continue;
}
CheckValue<IkReal> x14794=IKPowWithIntegerCheck(cj3,-1);
if(!x14794.valid){
continue;
}
CheckValue<IkReal> x14795=IKPowWithIntegerCheck(r02,-1);
if(!x14795.valid){
continue;
}
if( IKabs(((x14793.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst104*r21*sj3))+((gconst105*r20*sj3))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14794.value)*(x14795.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14793.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst104*r21*sj3))+((gconst105*r20*sj3))+((cj1*cj2))))))+IKsqr(((x14794.value)*(x14795.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14793.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst104*r21*sj3))+((gconst105*r20*sj3))+((cj1*cj2))))), ((x14794.value)*(x14795.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14796=IKcos(j4);
IkReal x14797=IKsin(j4);
IkReal x14798=(r11*sj3);
IkReal x14799=(cj3*gconst104);
IkReal x14800=(cj1*cj2);
IkReal x14801=(sj1*sj2);
IkReal x14802=((1.0)*sj3);
IkReal x14803=((1.0)*sj0);
IkReal x14804=(gconst105*r10);
IkReal x14805=(gconst105*r20);
IkReal x14806=((1.0)*cj3);
IkReal x14807=(gconst105*x14797);
IkReal x14808=(r20*x14797);
IkReal x14809=(r02*x14796);
IkReal x14810=((1.0)*cj2*sj1);
IkReal x14811=((1.0)*cj1*sj2);
IkReal x14812=((1.0)*x14796);
IkReal x14813=(r10*x14797);
evalcond[0]=((((-1.0)*x14803))+((r02*x14797)));
evalcond[1]=((((-1.0)*gconst104*r20*x14812))+(((-1.0)*gconst105*r21*x14812)));
evalcond[2]=(cj0+(((-1.0)*gconst105*r11*x14812))+(((-1.0)*gconst104*r10*x14812)));
evalcond[3]=(((cj3*x14809))+(((-1.0)*cj0*x14811))+(((-1.0)*cj0*x14810)));
evalcond[4]=((((-1.0)*cj0*x14801))+(((-1.0)*x14802*x14809))+((cj0*x14800)));
evalcond[5]=(((gconst104*r21*sj3))+(((-1.0)*x14802*x14805))+x14801+((x14799*x14808))+((cj3*r21*x14807))+(((-1.0)*x14800)));
evalcond[6]=((((-1.0)*r21*x14802*x14807))+(((-1.0)*x14810))+(((-1.0)*x14811))+(((-1.0)*gconst104*x14802*x14808))+((r21*x14799))+(((-1.0)*x14805*x14806)));
evalcond[7]=(((cj3*r11*x14807))+(((-1.0)*x14802*x14804))+((x14799*x14813))+(((-1.0)*cj1*sj2*x14803))+(((-1.0)*cj2*sj1*x14803))+((gconst104*x14798)));
evalcond[8]=((((-1.0)*x14801*x14803))+((r11*x14799))+(((-1.0)*x14804*x14806))+((sj0*x14800))+(((-1.0)*x14798*x14807))+(((-1.0)*gconst104*x14802*x14813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14815=IKPowWithIntegerCheck(r02,-1);
if(!x14815.valid){
continue;
}
IkReal x14814=x14815.value;
CheckValue<IkReal> x14816=IKPowWithIntegerCheck(sj3,-1);
if(!x14816.valid){
continue;
}
if( IKabs((sj0*x14814)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14814*(x14816.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x14814))+IKsqr((x14814*(x14816.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x14814), (x14814*(x14816.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14817=IKcos(j4);
IkReal x14818=IKsin(j4);
IkReal x14819=(r11*sj3);
IkReal x14820=(cj3*gconst104);
IkReal x14821=(cj1*cj2);
IkReal x14822=(sj1*sj2);
IkReal x14823=((1.0)*sj3);
IkReal x14824=((1.0)*sj0);
IkReal x14825=(gconst105*r10);
IkReal x14826=(gconst105*r20);
IkReal x14827=((1.0)*cj3);
IkReal x14828=(gconst105*x14818);
IkReal x14829=(r20*x14818);
IkReal x14830=(r02*x14817);
IkReal x14831=((1.0)*cj2*sj1);
IkReal x14832=((1.0)*cj1*sj2);
IkReal x14833=((1.0)*x14817);
IkReal x14834=(r10*x14818);
evalcond[0]=((((-1.0)*x14824))+((r02*x14818)));
evalcond[1]=((((-1.0)*gconst105*r21*x14833))+(((-1.0)*gconst104*r20*x14833)));
evalcond[2]=((((-1.0)*gconst104*r10*x14833))+cj0+(((-1.0)*gconst105*r11*x14833)));
evalcond[3]=(((cj3*x14830))+(((-1.0)*cj0*x14832))+(((-1.0)*cj0*x14831)));
evalcond[4]=(((cj0*x14821))+(((-1.0)*x14823*x14830))+(((-1.0)*cj0*x14822)));
evalcond[5]=(((x14820*x14829))+(((-1.0)*x14823*x14826))+((gconst104*r21*sj3))+x14822+((cj3*r21*x14828))+(((-1.0)*x14821)));
evalcond[6]=(((r21*x14820))+(((-1.0)*x14826*x14827))+(((-1.0)*r21*x14823*x14828))+(((-1.0)*gconst104*x14823*x14829))+(((-1.0)*x14831))+(((-1.0)*x14832)));
evalcond[7]=(((cj3*r11*x14828))+(((-1.0)*x14823*x14825))+((gconst104*x14819))+(((-1.0)*cj1*sj2*x14824))+((x14820*x14834))+(((-1.0)*cj2*sj1*x14824)));
evalcond[8]=((((-1.0)*gconst104*x14823*x14834))+(((-1.0)*x14825*x14827))+(((-1.0)*x14822*x14824))+((sj0*x14821))+(((-1.0)*x14819*x14828))+((r11*x14820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14836=IKPowWithIntegerCheck(r02,-1);
if(!x14836.valid){
continue;
}
IkReal x14835=x14836.value;
CheckValue<IkReal> x14837=IKPowWithIntegerCheck(cj3,-1);
if(!x14837.valid){
continue;
}
if( IKabs((sj0*x14835)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14835*(x14837.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x14835))+IKsqr((x14835*(x14837.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x14835), (x14835*(x14837.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14838=IKcos(j4);
IkReal x14839=IKsin(j4);
IkReal x14840=(r11*sj3);
IkReal x14841=(cj3*gconst104);
IkReal x14842=(cj1*cj2);
IkReal x14843=(sj1*sj2);
IkReal x14844=((1.0)*sj3);
IkReal x14845=((1.0)*sj0);
IkReal x14846=(gconst105*r10);
IkReal x14847=(gconst105*r20);
IkReal x14848=((1.0)*cj3);
IkReal x14849=(gconst105*x14839);
IkReal x14850=(r20*x14839);
IkReal x14851=(r02*x14838);
IkReal x14852=((1.0)*cj2*sj1);
IkReal x14853=((1.0)*cj1*sj2);
IkReal x14854=((1.0)*x14838);
IkReal x14855=(r10*x14839);
evalcond[0]=(((r02*x14839))+(((-1.0)*x14845)));
evalcond[1]=((((-1.0)*gconst105*r21*x14854))+(((-1.0)*gconst104*r20*x14854)));
evalcond[2]=(cj0+(((-1.0)*gconst104*r10*x14854))+(((-1.0)*gconst105*r11*x14854)));
evalcond[3]=((((-1.0)*cj0*x14853))+(((-1.0)*cj0*x14852))+((cj3*x14851)));
evalcond[4]=(((cj0*x14842))+(((-1.0)*cj0*x14843))+(((-1.0)*x14844*x14851)));
evalcond[5]=(((cj3*r21*x14849))+(((-1.0)*x14842))+((x14841*x14850))+((gconst104*r21*sj3))+x14843+(((-1.0)*x14844*x14847)));
evalcond[6]=((((-1.0)*x14847*x14848))+(((-1.0)*gconst104*x14844*x14850))+(((-1.0)*x14852))+(((-1.0)*x14853))+(((-1.0)*r21*x14844*x14849))+((r21*x14841)));
evalcond[7]=(((x14841*x14855))+((gconst104*x14840))+((cj3*r11*x14849))+(((-1.0)*cj1*sj2*x14845))+(((-1.0)*cj2*sj1*x14845))+(((-1.0)*x14844*x14846)));
evalcond[8]=(((sj0*x14842))+(((-1.0)*x14846*x14848))+(((-1.0)*gconst104*x14844*x14855))+(((-1.0)*x14840*x14849))+((r11*x14841))+(((-1.0)*x14843*x14845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14857=IKPowWithIntegerCheck(r02,-1);
if(!x14857.valid){
continue;
}
IkReal x14856=x14857.value;
CheckValue<IkReal> x14858=IKPowWithIntegerCheck(cj3,-1);
if(!x14858.valid){
continue;
}
if( IKabs((sj0*x14856)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14856*(x14858.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x14856))+IKsqr((x14856*(x14858.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x14856), (x14856*(x14858.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14859=IKcos(j4);
IkReal x14860=IKsin(j4);
IkReal x14861=(cj3*r10);
IkReal x14862=((1.0)*cj5);
IkReal x14863=(r11*sj3);
IkReal x14864=(r10*sj3);
IkReal x14865=(sj1*sj2);
IkReal x14866=(cj3*r21);
IkReal x14867=(r21*sj3);
IkReal x14868=((1.0)*cj2);
IkReal x14869=(cj1*sj0);
IkReal x14870=((1.0)*sj2);
IkReal x14871=((1.0)*sj0);
IkReal x14872=(cj3*r20);
IkReal x14873=(cj3*r11);
IkReal x14874=(cj0*cj1);
IkReal x14875=((1.0)*r20*sj3);
IkReal x14876=(sj5*x14860);
IkReal x14877=(cj5*x14860);
IkReal x14878=((1.0)*x14859);
evalcond[0]=(((r02*x14860))+(((-1.0)*x14871)));
evalcond[1]=((((-1.0)*r20*sj5*x14878))+(((-1.0)*r21*x14859*x14862)));
evalcond[2]=((((-1.0)*r10*sj5*x14878))+cj0+(((-1.0)*r11*x14859*x14862)));
evalcond[3]=((((-1.0)*cj0*sj1*x14868))+((cj3*r02*x14859))+(((-1.0)*x14870*x14874)));
evalcond[4]=((((-1.0)*cj0*x14865))+((cj2*x14874))+(((-1.0)*r02*sj3*x14878)));
evalcond[5]=((((-1.0)*cj1*x14868))+((x14866*x14877))+x14865+((sj5*x14867))+(((-1.0)*r20*sj3*x14862))+((x14872*x14876)));
evalcond[6]=((((-1.0)*x14875*x14876))+(((-1.0)*sj1*x14868))+((sj5*x14866))+(((-1.0)*x14860*x14862*x14867))+(((-1.0)*cj1*x14870))+(((-1.0)*x14862*x14872)));
evalcond[7]=((((-1.0)*x14869*x14870))+((x14873*x14877))+((sj5*x14863))+(((-1.0)*x14862*x14864))+((x14861*x14876))+(((-1.0)*sj0*sj1*x14868)));
evalcond[8]=((((-1.0)*x14861*x14862))+(((-1.0)*x14864*x14876))+(((-1.0)*x14860*x14862*x14863))+((cj2*x14869))+(((-1.0)*x14865*x14871))+((sj5*x14873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14879=((1.0)*sj5);
CheckValue<IkReal> x14880=IKPowWithIntegerCheck((((cj3*r20*sj5))+((cj3*cj5*r21))),-1);
if(!x14880.valid){
continue;
}
CheckValue<IkReal> x14881=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*x14879))),-1);
if(!x14881.valid){
continue;
}
if( IKabs(((x14880.value)*((((cj5*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x14879)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14881.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14880.value)*((((cj5*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x14879))))))+IKsqr(((-1.0)*cj0*(x14881.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14880.value)*((((cj5*r20*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*sj3*x14879))))), ((-1.0)*cj0*(x14881.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14882=IKcos(j4);
IkReal x14883=IKsin(j4);
IkReal x14884=(cj3*r10);
IkReal x14885=((1.0)*cj5);
IkReal x14886=(r11*sj3);
IkReal x14887=(r10*sj3);
IkReal x14888=(sj1*sj2);
IkReal x14889=(cj3*r21);
IkReal x14890=(r21*sj3);
IkReal x14891=((1.0)*cj2);
IkReal x14892=(cj1*sj0);
IkReal x14893=((1.0)*sj2);
IkReal x14894=((1.0)*sj0);
IkReal x14895=(cj3*r20);
IkReal x14896=(cj3*r11);
IkReal x14897=(cj0*cj1);
IkReal x14898=((1.0)*r20*sj3);
IkReal x14899=(sj5*x14883);
IkReal x14900=(cj5*x14883);
IkReal x14901=((1.0)*x14882);
evalcond[0]=((((-1.0)*x14894))+((r02*x14883)));
evalcond[1]=((((-1.0)*r21*x14882*x14885))+(((-1.0)*r20*sj5*x14901)));
evalcond[2]=(cj0+(((-1.0)*r11*x14882*x14885))+(((-1.0)*r10*sj5*x14901)));
evalcond[3]=((((-1.0)*x14893*x14897))+(((-1.0)*cj0*sj1*x14891))+((cj3*r02*x14882)));
evalcond[4]=((((-1.0)*cj0*x14888))+(((-1.0)*r02*sj3*x14901))+((cj2*x14897)));
evalcond[5]=(((x14895*x14899))+(((-1.0)*r20*sj3*x14885))+x14888+((x14889*x14900))+(((-1.0)*cj1*x14891))+((sj5*x14890)));
evalcond[6]=((((-1.0)*sj1*x14891))+(((-1.0)*x14885*x14895))+(((-1.0)*cj1*x14893))+(((-1.0)*x14883*x14885*x14890))+((sj5*x14889))+(((-1.0)*x14898*x14899)));
evalcond[7]=(((x14884*x14899))+(((-1.0)*x14885*x14887))+(((-1.0)*sj0*sj1*x14891))+((sj5*x14886))+(((-1.0)*x14892*x14893))+((x14896*x14900)));
evalcond[8]=((((-1.0)*x14884*x14885))+(((-1.0)*x14883*x14885*x14886))+((sj5*x14896))+(((-1.0)*x14887*x14899))+((cj2*x14892))+(((-1.0)*x14888*x14894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14902=IKPowWithIntegerCheck(r02,-1);
if(!x14902.valid){
continue;
}
CheckValue<IkReal> x14903=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x14903.valid){
continue;
}
if( IKabs((sj0*(x14902.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14903.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x14902.value)))+IKsqr(((-1.0)*cj0*(x14903.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x14902.value)), ((-1.0)*cj0*(x14903.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14904=IKcos(j4);
IkReal x14905=IKsin(j4);
IkReal x14906=(cj3*r10);
IkReal x14907=((1.0)*cj5);
IkReal x14908=(r11*sj3);
IkReal x14909=(r10*sj3);
IkReal x14910=(sj1*sj2);
IkReal x14911=(cj3*r21);
IkReal x14912=(r21*sj3);
IkReal x14913=((1.0)*cj2);
IkReal x14914=(cj1*sj0);
IkReal x14915=((1.0)*sj2);
IkReal x14916=((1.0)*sj0);
IkReal x14917=(cj3*r20);
IkReal x14918=(cj3*r11);
IkReal x14919=(cj0*cj1);
IkReal x14920=((1.0)*r20*sj3);
IkReal x14921=(sj5*x14905);
IkReal x14922=(cj5*x14905);
IkReal x14923=((1.0)*x14904);
evalcond[0]=((((-1.0)*x14916))+((r02*x14905)));
evalcond[1]=((((-1.0)*r21*x14904*x14907))+(((-1.0)*r20*sj5*x14923)));
evalcond[2]=((((-1.0)*r11*x14904*x14907))+cj0+(((-1.0)*r10*sj5*x14923)));
evalcond[3]=((((-1.0)*cj0*sj1*x14913))+(((-1.0)*x14915*x14919))+((cj3*r02*x14904)));
evalcond[4]=(((cj2*x14919))+(((-1.0)*r02*sj3*x14923))+(((-1.0)*cj0*x14910)));
evalcond[5]=(x14910+(((-1.0)*cj1*x14913))+((sj5*x14912))+(((-1.0)*r20*sj3*x14907))+((x14911*x14922))+((x14917*x14921)));
evalcond[6]=((((-1.0)*x14907*x14917))+(((-1.0)*x14920*x14921))+(((-1.0)*cj1*x14915))+((sj5*x14911))+(((-1.0)*x14905*x14907*x14912))+(((-1.0)*sj1*x14913)));
evalcond[7]=(((x14918*x14922))+(((-1.0)*x14907*x14909))+((sj5*x14908))+((x14906*x14921))+(((-1.0)*sj0*sj1*x14913))+(((-1.0)*x14914*x14915)));
evalcond[8]=((((-1.0)*x14909*x14921))+((cj2*x14914))+(((-1.0)*x14910*x14916))+(((-1.0)*x14906*x14907))+(((-1.0)*x14905*x14907*x14908))+((sj5*x14918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14924=((1.0)*sj0);
IkReal x14925=((1.0)*cj0);
CheckValue<IkReal> x14926 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r01*x14925))+(((-1.0)*cj5*r11*x14924))+(((-1.0)*r10*sj5*x14924))+(((-1.0)*r00*sj5*x14925)))),IkReal(((((-1.0)*r02*x14925))+(((-1.0)*r12*x14924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14926.valid){
continue;
}
CheckValue<IkReal> x14927=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x14927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14926.value)+(((1.5707963267949)*(x14927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14928=IKcos(j4);
IkReal x14929=IKsin(j4);
IkReal x14930=(cj3*cj5);
IkReal x14931=((1.0)*sj3);
IkReal x14932=((1.0)*r10);
IkReal x14933=(sj3*sj5);
IkReal x14934=(sj1*sj2);
IkReal x14935=((1.0)*cj2);
IkReal x14936=(cj1*sj0);
IkReal x14937=(cj3*sj5);
IkReal x14938=((1.0)*sj0);
IkReal x14939=(r11*x14929);
IkReal x14940=(sj5*x14929);
IkReal x14941=(r01*x14929);
IkReal x14942=(r21*x14929);
IkReal x14943=(r02*x14928);
IkReal x14944=((1.0)*x14928);
IkReal x14945=(r22*x14928);
IkReal x14946=((1.0)*cj1*sj2);
IkReal x14947=(r12*x14928);
evalcond[0]=((((-1.0)*cj5*r21*x14944))+(((-1.0)*r20*sj5*x14944))+((r22*x14929)));
evalcond[1]=(cj0+(((-1.0)*sj5*x14928*x14932))+(((-1.0)*cj5*r11*x14944))+((r12*x14929)));
evalcond[2]=((((-1.0)*cj5*r01*x14944))+(((-1.0)*x14938))+(((-1.0)*r00*sj5*x14944))+((r02*x14929)));
evalcond[3]=(((r20*x14929*x14937))+x14934+((r21*x14933))+(((-1.0)*cj1*x14935))+((cj3*x14945))+((x14930*x14942))+(((-1.0)*cj5*r20*x14931)));
evalcond[4]=((((-1.0)*cj0*x14946))+(((-1.0)*cj5*r00*x14931))+((r01*x14933))+((r00*x14929*x14937))+(((-1.0)*cj0*sj1*x14935))+((cj3*x14943))+((x14930*x14941)));
evalcond[5]=(((x14930*x14939))+(((-1.0)*cj5*r10*x14931))+((r10*x14929*x14937))+((cj3*x14947))+((r11*x14933))+(((-1.0)*sj2*x14936))+(((-1.0)*sj0*sj1*x14935)));
evalcond[6]=((((-1.0)*r20*x14930))+(((-1.0)*r20*x14931*x14940))+((r21*x14937))+(((-1.0)*sj1*x14935))+(((-1.0)*x14931*x14945))+(((-1.0)*x14946))+(((-1.0)*cj5*x14931*x14942)));
evalcond[7]=(((r01*x14937))+(((-1.0)*cj0*x14934))+(((-1.0)*x14931*x14943))+((cj0*cj1*cj2))+(((-1.0)*r00*x14931*x14940))+(((-1.0)*cj5*x14931*x14941))+(((-1.0)*r00*x14930)));
evalcond[8]=((((-1.0)*cj5*x14931*x14939))+(((-1.0)*x14934*x14938))+((cj2*x14936))+(((-1.0)*x14930*x14932))+(((-1.0)*r10*x14931*x14940))+(((-1.0)*x14931*x14947))+((r11*x14937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14948=((1.0)*cj5);
CheckValue<IkReal> x14949 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x14948))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x14949.valid){
continue;
}
CheckValue<IkReal> x14950=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x14948)))),-1);
if(!x14950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14949.value)+(((1.5707963267949)*(x14950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14951=IKcos(j4);
IkReal x14952=IKsin(j4);
IkReal x14953=(cj3*cj5);
IkReal x14954=((1.0)*sj3);
IkReal x14955=((1.0)*r10);
IkReal x14956=(sj3*sj5);
IkReal x14957=(sj1*sj2);
IkReal x14958=((1.0)*cj2);
IkReal x14959=(cj1*sj0);
IkReal x14960=(cj3*sj5);
IkReal x14961=((1.0)*sj0);
IkReal x14962=(r11*x14952);
IkReal x14963=(sj5*x14952);
IkReal x14964=(r01*x14952);
IkReal x14965=(r21*x14952);
IkReal x14966=(r02*x14951);
IkReal x14967=((1.0)*x14951);
IkReal x14968=(r22*x14951);
IkReal x14969=((1.0)*cj1*sj2);
IkReal x14970=(r12*x14951);
evalcond[0]=((((-1.0)*cj5*r21*x14967))+((r22*x14952))+(((-1.0)*r20*sj5*x14967)));
evalcond[1]=(((r12*x14952))+(((-1.0)*sj5*x14951*x14955))+cj0+(((-1.0)*cj5*r11*x14967)));
evalcond[2]=((((-1.0)*cj5*r01*x14967))+(((-1.0)*x14961))+((r02*x14952))+(((-1.0)*r00*sj5*x14967)));
evalcond[3]=(((cj3*x14968))+x14957+((r20*x14952*x14960))+((x14953*x14965))+(((-1.0)*cj5*r20*x14954))+(((-1.0)*cj1*x14958))+((r21*x14956)));
evalcond[4]=(((cj3*x14966))+((r01*x14956))+(((-1.0)*cj5*r00*x14954))+(((-1.0)*cj0*sj1*x14958))+((x14953*x14964))+(((-1.0)*cj0*x14969))+((r00*x14952*x14960)));
evalcond[5]=(((r10*x14952*x14960))+((cj3*x14970))+((x14953*x14962))+(((-1.0)*cj5*r10*x14954))+(((-1.0)*sj2*x14959))+(((-1.0)*sj0*sj1*x14958))+((r11*x14956)));
evalcond[6]=((((-1.0)*x14954*x14968))+(((-1.0)*r20*x14953))+(((-1.0)*sj1*x14958))+(((-1.0)*r20*x14954*x14963))+(((-1.0)*x14969))+(((-1.0)*cj5*x14954*x14965))+((r21*x14960)));
evalcond[7]=(((r01*x14960))+(((-1.0)*r00*x14954*x14963))+(((-1.0)*x14954*x14966))+(((-1.0)*cj0*x14957))+((cj0*cj1*cj2))+(((-1.0)*cj5*x14954*x14964))+(((-1.0)*r00*x14953)));
evalcond[8]=((((-1.0)*x14953*x14955))+((r11*x14960))+(((-1.0)*r10*x14954*x14963))+(((-1.0)*x14957*x14961))+(((-1.0)*cj5*x14954*x14962))+((cj2*x14959))+(((-1.0)*x14954*x14970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14971=((1.0)*cj0);
CheckValue<IkReal> x14972=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x14972.valid){
continue;
}
CheckValue<IkReal> x14973 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x14971))+(((-1.0)*r20*sj5*x14971)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14972.value)))+(x14973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14974=IKcos(j4);
IkReal x14975=IKsin(j4);
IkReal x14976=(cj3*cj5);
IkReal x14977=((1.0)*sj3);
IkReal x14978=((1.0)*r10);
IkReal x14979=(sj3*sj5);
IkReal x14980=(sj1*sj2);
IkReal x14981=((1.0)*cj2);
IkReal x14982=(cj1*sj0);
IkReal x14983=(cj3*sj5);
IkReal x14984=((1.0)*sj0);
IkReal x14985=(r11*x14975);
IkReal x14986=(sj5*x14975);
IkReal x14987=(r01*x14975);
IkReal x14988=(r21*x14975);
IkReal x14989=(r02*x14974);
IkReal x14990=((1.0)*x14974);
IkReal x14991=(r22*x14974);
IkReal x14992=((1.0)*cj1*sj2);
IkReal x14993=(r12*x14974);
evalcond[0]=((((-1.0)*r20*sj5*x14990))+((r22*x14975))+(((-1.0)*cj5*r21*x14990)));
evalcond[1]=((((-1.0)*cj5*r11*x14990))+cj0+((r12*x14975))+(((-1.0)*sj5*x14974*x14978)));
evalcond[2]=(((r02*x14975))+(((-1.0)*cj5*r01*x14990))+(((-1.0)*x14984))+(((-1.0)*r00*sj5*x14990)));
evalcond[3]=(((r20*x14975*x14983))+(((-1.0)*cj5*r20*x14977))+x14980+((x14976*x14988))+((cj3*x14991))+(((-1.0)*cj1*x14981))+((r21*x14979)));
evalcond[4]=((((-1.0)*cj5*r00*x14977))+((x14976*x14987))+(((-1.0)*cj0*x14992))+((cj3*x14989))+(((-1.0)*cj0*sj1*x14981))+((r01*x14979))+((r00*x14975*x14983)));
evalcond[5]=(((r10*x14975*x14983))+(((-1.0)*cj5*r10*x14977))+(((-1.0)*sj0*sj1*x14981))+((x14976*x14985))+((cj3*x14993))+((r11*x14979))+(((-1.0)*sj2*x14982)));
evalcond[6]=((((-1.0)*x14992))+(((-1.0)*sj1*x14981))+(((-1.0)*r20*x14976))+(((-1.0)*cj5*x14977*x14988))+((r21*x14983))+(((-1.0)*r20*x14977*x14986))+(((-1.0)*x14977*x14991)));
evalcond[7]=((((-1.0)*cj5*x14977*x14987))+(((-1.0)*r00*x14976))+((cj0*cj1*cj2))+((r01*x14983))+(((-1.0)*x14977*x14989))+(((-1.0)*cj0*x14980))+(((-1.0)*r00*x14977*x14986)));
evalcond[8]=((((-1.0)*x14976*x14978))+(((-1.0)*cj5*x14977*x14985))+((cj2*x14982))+((r11*x14983))+(((-1.0)*x14980*x14984))+(((-1.0)*x14977*x14993))+(((-1.0)*r10*x14977*x14986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14994=r20*r20;
IkReal x14995=cj5*cj5;
IkReal x14996=r21*r21;
IkReal x14997=(r20*sj5);
IkReal x14998=(cj5*r21);
IkReal x14999=(r20*sj3);
IkReal x15000=(cj1*cj2);
IkReal x15001=(cj3*x14995);
IkReal x15002=((1.0)*sj1*sj2);
IkReal x15003=((1.0)*sj3*sj5);
CheckValue<IkReal> x15004 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x14999))+((cj5*sj3*sj5*x14994))+(((-1.0)*cj5*x14996*x15003))+(((-1.0)*x14997*x15002))+(((2.0)*r21*x14995*x14999))+((x14998*x15000))+(((-1.0)*x14998*x15002))+((x14997*x15000)))),IkReal((((cj5*r22*x14999))+(((-1.0)*r22*x15002))+(((-1.0)*r21*r22*x15003))+((r22*x15000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15004.valid){
continue;
}
CheckValue<IkReal> x15005=IKPowWithIntegerCheck(IKsign((((x14996*x15001))+((cj3*x14994))+((cj3*(r22*r22)))+(((2.0)*cj3*x14997*x14998))+(((-1.0)*x14994*x15001)))),-1);
if(!x15005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15004.value)+(((1.5707963267949)*(x15005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15006=IKcos(j4);
IkReal x15007=IKsin(j4);
IkReal x15008=((1.0)*cj5);
IkReal x15009=(cj3*r21);
IkReal x15010=((1.0)*cj1);
IkReal x15011=(cj3*r20);
IkReal x15012=(r21*sj3);
IkReal x15013=((1.0)*r20*sj3);
IkReal x15014=(sj5*x15007);
IkReal x15015=(r22*x15006);
evalcond[0]=((((-1.0)*r20*sj5*x15006))+(((-1.0)*r21*x15006*x15008))+((r22*x15007)));
evalcond[1]=((((-1.0)*cj2*x15010))+((cj3*x15015))+((sj1*sj2))+((x15011*x15014))+(((-1.0)*r20*sj3*x15008))+((sj5*x15012))+((cj5*x15007*x15009)));
evalcond[2]=(((sj5*x15009))+(((-1.0)*cj2*sj1))+(((-1.0)*x15013*x15014))+(((-1.0)*x15008*x15011))+(((-1.0)*sj2*x15010))+(((-1.0)*sj3*x15015))+(((-1.0)*x15007*x15008*x15012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15016=(cj4*cj5);
IkReal x15017=(cj4*sj5);
if( IKabs((((r02*sj4))+(((-1.0)*r01*x15016))+(((-1.0)*r00*x15017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15017))+((r11*x15016))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+(((-1.0)*r01*x15016))+(((-1.0)*r00*x15017))))+IKsqr((((r10*x15017))+((r11*x15016))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+(((-1.0)*r01*x15016))+(((-1.0)*r00*x15017))), (((r10*x15017))+((r11*x15016))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15018=IKcos(j0);
IkReal x15019=IKsin(j0);
IkReal x15020=((1.0)*sj3);
IkReal x15021=(cj4*r02);
IkReal x15022=(cj3*cj5);
IkReal x15023=(r11*sj4);
IkReal x15024=(r11*sj5);
IkReal x15025=((1.0)*sj2);
IkReal x15026=((1.0)*r10);
IkReal x15027=(cj5*r00);
IkReal x15028=(sj4*sj5);
IkReal x15029=((0.1535)*sj2);
IkReal x15030=((1.0)*r00);
IkReal x15031=((1.0)*cj2);
IkReal x15032=(cj4*r12);
IkReal x15033=(r01*sj4);
IkReal x15034=((0.1535)*cj2);
IkReal x15035=(cj4*sj5);
IkReal x15036=(cj5*r10);
IkReal x15037=(r01*sj5);
IkReal x15038=(cj1*x15018);
IkReal x15039=(cj1*x15019);
IkReal x15040=(sj1*x15018);
IkReal x15041=(sj1*x15019);
IkReal x15042=((1.0)*cj4*cj5);
evalcond[0]=(x15018+((r12*sj4))+(((-1.0)*x15026*x15035))+(((-1.0)*r11*x15042)));
evalcond[1]=((((-1.0)*x15019))+(((-1.0)*r01*x15042))+((r02*sj4))+(((-1.0)*x15030*x15035)));
evalcond[2]=(((sj3*x15037))+(((-1.0)*x15031*x15040))+(((-1.0)*x15025*x15038))+((cj3*x15021))+(((-1.0)*x15020*x15027))+((cj3*r00*x15028))+((x15022*x15033)));
evalcond[3]=((((-1.0)*x15031*x15041))+((cj3*r10*x15028))+((x15022*x15023))+((cj3*x15032))+(((-1.0)*x15025*x15039))+(((-1.0)*x15020*x15036))+((sj3*x15024)));
evalcond[4]=((((-1.0)*cj5*x15020*x15033))+(((-1.0)*r00*x15020*x15028))+(((-1.0)*x15022*x15030))+((cj3*x15037))+((cj2*x15038))+(((-1.0)*x15025*x15040))+(((-1.0)*x15020*x15021)));
evalcond[5]=((((-1.0)*x15022*x15026))+(((-1.0)*r10*x15020*x15028))+((cj2*x15039))+(((-1.0)*x15025*x15041))+((cj3*x15024))+(((-1.0)*x15020*x15032))+(((-1.0)*cj5*x15020*x15023)));
evalcond[6]=((((0.1445)*x15040))+((x15034*x15038))+(((0.121)*x15027))+(((0.0385)*x15038))+(((-0.00175)*x15019))+(((-1.0)*px))+(((-1.0)*x15029*x15040))+(((-0.121)*x15037)));
evalcond[7]=((((0.1445)*x15041))+(((0.00175)*x15018))+((x15034*x15039))+(((0.0385)*x15039))+(((-1.0)*py))+(((-0.121)*x15024))+(((-1.0)*x15029*x15041))+(((0.121)*x15036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15043=cj5*cj5;
IkReal x15044=r20*r20;
IkReal x15045=r21*r21;
IkReal x15046=((1.0)*sj3);
IkReal x15047=(cj3*sj5);
IkReal x15048=((1.0)*r21);
IkReal x15049=(cj5*r21);
IkReal x15050=(cj2*sj1);
IkReal x15051=(cj1*sj2);
IkReal x15052=(cj3*r20);
IkReal x15053=(r20*sj5);
CheckValue<IkReal> x15054 = IKatan2WithCheck(IkReal((((x15049*x15051))+((x15049*x15050))+((x15050*x15053))+(((-1.0)*cj5*x15045*x15047))+(((2.0)*r21*x15043*x15052))+(((-1.0)*x15048*x15052))+((cj5*x15044*x15047))+((x15051*x15053)))),IkReal((((r22*x15050))+((r22*x15051))+(((-1.0)*r22*x15047*x15048))+((cj5*r22*x15052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15054.valid){
continue;
}
CheckValue<IkReal> x15055=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15044*x15046))+(((-1.0)*x15043*x15045*x15046))+(((-2.0)*sj3*x15049*x15053))+(((-1.0)*x15046*(r22*r22)))+((sj3*x15043*x15044)))),-1);
if(!x15055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15054.value)+(((1.5707963267949)*(x15055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15056=IKcos(j4);
IkReal x15057=IKsin(j4);
IkReal x15058=((1.0)*cj5);
IkReal x15059=(cj3*r21);
IkReal x15060=((1.0)*cj1);
IkReal x15061=(cj3*r20);
IkReal x15062=(r21*sj3);
IkReal x15063=((1.0)*r20*sj3);
IkReal x15064=(sj5*x15057);
IkReal x15065=(r22*x15056);
evalcond[0]=(((r22*x15057))+(((-1.0)*r20*sj5*x15056))+(((-1.0)*r21*x15056*x15058)));
evalcond[1]=(((x15061*x15064))+((sj5*x15062))+((sj1*sj2))+((cj3*x15065))+(((-1.0)*r20*sj3*x15058))+(((-1.0)*cj2*x15060))+((cj5*x15057*x15059)));
evalcond[2]=(((sj5*x15059))+(((-1.0)*sj2*x15060))+(((-1.0)*x15063*x15064))+(((-1.0)*x15057*x15058*x15062))+(((-1.0)*cj2*sj1))+(((-1.0)*sj3*x15065))+(((-1.0)*x15058*x15061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15066=(cj4*cj5);
IkReal x15067=(cj4*sj5);
if( IKabs((((r02*sj4))+(((-1.0)*r01*x15066))+(((-1.0)*r00*x15067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x15066))+((r10*x15067))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+(((-1.0)*r01*x15066))+(((-1.0)*r00*x15067))))+IKsqr((((r11*x15066))+((r10*x15067))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+(((-1.0)*r01*x15066))+(((-1.0)*r00*x15067))), (((r11*x15066))+((r10*x15067))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15068=IKcos(j0);
IkReal x15069=IKsin(j0);
IkReal x15070=((1.0)*sj3);
IkReal x15071=(cj4*r02);
IkReal x15072=(cj3*cj5);
IkReal x15073=(r11*sj4);
IkReal x15074=(r11*sj5);
IkReal x15075=((1.0)*sj2);
IkReal x15076=((1.0)*r10);
IkReal x15077=(cj5*r00);
IkReal x15078=(sj4*sj5);
IkReal x15079=((0.1535)*sj2);
IkReal x15080=((1.0)*r00);
IkReal x15081=((1.0)*cj2);
IkReal x15082=(cj4*r12);
IkReal x15083=(r01*sj4);
IkReal x15084=((0.1535)*cj2);
IkReal x15085=(cj4*sj5);
IkReal x15086=(cj5*r10);
IkReal x15087=(r01*sj5);
IkReal x15088=(cj1*x15068);
IkReal x15089=(cj1*x15069);
IkReal x15090=(sj1*x15068);
IkReal x15091=(sj1*x15069);
IkReal x15092=((1.0)*cj4*cj5);
evalcond[0]=(x15068+((r12*sj4))+(((-1.0)*r11*x15092))+(((-1.0)*x15076*x15085)));
evalcond[1]=((((-1.0)*r01*x15092))+((r02*sj4))+(((-1.0)*x15069))+(((-1.0)*x15080*x15085)));
evalcond[2]=((((-1.0)*x15081*x15090))+((cj3*x15071))+(((-1.0)*x15070*x15077))+((cj3*r00*x15078))+((sj3*x15087))+((x15072*x15083))+(((-1.0)*x15075*x15088)));
evalcond[3]=(((x15072*x15073))+(((-1.0)*x15081*x15091))+((cj3*r10*x15078))+((sj3*x15074))+(((-1.0)*x15075*x15089))+(((-1.0)*x15070*x15086))+((cj3*x15082)));
evalcond[4]=((((-1.0)*x15075*x15090))+(((-1.0)*cj5*x15070*x15083))+(((-1.0)*x15070*x15071))+(((-1.0)*r00*x15070*x15078))+((cj3*x15087))+((cj2*x15088))+(((-1.0)*x15072*x15080)));
evalcond[5]=((((-1.0)*x15075*x15091))+((cj3*x15074))+(((-1.0)*x15072*x15076))+(((-1.0)*cj5*x15070*x15073))+(((-1.0)*x15070*x15082))+(((-1.0)*r10*x15070*x15078))+((cj2*x15089)));
evalcond[6]=((((-0.00175)*x15069))+(((0.0385)*x15088))+(((-0.121)*x15087))+(((-1.0)*px))+(((0.121)*x15077))+((x15084*x15088))+(((0.1445)*x15090))+(((-1.0)*x15079*x15090)));
evalcond[7]=((((0.0385)*x15089))+(((-0.121)*x15074))+(((0.121)*x15086))+(((-1.0)*py))+(((0.00175)*x15068))+((x15084*x15089))+(((0.1445)*x15091))+(((-1.0)*x15079*x15091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - phantomx_reactor_arm (196ee0fca1aad1b2ae0daac25a19c653)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
